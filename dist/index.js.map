{"version":3,"file":"index.js","mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC1EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzvvtzmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChltLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC1SA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC7vhvvnhxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnBA;;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACpHA;AACA;AACA;AACA;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC1GA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACtnmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACjrnrrpqnWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACjpettlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACjp7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACljnzhnnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzdnOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnnoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACjcvxgjhRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvzptRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACdxDA;AACA;AACA;AACA;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC7mrhxtXA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChvhjkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChjhtJA;AACA;AACA;AACA;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChnHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrwjvnpfpgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AClbxqCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACljnejzOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACPA;AACA;AACA;AACA;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC1MA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC1FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC7DA;;;;;;;;;ACAA;AACA;AACA;AACA;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzaztpKA;AACA;AACA;AACA;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC7FA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvHA;AACA;AACA;AACA;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACpnlvuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACdzbmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACdtYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACjpDA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC7HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACztlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7BA;AACA;;;;AEDA;AACA;AACA;AACA","sources":[".././dist/index.js",".././dist/utils.js",".././node_modules/@actions/core/lib/command.js",".././node_modules/@actions/core/lib/core.js",".././node_modules/@actions/core/lib/file-command.js",".././node_modules/@actions/core/lib/oidc-utils.js",".././node_modules/@actions/core/lib/path-utils.js",".././node_modules/@actions/core/lib/platform.js",".././node_modules/@actions/core/lib/summary.js",".././node_modules/@actions/core/lib/utils.js",".././node_modules/@actions/exec/lib/exec.js",".././node_modules/@actions/exec/lib/toolrunner.js",".././node_modules/@actions/http-client/lib/auth.js",".././node_modules/@actions/http-client/lib/index.js",".././node_modules/@actions/http-client/lib/proxy.js",".././node_modules/@actions/io/lib/io-util.js",".././node_modules/@actions/io/lib/io.js",".././node_modules/cross-fetch/dist/node-polyfill.js",".././node_modules/cross-fetch/dist/node-ponyfill.js",".././node_modules/node-fetch/lib/index.js",".././node_modules/tr46/index.js",".././node_modules/tunnel/index.js",".././node_modules/tunnel/lib/tunnel.js",".././node_modules/webidl-conversions/lib/index.js",".././node_modules/whatwg-url/lib/URL-impl.js",".././node_modules/whatwg-url/lib/URL.js",".././node_modules/whatwg-url/lib/public-api.js",".././node_modules/whatwg-url/lib/url-state-machine.js",".././node_modules/whatwg-url/lib/utils.js",".././node_modules/@vercel/ncc/dist/ncc/@@notfound.js","../external node-commonjs \"assert\"","../external node-commonjs \"child_process\"","../external node-commonjs \"crypto\"","../external node-commonjs \"events\"","../external node-commonjs \"fs\"","../external node-commonjs \"http\"","../external node-commonjs \"https\"","../external node-commonjs \"net\"","../external node-commonjs \"os\"","../external node-commonjs \"path\"","../external node-commonjs \"punycode\"","../external node-commonjs \"stream\"","../external node-commonjs \"string_decoder\"","../external node-commonjs \"timers\"","../external node-commonjs \"tls\"","../external node-commonjs \"url\"","../external node-commonjs \"util\"","../external node-commonjs \"zlib\"",".././node_modules/@scaleway/sdk/dist/api/account/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/account/v2/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/account/v2/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/account/v2/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/account/v3/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/account/v3/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/account/v3/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/account/v3/validation-rules.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/applesilicon/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/applesilicon/v1alpha1/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/applesilicon/v1alpha1/content.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/applesilicon/v1alpha1/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/applesilicon/v1alpha1/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/baremetal/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/baremetal/v1/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/baremetal/v1/api.utils.cjs",".././node_modules/@scaleway/sdk/dist/api/baremetal/v1/content.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/baremetal/v1/index.cjs",".././node_modules/@scaleway/sdk/dist/api/baremetal/v1/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/baremetal/v1/validation-rules.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/baremetal/v3/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/baremetal/v3/content.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/baremetal/v3/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/baremetal/v3/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/billing/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/billing/v2alpha1/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/billing/v2alpha1/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/billing/v2alpha1/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/billing/v2beta1/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/billing/v2beta1/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/billing/v2beta1/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/block/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/block/v1alpha1/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/block/v1alpha1/content.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/block/v1alpha1/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/block/v1alpha1/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/block/v1alpha1/validation-rules.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/cockpit/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/cockpit/v1/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/cockpit/v1/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/cockpit/v1/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/cockpit/v1/validation-rules.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/cockpit/v1beta1/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/cockpit/v1beta1/content.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/cockpit/v1beta1/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/cockpit/v1beta1/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/container/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/container/v1beta1/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/container/v1beta1/content.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/container/v1beta1/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/container/v1beta1/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/container/v1beta1/validation-rules.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/dedibox/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/dedibox/v1/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/dedibox/v1/content.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/dedibox/v1/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/dedibox/v1/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/dedibox/v1/validation-rules.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/document_db/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/document_db/v1beta1/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/document_db/v1beta1/content.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/document_db/v1beta1/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/document_db/v1beta1/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/document_db/v1beta1/validation-rules.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/domain/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/domain/v2beta1/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/domain/v2beta1/content.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/domain/v2beta1/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/domain/v2beta1/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/edge_services/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/edge_services/v1alpha1/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/edge_services/v1alpha1/content.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/edge_services/v1alpha1/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/edge_services/v1alpha1/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/flexibleip/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/flexibleip/v1alpha1/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/flexibleip/v1alpha1/content.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/flexibleip/v1alpha1/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/flexibleip/v1alpha1/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/flexibleip/v1alpha1/validation-rules.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/function/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/function/v1beta1/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/function/v1beta1/content.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/function/v1beta1/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/function/v1beta1/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/function/v1beta1/validation-rules.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/iam/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/iam/v1alpha1/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/iam/v1alpha1/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/iam/v1alpha1/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/iam/v1alpha1/validation-rules.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/inference/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/inference/v1beta1/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/inference/v1beta1/content.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/inference/v1beta1/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/inference/v1beta1/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/inference/v1beta1/validation-rules.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/instance/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/instance/v1/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/instance/v1/api.utils.cjs",".././node_modules/@scaleway/sdk/dist/api/instance/v1/content.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/instance/v1/index.cjs",".././node_modules/@scaleway/sdk/dist/api/instance/v1/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/iot/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/iot/v1/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/iot/v1/content.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/iot/v1/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/iot/v1/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/ipam/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/ipam/v1/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/ipam/v1/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/ipam/v1/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/ipam/v1/validation-rules.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/ipfs/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/ipfs/v1alpha1/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/ipfs/v1alpha1/content.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/ipfs/v1alpha1/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/ipfs/v1alpha1/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/jobs/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/jobs/v1alpha1/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/jobs/v1alpha1/content.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/jobs/v1alpha1/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/jobs/v1alpha1/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/jobs/v1alpha1/validation-rules.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/k8s/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/k8s/v1/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/k8s/v1/api.utils.cjs",".././node_modules/@scaleway/sdk/dist/api/k8s/v1/content.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/k8s/v1/index.cjs",".././node_modules/@scaleway/sdk/dist/api/k8s/v1/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/k8s/v1/validation-rules.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/key_manager/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/key_manager/v1alpha1/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/key_manager/v1alpha1/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/key_manager/v1alpha1/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/lb/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/lb/v1/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/lb/v1/api.utils.cjs",".././node_modules/@scaleway/sdk/dist/api/lb/v1/content.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/lb/v1/index.cjs",".././node_modules/@scaleway/sdk/dist/api/lb/v1/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/llm_inference/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/llm_inference/v1beta1/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/llm_inference/v1beta1/content.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/llm_inference/v1beta1/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/llm_inference/v1beta1/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/llm_inference/v1beta1/validation-rules.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/marketplace/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/marketplace/v2/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/marketplace/v2/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/marketplace/v2/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/mnq/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/mnq/v1beta1/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/mnq/v1beta1/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/mnq/v1beta1/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/mnq/v1beta1/validation-rules.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/qaas/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/qaas/v1alpha1/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/qaas/v1alpha1/content.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/qaas/v1alpha1/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/qaas/v1alpha1/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/qaas/v1alpha1/validation-rules.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/rdb/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/rdb/v1/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/rdb/v1/content.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/rdb/v1/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/rdb/v1/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/rdb/v1/validation-rules.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/redis/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/redis/v1/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/redis/v1/content.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/redis/v1/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/redis/v1/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/registry/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/registry/v1/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/registry/v1/content.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/registry/v1/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/registry/v1/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/secret/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/secret/v1alpha1/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/secret/v1alpha1/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/secret/v1alpha1/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/secret/v1beta1/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/secret/v1beta1/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/secret/v1beta1/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/secret/v1beta1/validation-rules.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/serverless_sqldb/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/serverless_sqldb/v1alpha1/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/serverless_sqldb/v1alpha1/content.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/serverless_sqldb/v1alpha1/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/serverless_sqldb/v1alpha1/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/serverless_sqldb/v1alpha1/validation-rules.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/std/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/tem/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/tem/v1alpha1/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/tem/v1alpha1/content.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/tem/v1alpha1/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/tem/v1alpha1/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/tem/v1alpha1/validation-rules.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/test/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/test/v1/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/test/v1/content.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/test/v1/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/test/v1/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/vpc/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/vpc/v1/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/vpc/v1/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/vpc/v1/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/vpc/v2/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/vpc/v2/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/vpc/v2/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/vpc/v2/validation-rules.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/vpcgw/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/vpcgw/v1/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/vpcgw/v1/content.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/vpcgw/v1/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/vpcgw/v1/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/webhosting/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/webhosting/v1/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/webhosting/v1/content.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/webhosting/v1/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/webhosting/v1/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/webhosting/v1/validation-rules.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/webhosting/v1alpha1/api.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/webhosting/v1alpha1/content.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/webhosting/v1alpha1/index.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/webhosting/v1alpha1/marshalling.gen.cjs",".././node_modules/@scaleway/sdk/dist/api/webhosting/v1alpha1/validation-rules.gen.cjs",".././node_modules/@scaleway/sdk/dist/helpers/is-browser.cjs",".././node_modules/@scaleway/sdk/dist/helpers/is-response.cjs",".././node_modules/@scaleway/sdk/dist/helpers/json.cjs",".././node_modules/@scaleway/sdk/dist/helpers/marshalling.cjs",".././node_modules/@scaleway/sdk/dist/index.cjs",".././node_modules/@scaleway/sdk/dist/internal/async/interval-retrier.cjs",".././node_modules/@scaleway/sdk/dist/internal/async/sleep.cjs",".././node_modules/@scaleway/sdk/dist/internal/interceptors/composer.cjs",".././node_modules/@scaleway/sdk/dist/internal/interceptors/helpers.cjs",".././node_modules/@scaleway/sdk/dist/internal/logger/console-logger.cjs",".././node_modules/@scaleway/sdk/dist/internal/logger/index.cjs",".././node_modules/@scaleway/sdk/dist/internal/logger/level-resolver.cjs",".././node_modules/@scaleway/sdk/dist/internal/validations/string-validation.cjs",".././node_modules/@scaleway/sdk/dist/scw/api.cjs",".././node_modules/@scaleway/sdk/dist/scw/auth.cjs",".././node_modules/@scaleway/sdk/dist/scw/client-ini-factory.cjs",".././node_modules/@scaleway/sdk/dist/scw/client-ini-profile.cjs",".././node_modules/@scaleway/sdk/dist/scw/client-settings.cjs",".././node_modules/@scaleway/sdk/dist/scw/client.cjs",".././node_modules/@scaleway/sdk/dist/scw/constants.cjs",".././node_modules/@scaleway/sdk/dist/scw/custom-marshalling.cjs",".././node_modules/@scaleway/sdk/dist/scw/custom-types.cjs",".././node_modules/@scaleway/sdk/dist/scw/errors/error-parser.cjs",".././node_modules/@scaleway/sdk/dist/scw/errors/non-standard/invalid-request-mapper.cjs",".././node_modules/@scaleway/sdk/dist/scw/errors/non-standard/unknown-resource-mapper.cjs",".././node_modules/@scaleway/sdk/dist/scw/errors/scw-error.cjs",".././node_modules/@scaleway/sdk/dist/scw/errors/standard/already-exists-error.cjs",".././node_modules/@scaleway/sdk/dist/scw/errors/standard/denied-authentication-error.cjs",".././node_modules/@scaleway/sdk/dist/scw/errors/standard/index.cjs",".././node_modules/@scaleway/sdk/dist/scw/errors/standard/invalid-arguments-error.cjs",".././node_modules/@scaleway/sdk/dist/scw/errors/standard/out-of-stock-error.cjs",".././node_modules/@scaleway/sdk/dist/scw/errors/standard/permissions-denied-error.cjs",".././node_modules/@scaleway/sdk/dist/scw/errors/standard/precondition-failed-error.cjs",".././node_modules/@scaleway/sdk/dist/scw/errors/standard/quotas-exceeded-error.cjs",".././node_modules/@scaleway/sdk/dist/scw/errors/standard/resource-expired-error.cjs",".././node_modules/@scaleway/sdk/dist/scw/errors/standard/resource-locked-error.cjs",".././node_modules/@scaleway/sdk/dist/scw/errors/standard/resource-not-found-error.cjs",".././node_modules/@scaleway/sdk/dist/scw/errors/standard/too-many-requests-error.cjs",".././node_modules/@scaleway/sdk/dist/scw/errors/standard/transient-state-error.cjs",".././node_modules/@scaleway/sdk/dist/scw/errors/types.cjs",".././node_modules/@scaleway/sdk/dist/scw/fetch/build-fetcher.cjs",".././node_modules/@scaleway/sdk/dist/scw/fetch/http-dumper.cjs",".././node_modules/@scaleway/sdk/dist/scw/fetch/http-interceptors.cjs",".././node_modules/@scaleway/sdk/dist/scw/fetch/resource-paginator.cjs",".././node_modules/@scaleway/sdk/dist/scw/fetch/response-parser.cjs",".././node_modules/@scaleway/sdk/dist/vendor/base64/index.cjs",".././node_modules/@scaleway/sdk/node_modules/@scaleway/random-name/dist/index.cjs","../webpack/bootstrap","../webpack/runtime/compat","../webpack/before-startup","../webpack/startup","../webpack/after-startup"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.run = void 0;\nconst core = __importStar(require(\"@actions/core\"));\nrequire(\"cross-fetch/polyfill\");\nconst sdk_1 = require(\"@scaleway/sdk\");\nconst utils_1 = require(\"./utils\");\nfunction run() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const client = (0, sdk_1.createClient)({\n                accessKey: core.getInput(\"access-key\"),\n                secretKey: core.getInput(\"secret-key\"),\n                defaultProjectId: core.getInput(\"default-project-id\"),\n                defaultOrganizationId: core.getInput(\"default-organization-id\"),\n                defaultRegion: core.getInput(\"default-region\"),\n                defaultZone: core.getInput(\"default-zone\"),\n            });\n            const api = new sdk_1.Secret.v1beta1.API(client);\n            const secretConfigInputs = [\n                ...new Set(core.getMultilineInput(\"secret-names\")),\n            ];\n            for (let secretConf of secretConfigInputs) {\n                const [envName, secret] = (0, utils_1.extractAlias)(secretConf);\n                try {\n                    const secretValue = yield (0, utils_1.getSecretValue)(api, secret);\n                    core.setSecret(secretValue);\n                    core.debug(`Injecting secret ${secret} as environment variable '${envName}'.`);\n                    core.exportVariable(envName, secretValue);\n                }\n                catch (error) {\n                    core.setFailed(`Failed to fetch secret: '${secret}'. Error: ${error}.`);\n                }\n            }\n        }\n        catch (error) {\n            if (error instanceof Error)\n                core.setFailed(error.message);\n        }\n    });\n}\nexports.run = run;\nrun();\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getSecretValue = exports.splitNameAndPath = exports.extractAlias = exports.transformToValidEnvName = void 0;\nfunction transformToValidEnvName(secretName) {\n    // Leading digits are invalid\n    if (secretName.match(/^[0-9]/)) {\n        secretName = \"_\".concat(secretName);\n    }\n    // Remove invalid characters\n    return secretName.replace(/[^a-zA-Z0-9_]/g, \"_\").toUpperCase();\n}\nexports.transformToValidEnvName = transformToValidEnvName;\nfunction extractAlias(input) {\n    const parsedInput = input.split(\",\");\n    let secretRef = input.trim();\n    let secretPath = \"/\";\n    let alias = transformToValidEnvName(secretRef);\n    let secretName = secretRef;\n    if (parsedInput.length > 1) {\n        alias = parsedInput[0].trim();\n        secretRef = parsedInput[1].trim();\n        secretName = secretRef;\n        const validateEnvName = transformToValidEnvName(alias);\n        if (alias !== validateEnvName) {\n            throw new Error(`The alias '${alias}' is not a valid environment name. Please verify that it has uppercase letters, numbers, and underscore only.`);\n        }\n    }\n    if (secretRef.startsWith(\"/\")) {\n        [secretName, secretPath] = splitNameAndPath(secretRef);\n        if (parsedInput.length == 1) {\n            alias = transformToValidEnvName(secretName);\n        }\n    }\n    return [alias, { name: secretName, path: secretPath }];\n}\nexports.extractAlias = extractAlias;\nfunction splitNameAndPath(ref) {\n    let path = \"/\";\n    const sep = ref.lastIndexOf(\"/\");\n    if (sep > 0) {\n        path = ref.substring(0, sep);\n    }\n    const name = ref.substring(sep + 1);\n    return [name, path];\n}\nexports.splitNameAndPath = splitNameAndPath;\nfunction getSecretValue(api, secret) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const secretList = yield api.listSecrets({\n            name: secret.name,\n            path: secret.path,\n            page: 1,\n            pageSize: 1,\n        });\n        if (secretList.totalCount < 1) {\n            throw new Error(`No secret found with '${secret.name}' name and '${secret.path}' path`);\n        }\n        const secretResponse = yield api.accessSecretVersion({\n            secretId: secretList.secrets[0].id,\n            revision: \"latest_enabled\",\n        });\n        return Buffer.from(secretResponse.data, \"base64\").toString(\"binary\");\n    });\n}\nexports.getSecretValue = getSecretValue;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.issue = exports.issueCommand = void 0;\nconst os = __importStar(require(\"os\"));\nconst utils_1 = require(\"./utils\");\n/**\n * Commands\n *\n * Command Format:\n *   ::name key=value,key=value::message\n *\n * Examples:\n *   ::warning::This is the message\n *   ::set-env name=MY_VAR::some value\n */\nfunction issueCommand(command, properties, message) {\n    const cmd = new Command(command, properties, message);\n    process.stdout.write(cmd.toString() + os.EOL);\n}\nexports.issueCommand = issueCommand;\nfunction issue(name, message = '') {\n    issueCommand(name, {}, message);\n}\nexports.issue = issue;\nconst CMD_STRING = '::';\nclass Command {\n    constructor(command, properties, message) {\n        if (!command) {\n            command = 'missing.command';\n        }\n        this.command = command;\n        this.properties = properties;\n        this.message = message;\n    }\n    toString() {\n        let cmdStr = CMD_STRING + this.command;\n        if (this.properties && Object.keys(this.properties).length > 0) {\n            cmdStr += ' ';\n            let first = true;\n            for (const key in this.properties) {\n                if (this.properties.hasOwnProperty(key)) {\n                    const val = this.properties[key];\n                    if (val) {\n                        if (first) {\n                            first = false;\n                        }\n                        else {\n                            cmdStr += ',';\n                        }\n                        cmdStr += `${key}=${escapeProperty(val)}`;\n                    }\n                }\n            }\n        }\n        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;\n        return cmdStr;\n    }\n}\nfunction escapeData(s) {\n    return (0, utils_1.toCommandValue)(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A');\n}\nfunction escapeProperty(s) {\n    return (0, utils_1.toCommandValue)(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A')\n        .replace(/:/g, '%3A')\n        .replace(/,/g, '%2C');\n}\n//# sourceMappingURL=command.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.platform = exports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = exports.markdownSummary = exports.summary = exports.getIDToken = exports.getState = exports.saveState = exports.group = exports.endGroup = exports.startGroup = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = exports.setFailed = exports.setCommandEcho = exports.setOutput = exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.addPath = exports.setSecret = exports.exportVariable = exports.ExitCode = void 0;\nconst command_1 = require(\"./command\");\nconst file_command_1 = require(\"./file-command\");\nconst utils_1 = require(\"./utils\");\nconst os = __importStar(require(\"os\"));\nconst path = __importStar(require(\"path\"));\nconst oidc_utils_1 = require(\"./oidc-utils\");\n/**\n * The code to exit an action\n */\nvar ExitCode;\n(function (ExitCode) {\n    /**\n     * A code indicating that the action was successful\n     */\n    ExitCode[ExitCode[\"Success\"] = 0] = \"Success\";\n    /**\n     * A code indicating that the action was a failure\n     */\n    ExitCode[ExitCode[\"Failure\"] = 1] = \"Failure\";\n})(ExitCode || (exports.ExitCode = ExitCode = {}));\n//-----------------------------------------------------------------------\n// Variables\n//-----------------------------------------------------------------------\n/**\n * Sets env variable for this action and future actions in the job\n * @param name the name of the variable to set\n * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction exportVariable(name, val) {\n    const convertedVal = (0, utils_1.toCommandValue)(val);\n    process.env[name] = convertedVal;\n    const filePath = process.env['GITHUB_ENV'] || '';\n    if (filePath) {\n        return (0, file_command_1.issueFileCommand)('ENV', (0, file_command_1.prepareKeyValueMessage)(name, val));\n    }\n    (0, command_1.issueCommand)('set-env', { name }, convertedVal);\n}\nexports.exportVariable = exportVariable;\n/**\n * Registers a secret which will get masked from logs\n * @param secret value of the secret\n */\nfunction setSecret(secret) {\n    (0, command_1.issueCommand)('add-mask', {}, secret);\n}\nexports.setSecret = setSecret;\n/**\n * Prepends inputPath to the PATH (for this action and future actions)\n * @param inputPath\n */\nfunction addPath(inputPath) {\n    const filePath = process.env['GITHUB_PATH'] || '';\n    if (filePath) {\n        (0, file_command_1.issueFileCommand)('PATH', inputPath);\n    }\n    else {\n        (0, command_1.issueCommand)('add-path', {}, inputPath);\n    }\n    process.env['PATH'] = `${inputPath}${path.delimiter}${process.env['PATH']}`;\n}\nexports.addPath = addPath;\n/**\n * Gets the value of an input.\n * Unless trimWhitespace is set to false in InputOptions, the value is also trimmed.\n * Returns an empty string if the value is not defined.\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   string\n */\nfunction getInput(name, options) {\n    const val = process.env[`INPUT_${name.replace(/ /g, '_').toUpperCase()}`] || '';\n    if (options && options.required && !val) {\n        throw new Error(`Input required and not supplied: ${name}`);\n    }\n    if (options && options.trimWhitespace === false) {\n        return val;\n    }\n    return val.trim();\n}\nexports.getInput = getInput;\n/**\n * Gets the values of an multiline input.  Each value is also trimmed.\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   string[]\n *\n */\nfunction getMultilineInput(name, options) {\n    const inputs = getInput(name, options)\n        .split('\\n')\n        .filter(x => x !== '');\n    if (options && options.trimWhitespace === false) {\n        return inputs;\n    }\n    return inputs.map(input => input.trim());\n}\nexports.getMultilineInput = getMultilineInput;\n/**\n * Gets the input value of the boolean type in the YAML 1.2 \"core schema\" specification.\n * Support boolean input list: `true | True | TRUE | false | False | FALSE` .\n * The return value is also in boolean type.\n * ref: https://yaml.org/spec/1.2/spec.html#id2804923\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   boolean\n */\nfunction getBooleanInput(name, options) {\n    const trueValue = ['true', 'True', 'TRUE'];\n    const falseValue = ['false', 'False', 'FALSE'];\n    const val = getInput(name, options);\n    if (trueValue.includes(val))\n        return true;\n    if (falseValue.includes(val))\n        return false;\n    throw new TypeError(`Input does not meet YAML 1.2 \"Core Schema\" specification: ${name}\\n` +\n        `Support boolean input list: \\`true | True | TRUE | false | False | FALSE\\``);\n}\nexports.getBooleanInput = getBooleanInput;\n/**\n * Sets the value of an output.\n *\n * @param     name     name of the output to set\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction setOutput(name, value) {\n    const filePath = process.env['GITHUB_OUTPUT'] || '';\n    if (filePath) {\n        return (0, file_command_1.issueFileCommand)('OUTPUT', (0, file_command_1.prepareKeyValueMessage)(name, value));\n    }\n    process.stdout.write(os.EOL);\n    (0, command_1.issueCommand)('set-output', { name }, (0, utils_1.toCommandValue)(value));\n}\nexports.setOutput = setOutput;\n/**\n * Enables or disables the echoing of commands into stdout for the rest of the step.\n * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.\n *\n */\nfunction setCommandEcho(enabled) {\n    (0, command_1.issue)('echo', enabled ? 'on' : 'off');\n}\nexports.setCommandEcho = setCommandEcho;\n//-----------------------------------------------------------------------\n// Results\n//-----------------------------------------------------------------------\n/**\n * Sets the action status to failed.\n * When the action exits it will be with an exit code of 1\n * @param message add error issue message\n */\nfunction setFailed(message) {\n    process.exitCode = ExitCode.Failure;\n    error(message);\n}\nexports.setFailed = setFailed;\n//-----------------------------------------------------------------------\n// Logging Commands\n//-----------------------------------------------------------------------\n/**\n * Gets whether Actions Step Debug is on or not\n */\nfunction isDebug() {\n    return process.env['RUNNER_DEBUG'] === '1';\n}\nexports.isDebug = isDebug;\n/**\n * Writes debug message to user log\n * @param message debug message\n */\nfunction debug(message) {\n    (0, command_1.issueCommand)('debug', {}, message);\n}\nexports.debug = debug;\n/**\n * Adds an error issue\n * @param message error issue message. Errors will be converted to string via toString()\n * @param properties optional properties to add to the annotation.\n */\nfunction error(message, properties = {}) {\n    (0, command_1.issueCommand)('error', (0, utils_1.toCommandProperties)(properties), message instanceof Error ? message.toString() : message);\n}\nexports.error = error;\n/**\n * Adds a warning issue\n * @param message warning issue message. Errors will be converted to string via toString()\n * @param properties optional properties to add to the annotation.\n */\nfunction warning(message, properties = {}) {\n    (0, command_1.issueCommand)('warning', (0, utils_1.toCommandProperties)(properties), message instanceof Error ? message.toString() : message);\n}\nexports.warning = warning;\n/**\n * Adds a notice issue\n * @param message notice issue message. Errors will be converted to string via toString()\n * @param properties optional properties to add to the annotation.\n */\nfunction notice(message, properties = {}) {\n    (0, command_1.issueCommand)('notice', (0, utils_1.toCommandProperties)(properties), message instanceof Error ? message.toString() : message);\n}\nexports.notice = notice;\n/**\n * Writes info to log with console.log.\n * @param message info message\n */\nfunction info(message) {\n    process.stdout.write(message + os.EOL);\n}\nexports.info = info;\n/**\n * Begin an output group.\n *\n * Output until the next `groupEnd` will be foldable in this group\n *\n * @param name The name of the output group\n */\nfunction startGroup(name) {\n    (0, command_1.issue)('group', name);\n}\nexports.startGroup = startGroup;\n/**\n * End an output group.\n */\nfunction endGroup() {\n    (0, command_1.issue)('endgroup');\n}\nexports.endGroup = endGroup;\n/**\n * Wrap an asynchronous function call in a group.\n *\n * Returns the same type as the function itself.\n *\n * @param name The name of the group\n * @param fn The function to wrap in the group\n */\nfunction group(name, fn) {\n    return __awaiter(this, void 0, void 0, function* () {\n        startGroup(name);\n        let result;\n        try {\n            result = yield fn();\n        }\n        finally {\n            endGroup();\n        }\n        return result;\n    });\n}\nexports.group = group;\n//-----------------------------------------------------------------------\n// Wrapper action state\n//-----------------------------------------------------------------------\n/**\n * Saves state for current action, the state can only be retrieved by this action's post job execution.\n *\n * @param     name     name of the state to store\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction saveState(name, value) {\n    const filePath = process.env['GITHUB_STATE'] || '';\n    if (filePath) {\n        return (0, file_command_1.issueFileCommand)('STATE', (0, file_command_1.prepareKeyValueMessage)(name, value));\n    }\n    (0, command_1.issueCommand)('save-state', { name }, (0, utils_1.toCommandValue)(value));\n}\nexports.saveState = saveState;\n/**\n * Gets the value of an state set by this action's main execution.\n *\n * @param     name     name of the state to get\n * @returns   string\n */\nfunction getState(name) {\n    return process.env[`STATE_${name}`] || '';\n}\nexports.getState = getState;\nfunction getIDToken(aud) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return yield oidc_utils_1.OidcClient.getIDToken(aud);\n    });\n}\nexports.getIDToken = getIDToken;\n/**\n * Summary exports\n */\nvar summary_1 = require(\"./summary\");\nObject.defineProperty(exports, \"summary\", { enumerable: true, get: function () { return summary_1.summary; } });\n/**\n * @deprecated use core.summary\n */\nvar summary_2 = require(\"./summary\");\nObject.defineProperty(exports, \"markdownSummary\", { enumerable: true, get: function () { return summary_2.markdownSummary; } });\n/**\n * Path exports\n */\nvar path_utils_1 = require(\"./path-utils\");\nObject.defineProperty(exports, \"toPosixPath\", { enumerable: true, get: function () { return path_utils_1.toPosixPath; } });\nObject.defineProperty(exports, \"toWin32Path\", { enumerable: true, get: function () { return path_utils_1.toWin32Path; } });\nObject.defineProperty(exports, \"toPlatformPath\", { enumerable: true, get: function () { return path_utils_1.toPlatformPath; } });\n/**\n * Platform utilities exports\n */\nexports.platform = __importStar(require(\"./platform\"));\n//# sourceMappingURL=core.js.map","\"use strict\";\n// For internal use, subject to change.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.prepareKeyValueMessage = exports.issueFileCommand = void 0;\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst crypto = __importStar(require(\"crypto\"));\nconst fs = __importStar(require(\"fs\"));\nconst os = __importStar(require(\"os\"));\nconst utils_1 = require(\"./utils\");\nfunction issueFileCommand(command, message) {\n    const filePath = process.env[`GITHUB_${command}`];\n    if (!filePath) {\n        throw new Error(`Unable to find environment variable for file command ${command}`);\n    }\n    if (!fs.existsSync(filePath)) {\n        throw new Error(`Missing file at path: ${filePath}`);\n    }\n    fs.appendFileSync(filePath, `${(0, utils_1.toCommandValue)(message)}${os.EOL}`, {\n        encoding: 'utf8'\n    });\n}\nexports.issueFileCommand = issueFileCommand;\nfunction prepareKeyValueMessage(key, value) {\n    const delimiter = `ghadelimiter_${crypto.randomUUID()}`;\n    const convertedValue = (0, utils_1.toCommandValue)(value);\n    // These should realistically never happen, but just in case someone finds a\n    // way to exploit uuid generation let's not allow keys or values that contain\n    // the delimiter.\n    if (key.includes(delimiter)) {\n        throw new Error(`Unexpected input: name should not contain the delimiter \"${delimiter}\"`);\n    }\n    if (convertedValue.includes(delimiter)) {\n        throw new Error(`Unexpected input: value should not contain the delimiter \"${delimiter}\"`);\n    }\n    return `${key}<<${delimiter}${os.EOL}${convertedValue}${os.EOL}${delimiter}`;\n}\nexports.prepareKeyValueMessage = prepareKeyValueMessage;\n//# sourceMappingURL=file-command.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OidcClient = void 0;\nconst http_client_1 = require(\"@actions/http-client\");\nconst auth_1 = require(\"@actions/http-client/lib/auth\");\nconst core_1 = require(\"./core\");\nclass OidcClient {\n    static createHttpClient(allowRetry = true, maxRetry = 10) {\n        const requestOptions = {\n            allowRetries: allowRetry,\n            maxRetries: maxRetry\n        };\n        return new http_client_1.HttpClient('actions/oidc-client', [new auth_1.BearerCredentialHandler(OidcClient.getRequestToken())], requestOptions);\n    }\n    static getRequestToken() {\n        const token = process.env['ACTIONS_ID_TOKEN_REQUEST_TOKEN'];\n        if (!token) {\n            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable');\n        }\n        return token;\n    }\n    static getIDTokenUrl() {\n        const runtimeUrl = process.env['ACTIONS_ID_TOKEN_REQUEST_URL'];\n        if (!runtimeUrl) {\n            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable');\n        }\n        return runtimeUrl;\n    }\n    static getCall(id_token_url) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const httpclient = OidcClient.createHttpClient();\n            const res = yield httpclient\n                .getJson(id_token_url)\n                .catch(error => {\n                throw new Error(`Failed to get ID Token. \\n \n        Error Code : ${error.statusCode}\\n \n        Error Message: ${error.message}`);\n            });\n            const id_token = (_a = res.result) === null || _a === void 0 ? void 0 : _a.value;\n            if (!id_token) {\n                throw new Error('Response json body do not have ID Token field');\n            }\n            return id_token;\n        });\n    }\n    static getIDToken(audience) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                // New ID Token is requested from action service\n                let id_token_url = OidcClient.getIDTokenUrl();\n                if (audience) {\n                    const encodedAudience = encodeURIComponent(audience);\n                    id_token_url = `${id_token_url}&audience=${encodedAudience}`;\n                }\n                (0, core_1.debug)(`ID token url is ${id_token_url}`);\n                const id_token = yield OidcClient.getCall(id_token_url);\n                (0, core_1.setSecret)(id_token);\n                return id_token;\n            }\n            catch (error) {\n                throw new Error(`Error message: ${error.message}`);\n            }\n        });\n    }\n}\nexports.OidcClient = OidcClient;\n//# sourceMappingURL=oidc-utils.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = void 0;\nconst path = __importStar(require(\"path\"));\n/**\n * toPosixPath converts the given path to the posix form. On Windows, \\\\ will be\n * replaced with /.\n *\n * @param pth. Path to transform.\n * @return string Posix path.\n */\nfunction toPosixPath(pth) {\n    return pth.replace(/[\\\\]/g, '/');\n}\nexports.toPosixPath = toPosixPath;\n/**\n * toWin32Path converts the given path to the win32 form. On Linux, / will be\n * replaced with \\\\.\n *\n * @param pth. Path to transform.\n * @return string Win32 path.\n */\nfunction toWin32Path(pth) {\n    return pth.replace(/[/]/g, '\\\\');\n}\nexports.toWin32Path = toWin32Path;\n/**\n * toPlatformPath converts the given path to a platform-specific path. It does\n * this by replacing instances of / and \\ with the platform-specific path\n * separator.\n *\n * @param pth The path to platformize.\n * @return string The platform-specific path.\n */\nfunction toPlatformPath(pth) {\n    return pth.replace(/[/\\\\]/g, path.sep);\n}\nexports.toPlatformPath = toPlatformPath;\n//# sourceMappingURL=path-utils.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getDetails = exports.isLinux = exports.isMacOS = exports.isWindows = exports.arch = exports.platform = void 0;\nconst os_1 = __importDefault(require(\"os\"));\nconst exec = __importStar(require(\"@actions/exec\"));\nconst getWindowsInfo = () => __awaiter(void 0, void 0, void 0, function* () {\n    const { stdout: version } = yield exec.getExecOutput('powershell -command \"(Get-CimInstance -ClassName Win32_OperatingSystem).Version\"', undefined, {\n        silent: true\n    });\n    const { stdout: name } = yield exec.getExecOutput('powershell -command \"(Get-CimInstance -ClassName Win32_OperatingSystem).Caption\"', undefined, {\n        silent: true\n    });\n    return {\n        name: name.trim(),\n        version: version.trim()\n    };\n});\nconst getMacOsInfo = () => __awaiter(void 0, void 0, void 0, function* () {\n    var _a, _b, _c, _d;\n    const { stdout } = yield exec.getExecOutput('sw_vers', undefined, {\n        silent: true\n    });\n    const version = (_b = (_a = stdout.match(/ProductVersion:\\s*(.+)/)) === null || _a === void 0 ? void 0 : _a[1]) !== null && _b !== void 0 ? _b : '';\n    const name = (_d = (_c = stdout.match(/ProductName:\\s*(.+)/)) === null || _c === void 0 ? void 0 : _c[1]) !== null && _d !== void 0 ? _d : '';\n    return {\n        name,\n        version\n    };\n});\nconst getLinuxInfo = () => __awaiter(void 0, void 0, void 0, function* () {\n    const { stdout } = yield exec.getExecOutput('lsb_release', ['-i', '-r', '-s'], {\n        silent: true\n    });\n    const [name, version] = stdout.trim().split('\\n');\n    return {\n        name,\n        version\n    };\n});\nexports.platform = os_1.default.platform();\nexports.arch = os_1.default.arch();\nexports.isWindows = exports.platform === 'win32';\nexports.isMacOS = exports.platform === 'darwin';\nexports.isLinux = exports.platform === 'linux';\nfunction getDetails() {\n    return __awaiter(this, void 0, void 0, function* () {\n        return Object.assign(Object.assign({}, (yield (exports.isWindows\n            ? getWindowsInfo()\n            : exports.isMacOS\n                ? getMacOsInfo()\n                : getLinuxInfo()))), { platform: exports.platform,\n            arch: exports.arch,\n            isWindows: exports.isWindows,\n            isMacOS: exports.isMacOS,\n            isLinux: exports.isLinux });\n    });\n}\nexports.getDetails = getDetails;\n//# sourceMappingURL=platform.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.summary = exports.markdownSummary = exports.SUMMARY_DOCS_URL = exports.SUMMARY_ENV_VAR = void 0;\nconst os_1 = require(\"os\");\nconst fs_1 = require(\"fs\");\nconst { access, appendFile, writeFile } = fs_1.promises;\nexports.SUMMARY_ENV_VAR = 'GITHUB_STEP_SUMMARY';\nexports.SUMMARY_DOCS_URL = 'https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary';\nclass Summary {\n    constructor() {\n        this._buffer = '';\n    }\n    /**\n     * Finds the summary file path from the environment, rejects if env var is not found or file does not exist\n     * Also checks r/w permissions.\n     *\n     * @returns step summary file path\n     */\n    filePath() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._filePath) {\n                return this._filePath;\n            }\n            const pathFromEnv = process.env[exports.SUMMARY_ENV_VAR];\n            if (!pathFromEnv) {\n                throw new Error(`Unable to find environment variable for $${exports.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);\n            }\n            try {\n                yield access(pathFromEnv, fs_1.constants.R_OK | fs_1.constants.W_OK);\n            }\n            catch (_a) {\n                throw new Error(`Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`);\n            }\n            this._filePath = pathFromEnv;\n            return this._filePath;\n        });\n    }\n    /**\n     * Wraps content in an HTML tag, adding any HTML attributes\n     *\n     * @param {string} tag HTML tag to wrap\n     * @param {string | null} content content within the tag\n     * @param {[attribute: string]: string} attrs key-value list of HTML attributes to add\n     *\n     * @returns {string} content wrapped in HTML element\n     */\n    wrap(tag, content, attrs = {}) {\n        const htmlAttrs = Object.entries(attrs)\n            .map(([key, value]) => ` ${key}=\"${value}\"`)\n            .join('');\n        if (!content) {\n            return `<${tag}${htmlAttrs}>`;\n        }\n        return `<${tag}${htmlAttrs}>${content}</${tag}>`;\n    }\n    /**\n     * Writes text in the buffer to the summary buffer file and empties buffer. Will append by default.\n     *\n     * @param {SummaryWriteOptions} [options] (optional) options for write operation\n     *\n     * @returns {Promise<Summary>} summary instance\n     */\n    write(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const overwrite = !!(options === null || options === void 0 ? void 0 : options.overwrite);\n            const filePath = yield this.filePath();\n            const writeFunc = overwrite ? writeFile : appendFile;\n            yield writeFunc(filePath, this._buffer, { encoding: 'utf8' });\n            return this.emptyBuffer();\n        });\n    }\n    /**\n     * Clears the summary buffer and wipes the summary file\n     *\n     * @returns {Summary} summary instance\n     */\n    clear() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.emptyBuffer().write({ overwrite: true });\n        });\n    }\n    /**\n     * Returns the current summary buffer as a string\n     *\n     * @returns {string} string of summary buffer\n     */\n    stringify() {\n        return this._buffer;\n    }\n    /**\n     * If the summary buffer is empty\n     *\n     * @returns {boolen} true if the buffer is empty\n     */\n    isEmptyBuffer() {\n        return this._buffer.length === 0;\n    }\n    /**\n     * Resets the summary buffer without writing to summary file\n     *\n     * @returns {Summary} summary instance\n     */\n    emptyBuffer() {\n        this._buffer = '';\n        return this;\n    }\n    /**\n     * Adds raw text to the summary buffer\n     *\n     * @param {string} text content to add\n     * @param {boolean} [addEOL=false] (optional) append an EOL to the raw text (default: false)\n     *\n     * @returns {Summary} summary instance\n     */\n    addRaw(text, addEOL = false) {\n        this._buffer += text;\n        return addEOL ? this.addEOL() : this;\n    }\n    /**\n     * Adds the operating system-specific end-of-line marker to the buffer\n     *\n     * @returns {Summary} summary instance\n     */\n    addEOL() {\n        return this.addRaw(os_1.EOL);\n    }\n    /**\n     * Adds an HTML codeblock to the summary buffer\n     *\n     * @param {string} code content to render within fenced code block\n     * @param {string} lang (optional) language to syntax highlight code\n     *\n     * @returns {Summary} summary instance\n     */\n    addCodeBlock(code, lang) {\n        const attrs = Object.assign({}, (lang && { lang }));\n        const element = this.wrap('pre', this.wrap('code', code), attrs);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML list to the summary buffer\n     *\n     * @param {string[]} items list of items to render\n     * @param {boolean} [ordered=false] (optional) if the rendered list should be ordered or not (default: false)\n     *\n     * @returns {Summary} summary instance\n     */\n    addList(items, ordered = false) {\n        const tag = ordered ? 'ol' : 'ul';\n        const listItems = items.map(item => this.wrap('li', item)).join('');\n        const element = this.wrap(tag, listItems);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML table to the summary buffer\n     *\n     * @param {SummaryTableCell[]} rows table rows\n     *\n     * @returns {Summary} summary instance\n     */\n    addTable(rows) {\n        const tableBody = rows\n            .map(row => {\n            const cells = row\n                .map(cell => {\n                if (typeof cell === 'string') {\n                    return this.wrap('td', cell);\n                }\n                const { header, data, colspan, rowspan } = cell;\n                const tag = header ? 'th' : 'td';\n                const attrs = Object.assign(Object.assign({}, (colspan && { colspan })), (rowspan && { rowspan }));\n                return this.wrap(tag, data, attrs);\n            })\n                .join('');\n            return this.wrap('tr', cells);\n        })\n            .join('');\n        const element = this.wrap('table', tableBody);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds a collapsable HTML details element to the summary buffer\n     *\n     * @param {string} label text for the closed state\n     * @param {string} content collapsable content\n     *\n     * @returns {Summary} summary instance\n     */\n    addDetails(label, content) {\n        const element = this.wrap('details', this.wrap('summary', label) + content);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML image tag to the summary buffer\n     *\n     * @param {string} src path to the image you to embed\n     * @param {string} alt text description of the image\n     * @param {SummaryImageOptions} options (optional) addition image attributes\n     *\n     * @returns {Summary} summary instance\n     */\n    addImage(src, alt, options) {\n        const { width, height } = options || {};\n        const attrs = Object.assign(Object.assign({}, (width && { width })), (height && { height }));\n        const element = this.wrap('img', null, Object.assign({ src, alt }, attrs));\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML section heading element\n     *\n     * @param {string} text heading text\n     * @param {number | string} [level=1] (optional) the heading level, default: 1\n     *\n     * @returns {Summary} summary instance\n     */\n    addHeading(text, level) {\n        const tag = `h${level}`;\n        const allowedTag = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].includes(tag)\n            ? tag\n            : 'h1';\n        const element = this.wrap(allowedTag, text);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML thematic break (<hr>) to the summary buffer\n     *\n     * @returns {Summary} summary instance\n     */\n    addSeparator() {\n        const element = this.wrap('hr', null);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML line break (<br>) to the summary buffer\n     *\n     * @returns {Summary} summary instance\n     */\n    addBreak() {\n        const element = this.wrap('br', null);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML blockquote to the summary buffer\n     *\n     * @param {string} text quote text\n     * @param {string} cite (optional) citation url\n     *\n     * @returns {Summary} summary instance\n     */\n    addQuote(text, cite) {\n        const attrs = Object.assign({}, (cite && { cite }));\n        const element = this.wrap('blockquote', text, attrs);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML anchor tag to the summary buffer\n     *\n     * @param {string} text link text/content\n     * @param {string} href hyperlink\n     *\n     * @returns {Summary} summary instance\n     */\n    addLink(text, href) {\n        const element = this.wrap('a', text, { href });\n        return this.addRaw(element).addEOL();\n    }\n}\nconst _summary = new Summary();\n/**\n * @deprecated use `core.summary`\n */\nexports.markdownSummary = _summary;\nexports.summary = _summary;\n//# sourceMappingURL=summary.js.map","\"use strict\";\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toCommandProperties = exports.toCommandValue = void 0;\n/**\n * Sanitizes an input into a string so it can be passed into issueCommand safely\n * @param input input to sanitize into a string\n */\nfunction toCommandValue(input) {\n    if (input === null || input === undefined) {\n        return '';\n    }\n    else if (typeof input === 'string' || input instanceof String) {\n        return input;\n    }\n    return JSON.stringify(input);\n}\nexports.toCommandValue = toCommandValue;\n/**\n *\n * @param annotationProperties\n * @returns The command properties to send with the actual annotation command\n * See IssueCommandProperties: https://github.com/actions/runner/blob/main/src/Runner.Worker/ActionCommandManager.cs#L646\n */\nfunction toCommandProperties(annotationProperties) {\n    if (!Object.keys(annotationProperties).length) {\n        return {};\n    }\n    return {\n        title: annotationProperties.title,\n        file: annotationProperties.file,\n        line: annotationProperties.startLine,\n        endLine: annotationProperties.endLine,\n        col: annotationProperties.startColumn,\n        endColumn: annotationProperties.endColumn\n    };\n}\nexports.toCommandProperties = toCommandProperties;\n//# sourceMappingURL=utils.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getExecOutput = exports.exec = void 0;\nconst string_decoder_1 = require(\"string_decoder\");\nconst tr = __importStar(require(\"./toolrunner\"));\n/**\n * Exec a command.\n * Output will be streamed to the live console.\n * Returns promise with return code\n *\n * @param     commandLine        command to execute (can include additional args). Must be correctly escaped.\n * @param     args               optional arguments for tool. Escaping is handled by the lib.\n * @param     options            optional exec options.  See ExecOptions\n * @returns   Promise<number>    exit code\n */\nfunction exec(commandLine, args, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const commandArgs = tr.argStringToArray(commandLine);\n        if (commandArgs.length === 0) {\n            throw new Error(`Parameter 'commandLine' cannot be null or empty.`);\n        }\n        // Path to tool to execute should be first arg\n        const toolPath = commandArgs[0];\n        args = commandArgs.slice(1).concat(args || []);\n        const runner = new tr.ToolRunner(toolPath, args, options);\n        return runner.exec();\n    });\n}\nexports.exec = exec;\n/**\n * Exec a command and get the output.\n * Output will be streamed to the live console.\n * Returns promise with the exit code and collected stdout and stderr\n *\n * @param     commandLine           command to execute (can include additional args). Must be correctly escaped.\n * @param     args                  optional arguments for tool. Escaping is handled by the lib.\n * @param     options               optional exec options.  See ExecOptions\n * @returns   Promise<ExecOutput>   exit code, stdout, and stderr\n */\nfunction getExecOutput(commandLine, args, options) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n        let stdout = '';\n        let stderr = '';\n        //Using string decoder covers the case where a mult-byte character is split\n        const stdoutDecoder = new string_decoder_1.StringDecoder('utf8');\n        const stderrDecoder = new string_decoder_1.StringDecoder('utf8');\n        const originalStdoutListener = (_a = options === null || options === void 0 ? void 0 : options.listeners) === null || _a === void 0 ? void 0 : _a.stdout;\n        const originalStdErrListener = (_b = options === null || options === void 0 ? void 0 : options.listeners) === null || _b === void 0 ? void 0 : _b.stderr;\n        const stdErrListener = (data) => {\n            stderr += stderrDecoder.write(data);\n            if (originalStdErrListener) {\n                originalStdErrListener(data);\n            }\n        };\n        const stdOutListener = (data) => {\n            stdout += stdoutDecoder.write(data);\n            if (originalStdoutListener) {\n                originalStdoutListener(data);\n            }\n        };\n        const listeners = Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.listeners), { stdout: stdOutListener, stderr: stdErrListener });\n        const exitCode = yield exec(commandLine, args, Object.assign(Object.assign({}, options), { listeners }));\n        //flush any remaining characters\n        stdout += stdoutDecoder.end();\n        stderr += stderrDecoder.end();\n        return {\n            exitCode,\n            stdout,\n            stderr\n        };\n    });\n}\nexports.getExecOutput = getExecOutput;\n//# sourceMappingURL=exec.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.argStringToArray = exports.ToolRunner = void 0;\nconst os = __importStar(require(\"os\"));\nconst events = __importStar(require(\"events\"));\nconst child = __importStar(require(\"child_process\"));\nconst path = __importStar(require(\"path\"));\nconst io = __importStar(require(\"@actions/io\"));\nconst ioUtil = __importStar(require(\"@actions/io/lib/io-util\"));\nconst timers_1 = require(\"timers\");\n/* eslint-disable @typescript-eslint/unbound-method */\nconst IS_WINDOWS = process.platform === 'win32';\n/*\n * Class for running command line tools. Handles quoting and arg parsing in a platform agnostic way.\n */\nclass ToolRunner extends events.EventEmitter {\n    constructor(toolPath, args, options) {\n        super();\n        if (!toolPath) {\n            throw new Error(\"Parameter 'toolPath' cannot be null or empty.\");\n        }\n        this.toolPath = toolPath;\n        this.args = args || [];\n        this.options = options || {};\n    }\n    _debug(message) {\n        if (this.options.listeners && this.options.listeners.debug) {\n            this.options.listeners.debug(message);\n        }\n    }\n    _getCommandString(options, noPrefix) {\n        const toolPath = this._getSpawnFileName();\n        const args = this._getSpawnArgs(options);\n        let cmd = noPrefix ? '' : '[command]'; // omit prefix when piped to a second tool\n        if (IS_WINDOWS) {\n            // Windows + cmd file\n            if (this._isCmdFile()) {\n                cmd += toolPath;\n                for (const a of args) {\n                    cmd += ` ${a}`;\n                }\n            }\n            // Windows + verbatim\n            else if (options.windowsVerbatimArguments) {\n                cmd += `\"${toolPath}\"`;\n                for (const a of args) {\n                    cmd += ` ${a}`;\n                }\n            }\n            // Windows (regular)\n            else {\n                cmd += this._windowsQuoteCmdArg(toolPath);\n                for (const a of args) {\n                    cmd += ` ${this._windowsQuoteCmdArg(a)}`;\n                }\n            }\n        }\n        else {\n            // OSX/Linux - this can likely be improved with some form of quoting.\n            // creating processes on Unix is fundamentally different than Windows.\n            // on Unix, execvp() takes an arg array.\n            cmd += toolPath;\n            for (const a of args) {\n                cmd += ` ${a}`;\n            }\n        }\n        return cmd;\n    }\n    _processLineBuffer(data, strBuffer, onLine) {\n        try {\n            let s = strBuffer + data.toString();\n            let n = s.indexOf(os.EOL);\n            while (n > -1) {\n                const line = s.substring(0, n);\n                onLine(line);\n                // the rest of the string ...\n                s = s.substring(n + os.EOL.length);\n                n = s.indexOf(os.EOL);\n            }\n            return s;\n        }\n        catch (err) {\n            // streaming lines to console is best effort.  Don't fail a build.\n            this._debug(`error processing line. Failed with error ${err}`);\n            return '';\n        }\n    }\n    _getSpawnFileName() {\n        if (IS_WINDOWS) {\n            if (this._isCmdFile()) {\n                return process.env['COMSPEC'] || 'cmd.exe';\n            }\n        }\n        return this.toolPath;\n    }\n    _getSpawnArgs(options) {\n        if (IS_WINDOWS) {\n            if (this._isCmdFile()) {\n                let argline = `/D /S /C \"${this._windowsQuoteCmdArg(this.toolPath)}`;\n                for (const a of this.args) {\n                    argline += ' ';\n                    argline += options.windowsVerbatimArguments\n                        ? a\n                        : this._windowsQuoteCmdArg(a);\n                }\n                argline += '\"';\n                return [argline];\n            }\n        }\n        return this.args;\n    }\n    _endsWith(str, end) {\n        return str.endsWith(end);\n    }\n    _isCmdFile() {\n        const upperToolPath = this.toolPath.toUpperCase();\n        return (this._endsWith(upperToolPath, '.CMD') ||\n            this._endsWith(upperToolPath, '.BAT'));\n    }\n    _windowsQuoteCmdArg(arg) {\n        // for .exe, apply the normal quoting rules that libuv applies\n        if (!this._isCmdFile()) {\n            return this._uvQuoteCmdArg(arg);\n        }\n        // otherwise apply quoting rules specific to the cmd.exe command line parser.\n        // the libuv rules are generic and are not designed specifically for cmd.exe\n        // command line parser.\n        //\n        // for a detailed description of the cmd.exe command line parser, refer to\n        // http://stackoverflow.com/questions/4094699/how-does-the-windows-command-interpreter-cmd-exe-parse-scripts/7970912#7970912\n        // need quotes for empty arg\n        if (!arg) {\n            return '\"\"';\n        }\n        // determine whether the arg needs to be quoted\n        const cmdSpecialChars = [\n            ' ',\n            '\\t',\n            '&',\n            '(',\n            ')',\n            '[',\n            ']',\n            '{',\n            '}',\n            '^',\n            '=',\n            ';',\n            '!',\n            \"'\",\n            '+',\n            ',',\n            '`',\n            '~',\n            '|',\n            '<',\n            '>',\n            '\"'\n        ];\n        let needsQuotes = false;\n        for (const char of arg) {\n            if (cmdSpecialChars.some(x => x === char)) {\n                needsQuotes = true;\n                break;\n            }\n        }\n        // short-circuit if quotes not needed\n        if (!needsQuotes) {\n            return arg;\n        }\n        // the following quoting rules are very similar to the rules that by libuv applies.\n        //\n        // 1) wrap the string in quotes\n        //\n        // 2) double-up quotes - i.e. \" => \"\"\n        //\n        //    this is different from the libuv quoting rules. libuv replaces \" with \\\", which unfortunately\n        //    doesn't work well with a cmd.exe command line.\n        //\n        //    note, replacing \" with \"\" also works well if the arg is passed to a downstream .NET console app.\n        //    for example, the command line:\n        //          foo.exe \"myarg:\"\"my val\"\"\"\n        //    is parsed by a .NET console app into an arg array:\n        //          [ \"myarg:\\\"my val\\\"\" ]\n        //    which is the same end result when applying libuv quoting rules. although the actual\n        //    command line from libuv quoting rules would look like:\n        //          foo.exe \"myarg:\\\"my val\\\"\"\n        //\n        // 3) double-up slashes that precede a quote,\n        //    e.g.  hello \\world    => \"hello \\world\"\n        //          hello\\\"world    => \"hello\\\\\"\"world\"\n        //          hello\\\\\"world   => \"hello\\\\\\\\\"\"world\"\n        //          hello world\\    => \"hello world\\\\\"\n        //\n        //    technically this is not required for a cmd.exe command line, or the batch argument parser.\n        //    the reasons for including this as a .cmd quoting rule are:\n        //\n        //    a) this is optimized for the scenario where the argument is passed from the .cmd file to an\n        //       external program. many programs (e.g. .NET console apps) rely on the slash-doubling rule.\n        //\n        //    b) it's what we've been doing previously (by deferring to node default behavior) and we\n        //       haven't heard any complaints about that aspect.\n        //\n        // note, a weakness of the quoting rules chosen here, is that % is not escaped. in fact, % cannot be\n        // escaped when used on the command line directly - even though within a .cmd file % can be escaped\n        // by using %%.\n        //\n        // the saving grace is, on the command line, %var% is left as-is if var is not defined. this contrasts\n        // the line parsing rules within a .cmd file, where if var is not defined it is replaced with nothing.\n        //\n        // one option that was explored was replacing % with ^% - i.e. %var% => ^%var^%. this hack would\n        // often work, since it is unlikely that var^ would exist, and the ^ character is removed when the\n        // variable is used. the problem, however, is that ^ is not removed when %* is used to pass the args\n        // to an external program.\n        //\n        // an unexplored potential solution for the % escaping problem, is to create a wrapper .cmd file.\n        // % can be escaped within a .cmd file.\n        let reverse = '\"';\n        let quoteHit = true;\n        for (let i = arg.length; i > 0; i--) {\n            // walk the string in reverse\n            reverse += arg[i - 1];\n            if (quoteHit && arg[i - 1] === '\\\\') {\n                reverse += '\\\\'; // double the slash\n            }\n            else if (arg[i - 1] === '\"') {\n                quoteHit = true;\n                reverse += '\"'; // double the quote\n            }\n            else {\n                quoteHit = false;\n            }\n        }\n        reverse += '\"';\n        return reverse\n            .split('')\n            .reverse()\n            .join('');\n    }\n    _uvQuoteCmdArg(arg) {\n        // Tool runner wraps child_process.spawn() and needs to apply the same quoting as\n        // Node in certain cases where the undocumented spawn option windowsVerbatimArguments\n        // is used.\n        //\n        // Since this function is a port of quote_cmd_arg from Node 4.x (technically, lib UV,\n        // see https://github.com/nodejs/node/blob/v4.x/deps/uv/src/win/process.c for details),\n        // pasting copyright notice from Node within this function:\n        //\n        //      Copyright Joyent, Inc. and other Node contributors. All rights reserved.\n        //\n        //      Permission is hereby granted, free of charge, to any person obtaining a copy\n        //      of this software and associated documentation files (the \"Software\"), to\n        //      deal in the Software without restriction, including without limitation the\n        //      rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n        //      sell copies of the Software, and to permit persons to whom the Software is\n        //      furnished to do so, subject to the following conditions:\n        //\n        //      The above copyright notice and this permission notice shall be included in\n        //      all copies or substantial portions of the Software.\n        //\n        //      THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n        //      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n        //      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n        //      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n        //      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n        //      FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n        //      IN THE SOFTWARE.\n        if (!arg) {\n            // Need double quotation for empty argument\n            return '\"\"';\n        }\n        if (!arg.includes(' ') && !arg.includes('\\t') && !arg.includes('\"')) {\n            // No quotation needed\n            return arg;\n        }\n        if (!arg.includes('\"') && !arg.includes('\\\\')) {\n            // No embedded double quotes or backslashes, so I can just wrap\n            // quote marks around the whole thing.\n            return `\"${arg}\"`;\n        }\n        // Expected input/output:\n        //   input : hello\"world\n        //   output: \"hello\\\"world\"\n        //   input : hello\"\"world\n        //   output: \"hello\\\"\\\"world\"\n        //   input : hello\\world\n        //   output: hello\\world\n        //   input : hello\\\\world\n        //   output: hello\\\\world\n        //   input : hello\\\"world\n        //   output: \"hello\\\\\\\"world\"\n        //   input : hello\\\\\"world\n        //   output: \"hello\\\\\\\\\\\"world\"\n        //   input : hello world\\\n        //   output: \"hello world\\\\\" - note the comment in libuv actually reads \"hello world\\\"\n        //                             but it appears the comment is wrong, it should be \"hello world\\\\\"\n        let reverse = '\"';\n        let quoteHit = true;\n        for (let i = arg.length; i > 0; i--) {\n            // walk the string in reverse\n            reverse += arg[i - 1];\n            if (quoteHit && arg[i - 1] === '\\\\') {\n                reverse += '\\\\';\n            }\n            else if (arg[i - 1] === '\"') {\n                quoteHit = true;\n                reverse += '\\\\';\n            }\n            else {\n                quoteHit = false;\n            }\n        }\n        reverse += '\"';\n        return reverse\n            .split('')\n            .reverse()\n            .join('');\n    }\n    _cloneExecOptions(options) {\n        options = options || {};\n        const result = {\n            cwd: options.cwd || process.cwd(),\n            env: options.env || process.env,\n            silent: options.silent || false,\n            windowsVerbatimArguments: options.windowsVerbatimArguments || false,\n            failOnStdErr: options.failOnStdErr || false,\n            ignoreReturnCode: options.ignoreReturnCode || false,\n            delay: options.delay || 10000\n        };\n        result.outStream = options.outStream || process.stdout;\n        result.errStream = options.errStream || process.stderr;\n        return result;\n    }\n    _getSpawnOptions(options, toolPath) {\n        options = options || {};\n        const result = {};\n        result.cwd = options.cwd;\n        result.env = options.env;\n        result['windowsVerbatimArguments'] =\n            options.windowsVerbatimArguments || this._isCmdFile();\n        if (options.windowsVerbatimArguments) {\n            result.argv0 = `\"${toolPath}\"`;\n        }\n        return result;\n    }\n    /**\n     * Exec a tool.\n     * Output will be streamed to the live console.\n     * Returns promise with return code\n     *\n     * @param     tool     path to tool to exec\n     * @param     options  optional exec options.  See ExecOptions\n     * @returns   number\n     */\n    exec() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // root the tool path if it is unrooted and contains relative pathing\n            if (!ioUtil.isRooted(this.toolPath) &&\n                (this.toolPath.includes('/') ||\n                    (IS_WINDOWS && this.toolPath.includes('\\\\')))) {\n                // prefer options.cwd if it is specified, however options.cwd may also need to be rooted\n                this.toolPath = path.resolve(process.cwd(), this.options.cwd || process.cwd(), this.toolPath);\n            }\n            // if the tool is only a file name, then resolve it from the PATH\n            // otherwise verify it exists (add extension on Windows if necessary)\n            this.toolPath = yield io.which(this.toolPath, true);\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n                this._debug(`exec tool: ${this.toolPath}`);\n                this._debug('arguments:');\n                for (const arg of this.args) {\n                    this._debug(`   ${arg}`);\n                }\n                const optionsNonNull = this._cloneExecOptions(this.options);\n                if (!optionsNonNull.silent && optionsNonNull.outStream) {\n                    optionsNonNull.outStream.write(this._getCommandString(optionsNonNull) + os.EOL);\n                }\n                const state = new ExecState(optionsNonNull, this.toolPath);\n                state.on('debug', (message) => {\n                    this._debug(message);\n                });\n                if (this.options.cwd && !(yield ioUtil.exists(this.options.cwd))) {\n                    return reject(new Error(`The cwd: ${this.options.cwd} does not exist!`));\n                }\n                const fileName = this._getSpawnFileName();\n                const cp = child.spawn(fileName, this._getSpawnArgs(optionsNonNull), this._getSpawnOptions(this.options, fileName));\n                let stdbuffer = '';\n                if (cp.stdout) {\n                    cp.stdout.on('data', (data) => {\n                        if (this.options.listeners && this.options.listeners.stdout) {\n                            this.options.listeners.stdout(data);\n                        }\n                        if (!optionsNonNull.silent && optionsNonNull.outStream) {\n                            optionsNonNull.outStream.write(data);\n                        }\n                        stdbuffer = this._processLineBuffer(data, stdbuffer, (line) => {\n                            if (this.options.listeners && this.options.listeners.stdline) {\n                                this.options.listeners.stdline(line);\n                            }\n                        });\n                    });\n                }\n                let errbuffer = '';\n                if (cp.stderr) {\n                    cp.stderr.on('data', (data) => {\n                        state.processStderr = true;\n                        if (this.options.listeners && this.options.listeners.stderr) {\n                            this.options.listeners.stderr(data);\n                        }\n                        if (!optionsNonNull.silent &&\n                            optionsNonNull.errStream &&\n                            optionsNonNull.outStream) {\n                            const s = optionsNonNull.failOnStdErr\n                                ? optionsNonNull.errStream\n                                : optionsNonNull.outStream;\n                            s.write(data);\n                        }\n                        errbuffer = this._processLineBuffer(data, errbuffer, (line) => {\n                            if (this.options.listeners && this.options.listeners.errline) {\n                                this.options.listeners.errline(line);\n                            }\n                        });\n                    });\n                }\n                cp.on('error', (err) => {\n                    state.processError = err.message;\n                    state.processExited = true;\n                    state.processClosed = true;\n                    state.CheckComplete();\n                });\n                cp.on('exit', (code) => {\n                    state.processExitCode = code;\n                    state.processExited = true;\n                    this._debug(`Exit code ${code} received from tool '${this.toolPath}'`);\n                    state.CheckComplete();\n                });\n                cp.on('close', (code) => {\n                    state.processExitCode = code;\n                    state.processExited = true;\n                    state.processClosed = true;\n                    this._debug(`STDIO streams have closed for tool '${this.toolPath}'`);\n                    state.CheckComplete();\n                });\n                state.on('done', (error, exitCode) => {\n                    if (stdbuffer.length > 0) {\n                        this.emit('stdline', stdbuffer);\n                    }\n                    if (errbuffer.length > 0) {\n                        this.emit('errline', errbuffer);\n                    }\n                    cp.removeAllListeners();\n                    if (error) {\n                        reject(error);\n                    }\n                    else {\n                        resolve(exitCode);\n                    }\n                });\n                if (this.options.input) {\n                    if (!cp.stdin) {\n                        throw new Error('child process missing stdin');\n                    }\n                    cp.stdin.end(this.options.input);\n                }\n            }));\n        });\n    }\n}\nexports.ToolRunner = ToolRunner;\n/**\n * Convert an arg string to an array of args. Handles escaping\n *\n * @param    argString   string of arguments\n * @returns  string[]    array of arguments\n */\nfunction argStringToArray(argString) {\n    const args = [];\n    let inQuotes = false;\n    let escaped = false;\n    let arg = '';\n    function append(c) {\n        // we only escape double quotes.\n        if (escaped && c !== '\"') {\n            arg += '\\\\';\n        }\n        arg += c;\n        escaped = false;\n    }\n    for (let i = 0; i < argString.length; i++) {\n        const c = argString.charAt(i);\n        if (c === '\"') {\n            if (!escaped) {\n                inQuotes = !inQuotes;\n            }\n            else {\n                append(c);\n            }\n            continue;\n        }\n        if (c === '\\\\' && escaped) {\n            append(c);\n            continue;\n        }\n        if (c === '\\\\' && inQuotes) {\n            escaped = true;\n            continue;\n        }\n        if (c === ' ' && !inQuotes) {\n            if (arg.length > 0) {\n                args.push(arg);\n                arg = '';\n            }\n            continue;\n        }\n        append(c);\n    }\n    if (arg.length > 0) {\n        args.push(arg.trim());\n    }\n    return args;\n}\nexports.argStringToArray = argStringToArray;\nclass ExecState extends events.EventEmitter {\n    constructor(options, toolPath) {\n        super();\n        this.processClosed = false; // tracks whether the process has exited and stdio is closed\n        this.processError = '';\n        this.processExitCode = 0;\n        this.processExited = false; // tracks whether the process has exited\n        this.processStderr = false; // tracks whether stderr was written to\n        this.delay = 10000; // 10 seconds\n        this.done = false;\n        this.timeout = null;\n        if (!toolPath) {\n            throw new Error('toolPath must not be empty');\n        }\n        this.options = options;\n        this.toolPath = toolPath;\n        if (options.delay) {\n            this.delay = options.delay;\n        }\n    }\n    CheckComplete() {\n        if (this.done) {\n            return;\n        }\n        if (this.processClosed) {\n            this._setResult();\n        }\n        else if (this.processExited) {\n            this.timeout = timers_1.setTimeout(ExecState.HandleTimeout, this.delay, this);\n        }\n    }\n    _debug(message) {\n        this.emit('debug', message);\n    }\n    _setResult() {\n        // determine whether there is an error\n        let error;\n        if (this.processExited) {\n            if (this.processError) {\n                error = new Error(`There was an error when attempting to execute the process '${this.toolPath}'. This may indicate the process failed to start. Error: ${this.processError}`);\n            }\n            else if (this.processExitCode !== 0 && !this.options.ignoreReturnCode) {\n                error = new Error(`The process '${this.toolPath}' failed with exit code ${this.processExitCode}`);\n            }\n            else if (this.processStderr && this.options.failOnStdErr) {\n                error = new Error(`The process '${this.toolPath}' failed because one or more lines were written to the STDERR stream`);\n            }\n        }\n        // clear the timeout\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n            this.timeout = null;\n        }\n        this.done = true;\n        this.emit('done', error, this.processExitCode);\n    }\n    static HandleTimeout(state) {\n        if (state.done) {\n            return;\n        }\n        if (!state.processClosed && state.processExited) {\n            const message = `The STDIO streams did not close within ${state.delay /\n                1000} seconds of the exit event from process '${state.toolPath}'. This may indicate a child process inherited the STDIO streams and has not yet exited.`;\n            state._debug(message);\n        }\n        state._setResult();\n    }\n}\n//# sourceMappingURL=toolrunner.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PersonalAccessTokenCredentialHandler = exports.BearerCredentialHandler = exports.BasicCredentialHandler = void 0;\nclass BasicCredentialHandler {\n    constructor(username, password) {\n        this.username = username;\n        this.password = password;\n    }\n    prepareRequest(options) {\n        if (!options.headers) {\n            throw Error('The request has no headers');\n        }\n        options.headers['Authorization'] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString('base64')}`;\n    }\n    // This handler cannot handle 401\n    canHandleAuthentication() {\n        return false;\n    }\n    handleAuthentication() {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new Error('not implemented');\n        });\n    }\n}\nexports.BasicCredentialHandler = BasicCredentialHandler;\nclass BearerCredentialHandler {\n    constructor(token) {\n        this.token = token;\n    }\n    // currently implements pre-authorization\n    // TODO: support preAuth = false where it hooks on 401\n    prepareRequest(options) {\n        if (!options.headers) {\n            throw Error('The request has no headers');\n        }\n        options.headers['Authorization'] = `Bearer ${this.token}`;\n    }\n    // This handler cannot handle 401\n    canHandleAuthentication() {\n        return false;\n    }\n    handleAuthentication() {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new Error('not implemented');\n        });\n    }\n}\nexports.BearerCredentialHandler = BearerCredentialHandler;\nclass PersonalAccessTokenCredentialHandler {\n    constructor(token) {\n        this.token = token;\n    }\n    // currently implements pre-authorization\n    // TODO: support preAuth = false where it hooks on 401\n    prepareRequest(options) {\n        if (!options.headers) {\n            throw Error('The request has no headers');\n        }\n        options.headers['Authorization'] = `Basic ${Buffer.from(`PAT:${this.token}`).toString('base64')}`;\n    }\n    // This handler cannot handle 401\n    canHandleAuthentication() {\n        return false;\n    }\n    handleAuthentication() {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new Error('not implemented');\n        });\n    }\n}\nexports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;\n//# sourceMappingURL=auth.js.map","\"use strict\";\n/* eslint-disable @typescript-eslint/no-explicit-any */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HttpClient = exports.isHttps = exports.HttpClientResponse = exports.HttpClientError = exports.getProxyUrl = exports.MediaTypes = exports.Headers = exports.HttpCodes = void 0;\nconst http = __importStar(require(\"http\"));\nconst https = __importStar(require(\"https\"));\nconst pm = __importStar(require(\"./proxy\"));\nconst tunnel = __importStar(require(\"tunnel\"));\nvar HttpCodes;\n(function (HttpCodes) {\n    HttpCodes[HttpCodes[\"OK\"] = 200] = \"OK\";\n    HttpCodes[HttpCodes[\"MultipleChoices\"] = 300] = \"MultipleChoices\";\n    HttpCodes[HttpCodes[\"MovedPermanently\"] = 301] = \"MovedPermanently\";\n    HttpCodes[HttpCodes[\"ResourceMoved\"] = 302] = \"ResourceMoved\";\n    HttpCodes[HttpCodes[\"SeeOther\"] = 303] = \"SeeOther\";\n    HttpCodes[HttpCodes[\"NotModified\"] = 304] = \"NotModified\";\n    HttpCodes[HttpCodes[\"UseProxy\"] = 305] = \"UseProxy\";\n    HttpCodes[HttpCodes[\"SwitchProxy\"] = 306] = \"SwitchProxy\";\n    HttpCodes[HttpCodes[\"TemporaryRedirect\"] = 307] = \"TemporaryRedirect\";\n    HttpCodes[HttpCodes[\"PermanentRedirect\"] = 308] = \"PermanentRedirect\";\n    HttpCodes[HttpCodes[\"BadRequest\"] = 400] = \"BadRequest\";\n    HttpCodes[HttpCodes[\"Unauthorized\"] = 401] = \"Unauthorized\";\n    HttpCodes[HttpCodes[\"PaymentRequired\"] = 402] = \"PaymentRequired\";\n    HttpCodes[HttpCodes[\"Forbidden\"] = 403] = \"Forbidden\";\n    HttpCodes[HttpCodes[\"NotFound\"] = 404] = \"NotFound\";\n    HttpCodes[HttpCodes[\"MethodNotAllowed\"] = 405] = \"MethodNotAllowed\";\n    HttpCodes[HttpCodes[\"NotAcceptable\"] = 406] = \"NotAcceptable\";\n    HttpCodes[HttpCodes[\"ProxyAuthenticationRequired\"] = 407] = \"ProxyAuthenticationRequired\";\n    HttpCodes[HttpCodes[\"RequestTimeout\"] = 408] = \"RequestTimeout\";\n    HttpCodes[HttpCodes[\"Conflict\"] = 409] = \"Conflict\";\n    HttpCodes[HttpCodes[\"Gone\"] = 410] = \"Gone\";\n    HttpCodes[HttpCodes[\"TooManyRequests\"] = 429] = \"TooManyRequests\";\n    HttpCodes[HttpCodes[\"InternalServerError\"] = 500] = \"InternalServerError\";\n    HttpCodes[HttpCodes[\"NotImplemented\"] = 501] = \"NotImplemented\";\n    HttpCodes[HttpCodes[\"BadGateway\"] = 502] = \"BadGateway\";\n    HttpCodes[HttpCodes[\"ServiceUnavailable\"] = 503] = \"ServiceUnavailable\";\n    HttpCodes[HttpCodes[\"GatewayTimeout\"] = 504] = \"GatewayTimeout\";\n})(HttpCodes = exports.HttpCodes || (exports.HttpCodes = {}));\nvar Headers;\n(function (Headers) {\n    Headers[\"Accept\"] = \"accept\";\n    Headers[\"ContentType\"] = \"content-type\";\n})(Headers = exports.Headers || (exports.Headers = {}));\nvar MediaTypes;\n(function (MediaTypes) {\n    MediaTypes[\"ApplicationJson\"] = \"application/json\";\n})(MediaTypes = exports.MediaTypes || (exports.MediaTypes = {}));\n/**\n * Returns the proxy URL, depending upon the supplied url and proxy environment variables.\n * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com\n */\nfunction getProxyUrl(serverUrl) {\n    const proxyUrl = pm.getProxyUrl(new URL(serverUrl));\n    return proxyUrl ? proxyUrl.href : '';\n}\nexports.getProxyUrl = getProxyUrl;\nconst HttpRedirectCodes = [\n    HttpCodes.MovedPermanently,\n    HttpCodes.ResourceMoved,\n    HttpCodes.SeeOther,\n    HttpCodes.TemporaryRedirect,\n    HttpCodes.PermanentRedirect\n];\nconst HttpResponseRetryCodes = [\n    HttpCodes.BadGateway,\n    HttpCodes.ServiceUnavailable,\n    HttpCodes.GatewayTimeout\n];\nconst RetryableHttpVerbs = ['OPTIONS', 'GET', 'DELETE', 'HEAD'];\nconst ExponentialBackoffCeiling = 10;\nconst ExponentialBackoffTimeSlice = 5;\nclass HttpClientError extends Error {\n    constructor(message, statusCode) {\n        super(message);\n        this.name = 'HttpClientError';\n        this.statusCode = statusCode;\n        Object.setPrototypeOf(this, HttpClientError.prototype);\n    }\n}\nexports.HttpClientError = HttpClientError;\nclass HttpClientResponse {\n    constructor(message) {\n        this.message = message;\n    }\n    readBody() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {\n                let output = Buffer.alloc(0);\n                this.message.on('data', (chunk) => {\n                    output = Buffer.concat([output, chunk]);\n                });\n                this.message.on('end', () => {\n                    resolve(output.toString());\n                });\n            }));\n        });\n    }\n}\nexports.HttpClientResponse = HttpClientResponse;\nfunction isHttps(requestUrl) {\n    const parsedUrl = new URL(requestUrl);\n    return parsedUrl.protocol === 'https:';\n}\nexports.isHttps = isHttps;\nclass HttpClient {\n    constructor(userAgent, handlers, requestOptions) {\n        this._ignoreSslError = false;\n        this._allowRedirects = true;\n        this._allowRedirectDowngrade = false;\n        this._maxRedirects = 50;\n        this._allowRetries = false;\n        this._maxRetries = 1;\n        this._keepAlive = false;\n        this._disposed = false;\n        this.userAgent = userAgent;\n        this.handlers = handlers || [];\n        this.requestOptions = requestOptions;\n        if (requestOptions) {\n            if (requestOptions.ignoreSslError != null) {\n                this._ignoreSslError = requestOptions.ignoreSslError;\n            }\n            this._socketTimeout = requestOptions.socketTimeout;\n            if (requestOptions.allowRedirects != null) {\n                this._allowRedirects = requestOptions.allowRedirects;\n            }\n            if (requestOptions.allowRedirectDowngrade != null) {\n                this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;\n            }\n            if (requestOptions.maxRedirects != null) {\n                this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);\n            }\n            if (requestOptions.keepAlive != null) {\n                this._keepAlive = requestOptions.keepAlive;\n            }\n            if (requestOptions.allowRetries != null) {\n                this._allowRetries = requestOptions.allowRetries;\n            }\n            if (requestOptions.maxRetries != null) {\n                this._maxRetries = requestOptions.maxRetries;\n            }\n        }\n    }\n    options(requestUrl, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('OPTIONS', requestUrl, null, additionalHeaders || {});\n        });\n    }\n    get(requestUrl, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('GET', requestUrl, null, additionalHeaders || {});\n        });\n    }\n    del(requestUrl, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('DELETE', requestUrl, null, additionalHeaders || {});\n        });\n    }\n    post(requestUrl, data, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('POST', requestUrl, data, additionalHeaders || {});\n        });\n    }\n    patch(requestUrl, data, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('PATCH', requestUrl, data, additionalHeaders || {});\n        });\n    }\n    put(requestUrl, data, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('PUT', requestUrl, data, additionalHeaders || {});\n        });\n    }\n    head(requestUrl, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('HEAD', requestUrl, null, additionalHeaders || {});\n        });\n    }\n    sendStream(verb, requestUrl, stream, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request(verb, requestUrl, stream, additionalHeaders);\n        });\n    }\n    /**\n     * Gets a typed object from an endpoint\n     * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise\n     */\n    getJson(requestUrl, additionalHeaders = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n            const res = yield this.get(requestUrl, additionalHeaders);\n            return this._processResponse(res, this.requestOptions);\n        });\n    }\n    postJson(requestUrl, obj, additionalHeaders = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = JSON.stringify(obj, null, 2);\n            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n            const res = yield this.post(requestUrl, data, additionalHeaders);\n            return this._processResponse(res, this.requestOptions);\n        });\n    }\n    putJson(requestUrl, obj, additionalHeaders = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = JSON.stringify(obj, null, 2);\n            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n            const res = yield this.put(requestUrl, data, additionalHeaders);\n            return this._processResponse(res, this.requestOptions);\n        });\n    }\n    patchJson(requestUrl, obj, additionalHeaders = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = JSON.stringify(obj, null, 2);\n            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n            const res = yield this.patch(requestUrl, data, additionalHeaders);\n            return this._processResponse(res, this.requestOptions);\n        });\n    }\n    /**\n     * Makes a raw http request.\n     * All other methods such as get, post, patch, and request ultimately call this.\n     * Prefer get, del, post and patch\n     */\n    request(verb, requestUrl, data, headers) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._disposed) {\n                throw new Error('Client has already been disposed.');\n            }\n            const parsedUrl = new URL(requestUrl);\n            let info = this._prepareRequest(verb, parsedUrl, headers);\n            // Only perform retries on reads since writes may not be idempotent.\n            const maxTries = this._allowRetries && RetryableHttpVerbs.includes(verb)\n                ? this._maxRetries + 1\n                : 1;\n            let numTries = 0;\n            let response;\n            do {\n                response = yield this.requestRaw(info, data);\n                // Check if it's an authentication challenge\n                if (response &&\n                    response.message &&\n                    response.message.statusCode === HttpCodes.Unauthorized) {\n                    let authenticationHandler;\n                    for (const handler of this.handlers) {\n                        if (handler.canHandleAuthentication(response)) {\n                            authenticationHandler = handler;\n                            break;\n                        }\n                    }\n                    if (authenticationHandler) {\n                        return authenticationHandler.handleAuthentication(this, info, data);\n                    }\n                    else {\n                        // We have received an unauthorized response but have no handlers to handle it.\n                        // Let the response return to the caller.\n                        return response;\n                    }\n                }\n                let redirectsRemaining = this._maxRedirects;\n                while (response.message.statusCode &&\n                    HttpRedirectCodes.includes(response.message.statusCode) &&\n                    this._allowRedirects &&\n                    redirectsRemaining > 0) {\n                    const redirectUrl = response.message.headers['location'];\n                    if (!redirectUrl) {\n                        // if there's no location to redirect to, we won't\n                        break;\n                    }\n                    const parsedRedirectUrl = new URL(redirectUrl);\n                    if (parsedUrl.protocol === 'https:' &&\n                        parsedUrl.protocol !== parsedRedirectUrl.protocol &&\n                        !this._allowRedirectDowngrade) {\n                        throw new Error('Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.');\n                    }\n                    // we need to finish reading the response before reassigning response\n                    // which will leak the open socket.\n                    yield response.readBody();\n                    // strip authorization header if redirected to a different hostname\n                    if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {\n                        for (const header in headers) {\n                            // header names are case insensitive\n                            if (header.toLowerCase() === 'authorization') {\n                                delete headers[header];\n                            }\n                        }\n                    }\n                    // let's make the request with the new redirectUrl\n                    info = this._prepareRequest(verb, parsedRedirectUrl, headers);\n                    response = yield this.requestRaw(info, data);\n                    redirectsRemaining--;\n                }\n                if (!response.message.statusCode ||\n                    !HttpResponseRetryCodes.includes(response.message.statusCode)) {\n                    // If not a retry code, return immediately instead of retrying\n                    return response;\n                }\n                numTries += 1;\n                if (numTries < maxTries) {\n                    yield response.readBody();\n                    yield this._performExponentialBackoff(numTries);\n                }\n            } while (numTries < maxTries);\n            return response;\n        });\n    }\n    /**\n     * Needs to be called if keepAlive is set to true in request options.\n     */\n    dispose() {\n        if (this._agent) {\n            this._agent.destroy();\n        }\n        this._disposed = true;\n    }\n    /**\n     * Raw request.\n     * @param info\n     * @param data\n     */\n    requestRaw(info, data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                function callbackForResult(err, res) {\n                    if (err) {\n                        reject(err);\n                    }\n                    else if (!res) {\n                        // If `err` is not passed, then `res` must be passed.\n                        reject(new Error('Unknown error'));\n                    }\n                    else {\n                        resolve(res);\n                    }\n                }\n                this.requestRawWithCallback(info, data, callbackForResult);\n            });\n        });\n    }\n    /**\n     * Raw request with callback.\n     * @param info\n     * @param data\n     * @param onResult\n     */\n    requestRawWithCallback(info, data, onResult) {\n        if (typeof data === 'string') {\n            if (!info.options.headers) {\n                info.options.headers = {};\n            }\n            info.options.headers['Content-Length'] = Buffer.byteLength(data, 'utf8');\n        }\n        let callbackCalled = false;\n        function handleResult(err, res) {\n            if (!callbackCalled) {\n                callbackCalled = true;\n                onResult(err, res);\n            }\n        }\n        const req = info.httpModule.request(info.options, (msg) => {\n            const res = new HttpClientResponse(msg);\n            handleResult(undefined, res);\n        });\n        let socket;\n        req.on('socket', sock => {\n            socket = sock;\n        });\n        // If we ever get disconnected, we want the socket to timeout eventually\n        req.setTimeout(this._socketTimeout || 3 * 60000, () => {\n            if (socket) {\n                socket.end();\n            }\n            handleResult(new Error(`Request timeout: ${info.options.path}`));\n        });\n        req.on('error', function (err) {\n            // err has statusCode property\n            // res should have headers\n            handleResult(err);\n        });\n        if (data && typeof data === 'string') {\n            req.write(data, 'utf8');\n        }\n        if (data && typeof data !== 'string') {\n            data.on('close', function () {\n                req.end();\n            });\n            data.pipe(req);\n        }\n        else {\n            req.end();\n        }\n    }\n    /**\n     * Gets an http agent. This function is useful when you need an http agent that handles\n     * routing through a proxy server - depending upon the url and proxy environment variables.\n     * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com\n     */\n    getAgent(serverUrl) {\n        const parsedUrl = new URL(serverUrl);\n        return this._getAgent(parsedUrl);\n    }\n    _prepareRequest(method, requestUrl, headers) {\n        const info = {};\n        info.parsedUrl = requestUrl;\n        const usingSsl = info.parsedUrl.protocol === 'https:';\n        info.httpModule = usingSsl ? https : http;\n        const defaultPort = usingSsl ? 443 : 80;\n        info.options = {};\n        info.options.host = info.parsedUrl.hostname;\n        info.options.port = info.parsedUrl.port\n            ? parseInt(info.parsedUrl.port)\n            : defaultPort;\n        info.options.path =\n            (info.parsedUrl.pathname || '') + (info.parsedUrl.search || '');\n        info.options.method = method;\n        info.options.headers = this._mergeHeaders(headers);\n        if (this.userAgent != null) {\n            info.options.headers['user-agent'] = this.userAgent;\n        }\n        info.options.agent = this._getAgent(info.parsedUrl);\n        // gives handlers an opportunity to participate\n        if (this.handlers) {\n            for (const handler of this.handlers) {\n                handler.prepareRequest(info.options);\n            }\n        }\n        return info;\n    }\n    _mergeHeaders(headers) {\n        if (this.requestOptions && this.requestOptions.headers) {\n            return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers || {}));\n        }\n        return lowercaseKeys(headers || {});\n    }\n    _getExistingOrDefaultHeader(additionalHeaders, header, _default) {\n        let clientHeader;\n        if (this.requestOptions && this.requestOptions.headers) {\n            clientHeader = lowercaseKeys(this.requestOptions.headers)[header];\n        }\n        return additionalHeaders[header] || clientHeader || _default;\n    }\n    _getAgent(parsedUrl) {\n        let agent;\n        const proxyUrl = pm.getProxyUrl(parsedUrl);\n        const useProxy = proxyUrl && proxyUrl.hostname;\n        if (this._keepAlive && useProxy) {\n            agent = this._proxyAgent;\n        }\n        if (this._keepAlive && !useProxy) {\n            agent = this._agent;\n        }\n        // if agent is already assigned use that agent.\n        if (agent) {\n            return agent;\n        }\n        const usingSsl = parsedUrl.protocol === 'https:';\n        let maxSockets = 100;\n        if (this.requestOptions) {\n            maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;\n        }\n        // This is `useProxy` again, but we need to check `proxyURl` directly for TypeScripts's flow analysis.\n        if (proxyUrl && proxyUrl.hostname) {\n            const agentOptions = {\n                maxSockets,\n                keepAlive: this._keepAlive,\n                proxy: Object.assign(Object.assign({}, ((proxyUrl.username || proxyUrl.password) && {\n                    proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`\n                })), { host: proxyUrl.hostname, port: proxyUrl.port })\n            };\n            let tunnelAgent;\n            const overHttps = proxyUrl.protocol === 'https:';\n            if (usingSsl) {\n                tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;\n            }\n            else {\n                tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;\n            }\n            agent = tunnelAgent(agentOptions);\n            this._proxyAgent = agent;\n        }\n        // if reusing agent across request and tunneling agent isn't assigned create a new agent\n        if (this._keepAlive && !agent) {\n            const options = { keepAlive: this._keepAlive, maxSockets };\n            agent = usingSsl ? new https.Agent(options) : new http.Agent(options);\n            this._agent = agent;\n        }\n        // if not using private agent and tunnel agent isn't setup then use global agent\n        if (!agent) {\n            agent = usingSsl ? https.globalAgent : http.globalAgent;\n        }\n        if (usingSsl && this._ignoreSslError) {\n            // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process\n            // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options\n            // we have to cast it to any and change it directly\n            agent.options = Object.assign(agent.options || {}, {\n                rejectUnauthorized: false\n            });\n        }\n        return agent;\n    }\n    _performExponentialBackoff(retryNumber) {\n        return __awaiter(this, void 0, void 0, function* () {\n            retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);\n            const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);\n            return new Promise(resolve => setTimeout(() => resolve(), ms));\n        });\n    }\n    _processResponse(res, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n                const statusCode = res.message.statusCode || 0;\n                const response = {\n                    statusCode,\n                    result: null,\n                    headers: {}\n                };\n                // not found leads to null obj returned\n                if (statusCode === HttpCodes.NotFound) {\n                    resolve(response);\n                }\n                // get the result from the body\n                function dateTimeDeserializer(key, value) {\n                    if (typeof value === 'string') {\n                        const a = new Date(value);\n                        if (!isNaN(a.valueOf())) {\n                            return a;\n                        }\n                    }\n                    return value;\n                }\n                let obj;\n                let contents;\n                try {\n                    contents = yield res.readBody();\n                    if (contents && contents.length > 0) {\n                        if (options && options.deserializeDates) {\n                            obj = JSON.parse(contents, dateTimeDeserializer);\n                        }\n                        else {\n                            obj = JSON.parse(contents);\n                        }\n                        response.result = obj;\n                    }\n                    response.headers = res.message.headers;\n                }\n                catch (err) {\n                    // Invalid resource (contents not json);  leaving result obj null\n                }\n                // note that 3xx redirects are handled by the http layer.\n                if (statusCode > 299) {\n                    let msg;\n                    // if exception/error in body, attempt to get better error\n                    if (obj && obj.message) {\n                        msg = obj.message;\n                    }\n                    else if (contents && contents.length > 0) {\n                        // it may be the case that the exception is in the body message as string\n                        msg = contents;\n                    }\n                    else {\n                        msg = `Failed request: (${statusCode})`;\n                    }\n                    const err = new HttpClientError(msg, statusCode);\n                    err.result = response.result;\n                    reject(err);\n                }\n                else {\n                    resolve(response);\n                }\n            }));\n        });\n    }\n}\nexports.HttpClient = HttpClient;\nconst lowercaseKeys = (obj) => Object.keys(obj).reduce((c, k) => ((c[k.toLowerCase()] = obj[k]), c), {});\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkBypass = exports.getProxyUrl = void 0;\nfunction getProxyUrl(reqUrl) {\n    const usingSsl = reqUrl.protocol === 'https:';\n    if (checkBypass(reqUrl)) {\n        return undefined;\n    }\n    const proxyVar = (() => {\n        if (usingSsl) {\n            return process.env['https_proxy'] || process.env['HTTPS_PROXY'];\n        }\n        else {\n            return process.env['http_proxy'] || process.env['HTTP_PROXY'];\n        }\n    })();\n    if (proxyVar) {\n        return new URL(proxyVar);\n    }\n    else {\n        return undefined;\n    }\n}\nexports.getProxyUrl = getProxyUrl;\nfunction checkBypass(reqUrl) {\n    if (!reqUrl.hostname) {\n        return false;\n    }\n    const reqHost = reqUrl.hostname;\n    if (isLoopbackAddress(reqHost)) {\n        return true;\n    }\n    const noProxy = process.env['no_proxy'] || process.env['NO_PROXY'] || '';\n    if (!noProxy) {\n        return false;\n    }\n    // Determine the request port\n    let reqPort;\n    if (reqUrl.port) {\n        reqPort = Number(reqUrl.port);\n    }\n    else if (reqUrl.protocol === 'http:') {\n        reqPort = 80;\n    }\n    else if (reqUrl.protocol === 'https:') {\n        reqPort = 443;\n    }\n    // Format the request hostname and hostname with port\n    const upperReqHosts = [reqUrl.hostname.toUpperCase()];\n    if (typeof reqPort === 'number') {\n        upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);\n    }\n    // Compare request host against noproxy\n    for (const upperNoProxyItem of noProxy\n        .split(',')\n        .map(x => x.trim().toUpperCase())\n        .filter(x => x)) {\n        if (upperNoProxyItem === '*' ||\n            upperReqHosts.some(x => x === upperNoProxyItem ||\n                x.endsWith(`.${upperNoProxyItem}`) ||\n                (upperNoProxyItem.startsWith('.') &&\n                    x.endsWith(`${upperNoProxyItem}`)))) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.checkBypass = checkBypass;\nfunction isLoopbackAddress(host) {\n    const hostLower = host.toLowerCase();\n    return (hostLower === 'localhost' ||\n        hostLower.startsWith('127.') ||\n        hostLower.startsWith('[::1]') ||\n        hostLower.startsWith('[0:0:0:0:0:0:0:1]'));\n}\n//# sourceMappingURL=proxy.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getCmdPath = exports.tryGetExecutablePath = exports.isRooted = exports.isDirectory = exports.exists = exports.READONLY = exports.UV_FS_O_EXLOCK = exports.IS_WINDOWS = exports.unlink = exports.symlink = exports.stat = exports.rmdir = exports.rm = exports.rename = exports.readlink = exports.readdir = exports.open = exports.mkdir = exports.lstat = exports.copyFile = exports.chmod = void 0;\nconst fs = __importStar(require(\"fs\"));\nconst path = __importStar(require(\"path\"));\n_a = fs.promises\n// export const {open} = 'fs'\n, exports.chmod = _a.chmod, exports.copyFile = _a.copyFile, exports.lstat = _a.lstat, exports.mkdir = _a.mkdir, exports.open = _a.open, exports.readdir = _a.readdir, exports.readlink = _a.readlink, exports.rename = _a.rename, exports.rm = _a.rm, exports.rmdir = _a.rmdir, exports.stat = _a.stat, exports.symlink = _a.symlink, exports.unlink = _a.unlink;\n// export const {open} = 'fs'\nexports.IS_WINDOWS = process.platform === 'win32';\n// See https://github.com/nodejs/node/blob/d0153aee367422d0858105abec186da4dff0a0c5/deps/uv/include/uv/win.h#L691\nexports.UV_FS_O_EXLOCK = 0x10000000;\nexports.READONLY = fs.constants.O_RDONLY;\nfunction exists(fsPath) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            yield exports.stat(fsPath);\n        }\n        catch (err) {\n            if (err.code === 'ENOENT') {\n                return false;\n            }\n            throw err;\n        }\n        return true;\n    });\n}\nexports.exists = exists;\nfunction isDirectory(fsPath, useStat = false) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const stats = useStat ? yield exports.stat(fsPath) : yield exports.lstat(fsPath);\n        return stats.isDirectory();\n    });\n}\nexports.isDirectory = isDirectory;\n/**\n * On OSX/Linux, true if path starts with '/'. On Windows, true for paths like:\n * \\, \\hello, \\\\hello\\share, C:, and C:\\hello (and corresponding alternate separator cases).\n */\nfunction isRooted(p) {\n    p = normalizeSeparators(p);\n    if (!p) {\n        throw new Error('isRooted() parameter \"p\" cannot be empty');\n    }\n    if (exports.IS_WINDOWS) {\n        return (p.startsWith('\\\\') || /^[A-Z]:/i.test(p) // e.g. \\ or \\hello or \\\\hello\n        ); // e.g. C: or C:\\hello\n    }\n    return p.startsWith('/');\n}\nexports.isRooted = isRooted;\n/**\n * Best effort attempt to determine whether a file exists and is executable.\n * @param filePath    file path to check\n * @param extensions  additional file extensions to try\n * @return if file exists and is executable, returns the file path. otherwise empty string.\n */\nfunction tryGetExecutablePath(filePath, extensions) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let stats = undefined;\n        try {\n            // test file exists\n            stats = yield exports.stat(filePath);\n        }\n        catch (err) {\n            if (err.code !== 'ENOENT') {\n                // eslint-disable-next-line no-console\n                console.log(`Unexpected error attempting to determine if executable file exists '${filePath}': ${err}`);\n            }\n        }\n        if (stats && stats.isFile()) {\n            if (exports.IS_WINDOWS) {\n                // on Windows, test for valid extension\n                const upperExt = path.extname(filePath).toUpperCase();\n                if (extensions.some(validExt => validExt.toUpperCase() === upperExt)) {\n                    return filePath;\n                }\n            }\n            else {\n                if (isUnixExecutable(stats)) {\n                    return filePath;\n                }\n            }\n        }\n        // try each extension\n        const originalFilePath = filePath;\n        for (const extension of extensions) {\n            filePath = originalFilePath + extension;\n            stats = undefined;\n            try {\n                stats = yield exports.stat(filePath);\n            }\n            catch (err) {\n                if (err.code !== 'ENOENT') {\n                    // eslint-disable-next-line no-console\n                    console.log(`Unexpected error attempting to determine if executable file exists '${filePath}': ${err}`);\n                }\n            }\n            if (stats && stats.isFile()) {\n                if (exports.IS_WINDOWS) {\n                    // preserve the case of the actual file (since an extension was appended)\n                    try {\n                        const directory = path.dirname(filePath);\n                        const upperName = path.basename(filePath).toUpperCase();\n                        for (const actualName of yield exports.readdir(directory)) {\n                            if (upperName === actualName.toUpperCase()) {\n                                filePath = path.join(directory, actualName);\n                                break;\n                            }\n                        }\n                    }\n                    catch (err) {\n                        // eslint-disable-next-line no-console\n                        console.log(`Unexpected error attempting to determine the actual case of the file '${filePath}': ${err}`);\n                    }\n                    return filePath;\n                }\n                else {\n                    if (isUnixExecutable(stats)) {\n                        return filePath;\n                    }\n                }\n            }\n        }\n        return '';\n    });\n}\nexports.tryGetExecutablePath = tryGetExecutablePath;\nfunction normalizeSeparators(p) {\n    p = p || '';\n    if (exports.IS_WINDOWS) {\n        // convert slashes on Windows\n        p = p.replace(/\\//g, '\\\\');\n        // remove redundant slashes\n        return p.replace(/\\\\\\\\+/g, '\\\\');\n    }\n    // remove redundant slashes\n    return p.replace(/\\/\\/+/g, '/');\n}\n// on Mac/Linux, test the execute bit\n//     R   W  X  R  W X R W X\n//   256 128 64 32 16 8 4 2 1\nfunction isUnixExecutable(stats) {\n    return ((stats.mode & 1) > 0 ||\n        ((stats.mode & 8) > 0 && stats.gid === process.getgid()) ||\n        ((stats.mode & 64) > 0 && stats.uid === process.getuid()));\n}\n// Get the path of cmd.exe in windows\nfunction getCmdPath() {\n    var _a;\n    return (_a = process.env['COMSPEC']) !== null && _a !== void 0 ? _a : `cmd.exe`;\n}\nexports.getCmdPath = getCmdPath;\n//# sourceMappingURL=io-util.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.findInPath = exports.which = exports.mkdirP = exports.rmRF = exports.mv = exports.cp = void 0;\nconst assert_1 = require(\"assert\");\nconst path = __importStar(require(\"path\"));\nconst ioUtil = __importStar(require(\"./io-util\"));\n/**\n * Copies a file or folder.\n * Based off of shelljs - https://github.com/shelljs/shelljs/blob/9237f66c52e5daa40458f94f9565e18e8132f5a6/src/cp.js\n *\n * @param     source    source path\n * @param     dest      destination path\n * @param     options   optional. See CopyOptions.\n */\nfunction cp(source, dest, options = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { force, recursive, copySourceDirectory } = readCopyOptions(options);\n        const destStat = (yield ioUtil.exists(dest)) ? yield ioUtil.stat(dest) : null;\n        // Dest is an existing file, but not forcing\n        if (destStat && destStat.isFile() && !force) {\n            return;\n        }\n        // If dest is an existing directory, should copy inside.\n        const newDest = destStat && destStat.isDirectory() && copySourceDirectory\n            ? path.join(dest, path.basename(source))\n            : dest;\n        if (!(yield ioUtil.exists(source))) {\n            throw new Error(`no such file or directory: ${source}`);\n        }\n        const sourceStat = yield ioUtil.stat(source);\n        if (sourceStat.isDirectory()) {\n            if (!recursive) {\n                throw new Error(`Failed to copy. ${source} is a directory, but tried to copy without recursive flag.`);\n            }\n            else {\n                yield cpDirRecursive(source, newDest, 0, force);\n            }\n        }\n        else {\n            if (path.relative(source, newDest) === '') {\n                // a file cannot be copied to itself\n                throw new Error(`'${newDest}' and '${source}' are the same file`);\n            }\n            yield copyFile(source, newDest, force);\n        }\n    });\n}\nexports.cp = cp;\n/**\n * Moves a path.\n *\n * @param     source    source path\n * @param     dest      destination path\n * @param     options   optional. See MoveOptions.\n */\nfunction mv(source, dest, options = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (yield ioUtil.exists(dest)) {\n            let destExists = true;\n            if (yield ioUtil.isDirectory(dest)) {\n                // If dest is directory copy src into dest\n                dest = path.join(dest, path.basename(source));\n                destExists = yield ioUtil.exists(dest);\n            }\n            if (destExists) {\n                if (options.force == null || options.force) {\n                    yield rmRF(dest);\n                }\n                else {\n                    throw new Error('Destination already exists');\n                }\n            }\n        }\n        yield mkdirP(path.dirname(dest));\n        yield ioUtil.rename(source, dest);\n    });\n}\nexports.mv = mv;\n/**\n * Remove a path recursively with force\n *\n * @param inputPath path to remove\n */\nfunction rmRF(inputPath) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (ioUtil.IS_WINDOWS) {\n            // Check for invalid characters\n            // https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file\n            if (/[*\"<>|]/.test(inputPath)) {\n                throw new Error('File path must not contain `*`, `\"`, `<`, `>` or `|` on Windows');\n            }\n        }\n        try {\n            // note if path does not exist, error is silent\n            yield ioUtil.rm(inputPath, {\n                force: true,\n                maxRetries: 3,\n                recursive: true,\n                retryDelay: 300\n            });\n        }\n        catch (err) {\n            throw new Error(`File was unable to be removed ${err}`);\n        }\n    });\n}\nexports.rmRF = rmRF;\n/**\n * Make a directory.  Creates the full path with folders in between\n * Will throw if it fails\n *\n * @param   fsPath        path to create\n * @returns Promise<void>\n */\nfunction mkdirP(fsPath) {\n    return __awaiter(this, void 0, void 0, function* () {\n        assert_1.ok(fsPath, 'a path argument must be provided');\n        yield ioUtil.mkdir(fsPath, { recursive: true });\n    });\n}\nexports.mkdirP = mkdirP;\n/**\n * Returns path of a tool had the tool actually been invoked.  Resolves via paths.\n * If you check and the tool does not exist, it will throw.\n *\n * @param     tool              name of the tool\n * @param     check             whether to check if tool exists\n * @returns   Promise<string>   path to tool\n */\nfunction which(tool, check) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (!tool) {\n            throw new Error(\"parameter 'tool' is required\");\n        }\n        // recursive when check=true\n        if (check) {\n            const result = yield which(tool, false);\n            if (!result) {\n                if (ioUtil.IS_WINDOWS) {\n                    throw new Error(`Unable to locate executable file: ${tool}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also verify the file has a valid extension for an executable file.`);\n                }\n                else {\n                    throw new Error(`Unable to locate executable file: ${tool}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.`);\n                }\n            }\n            return result;\n        }\n        const matches = yield findInPath(tool);\n        if (matches && matches.length > 0) {\n            return matches[0];\n        }\n        return '';\n    });\n}\nexports.which = which;\n/**\n * Returns a list of all occurrences of the given tool on the system path.\n *\n * @returns   Promise<string[]>  the paths of the tool\n */\nfunction findInPath(tool) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (!tool) {\n            throw new Error(\"parameter 'tool' is required\");\n        }\n        // build the list of extensions to try\n        const extensions = [];\n        if (ioUtil.IS_WINDOWS && process.env['PATHEXT']) {\n            for (const extension of process.env['PATHEXT'].split(path.delimiter)) {\n                if (extension) {\n                    extensions.push(extension);\n                }\n            }\n        }\n        // if it's rooted, return it if exists. otherwise return empty.\n        if (ioUtil.isRooted(tool)) {\n            const filePath = yield ioUtil.tryGetExecutablePath(tool, extensions);\n            if (filePath) {\n                return [filePath];\n            }\n            return [];\n        }\n        // if any path separators, return empty\n        if (tool.includes(path.sep)) {\n            return [];\n        }\n        // build the list of directories\n        //\n        // Note, technically \"where\" checks the current directory on Windows. From a toolkit perspective,\n        // it feels like we should not do this. Checking the current directory seems like more of a use\n        // case of a shell, and the which() function exposed by the toolkit should strive for consistency\n        // across platforms.\n        const directories = [];\n        if (process.env.PATH) {\n            for (const p of process.env.PATH.split(path.delimiter)) {\n                if (p) {\n                    directories.push(p);\n                }\n            }\n        }\n        // find all matches\n        const matches = [];\n        for (const directory of directories) {\n            const filePath = yield ioUtil.tryGetExecutablePath(path.join(directory, tool), extensions);\n            if (filePath) {\n                matches.push(filePath);\n            }\n        }\n        return matches;\n    });\n}\nexports.findInPath = findInPath;\nfunction readCopyOptions(options) {\n    const force = options.force == null ? true : options.force;\n    const recursive = Boolean(options.recursive);\n    const copySourceDirectory = options.copySourceDirectory == null\n        ? true\n        : Boolean(options.copySourceDirectory);\n    return { force, recursive, copySourceDirectory };\n}\nfunction cpDirRecursive(sourceDir, destDir, currentDepth, force) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // Ensure there is not a run away recursive copy\n        if (currentDepth >= 255)\n            return;\n        currentDepth++;\n        yield mkdirP(destDir);\n        const files = yield ioUtil.readdir(sourceDir);\n        for (const fileName of files) {\n            const srcFile = `${sourceDir}/${fileName}`;\n            const destFile = `${destDir}/${fileName}`;\n            const srcFileStat = yield ioUtil.lstat(srcFile);\n            if (srcFileStat.isDirectory()) {\n                // Recurse\n                yield cpDirRecursive(srcFile, destFile, currentDepth, force);\n            }\n            else {\n                yield copyFile(srcFile, destFile, force);\n            }\n        }\n        // Change the mode for the newly created directory\n        yield ioUtil.chmod(destDir, (yield ioUtil.stat(sourceDir)).mode);\n    });\n}\n// Buffered file copy\nfunction copyFile(srcFile, destFile, force) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if ((yield ioUtil.lstat(srcFile)).isSymbolicLink()) {\n            // unlink/re-link it\n            try {\n                yield ioUtil.lstat(destFile);\n                yield ioUtil.unlink(destFile);\n            }\n            catch (e) {\n                // Try to override file permission\n                if (e.code === 'EPERM') {\n                    yield ioUtil.chmod(destFile, '0666');\n                    yield ioUtil.unlink(destFile);\n                }\n                // other errors = it doesn't exist, no work to do\n            }\n            // Copy over symlink\n            const symlinkFull = yield ioUtil.readlink(srcFile);\n            yield ioUtil.symlink(symlinkFull, destFile, ioUtil.IS_WINDOWS ? 'junction' : null);\n        }\n        else if (!(yield ioUtil.exists(destFile)) || force) {\n            yield ioUtil.copyFile(srcFile, destFile);\n        }\n    });\n}\n//# sourceMappingURL=io.js.map","const fetchNode = require('./node-ponyfill')\n\nif (!global.fetch) {\n  const fetch = fetchNode.fetch.bind({})\n\n  global.fetch = fetch\n  global.fetch.polyfill = true\n  global.Response = fetchNode.Response\n  global.Headers = fetchNode.Headers\n  global.Request = fetchNode.Request\n}\n","const nodeFetch = require('node-fetch')\nconst realFetch = nodeFetch.default || nodeFetch\n\nconst fetch = function (url, options) {\n  // Support schemaless URIs on the server for parity with the browser.\n  // Ex: //github.com/ -> https://github.com/\n  if (/^\\/\\//.test(url)) {\n    url = 'https:' + url\n  }\n  return realFetch.call(this, url, options)\n}\n\nfetch.ponyfill = true\n\nmodule.exports = exports = fetch\nexports.fetch = fetch\nexports.Headers = nodeFetch.Headers\nexports.Request = nodeFetch.Request\nexports.Response = nodeFetch.Response\n\n// Needed for TypeScript consumers without esModuleInterop.\nexports.default = fetch\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar Stream = _interopDefault(require('stream'));\nvar http = _interopDefault(require('http'));\nvar Url = _interopDefault(require('url'));\nvar whatwgUrl = _interopDefault(require('whatwg-url'));\nvar https = _interopDefault(require('https'));\nvar zlib = _interopDefault(require('zlib'));\n\n// Based on https://github.com/tmpvar/jsdom/blob/aa85b2abf07766ff7bf5c1f6daafb3726f2f2db5/lib/jsdom/living/blob.js\n\n// fix for \"Readable\" isn't a named export issue\nconst Readable = Stream.Readable;\n\nconst BUFFER = Symbol('buffer');\nconst TYPE = Symbol('type');\n\nclass Blob {\n\tconstructor() {\n\t\tthis[TYPE] = '';\n\n\t\tconst blobParts = arguments[0];\n\t\tconst options = arguments[1];\n\n\t\tconst buffers = [];\n\t\tlet size = 0;\n\n\t\tif (blobParts) {\n\t\t\tconst a = blobParts;\n\t\t\tconst length = Number(a.length);\n\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\tconst element = a[i];\n\t\t\t\tlet buffer;\n\t\t\t\tif (element instanceof Buffer) {\n\t\t\t\t\tbuffer = element;\n\t\t\t\t} else if (ArrayBuffer.isView(element)) {\n\t\t\t\t\tbuffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);\n\t\t\t\t} else if (element instanceof ArrayBuffer) {\n\t\t\t\t\tbuffer = Buffer.from(element);\n\t\t\t\t} else if (element instanceof Blob) {\n\t\t\t\t\tbuffer = element[BUFFER];\n\t\t\t\t} else {\n\t\t\t\t\tbuffer = Buffer.from(typeof element === 'string' ? element : String(element));\n\t\t\t\t}\n\t\t\t\tsize += buffer.length;\n\t\t\t\tbuffers.push(buffer);\n\t\t\t}\n\t\t}\n\n\t\tthis[BUFFER] = Buffer.concat(buffers);\n\n\t\tlet type = options && options.type !== undefined && String(options.type).toLowerCase();\n\t\tif (type && !/[^\\u0020-\\u007E]/.test(type)) {\n\t\t\tthis[TYPE] = type;\n\t\t}\n\t}\n\tget size() {\n\t\treturn this[BUFFER].length;\n\t}\n\tget type() {\n\t\treturn this[TYPE];\n\t}\n\ttext() {\n\t\treturn Promise.resolve(this[BUFFER].toString());\n\t}\n\tarrayBuffer() {\n\t\tconst buf = this[BUFFER];\n\t\tconst ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n\t\treturn Promise.resolve(ab);\n\t}\n\tstream() {\n\t\tconst readable = new Readable();\n\t\treadable._read = function () {};\n\t\treadable.push(this[BUFFER]);\n\t\treadable.push(null);\n\t\treturn readable;\n\t}\n\ttoString() {\n\t\treturn '[object Blob]';\n\t}\n\tslice() {\n\t\tconst size = this.size;\n\n\t\tconst start = arguments[0];\n\t\tconst end = arguments[1];\n\t\tlet relativeStart, relativeEnd;\n\t\tif (start === undefined) {\n\t\t\trelativeStart = 0;\n\t\t} else if (start < 0) {\n\t\t\trelativeStart = Math.max(size + start, 0);\n\t\t} else {\n\t\t\trelativeStart = Math.min(start, size);\n\t\t}\n\t\tif (end === undefined) {\n\t\t\trelativeEnd = size;\n\t\t} else if (end < 0) {\n\t\t\trelativeEnd = Math.max(size + end, 0);\n\t\t} else {\n\t\t\trelativeEnd = Math.min(end, size);\n\t\t}\n\t\tconst span = Math.max(relativeEnd - relativeStart, 0);\n\n\t\tconst buffer = this[BUFFER];\n\t\tconst slicedBuffer = buffer.slice(relativeStart, relativeStart + span);\n\t\tconst blob = new Blob([], { type: arguments[2] });\n\t\tblob[BUFFER] = slicedBuffer;\n\t\treturn blob;\n\t}\n}\n\nObject.defineProperties(Blob.prototype, {\n\tsize: { enumerable: true },\n\ttype: { enumerable: true },\n\tslice: { enumerable: true }\n});\n\nObject.defineProperty(Blob.prototype, Symbol.toStringTag, {\n\tvalue: 'Blob',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\n/**\n * fetch-error.js\n *\n * FetchError interface for operational errors\n */\n\n/**\n * Create FetchError instance\n *\n * @param   String      message      Error message for human\n * @param   String      type         Error type for machine\n * @param   String      systemError  For Node.js system error\n * @return  FetchError\n */\nfunction FetchError(message, type, systemError) {\n  Error.call(this, message);\n\n  this.message = message;\n  this.type = type;\n\n  // when err.type is `system`, err.code contains system error code\n  if (systemError) {\n    this.code = this.errno = systemError.code;\n  }\n\n  // hide custom error implementation details from end-users\n  Error.captureStackTrace(this, this.constructor);\n}\n\nFetchError.prototype = Object.create(Error.prototype);\nFetchError.prototype.constructor = FetchError;\nFetchError.prototype.name = 'FetchError';\n\nlet convert;\ntry {\n\tconvert = require('encoding').convert;\n} catch (e) {}\n\nconst INTERNALS = Symbol('Body internals');\n\n// fix an issue where \"PassThrough\" isn't a named export for node <10\nconst PassThrough = Stream.PassThrough;\n\n/**\n * Body mixin\n *\n * Ref: https://fetch.spec.whatwg.org/#body\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\nfunction Body(body) {\n\tvar _this = this;\n\n\tvar _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n\t    _ref$size = _ref.size;\n\n\tlet size = _ref$size === undefined ? 0 : _ref$size;\n\tvar _ref$timeout = _ref.timeout;\n\tlet timeout = _ref$timeout === undefined ? 0 : _ref$timeout;\n\n\tif (body == null) {\n\t\t// body is undefined or null\n\t\tbody = null;\n\t} else if (isURLSearchParams(body)) {\n\t\t// body is a URLSearchParams\n\t\tbody = Buffer.from(body.toString());\n\t} else if (isBlob(body)) ; else if (Buffer.isBuffer(body)) ; else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {\n\t\t// body is ArrayBuffer\n\t\tbody = Buffer.from(body);\n\t} else if (ArrayBuffer.isView(body)) {\n\t\t// body is ArrayBufferView\n\t\tbody = Buffer.from(body.buffer, body.byteOffset, body.byteLength);\n\t} else if (body instanceof Stream) ; else {\n\t\t// none of the above\n\t\t// coerce to string then buffer\n\t\tbody = Buffer.from(String(body));\n\t}\n\tthis[INTERNALS] = {\n\t\tbody,\n\t\tdisturbed: false,\n\t\terror: null\n\t};\n\tthis.size = size;\n\tthis.timeout = timeout;\n\n\tif (body instanceof Stream) {\n\t\tbody.on('error', function (err) {\n\t\t\tconst error = err.name === 'AbortError' ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, 'system', err);\n\t\t\t_this[INTERNALS].error = error;\n\t\t});\n\t}\n}\n\nBody.prototype = {\n\tget body() {\n\t\treturn this[INTERNALS].body;\n\t},\n\n\tget bodyUsed() {\n\t\treturn this[INTERNALS].disturbed;\n\t},\n\n\t/**\n  * Decode response as ArrayBuffer\n  *\n  * @return  Promise\n  */\n\tarrayBuffer() {\n\t\treturn consumeBody.call(this).then(function (buf) {\n\t\t\treturn buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n\t\t});\n\t},\n\n\t/**\n  * Return raw response as Blob\n  *\n  * @return Promise\n  */\n\tblob() {\n\t\tlet ct = this.headers && this.headers.get('content-type') || '';\n\t\treturn consumeBody.call(this).then(function (buf) {\n\t\t\treturn Object.assign(\n\t\t\t// Prevent copying\n\t\t\tnew Blob([], {\n\t\t\t\ttype: ct.toLowerCase()\n\t\t\t}), {\n\t\t\t\t[BUFFER]: buf\n\t\t\t});\n\t\t});\n\t},\n\n\t/**\n  * Decode response as json\n  *\n  * @return  Promise\n  */\n\tjson() {\n\t\tvar _this2 = this;\n\n\t\treturn consumeBody.call(this).then(function (buffer) {\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(buffer.toString());\n\t\t\t} catch (err) {\n\t\t\t\treturn Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, 'invalid-json'));\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n  * Decode response as text\n  *\n  * @return  Promise\n  */\n\ttext() {\n\t\treturn consumeBody.call(this).then(function (buffer) {\n\t\t\treturn buffer.toString();\n\t\t});\n\t},\n\n\t/**\n  * Decode response as buffer (non-spec api)\n  *\n  * @return  Promise\n  */\n\tbuffer() {\n\t\treturn consumeBody.call(this);\n\t},\n\n\t/**\n  * Decode response as text, while automatically detecting the encoding and\n  * trying to decode to UTF-8 (non-spec api)\n  *\n  * @return  Promise\n  */\n\ttextConverted() {\n\t\tvar _this3 = this;\n\n\t\treturn consumeBody.call(this).then(function (buffer) {\n\t\t\treturn convertBody(buffer, _this3.headers);\n\t\t});\n\t}\n};\n\n// In browsers, all properties are enumerable.\nObject.defineProperties(Body.prototype, {\n\tbody: { enumerable: true },\n\tbodyUsed: { enumerable: true },\n\tarrayBuffer: { enumerable: true },\n\tblob: { enumerable: true },\n\tjson: { enumerable: true },\n\ttext: { enumerable: true }\n});\n\nBody.mixIn = function (proto) {\n\tfor (const name of Object.getOwnPropertyNames(Body.prototype)) {\n\t\t// istanbul ignore else: future proof\n\t\tif (!(name in proto)) {\n\t\t\tconst desc = Object.getOwnPropertyDescriptor(Body.prototype, name);\n\t\t\tObject.defineProperty(proto, name, desc);\n\t\t}\n\t}\n};\n\n/**\n * Consume and convert an entire Body to a Buffer.\n *\n * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body\n *\n * @return  Promise\n */\nfunction consumeBody() {\n\tvar _this4 = this;\n\n\tif (this[INTERNALS].disturbed) {\n\t\treturn Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));\n\t}\n\n\tthis[INTERNALS].disturbed = true;\n\n\tif (this[INTERNALS].error) {\n\t\treturn Body.Promise.reject(this[INTERNALS].error);\n\t}\n\n\tlet body = this.body;\n\n\t// body is null\n\tif (body === null) {\n\t\treturn Body.Promise.resolve(Buffer.alloc(0));\n\t}\n\n\t// body is blob\n\tif (isBlob(body)) {\n\t\tbody = body.stream();\n\t}\n\n\t// body is buffer\n\tif (Buffer.isBuffer(body)) {\n\t\treturn Body.Promise.resolve(body);\n\t}\n\n\t// istanbul ignore if: should never happen\n\tif (!(body instanceof Stream)) {\n\t\treturn Body.Promise.resolve(Buffer.alloc(0));\n\t}\n\n\t// body is stream\n\t// get ready to actually consume the body\n\tlet accum = [];\n\tlet accumBytes = 0;\n\tlet abort = false;\n\n\treturn new Body.Promise(function (resolve, reject) {\n\t\tlet resTimeout;\n\n\t\t// allow timeout on slow response body\n\t\tif (_this4.timeout) {\n\t\t\tresTimeout = setTimeout(function () {\n\t\t\t\tabort = true;\n\t\t\t\treject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, 'body-timeout'));\n\t\t\t}, _this4.timeout);\n\t\t}\n\n\t\t// handle stream errors\n\t\tbody.on('error', function (err) {\n\t\t\tif (err.name === 'AbortError') {\n\t\t\t\t// if the request was aborted, reject with this Error\n\t\t\t\tabort = true;\n\t\t\t\treject(err);\n\t\t\t} else {\n\t\t\t\t// other errors, such as incorrect content-encoding\n\t\t\t\treject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, 'system', err));\n\t\t\t}\n\t\t});\n\n\t\tbody.on('data', function (chunk) {\n\t\t\tif (abort || chunk === null) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (_this4.size && accumBytes + chunk.length > _this4.size) {\n\t\t\t\tabort = true;\n\t\t\t\treject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, 'max-size'));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\taccumBytes += chunk.length;\n\t\t\taccum.push(chunk);\n\t\t});\n\n\t\tbody.on('end', function () {\n\t\t\tif (abort) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tclearTimeout(resTimeout);\n\n\t\t\ttry {\n\t\t\t\tresolve(Buffer.concat(accum, accumBytes));\n\t\t\t} catch (err) {\n\t\t\t\t// handle streams that have accumulated too much data (issue #414)\n\t\t\t\treject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, 'system', err));\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Detect buffer encoding and convert to target encoding\n * ref: http://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#determining-the-character-encoding\n *\n * @param   Buffer  buffer    Incoming buffer\n * @param   String  encoding  Target encoding\n * @return  String\n */\nfunction convertBody(buffer, headers) {\n\tif (typeof convert !== 'function') {\n\t\tthrow new Error('The package `encoding` must be installed to use the textConverted() function');\n\t}\n\n\tconst ct = headers.get('content-type');\n\tlet charset = 'utf-8';\n\tlet res, str;\n\n\t// header\n\tif (ct) {\n\t\tres = /charset=([^;]*)/i.exec(ct);\n\t}\n\n\t// no charset in content type, peek at response body for at most 1024 bytes\n\tstr = buffer.slice(0, 1024).toString();\n\n\t// html5\n\tif (!res && str) {\n\t\tres = /<meta.+?charset=(['\"])(.+?)\\1/i.exec(str);\n\t}\n\n\t// html4\n\tif (!res && str) {\n\t\tres = /<meta[\\s]+?http-equiv=(['\"])content-type\\1[\\s]+?content=(['\"])(.+?)\\2/i.exec(str);\n\t\tif (!res) {\n\t\t\tres = /<meta[\\s]+?content=(['\"])(.+?)\\1[\\s]+?http-equiv=(['\"])content-type\\3/i.exec(str);\n\t\t\tif (res) {\n\t\t\t\tres.pop(); // drop last quote\n\t\t\t}\n\t\t}\n\n\t\tif (res) {\n\t\t\tres = /charset=(.*)/i.exec(res.pop());\n\t\t}\n\t}\n\n\t// xml\n\tif (!res && str) {\n\t\tres = /<\\?xml.+?encoding=(['\"])(.+?)\\1/i.exec(str);\n\t}\n\n\t// found charset\n\tif (res) {\n\t\tcharset = res.pop();\n\n\t\t// prevent decode issues when sites use incorrect encoding\n\t\t// ref: https://hsivonen.fi/encoding-menu/\n\t\tif (charset === 'gb2312' || charset === 'gbk') {\n\t\t\tcharset = 'gb18030';\n\t\t}\n\t}\n\n\t// turn raw buffers into a single utf-8 buffer\n\treturn convert(buffer, 'UTF-8', charset).toString();\n}\n\n/**\n * Detect a URLSearchParams object\n * ref: https://github.com/bitinn/node-fetch/issues/296#issuecomment-307598143\n *\n * @param   Object  obj     Object to detect by type or brand\n * @return  String\n */\nfunction isURLSearchParams(obj) {\n\t// Duck-typing as a necessary condition.\n\tif (typeof obj !== 'object' || typeof obj.append !== 'function' || typeof obj.delete !== 'function' || typeof obj.get !== 'function' || typeof obj.getAll !== 'function' || typeof obj.has !== 'function' || typeof obj.set !== 'function') {\n\t\treturn false;\n\t}\n\n\t// Brand-checking and more duck-typing as optional condition.\n\treturn obj.constructor.name === 'URLSearchParams' || Object.prototype.toString.call(obj) === '[object URLSearchParams]' || typeof obj.sort === 'function';\n}\n\n/**\n * Check if `obj` is a W3C `Blob` object (which `File` inherits from)\n * @param  {*} obj\n * @return {boolean}\n */\nfunction isBlob(obj) {\n\treturn typeof obj === 'object' && typeof obj.arrayBuffer === 'function' && typeof obj.type === 'string' && typeof obj.stream === 'function' && typeof obj.constructor === 'function' && typeof obj.constructor.name === 'string' && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);\n}\n\n/**\n * Clone body given Res/Req instance\n *\n * @param   Mixed  instance  Response or Request instance\n * @return  Mixed\n */\nfunction clone(instance) {\n\tlet p1, p2;\n\tlet body = instance.body;\n\n\t// don't allow cloning a used body\n\tif (instance.bodyUsed) {\n\t\tthrow new Error('cannot clone body after it is used');\n\t}\n\n\t// check that body is a stream and not form-data object\n\t// note: we can't clone the form-data object without having it as a dependency\n\tif (body instanceof Stream && typeof body.getBoundary !== 'function') {\n\t\t// tee instance body\n\t\tp1 = new PassThrough();\n\t\tp2 = new PassThrough();\n\t\tbody.pipe(p1);\n\t\tbody.pipe(p2);\n\t\t// set instance body to teed body and return the other teed body\n\t\tinstance[INTERNALS].body = p1;\n\t\tbody = p2;\n\t}\n\n\treturn body;\n}\n\n/**\n * Performs the operation \"extract a `Content-Type` value from |object|\" as\n * specified in the specification:\n * https://fetch.spec.whatwg.org/#concept-bodyinit-extract\n *\n * This function assumes that instance.body is present.\n *\n * @param   Mixed  instance  Any options.body input\n */\nfunction extractContentType(body) {\n\tif (body === null) {\n\t\t// body is null\n\t\treturn null;\n\t} else if (typeof body === 'string') {\n\t\t// body is string\n\t\treturn 'text/plain;charset=UTF-8';\n\t} else if (isURLSearchParams(body)) {\n\t\t// body is a URLSearchParams\n\t\treturn 'application/x-www-form-urlencoded;charset=UTF-8';\n\t} else if (isBlob(body)) {\n\t\t// body is blob\n\t\treturn body.type || null;\n\t} else if (Buffer.isBuffer(body)) {\n\t\t// body is buffer\n\t\treturn null;\n\t} else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {\n\t\t// body is ArrayBuffer\n\t\treturn null;\n\t} else if (ArrayBuffer.isView(body)) {\n\t\t// body is ArrayBufferView\n\t\treturn null;\n\t} else if (typeof body.getBoundary === 'function') {\n\t\t// detect form data input from form-data module\n\t\treturn `multipart/form-data;boundary=${body.getBoundary()}`;\n\t} else if (body instanceof Stream) {\n\t\t// body is stream\n\t\t// can't really do much about this\n\t\treturn null;\n\t} else {\n\t\t// Body constructor defaults other things to string\n\t\treturn 'text/plain;charset=UTF-8';\n\t}\n}\n\n/**\n * The Fetch Standard treats this as if \"total bytes\" is a property on the body.\n * For us, we have to explicitly get it with a function.\n *\n * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes\n *\n * @param   Body    instance   Instance of Body\n * @return  Number?            Number of bytes, or null if not possible\n */\nfunction getTotalBytes(instance) {\n\tconst body = instance.body;\n\n\n\tif (body === null) {\n\t\t// body is null\n\t\treturn 0;\n\t} else if (isBlob(body)) {\n\t\treturn body.size;\n\t} else if (Buffer.isBuffer(body)) {\n\t\t// body is buffer\n\t\treturn body.length;\n\t} else if (body && typeof body.getLengthSync === 'function') {\n\t\t// detect form data input from form-data module\n\t\tif (body._lengthRetrievers && body._lengthRetrievers.length == 0 || // 1.x\n\t\tbody.hasKnownLength && body.hasKnownLength()) {\n\t\t\t// 2.x\n\t\t\treturn body.getLengthSync();\n\t\t}\n\t\treturn null;\n\t} else {\n\t\t// body is stream\n\t\treturn null;\n\t}\n}\n\n/**\n * Write a Body to a Node.js WritableStream (e.g. http.Request) object.\n *\n * @param   Body    instance   Instance of Body\n * @return  Void\n */\nfunction writeToStream(dest, instance) {\n\tconst body = instance.body;\n\n\n\tif (body === null) {\n\t\t// body is null\n\t\tdest.end();\n\t} else if (isBlob(body)) {\n\t\tbody.stream().pipe(dest);\n\t} else if (Buffer.isBuffer(body)) {\n\t\t// body is buffer\n\t\tdest.write(body);\n\t\tdest.end();\n\t} else {\n\t\t// body is stream\n\t\tbody.pipe(dest);\n\t}\n}\n\n// expose Promise\nBody.Promise = global.Promise;\n\n/**\n * headers.js\n *\n * Headers class offers convenient helpers\n */\n\nconst invalidTokenRegex = /[^\\^_`a-zA-Z\\-0-9!#$%&'*+.|~]/;\nconst invalidHeaderCharRegex = /[^\\t\\x20-\\x7e\\x80-\\xff]/;\n\nfunction validateName(name) {\n\tname = `${name}`;\n\tif (invalidTokenRegex.test(name) || name === '') {\n\t\tthrow new TypeError(`${name} is not a legal HTTP header name`);\n\t}\n}\n\nfunction validateValue(value) {\n\tvalue = `${value}`;\n\tif (invalidHeaderCharRegex.test(value)) {\n\t\tthrow new TypeError(`${value} is not a legal HTTP header value`);\n\t}\n}\n\n/**\n * Find the key in the map object given a header name.\n *\n * Returns undefined if not found.\n *\n * @param   String  name  Header name\n * @return  String|Undefined\n */\nfunction find(map, name) {\n\tname = name.toLowerCase();\n\tfor (const key in map) {\n\t\tif (key.toLowerCase() === name) {\n\t\t\treturn key;\n\t\t}\n\t}\n\treturn undefined;\n}\n\nconst MAP = Symbol('map');\nclass Headers {\n\t/**\n  * Headers class\n  *\n  * @param   Object  headers  Response headers\n  * @return  Void\n  */\n\tconstructor() {\n\t\tlet init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n\n\t\tthis[MAP] = Object.create(null);\n\n\t\tif (init instanceof Headers) {\n\t\t\tconst rawHeaders = init.raw();\n\t\t\tconst headerNames = Object.keys(rawHeaders);\n\n\t\t\tfor (const headerName of headerNames) {\n\t\t\t\tfor (const value of rawHeaders[headerName]) {\n\t\t\t\t\tthis.append(headerName, value);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// We don't worry about converting prop to ByteString here as append()\n\t\t// will handle it.\n\t\tif (init == null) ; else if (typeof init === 'object') {\n\t\t\tconst method = init[Symbol.iterator];\n\t\t\tif (method != null) {\n\t\t\t\tif (typeof method !== 'function') {\n\t\t\t\t\tthrow new TypeError('Header pairs must be iterable');\n\t\t\t\t}\n\n\t\t\t\t// sequence<sequence<ByteString>>\n\t\t\t\t// Note: per spec we have to first exhaust the lists then process them\n\t\t\t\tconst pairs = [];\n\t\t\t\tfor (const pair of init) {\n\t\t\t\t\tif (typeof pair !== 'object' || typeof pair[Symbol.iterator] !== 'function') {\n\t\t\t\t\t\tthrow new TypeError('Each header pair must be iterable');\n\t\t\t\t\t}\n\t\t\t\t\tpairs.push(Array.from(pair));\n\t\t\t\t}\n\n\t\t\t\tfor (const pair of pairs) {\n\t\t\t\t\tif (pair.length !== 2) {\n\t\t\t\t\t\tthrow new TypeError('Each header pair must be a name/value tuple');\n\t\t\t\t\t}\n\t\t\t\t\tthis.append(pair[0], pair[1]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// record<ByteString, ByteString>\n\t\t\t\tfor (const key of Object.keys(init)) {\n\t\t\t\t\tconst value = init[key];\n\t\t\t\t\tthis.append(key, value);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new TypeError('Provided initializer must be an object');\n\t\t}\n\t}\n\n\t/**\n  * Return combined header value given name\n  *\n  * @param   String  name  Header name\n  * @return  Mixed\n  */\n\tget(name) {\n\t\tname = `${name}`;\n\t\tvalidateName(name);\n\t\tconst key = find(this[MAP], name);\n\t\tif (key === undefined) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this[MAP][key].join(', ');\n\t}\n\n\t/**\n  * Iterate over all headers\n  *\n  * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)\n  * @param   Boolean   thisArg   `this` context for callback function\n  * @return  Void\n  */\n\tforEach(callback) {\n\t\tlet thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n\n\t\tlet pairs = getHeaders(this);\n\t\tlet i = 0;\n\t\twhile (i < pairs.length) {\n\t\t\tvar _pairs$i = pairs[i];\n\t\t\tconst name = _pairs$i[0],\n\t\t\t      value = _pairs$i[1];\n\n\t\t\tcallback.call(thisArg, value, name, this);\n\t\t\tpairs = getHeaders(this);\n\t\t\ti++;\n\t\t}\n\t}\n\n\t/**\n  * Overwrite header values given name\n  *\n  * @param   String  name   Header name\n  * @param   String  value  Header value\n  * @return  Void\n  */\n\tset(name, value) {\n\t\tname = `${name}`;\n\t\tvalue = `${value}`;\n\t\tvalidateName(name);\n\t\tvalidateValue(value);\n\t\tconst key = find(this[MAP], name);\n\t\tthis[MAP][key !== undefined ? key : name] = [value];\n\t}\n\n\t/**\n  * Append a value onto existing header\n  *\n  * @param   String  name   Header name\n  * @param   String  value  Header value\n  * @return  Void\n  */\n\tappend(name, value) {\n\t\tname = `${name}`;\n\t\tvalue = `${value}`;\n\t\tvalidateName(name);\n\t\tvalidateValue(value);\n\t\tconst key = find(this[MAP], name);\n\t\tif (key !== undefined) {\n\t\t\tthis[MAP][key].push(value);\n\t\t} else {\n\t\t\tthis[MAP][name] = [value];\n\t\t}\n\t}\n\n\t/**\n  * Check for header name existence\n  *\n  * @param   String   name  Header name\n  * @return  Boolean\n  */\n\thas(name) {\n\t\tname = `${name}`;\n\t\tvalidateName(name);\n\t\treturn find(this[MAP], name) !== undefined;\n\t}\n\n\t/**\n  * Delete all header values given name\n  *\n  * @param   String  name  Header name\n  * @return  Void\n  */\n\tdelete(name) {\n\t\tname = `${name}`;\n\t\tvalidateName(name);\n\t\tconst key = find(this[MAP], name);\n\t\tif (key !== undefined) {\n\t\t\tdelete this[MAP][key];\n\t\t}\n\t}\n\n\t/**\n  * Return raw headers (non-spec api)\n  *\n  * @return  Object\n  */\n\traw() {\n\t\treturn this[MAP];\n\t}\n\n\t/**\n  * Get an iterator on keys.\n  *\n  * @return  Iterator\n  */\n\tkeys() {\n\t\treturn createHeadersIterator(this, 'key');\n\t}\n\n\t/**\n  * Get an iterator on values.\n  *\n  * @return  Iterator\n  */\n\tvalues() {\n\t\treturn createHeadersIterator(this, 'value');\n\t}\n\n\t/**\n  * Get an iterator on entries.\n  *\n  * This is the default iterator of the Headers object.\n  *\n  * @return  Iterator\n  */\n\t[Symbol.iterator]() {\n\t\treturn createHeadersIterator(this, 'key+value');\n\t}\n}\nHeaders.prototype.entries = Headers.prototype[Symbol.iterator];\n\nObject.defineProperty(Headers.prototype, Symbol.toStringTag, {\n\tvalue: 'Headers',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\nObject.defineProperties(Headers.prototype, {\n\tget: { enumerable: true },\n\tforEach: { enumerable: true },\n\tset: { enumerable: true },\n\tappend: { enumerable: true },\n\thas: { enumerable: true },\n\tdelete: { enumerable: true },\n\tkeys: { enumerable: true },\n\tvalues: { enumerable: true },\n\tentries: { enumerable: true }\n});\n\nfunction getHeaders(headers) {\n\tlet kind = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'key+value';\n\n\tconst keys = Object.keys(headers[MAP]).sort();\n\treturn keys.map(kind === 'key' ? function (k) {\n\t\treturn k.toLowerCase();\n\t} : kind === 'value' ? function (k) {\n\t\treturn headers[MAP][k].join(', ');\n\t} : function (k) {\n\t\treturn [k.toLowerCase(), headers[MAP][k].join(', ')];\n\t});\n}\n\nconst INTERNAL = Symbol('internal');\n\nfunction createHeadersIterator(target, kind) {\n\tconst iterator = Object.create(HeadersIteratorPrototype);\n\titerator[INTERNAL] = {\n\t\ttarget,\n\t\tkind,\n\t\tindex: 0\n\t};\n\treturn iterator;\n}\n\nconst HeadersIteratorPrototype = Object.setPrototypeOf({\n\tnext() {\n\t\t// istanbul ignore if\n\t\tif (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {\n\t\t\tthrow new TypeError('Value of `this` is not a HeadersIterator');\n\t\t}\n\n\t\tvar _INTERNAL = this[INTERNAL];\n\t\tconst target = _INTERNAL.target,\n\t\t      kind = _INTERNAL.kind,\n\t\t      index = _INTERNAL.index;\n\n\t\tconst values = getHeaders(target, kind);\n\t\tconst len = values.length;\n\t\tif (index >= len) {\n\t\t\treturn {\n\t\t\t\tvalue: undefined,\n\t\t\t\tdone: true\n\t\t\t};\n\t\t}\n\n\t\tthis[INTERNAL].index = index + 1;\n\n\t\treturn {\n\t\t\tvalue: values[index],\n\t\t\tdone: false\n\t\t};\n\t}\n}, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));\n\nObject.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {\n\tvalue: 'HeadersIterator',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\n/**\n * Export the Headers object in a form that Node.js can consume.\n *\n * @param   Headers  headers\n * @return  Object\n */\nfunction exportNodeCompatibleHeaders(headers) {\n\tconst obj = Object.assign({ __proto__: null }, headers[MAP]);\n\n\t// http.request() only supports string as Host header. This hack makes\n\t// specifying custom Host header possible.\n\tconst hostHeaderKey = find(headers[MAP], 'Host');\n\tif (hostHeaderKey !== undefined) {\n\t\tobj[hostHeaderKey] = obj[hostHeaderKey][0];\n\t}\n\n\treturn obj;\n}\n\n/**\n * Create a Headers object from an object of headers, ignoring those that do\n * not conform to HTTP grammar productions.\n *\n * @param   Object  obj  Object of headers\n * @return  Headers\n */\nfunction createHeadersLenient(obj) {\n\tconst headers = new Headers();\n\tfor (const name of Object.keys(obj)) {\n\t\tif (invalidTokenRegex.test(name)) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (Array.isArray(obj[name])) {\n\t\t\tfor (const val of obj[name]) {\n\t\t\t\tif (invalidHeaderCharRegex.test(val)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (headers[MAP][name] === undefined) {\n\t\t\t\t\theaders[MAP][name] = [val];\n\t\t\t\t} else {\n\t\t\t\t\theaders[MAP][name].push(val);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!invalidHeaderCharRegex.test(obj[name])) {\n\t\t\theaders[MAP][name] = [obj[name]];\n\t\t}\n\t}\n\treturn headers;\n}\n\nconst INTERNALS$1 = Symbol('Response internals');\n\n// fix an issue where \"STATUS_CODES\" aren't a named export for node <10\nconst STATUS_CODES = http.STATUS_CODES;\n\n/**\n * Response class\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\nclass Response {\n\tconstructor() {\n\t\tlet body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\t\tlet opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\t\tBody.call(this, body, opts);\n\n\t\tconst status = opts.status || 200;\n\t\tconst headers = new Headers(opts.headers);\n\n\t\tif (body != null && !headers.has('Content-Type')) {\n\t\t\tconst contentType = extractContentType(body);\n\t\t\tif (contentType) {\n\t\t\t\theaders.append('Content-Type', contentType);\n\t\t\t}\n\t\t}\n\n\t\tthis[INTERNALS$1] = {\n\t\t\turl: opts.url,\n\t\t\tstatus,\n\t\t\tstatusText: opts.statusText || STATUS_CODES[status],\n\t\t\theaders,\n\t\t\tcounter: opts.counter\n\t\t};\n\t}\n\n\tget url() {\n\t\treturn this[INTERNALS$1].url || '';\n\t}\n\n\tget status() {\n\t\treturn this[INTERNALS$1].status;\n\t}\n\n\t/**\n  * Convenience property representing if the request ended normally\n  */\n\tget ok() {\n\t\treturn this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;\n\t}\n\n\tget redirected() {\n\t\treturn this[INTERNALS$1].counter > 0;\n\t}\n\n\tget statusText() {\n\t\treturn this[INTERNALS$1].statusText;\n\t}\n\n\tget headers() {\n\t\treturn this[INTERNALS$1].headers;\n\t}\n\n\t/**\n  * Clone this response\n  *\n  * @return  Response\n  */\n\tclone() {\n\t\treturn new Response(clone(this), {\n\t\t\turl: this.url,\n\t\t\tstatus: this.status,\n\t\t\tstatusText: this.statusText,\n\t\t\theaders: this.headers,\n\t\t\tok: this.ok,\n\t\t\tredirected: this.redirected\n\t\t});\n\t}\n}\n\nBody.mixIn(Response.prototype);\n\nObject.defineProperties(Response.prototype, {\n\turl: { enumerable: true },\n\tstatus: { enumerable: true },\n\tok: { enumerable: true },\n\tredirected: { enumerable: true },\n\tstatusText: { enumerable: true },\n\theaders: { enumerable: true },\n\tclone: { enumerable: true }\n});\n\nObject.defineProperty(Response.prototype, Symbol.toStringTag, {\n\tvalue: 'Response',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\nconst INTERNALS$2 = Symbol('Request internals');\nconst URL = Url.URL || whatwgUrl.URL;\n\n// fix an issue where \"format\", \"parse\" aren't a named export for node <10\nconst parse_url = Url.parse;\nconst format_url = Url.format;\n\n/**\n * Wrapper around `new URL` to handle arbitrary URLs\n *\n * @param  {string} urlStr\n * @return {void}\n */\nfunction parseURL(urlStr) {\n\t/*\n \tCheck whether the URL is absolute or not\n \t\tScheme: https://tools.ietf.org/html/rfc3986#section-3.1\n \tAbsolute URL: https://tools.ietf.org/html/rfc3986#section-4.3\n */\n\tif (/^[a-zA-Z][a-zA-Z\\d+\\-.]*:/.exec(urlStr)) {\n\t\turlStr = new URL(urlStr).toString();\n\t}\n\n\t// Fallback to old implementation for arbitrary URLs\n\treturn parse_url(urlStr);\n}\n\nconst streamDestructionSupported = 'destroy' in Stream.Readable.prototype;\n\n/**\n * Check if a value is an instance of Request.\n *\n * @param   Mixed   input\n * @return  Boolean\n */\nfunction isRequest(input) {\n\treturn typeof input === 'object' && typeof input[INTERNALS$2] === 'object';\n}\n\nfunction isAbortSignal(signal) {\n\tconst proto = signal && typeof signal === 'object' && Object.getPrototypeOf(signal);\n\treturn !!(proto && proto.constructor.name === 'AbortSignal');\n}\n\n/**\n * Request class\n *\n * @param   Mixed   input  Url or Request instance\n * @param   Object  init   Custom options\n * @return  Void\n */\nclass Request {\n\tconstructor(input) {\n\t\tlet init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\t\tlet parsedURL;\n\n\t\t// normalize input\n\t\tif (!isRequest(input)) {\n\t\t\tif (input && input.href) {\n\t\t\t\t// in order to support Node.js' Url objects; though WHATWG's URL objects\n\t\t\t\t// will fall into this branch also (since their `toString()` will return\n\t\t\t\t// `href` property anyway)\n\t\t\t\tparsedURL = parseURL(input.href);\n\t\t\t} else {\n\t\t\t\t// coerce input to a string before attempting to parse\n\t\t\t\tparsedURL = parseURL(`${input}`);\n\t\t\t}\n\t\t\tinput = {};\n\t\t} else {\n\t\t\tparsedURL = parseURL(input.url);\n\t\t}\n\n\t\tlet method = init.method || input.method || 'GET';\n\t\tmethod = method.toUpperCase();\n\n\t\tif ((init.body != null || isRequest(input) && input.body !== null) && (method === 'GET' || method === 'HEAD')) {\n\t\t\tthrow new TypeError('Request with GET/HEAD method cannot have body');\n\t\t}\n\n\t\tlet inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;\n\n\t\tBody.call(this, inputBody, {\n\t\t\ttimeout: init.timeout || input.timeout || 0,\n\t\t\tsize: init.size || input.size || 0\n\t\t});\n\n\t\tconst headers = new Headers(init.headers || input.headers || {});\n\n\t\tif (inputBody != null && !headers.has('Content-Type')) {\n\t\t\tconst contentType = extractContentType(inputBody);\n\t\t\tif (contentType) {\n\t\t\t\theaders.append('Content-Type', contentType);\n\t\t\t}\n\t\t}\n\n\t\tlet signal = isRequest(input) ? input.signal : null;\n\t\tif ('signal' in init) signal = init.signal;\n\n\t\tif (signal != null && !isAbortSignal(signal)) {\n\t\t\tthrow new TypeError('Expected signal to be an instanceof AbortSignal');\n\t\t}\n\n\t\tthis[INTERNALS$2] = {\n\t\t\tmethod,\n\t\t\tredirect: init.redirect || input.redirect || 'follow',\n\t\t\theaders,\n\t\t\tparsedURL,\n\t\t\tsignal\n\t\t};\n\n\t\t// node-fetch-only options\n\t\tthis.follow = init.follow !== undefined ? init.follow : input.follow !== undefined ? input.follow : 20;\n\t\tthis.compress = init.compress !== undefined ? init.compress : input.compress !== undefined ? input.compress : true;\n\t\tthis.counter = init.counter || input.counter || 0;\n\t\tthis.agent = init.agent || input.agent;\n\t}\n\n\tget method() {\n\t\treturn this[INTERNALS$2].method;\n\t}\n\n\tget url() {\n\t\treturn format_url(this[INTERNALS$2].parsedURL);\n\t}\n\n\tget headers() {\n\t\treturn this[INTERNALS$2].headers;\n\t}\n\n\tget redirect() {\n\t\treturn this[INTERNALS$2].redirect;\n\t}\n\n\tget signal() {\n\t\treturn this[INTERNALS$2].signal;\n\t}\n\n\t/**\n  * Clone this request\n  *\n  * @return  Request\n  */\n\tclone() {\n\t\treturn new Request(this);\n\t}\n}\n\nBody.mixIn(Request.prototype);\n\nObject.defineProperty(Request.prototype, Symbol.toStringTag, {\n\tvalue: 'Request',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\nObject.defineProperties(Request.prototype, {\n\tmethod: { enumerable: true },\n\turl: { enumerable: true },\n\theaders: { enumerable: true },\n\tredirect: { enumerable: true },\n\tclone: { enumerable: true },\n\tsignal: { enumerable: true }\n});\n\n/**\n * Convert a Request to Node.js http request options.\n *\n * @param   Request  A Request instance\n * @return  Object   The options object to be passed to http.request\n */\nfunction getNodeRequestOptions(request) {\n\tconst parsedURL = request[INTERNALS$2].parsedURL;\n\tconst headers = new Headers(request[INTERNALS$2].headers);\n\n\t// fetch step 1.3\n\tif (!headers.has('Accept')) {\n\t\theaders.set('Accept', '*/*');\n\t}\n\n\t// Basic fetch\n\tif (!parsedURL.protocol || !parsedURL.hostname) {\n\t\tthrow new TypeError('Only absolute URLs are supported');\n\t}\n\n\tif (!/^https?:$/.test(parsedURL.protocol)) {\n\t\tthrow new TypeError('Only HTTP(S) protocols are supported');\n\t}\n\n\tif (request.signal && request.body instanceof Stream.Readable && !streamDestructionSupported) {\n\t\tthrow new Error('Cancellation of streamed requests with AbortSignal is not supported in node < 8');\n\t}\n\n\t// HTTP-network-or-cache fetch steps 2.4-2.7\n\tlet contentLengthValue = null;\n\tif (request.body == null && /^(POST|PUT)$/i.test(request.method)) {\n\t\tcontentLengthValue = '0';\n\t}\n\tif (request.body != null) {\n\t\tconst totalBytes = getTotalBytes(request);\n\t\tif (typeof totalBytes === 'number') {\n\t\t\tcontentLengthValue = String(totalBytes);\n\t\t}\n\t}\n\tif (contentLengthValue) {\n\t\theaders.set('Content-Length', contentLengthValue);\n\t}\n\n\t// HTTP-network-or-cache fetch step 2.11\n\tif (!headers.has('User-Agent')) {\n\t\theaders.set('User-Agent', 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)');\n\t}\n\n\t// HTTP-network-or-cache fetch step 2.15\n\tif (request.compress && !headers.has('Accept-Encoding')) {\n\t\theaders.set('Accept-Encoding', 'gzip,deflate');\n\t}\n\n\tlet agent = request.agent;\n\tif (typeof agent === 'function') {\n\t\tagent = agent(parsedURL);\n\t}\n\n\tif (!headers.has('Connection') && !agent) {\n\t\theaders.set('Connection', 'close');\n\t}\n\n\t// HTTP-network fetch step 4.2\n\t// chunked encoding is handled by Node.js\n\n\treturn Object.assign({}, parsedURL, {\n\t\tmethod: request.method,\n\t\theaders: exportNodeCompatibleHeaders(headers),\n\t\tagent\n\t});\n}\n\n/**\n * abort-error.js\n *\n * AbortError interface for cancelled requests\n */\n\n/**\n * Create AbortError instance\n *\n * @param   String      message      Error message for human\n * @return  AbortError\n */\nfunction AbortError(message) {\n  Error.call(this, message);\n\n  this.type = 'aborted';\n  this.message = message;\n\n  // hide custom error implementation details from end-users\n  Error.captureStackTrace(this, this.constructor);\n}\n\nAbortError.prototype = Object.create(Error.prototype);\nAbortError.prototype.constructor = AbortError;\nAbortError.prototype.name = 'AbortError';\n\nconst URL$1 = Url.URL || whatwgUrl.URL;\n\n// fix an issue where \"PassThrough\", \"resolve\" aren't a named export for node <10\nconst PassThrough$1 = Stream.PassThrough;\n\nconst isDomainOrSubdomain = function isDomainOrSubdomain(destination, original) {\n\tconst orig = new URL$1(original).hostname;\n\tconst dest = new URL$1(destination).hostname;\n\n\treturn orig === dest || orig[orig.length - dest.length - 1] === '.' && orig.endsWith(dest);\n};\n\n/**\n * isSameProtocol reports whether the two provided URLs use the same protocol.\n *\n * Both domains must already be in canonical form.\n * @param {string|URL} original\n * @param {string|URL} destination\n */\nconst isSameProtocol = function isSameProtocol(destination, original) {\n\tconst orig = new URL$1(original).protocol;\n\tconst dest = new URL$1(destination).protocol;\n\n\treturn orig === dest;\n};\n\n/**\n * Fetch function\n *\n * @param   Mixed    url   Absolute url or Request instance\n * @param   Object   opts  Fetch options\n * @return  Promise\n */\nfunction fetch(url, opts) {\n\n\t// allow custom promise\n\tif (!fetch.Promise) {\n\t\tthrow new Error('native promise missing, set fetch.Promise to your favorite alternative');\n\t}\n\n\tBody.Promise = fetch.Promise;\n\n\t// wrap http.request into fetch\n\treturn new fetch.Promise(function (resolve, reject) {\n\t\t// build request object\n\t\tconst request = new Request(url, opts);\n\t\tconst options = getNodeRequestOptions(request);\n\n\t\tconst send = (options.protocol === 'https:' ? https : http).request;\n\t\tconst signal = request.signal;\n\n\t\tlet response = null;\n\n\t\tconst abort = function abort() {\n\t\t\tlet error = new AbortError('The user aborted a request.');\n\t\t\treject(error);\n\t\t\tif (request.body && request.body instanceof Stream.Readable) {\n\t\t\t\tdestroyStream(request.body, error);\n\t\t\t}\n\t\t\tif (!response || !response.body) return;\n\t\t\tresponse.body.emit('error', error);\n\t\t};\n\n\t\tif (signal && signal.aborted) {\n\t\t\tabort();\n\t\t\treturn;\n\t\t}\n\n\t\tconst abortAndFinalize = function abortAndFinalize() {\n\t\t\tabort();\n\t\t\tfinalize();\n\t\t};\n\n\t\t// send request\n\t\tconst req = send(options);\n\t\tlet reqTimeout;\n\n\t\tif (signal) {\n\t\t\tsignal.addEventListener('abort', abortAndFinalize);\n\t\t}\n\n\t\tfunction finalize() {\n\t\t\treq.abort();\n\t\t\tif (signal) signal.removeEventListener('abort', abortAndFinalize);\n\t\t\tclearTimeout(reqTimeout);\n\t\t}\n\n\t\tif (request.timeout) {\n\t\t\treq.once('socket', function (socket) {\n\t\t\t\treqTimeout = setTimeout(function () {\n\t\t\t\t\treject(new FetchError(`network timeout at: ${request.url}`, 'request-timeout'));\n\t\t\t\t\tfinalize();\n\t\t\t\t}, request.timeout);\n\t\t\t});\n\t\t}\n\n\t\treq.on('error', function (err) {\n\t\t\treject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, 'system', err));\n\n\t\t\tif (response && response.body) {\n\t\t\t\tdestroyStream(response.body, err);\n\t\t\t}\n\n\t\t\tfinalize();\n\t\t});\n\n\t\tfixResponseChunkedTransferBadEnding(req, function (err) {\n\t\t\tif (signal && signal.aborted) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (response && response.body) {\n\t\t\t\tdestroyStream(response.body, err);\n\t\t\t}\n\t\t});\n\n\t\t/* c8 ignore next 18 */\n\t\tif (parseInt(process.version.substring(1)) < 14) {\n\t\t\t// Before Node.js 14, pipeline() does not fully support async iterators and does not always\n\t\t\t// properly handle when the socket close/end events are out of order.\n\t\t\treq.on('socket', function (s) {\n\t\t\t\ts.addListener('close', function (hadError) {\n\t\t\t\t\t// if a data listener is still present we didn't end cleanly\n\t\t\t\t\tconst hasDataListener = s.listenerCount('data') > 0;\n\n\t\t\t\t\t// if end happened before close but the socket didn't emit an error, do it now\n\t\t\t\t\tif (response && hasDataListener && !hadError && !(signal && signal.aborted)) {\n\t\t\t\t\t\tconst err = new Error('Premature close');\n\t\t\t\t\t\terr.code = 'ERR_STREAM_PREMATURE_CLOSE';\n\t\t\t\t\t\tresponse.body.emit('error', err);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\treq.on('response', function (res) {\n\t\t\tclearTimeout(reqTimeout);\n\n\t\t\tconst headers = createHeadersLenient(res.headers);\n\n\t\t\t// HTTP fetch step 5\n\t\t\tif (fetch.isRedirect(res.statusCode)) {\n\t\t\t\t// HTTP fetch step 5.2\n\t\t\t\tconst location = headers.get('Location');\n\n\t\t\t\t// HTTP fetch step 5.3\n\t\t\t\tlet locationURL = null;\n\t\t\t\ttry {\n\t\t\t\t\tlocationURL = location === null ? null : new URL$1(location, request.url).toString();\n\t\t\t\t} catch (err) {\n\t\t\t\t\t// error here can only be invalid URL in Location: header\n\t\t\t\t\t// do not throw when options.redirect == manual\n\t\t\t\t\t// let the user extract the errorneous redirect URL\n\t\t\t\t\tif (request.redirect !== 'manual') {\n\t\t\t\t\t\treject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, 'invalid-redirect'));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// HTTP fetch step 5.5\n\t\t\t\tswitch (request.redirect) {\n\t\t\t\t\tcase 'error':\n\t\t\t\t\t\treject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, 'no-redirect'));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'manual':\n\t\t\t\t\t\t// node-fetch-specific step: make manual redirect a bit easier to use by setting the Location header value to the resolved URL.\n\t\t\t\t\t\tif (locationURL !== null) {\n\t\t\t\t\t\t\t// handle corrupted header\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\theaders.set('Location', locationURL);\n\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\t// istanbul ignore next: nodejs server prevent invalid response headers, we can't test this through normal request\n\t\t\t\t\t\t\t\treject(err);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'follow':\n\t\t\t\t\t\t// HTTP-redirect fetch step 2\n\t\t\t\t\t\tif (locationURL === null) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 5\n\t\t\t\t\t\tif (request.counter >= request.follow) {\n\t\t\t\t\t\t\treject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));\n\t\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 6 (counter increment)\n\t\t\t\t\t\t// Create a new Request object.\n\t\t\t\t\t\tconst requestOpts = {\n\t\t\t\t\t\t\theaders: new Headers(request.headers),\n\t\t\t\t\t\t\tfollow: request.follow,\n\t\t\t\t\t\t\tcounter: request.counter + 1,\n\t\t\t\t\t\t\tagent: request.agent,\n\t\t\t\t\t\t\tcompress: request.compress,\n\t\t\t\t\t\t\tmethod: request.method,\n\t\t\t\t\t\t\tbody: request.body,\n\t\t\t\t\t\t\tsignal: request.signal,\n\t\t\t\t\t\t\ttimeout: request.timeout,\n\t\t\t\t\t\t\tsize: request.size\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (!isDomainOrSubdomain(request.url, locationURL) || !isSameProtocol(request.url, locationURL)) {\n\t\t\t\t\t\t\tfor (const name of ['authorization', 'www-authenticate', 'cookie', 'cookie2']) {\n\t\t\t\t\t\t\t\trequestOpts.headers.delete(name);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 9\n\t\t\t\t\t\tif (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {\n\t\t\t\t\t\t\treject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));\n\t\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 11\n\t\t\t\t\t\tif (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === 'POST') {\n\t\t\t\t\t\t\trequestOpts.method = 'GET';\n\t\t\t\t\t\t\trequestOpts.body = undefined;\n\t\t\t\t\t\t\trequestOpts.headers.delete('content-length');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 15\n\t\t\t\t\t\tresolve(fetch(new Request(locationURL, requestOpts)));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// prepare response\n\t\t\tres.once('end', function () {\n\t\t\t\tif (signal) signal.removeEventListener('abort', abortAndFinalize);\n\t\t\t});\n\t\t\tlet body = res.pipe(new PassThrough$1());\n\n\t\t\tconst response_options = {\n\t\t\t\turl: request.url,\n\t\t\t\tstatus: res.statusCode,\n\t\t\t\tstatusText: res.statusMessage,\n\t\t\t\theaders: headers,\n\t\t\t\tsize: request.size,\n\t\t\t\ttimeout: request.timeout,\n\t\t\t\tcounter: request.counter\n\t\t\t};\n\n\t\t\t// HTTP-network fetch step 12.1.1.3\n\t\t\tconst codings = headers.get('Content-Encoding');\n\n\t\t\t// HTTP-network fetch step 12.1.1.4: handle content codings\n\n\t\t\t// in following scenarios we ignore compression support\n\t\t\t// 1. compression support is disabled\n\t\t\t// 2. HEAD request\n\t\t\t// 3. no Content-Encoding header\n\t\t\t// 4. no content response (204)\n\t\t\t// 5. content not modified response (304)\n\t\t\tif (!request.compress || request.method === 'HEAD' || codings === null || res.statusCode === 204 || res.statusCode === 304) {\n\t\t\t\tresponse = new Response(body, response_options);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For Node v6+\n\t\t\t// Be less strict when decoding compressed responses, since sometimes\n\t\t\t// servers send slightly invalid responses that are still accepted\n\t\t\t// by common browsers.\n\t\t\t// Always using Z_SYNC_FLUSH is what cURL does.\n\t\t\tconst zlibOptions = {\n\t\t\t\tflush: zlib.Z_SYNC_FLUSH,\n\t\t\t\tfinishFlush: zlib.Z_SYNC_FLUSH\n\t\t\t};\n\n\t\t\t// for gzip\n\t\t\tif (codings == 'gzip' || codings == 'x-gzip') {\n\t\t\t\tbody = body.pipe(zlib.createGunzip(zlibOptions));\n\t\t\t\tresponse = new Response(body, response_options);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// for deflate\n\t\t\tif (codings == 'deflate' || codings == 'x-deflate') {\n\t\t\t\t// handle the infamous raw deflate response from old servers\n\t\t\t\t// a hack for old IIS and Apache servers\n\t\t\t\tconst raw = res.pipe(new PassThrough$1());\n\t\t\t\traw.once('data', function (chunk) {\n\t\t\t\t\t// see http://stackoverflow.com/questions/37519828\n\t\t\t\t\tif ((chunk[0] & 0x0F) === 0x08) {\n\t\t\t\t\t\tbody = body.pipe(zlib.createInflate());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbody = body.pipe(zlib.createInflateRaw());\n\t\t\t\t\t}\n\t\t\t\t\tresponse = new Response(body, response_options);\n\t\t\t\t\tresolve(response);\n\t\t\t\t});\n\t\t\t\traw.on('end', function () {\n\t\t\t\t\t// some old IIS servers return zero-length OK deflate responses, so 'data' is never emitted.\n\t\t\t\t\tif (!response) {\n\t\t\t\t\t\tresponse = new Response(body, response_options);\n\t\t\t\t\t\tresolve(response);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// for br\n\t\t\tif (codings == 'br' && typeof zlib.createBrotliDecompress === 'function') {\n\t\t\t\tbody = body.pipe(zlib.createBrotliDecompress());\n\t\t\t\tresponse = new Response(body, response_options);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// otherwise, use response as-is\n\t\t\tresponse = new Response(body, response_options);\n\t\t\tresolve(response);\n\t\t});\n\n\t\twriteToStream(req, request);\n\t});\n}\nfunction fixResponseChunkedTransferBadEnding(request, errorCallback) {\n\tlet socket;\n\n\trequest.on('socket', function (s) {\n\t\tsocket = s;\n\t});\n\n\trequest.on('response', function (response) {\n\t\tconst headers = response.headers;\n\n\t\tif (headers['transfer-encoding'] === 'chunked' && !headers['content-length']) {\n\t\t\tresponse.once('close', function (hadError) {\n\t\t\t\t// tests for socket presence, as in some situations the\n\t\t\t\t// the 'socket' event is not triggered for the request\n\t\t\t\t// (happens in deno), avoids `TypeError`\n\t\t\t\t// if a data listener is still present we didn't end cleanly\n\t\t\t\tconst hasDataListener = socket && socket.listenerCount('data') > 0;\n\n\t\t\t\tif (hasDataListener && !hadError) {\n\t\t\t\t\tconst err = new Error('Premature close');\n\t\t\t\t\terr.code = 'ERR_STREAM_PREMATURE_CLOSE';\n\t\t\t\t\terrorCallback(err);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n}\n\nfunction destroyStream(stream, err) {\n\tif (stream.destroy) {\n\t\tstream.destroy(err);\n\t} else {\n\t\t// node < 8\n\t\tstream.emit('error', err);\n\t\tstream.end();\n\t}\n}\n\n/**\n * Redirect code matching\n *\n * @param   Number   code  Status code\n * @return  Boolean\n */\nfetch.isRedirect = function (code) {\n\treturn code === 301 || code === 302 || code === 303 || code === 307 || code === 308;\n};\n\n// expose Promise\nfetch.Promise = global.Promise;\n\nmodule.exports = exports = fetch;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = exports;\nexports.Headers = Headers;\nexports.Request = Request;\nexports.Response = Response;\nexports.FetchError = FetchError;\n","\"use strict\";\n\nvar punycode = require(\"punycode\");\nvar mappingTable = require(\"./lib/mappingTable.json\");\n\nvar PROCESSING_OPTIONS = {\n  TRANSITIONAL: 0,\n  NONTRANSITIONAL: 1\n};\n\nfunction normalize(str) { // fix bug in v8\n  return str.split('\\u0000').map(function (s) { return s.normalize('NFC'); }).join('\\u0000');\n}\n\nfunction findStatus(val) {\n  var start = 0;\n  var end = mappingTable.length - 1;\n\n  while (start <= end) {\n    var mid = Math.floor((start + end) / 2);\n\n    var target = mappingTable[mid];\n    if (target[0][0] <= val && target[0][1] >= val) {\n      return target;\n    } else if (target[0][0] > val) {\n      end = mid - 1;\n    } else {\n      start = mid + 1;\n    }\n  }\n\n  return null;\n}\n\nvar regexAstralSymbols = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n\nfunction countSymbols(string) {\n  return string\n    // replace every surrogate pair with a BMP symbol\n    .replace(regexAstralSymbols, '_')\n    // then get the length\n    .length;\n}\n\nfunction mapChars(domain_name, useSTD3, processing_option) {\n  var hasError = false;\n  var processed = \"\";\n\n  var len = countSymbols(domain_name);\n  for (var i = 0; i < len; ++i) {\n    var codePoint = domain_name.codePointAt(i);\n    var status = findStatus(codePoint);\n\n    switch (status[1]) {\n      case \"disallowed\":\n        hasError = true;\n        processed += String.fromCodePoint(codePoint);\n        break;\n      case \"ignored\":\n        break;\n      case \"mapped\":\n        processed += String.fromCodePoint.apply(String, status[2]);\n        break;\n      case \"deviation\":\n        if (processing_option === PROCESSING_OPTIONS.TRANSITIONAL) {\n          processed += String.fromCodePoint.apply(String, status[2]);\n        } else {\n          processed += String.fromCodePoint(codePoint);\n        }\n        break;\n      case \"valid\":\n        processed += String.fromCodePoint(codePoint);\n        break;\n      case \"disallowed_STD3_mapped\":\n        if (useSTD3) {\n          hasError = true;\n          processed += String.fromCodePoint(codePoint);\n        } else {\n          processed += String.fromCodePoint.apply(String, status[2]);\n        }\n        break;\n      case \"disallowed_STD3_valid\":\n        if (useSTD3) {\n          hasError = true;\n        }\n\n        processed += String.fromCodePoint(codePoint);\n        break;\n    }\n  }\n\n  return {\n    string: processed,\n    error: hasError\n  };\n}\n\nvar combiningMarksRegex = /[\\u0300-\\u036F\\u0483-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08E4-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B62\\u0B63\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0C00-\\u0C03\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0D01-\\u0D03\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D82\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F\\u109A-\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u19B0-\\u19C0\\u19C8\\u19C9\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F\\u1AB0-\\u1ABE\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF2-\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DF5\\u1DFC-\\u1DFF\\u20D0-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F-\\uA672\\uA674-\\uA67D\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA880\\uA881\\uA8B4-\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9E5\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2D]|\\uD800[\\uDDFD\\uDEE0\\uDF76-\\uDF7A]|\\uD802[\\uDE01-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE0F\\uDE38-\\uDE3A\\uDE3F\\uDEE5\\uDEE6]|\\uD804[\\uDC00-\\uDC02\\uDC38-\\uDC46\\uDC7F-\\uDC82\\uDCB0-\\uDCBA\\uDD00-\\uDD02\\uDD27-\\uDD34\\uDD73\\uDD80-\\uDD82\\uDDB3-\\uDDC0\\uDE2C-\\uDE37\\uDEDF-\\uDEEA\\uDF01-\\uDF03\\uDF3C\\uDF3E-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF57\\uDF62\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDCB0-\\uDCC3\\uDDAF-\\uDDB5\\uDDB8-\\uDDC0\\uDE30-\\uDE40\\uDEAB-\\uDEB7]|\\uD81A[\\uDEF0-\\uDEF4\\uDF30-\\uDF36]|\\uD81B[\\uDF51-\\uDF7E\\uDF8F-\\uDF92]|\\uD82F[\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD83A[\\uDCD0-\\uDCD6]|\\uDB40[\\uDD00-\\uDDEF]/;\n\nfunction validateLabel(label, processing_option) {\n  if (label.substr(0, 4) === \"xn--\") {\n    label = punycode.toUnicode(label);\n    processing_option = PROCESSING_OPTIONS.NONTRANSITIONAL;\n  }\n\n  var error = false;\n\n  if (normalize(label) !== label ||\n      (label[3] === \"-\" && label[4] === \"-\") ||\n      label[0] === \"-\" || label[label.length - 1] === \"-\" ||\n      label.indexOf(\".\") !== -1 ||\n      label.search(combiningMarksRegex) === 0) {\n    error = true;\n  }\n\n  var len = countSymbols(label);\n  for (var i = 0; i < len; ++i) {\n    var status = findStatus(label.codePointAt(i));\n    if ((processing === PROCESSING_OPTIONS.TRANSITIONAL && status[1] !== \"valid\") ||\n        (processing === PROCESSING_OPTIONS.NONTRANSITIONAL &&\n         status[1] !== \"valid\" && status[1] !== \"deviation\")) {\n      error = true;\n      break;\n    }\n  }\n\n  return {\n    label: label,\n    error: error\n  };\n}\n\nfunction processing(domain_name, useSTD3, processing_option) {\n  var result = mapChars(domain_name, useSTD3, processing_option);\n  result.string = normalize(result.string);\n\n  var labels = result.string.split(\".\");\n  for (var i = 0; i < labels.length; ++i) {\n    try {\n      var validation = validateLabel(labels[i]);\n      labels[i] = validation.label;\n      result.error = result.error || validation.error;\n    } catch(e) {\n      result.error = true;\n    }\n  }\n\n  return {\n    string: labels.join(\".\"),\n    error: result.error\n  };\n}\n\nmodule.exports.toASCII = function(domain_name, useSTD3, processing_option, verifyDnsLength) {\n  var result = processing(domain_name, useSTD3, processing_option);\n  var labels = result.string.split(\".\");\n  labels = labels.map(function(l) {\n    try {\n      return punycode.toASCII(l);\n    } catch(e) {\n      result.error = true;\n      return l;\n    }\n  });\n\n  if (verifyDnsLength) {\n    var total = labels.slice(0, labels.length - 1).join(\".\").length;\n    if (total.length > 253 || total.length === 0) {\n      result.error = true;\n    }\n\n    for (var i=0; i < labels.length; ++i) {\n      if (labels.length > 63 || labels.length === 0) {\n        result.error = true;\n        break;\n      }\n    }\n  }\n\n  if (result.error) return null;\n  return labels.join(\".\");\n};\n\nmodule.exports.toUnicode = function(domain_name, useSTD3) {\n  var result = processing(domain_name, useSTD3, PROCESSING_OPTIONS.NONTRANSITIONAL);\n\n  return {\n    domain: result.string,\n    error: result.error\n  };\n};\n\nmodule.exports.PROCESSING_OPTIONS = PROCESSING_OPTIONS;\n","module.exports = require('./lib/tunnel');\n","'use strict';\n\nvar net = require('net');\nvar tls = require('tls');\nvar http = require('http');\nvar https = require('https');\nvar events = require('events');\nvar assert = require('assert');\nvar util = require('util');\n\n\nexports.httpOverHttp = httpOverHttp;\nexports.httpsOverHttp = httpsOverHttp;\nexports.httpOverHttps = httpOverHttps;\nexports.httpsOverHttps = httpsOverHttps;\n\n\nfunction httpOverHttp(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = http.request;\n  return agent;\n}\n\nfunction httpsOverHttp(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = http.request;\n  agent.createSocket = createSecureSocket;\n  agent.defaultPort = 443;\n  return agent;\n}\n\nfunction httpOverHttps(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = https.request;\n  return agent;\n}\n\nfunction httpsOverHttps(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = https.request;\n  agent.createSocket = createSecureSocket;\n  agent.defaultPort = 443;\n  return agent;\n}\n\n\nfunction TunnelingAgent(options) {\n  var self = this;\n  self.options = options || {};\n  self.proxyOptions = self.options.proxy || {};\n  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets;\n  self.requests = [];\n  self.sockets = [];\n\n  self.on('free', function onFree(socket, host, port, localAddress) {\n    var options = toOptions(host, port, localAddress);\n    for (var i = 0, len = self.requests.length; i < len; ++i) {\n      var pending = self.requests[i];\n      if (pending.host === options.host && pending.port === options.port) {\n        // Detect the request to connect same origin server,\n        // reuse the connection.\n        self.requests.splice(i, 1);\n        pending.request.onSocket(socket);\n        return;\n      }\n    }\n    socket.destroy();\n    self.removeSocket(socket);\n  });\n}\nutil.inherits(TunnelingAgent, events.EventEmitter);\n\nTunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {\n  var self = this;\n  var options = mergeOptions({request: req}, self.options, toOptions(host, port, localAddress));\n\n  if (self.sockets.length >= this.maxSockets) {\n    // We are over limit so we'll add it to the queue.\n    self.requests.push(options);\n    return;\n  }\n\n  // If we are under maxSockets create a new one.\n  self.createSocket(options, function(socket) {\n    socket.on('free', onFree);\n    socket.on('close', onCloseOrRemove);\n    socket.on('agentRemove', onCloseOrRemove);\n    req.onSocket(socket);\n\n    function onFree() {\n      self.emit('free', socket, options);\n    }\n\n    function onCloseOrRemove(err) {\n      self.removeSocket(socket);\n      socket.removeListener('free', onFree);\n      socket.removeListener('close', onCloseOrRemove);\n      socket.removeListener('agentRemove', onCloseOrRemove);\n    }\n  });\n};\n\nTunnelingAgent.prototype.createSocket = function createSocket(options, cb) {\n  var self = this;\n  var placeholder = {};\n  self.sockets.push(placeholder);\n\n  var connectOptions = mergeOptions({}, self.proxyOptions, {\n    method: 'CONNECT',\n    path: options.host + ':' + options.port,\n    agent: false,\n    headers: {\n      host: options.host + ':' + options.port\n    }\n  });\n  if (options.localAddress) {\n    connectOptions.localAddress = options.localAddress;\n  }\n  if (connectOptions.proxyAuth) {\n    connectOptions.headers = connectOptions.headers || {};\n    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +\n        new Buffer(connectOptions.proxyAuth).toString('base64');\n  }\n\n  debug('making CONNECT request');\n  var connectReq = self.request(connectOptions);\n  connectReq.useChunkedEncodingByDefault = false; // for v0.6\n  connectReq.once('response', onResponse); // for v0.6\n  connectReq.once('upgrade', onUpgrade);   // for v0.6\n  connectReq.once('connect', onConnect);   // for v0.7 or later\n  connectReq.once('error', onError);\n  connectReq.end();\n\n  function onResponse(res) {\n    // Very hacky. This is necessary to avoid http-parser leaks.\n    res.upgrade = true;\n  }\n\n  function onUpgrade(res, socket, head) {\n    // Hacky.\n    process.nextTick(function() {\n      onConnect(res, socket, head);\n    });\n  }\n\n  function onConnect(res, socket, head) {\n    connectReq.removeAllListeners();\n    socket.removeAllListeners();\n\n    if (res.statusCode !== 200) {\n      debug('tunneling socket could not be established, statusCode=%d',\n        res.statusCode);\n      socket.destroy();\n      var error = new Error('tunneling socket could not be established, ' +\n        'statusCode=' + res.statusCode);\n      error.code = 'ECONNRESET';\n      options.request.emit('error', error);\n      self.removeSocket(placeholder);\n      return;\n    }\n    if (head.length > 0) {\n      debug('got illegal response body from proxy');\n      socket.destroy();\n      var error = new Error('got illegal response body from proxy');\n      error.code = 'ECONNRESET';\n      options.request.emit('error', error);\n      self.removeSocket(placeholder);\n      return;\n    }\n    debug('tunneling connection has established');\n    self.sockets[self.sockets.indexOf(placeholder)] = socket;\n    return cb(socket);\n  }\n\n  function onError(cause) {\n    connectReq.removeAllListeners();\n\n    debug('tunneling socket could not be established, cause=%s\\n',\n          cause.message, cause.stack);\n    var error = new Error('tunneling socket could not be established, ' +\n                          'cause=' + cause.message);\n    error.code = 'ECONNRESET';\n    options.request.emit('error', error);\n    self.removeSocket(placeholder);\n  }\n};\n\nTunnelingAgent.prototype.removeSocket = function removeSocket(socket) {\n  var pos = this.sockets.indexOf(socket)\n  if (pos === -1) {\n    return;\n  }\n  this.sockets.splice(pos, 1);\n\n  var pending = this.requests.shift();\n  if (pending) {\n    // If we have pending requests and a socket gets closed a new one\n    // needs to be created to take over in the pool for the one that closed.\n    this.createSocket(pending, function(socket) {\n      pending.request.onSocket(socket);\n    });\n  }\n};\n\nfunction createSecureSocket(options, cb) {\n  var self = this;\n  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {\n    var hostHeader = options.request.getHeader('host');\n    var tlsOptions = mergeOptions({}, self.options, {\n      socket: socket,\n      servername: hostHeader ? hostHeader.replace(/:.*$/, '') : options.host\n    });\n\n    // 0 is dummy port for v0.6\n    var secureSocket = tls.connect(0, tlsOptions);\n    self.sockets[self.sockets.indexOf(socket)] = secureSocket;\n    cb(secureSocket);\n  });\n}\n\n\nfunction toOptions(host, port, localAddress) {\n  if (typeof host === 'string') { // since v0.10\n    return {\n      host: host,\n      port: port,\n      localAddress: localAddress\n    };\n  }\n  return host; // for v0.11 or later\n}\n\nfunction mergeOptions(target) {\n  for (var i = 1, len = arguments.length; i < len; ++i) {\n    var overrides = arguments[i];\n    if (typeof overrides === 'object') {\n      var keys = Object.keys(overrides);\n      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {\n        var k = keys[j];\n        if (overrides[k] !== undefined) {\n          target[k] = overrides[k];\n        }\n      }\n    }\n  }\n  return target;\n}\n\n\nvar debug;\nif (process.env.NODE_DEBUG && /\\btunnel\\b/.test(process.env.NODE_DEBUG)) {\n  debug = function() {\n    var args = Array.prototype.slice.call(arguments);\n    if (typeof args[0] === 'string') {\n      args[0] = 'TUNNEL: ' + args[0];\n    } else {\n      args.unshift('TUNNEL:');\n    }\n    console.error.apply(console, args);\n  }\n} else {\n  debug = function() {};\n}\nexports.debug = debug; // for test\n","\"use strict\";\n\nvar conversions = {};\nmodule.exports = conversions;\n\nfunction sign(x) {\n    return x < 0 ? -1 : 1;\n}\n\nfunction evenRound(x) {\n    // Round x to the nearest integer, choosing the even integer if it lies halfway between two.\n    if ((x % 1) === 0.5 && (x & 1) === 0) { // [even number].5; round down (i.e. floor)\n        return Math.floor(x);\n    } else {\n        return Math.round(x);\n    }\n}\n\nfunction createNumberConversion(bitLength, typeOpts) {\n    if (!typeOpts.unsigned) {\n        --bitLength;\n    }\n    const lowerBound = typeOpts.unsigned ? 0 : -Math.pow(2, bitLength);\n    const upperBound = Math.pow(2, bitLength) - 1;\n\n    const moduloVal = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength) : Math.pow(2, bitLength);\n    const moduloBound = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength - 1) : Math.pow(2, bitLength - 1);\n\n    return function(V, opts) {\n        if (!opts) opts = {};\n\n        let x = +V;\n\n        if (opts.enforceRange) {\n            if (!Number.isFinite(x)) {\n                throw new TypeError(\"Argument is not a finite number\");\n            }\n\n            x = sign(x) * Math.floor(Math.abs(x));\n            if (x < lowerBound || x > upperBound) {\n                throw new TypeError(\"Argument is not in byte range\");\n            }\n\n            return x;\n        }\n\n        if (!isNaN(x) && opts.clamp) {\n            x = evenRound(x);\n\n            if (x < lowerBound) x = lowerBound;\n            if (x > upperBound) x = upperBound;\n            return x;\n        }\n\n        if (!Number.isFinite(x) || x === 0) {\n            return 0;\n        }\n\n        x = sign(x) * Math.floor(Math.abs(x));\n        x = x % moduloVal;\n\n        if (!typeOpts.unsigned && x >= moduloBound) {\n            return x - moduloVal;\n        } else if (typeOpts.unsigned) {\n            if (x < 0) {\n              x += moduloVal;\n            } else if (x === -0) { // don't return negative zero\n              return 0;\n            }\n        }\n\n        return x;\n    }\n}\n\nconversions[\"void\"] = function () {\n    return undefined;\n};\n\nconversions[\"boolean\"] = function (val) {\n    return !!val;\n};\n\nconversions[\"byte\"] = createNumberConversion(8, { unsigned: false });\nconversions[\"octet\"] = createNumberConversion(8, { unsigned: true });\n\nconversions[\"short\"] = createNumberConversion(16, { unsigned: false });\nconversions[\"unsigned short\"] = createNumberConversion(16, { unsigned: true });\n\nconversions[\"long\"] = createNumberConversion(32, { unsigned: false });\nconversions[\"unsigned long\"] = createNumberConversion(32, { unsigned: true });\n\nconversions[\"long long\"] = createNumberConversion(32, { unsigned: false, moduloBitLength: 64 });\nconversions[\"unsigned long long\"] = createNumberConversion(32, { unsigned: true, moduloBitLength: 64 });\n\nconversions[\"double\"] = function (V) {\n    const x = +V;\n\n    if (!Number.isFinite(x)) {\n        throw new TypeError(\"Argument is not a finite floating-point value\");\n    }\n\n    return x;\n};\n\nconversions[\"unrestricted double\"] = function (V) {\n    const x = +V;\n\n    if (isNaN(x)) {\n        throw new TypeError(\"Argument is NaN\");\n    }\n\n    return x;\n};\n\n// not quite valid, but good enough for JS\nconversions[\"float\"] = conversions[\"double\"];\nconversions[\"unrestricted float\"] = conversions[\"unrestricted double\"];\n\nconversions[\"DOMString\"] = function (V, opts) {\n    if (!opts) opts = {};\n\n    if (opts.treatNullAsEmptyString && V === null) {\n        return \"\";\n    }\n\n    return String(V);\n};\n\nconversions[\"ByteString\"] = function (V, opts) {\n    const x = String(V);\n    let c = undefined;\n    for (let i = 0; (c = x.codePointAt(i)) !== undefined; ++i) {\n        if (c > 255) {\n            throw new TypeError(\"Argument is not a valid bytestring\");\n        }\n    }\n\n    return x;\n};\n\nconversions[\"USVString\"] = function (V) {\n    const S = String(V);\n    const n = S.length;\n    const U = [];\n    for (let i = 0; i < n; ++i) {\n        const c = S.charCodeAt(i);\n        if (c < 0xD800 || c > 0xDFFF) {\n            U.push(String.fromCodePoint(c));\n        } else if (0xDC00 <= c && c <= 0xDFFF) {\n            U.push(String.fromCodePoint(0xFFFD));\n        } else {\n            if (i === n - 1) {\n                U.push(String.fromCodePoint(0xFFFD));\n            } else {\n                const d = S.charCodeAt(i + 1);\n                if (0xDC00 <= d && d <= 0xDFFF) {\n                    const a = c & 0x3FF;\n                    const b = d & 0x3FF;\n                    U.push(String.fromCodePoint((2 << 15) + (2 << 9) * a + b));\n                    ++i;\n                } else {\n                    U.push(String.fromCodePoint(0xFFFD));\n                }\n            }\n        }\n    }\n\n    return U.join('');\n};\n\nconversions[\"Date\"] = function (V, opts) {\n    if (!(V instanceof Date)) {\n        throw new TypeError(\"Argument is not a Date object\");\n    }\n    if (isNaN(V)) {\n        return undefined;\n    }\n\n    return V;\n};\n\nconversions[\"RegExp\"] = function (V, opts) {\n    if (!(V instanceof RegExp)) {\n        V = new RegExp(V);\n    }\n\n    return V;\n};\n","\"use strict\";\nconst usm = require(\"./url-state-machine\");\n\nexports.implementation = class URLImpl {\n  constructor(constructorArgs) {\n    const url = constructorArgs[0];\n    const base = constructorArgs[1];\n\n    let parsedBase = null;\n    if (base !== undefined) {\n      parsedBase = usm.basicURLParse(base);\n      if (parsedBase === \"failure\") {\n        throw new TypeError(\"Invalid base URL\");\n      }\n    }\n\n    const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });\n    if (parsedURL === \"failure\") {\n      throw new TypeError(\"Invalid URL\");\n    }\n\n    this._url = parsedURL;\n\n    // TODO: query stuff\n  }\n\n  get href() {\n    return usm.serializeURL(this._url);\n  }\n\n  set href(v) {\n    const parsedURL = usm.basicURLParse(v);\n    if (parsedURL === \"failure\") {\n      throw new TypeError(\"Invalid URL\");\n    }\n\n    this._url = parsedURL;\n  }\n\n  get origin() {\n    return usm.serializeURLOrigin(this._url);\n  }\n\n  get protocol() {\n    return this._url.scheme + \":\";\n  }\n\n  set protocol(v) {\n    usm.basicURLParse(v + \":\", { url: this._url, stateOverride: \"scheme start\" });\n  }\n\n  get username() {\n    return this._url.username;\n  }\n\n  set username(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    usm.setTheUsername(this._url, v);\n  }\n\n  get password() {\n    return this._url.password;\n  }\n\n  set password(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    usm.setThePassword(this._url, v);\n  }\n\n  get host() {\n    const url = this._url;\n\n    if (url.host === null) {\n      return \"\";\n    }\n\n    if (url.port === null) {\n      return usm.serializeHost(url.host);\n    }\n\n    return usm.serializeHost(url.host) + \":\" + usm.serializeInteger(url.port);\n  }\n\n  set host(v) {\n    if (this._url.cannotBeABaseURL) {\n      return;\n    }\n\n    usm.basicURLParse(v, { url: this._url, stateOverride: \"host\" });\n  }\n\n  get hostname() {\n    if (this._url.host === null) {\n      return \"\";\n    }\n\n    return usm.serializeHost(this._url.host);\n  }\n\n  set hostname(v) {\n    if (this._url.cannotBeABaseURL) {\n      return;\n    }\n\n    usm.basicURLParse(v, { url: this._url, stateOverride: \"hostname\" });\n  }\n\n  get port() {\n    if (this._url.port === null) {\n      return \"\";\n    }\n\n    return usm.serializeInteger(this._url.port);\n  }\n\n  set port(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    if (v === \"\") {\n      this._url.port = null;\n    } else {\n      usm.basicURLParse(v, { url: this._url, stateOverride: \"port\" });\n    }\n  }\n\n  get pathname() {\n    if (this._url.cannotBeABaseURL) {\n      return this._url.path[0];\n    }\n\n    if (this._url.path.length === 0) {\n      return \"\";\n    }\n\n    return \"/\" + this._url.path.join(\"/\");\n  }\n\n  set pathname(v) {\n    if (this._url.cannotBeABaseURL) {\n      return;\n    }\n\n    this._url.path = [];\n    usm.basicURLParse(v, { url: this._url, stateOverride: \"path start\" });\n  }\n\n  get search() {\n    if (this._url.query === null || this._url.query === \"\") {\n      return \"\";\n    }\n\n    return \"?\" + this._url.query;\n  }\n\n  set search(v) {\n    // TODO: query stuff\n\n    const url = this._url;\n\n    if (v === \"\") {\n      url.query = null;\n      return;\n    }\n\n    const input = v[0] === \"?\" ? v.substring(1) : v;\n    url.query = \"\";\n    usm.basicURLParse(input, { url, stateOverride: \"query\" });\n  }\n\n  get hash() {\n    if (this._url.fragment === null || this._url.fragment === \"\") {\n      return \"\";\n    }\n\n    return \"#\" + this._url.fragment;\n  }\n\n  set hash(v) {\n    if (v === \"\") {\n      this._url.fragment = null;\n      return;\n    }\n\n    const input = v[0] === \"#\" ? v.substring(1) : v;\n    this._url.fragment = \"\";\n    usm.basicURLParse(input, { url: this._url, stateOverride: \"fragment\" });\n  }\n\n  toJSON() {\n    return this.href;\n  }\n};\n","\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\nconst Impl = require(\".//URL-impl.js\");\n\nconst impl = utils.implSymbol;\n\nfunction URL(url) {\n  if (!this || this[impl] || !(this instanceof URL)) {\n    throw new TypeError(\"Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function.\");\n  }\n  if (arguments.length < 1) {\n    throw new TypeError(\"Failed to construct 'URL': 1 argument required, but only \" + arguments.length + \" present.\");\n  }\n  const args = [];\n  for (let i = 0; i < arguments.length && i < 2; ++i) {\n    args[i] = arguments[i];\n  }\n  args[0] = conversions[\"USVString\"](args[0]);\n  if (args[1] !== undefined) {\n  args[1] = conversions[\"USVString\"](args[1]);\n  }\n\n  module.exports.setup(this, args);\n}\n\nURL.prototype.toJSON = function toJSON() {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n  const args = [];\n  for (let i = 0; i < arguments.length && i < 0; ++i) {\n    args[i] = arguments[i];\n  }\n  return this[impl].toJSON.apply(this[impl], args);\n};\nObject.defineProperty(URL.prototype, \"href\", {\n  get() {\n    return this[impl].href;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].href = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nURL.prototype.toString = function () {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n  return this.href;\n};\n\nObject.defineProperty(URL.prototype, \"origin\", {\n  get() {\n    return this[impl].origin;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nObject.defineProperty(URL.prototype, \"protocol\", {\n  get() {\n    return this[impl].protocol;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].protocol = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nObject.defineProperty(URL.prototype, \"username\", {\n  get() {\n    return this[impl].username;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].username = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nObject.defineProperty(URL.prototype, \"password\", {\n  get() {\n    return this[impl].password;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].password = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nObject.defineProperty(URL.prototype, \"host\", {\n  get() {\n    return this[impl].host;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].host = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nObject.defineProperty(URL.prototype, \"hostname\", {\n  get() {\n    return this[impl].hostname;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].hostname = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nObject.defineProperty(URL.prototype, \"port\", {\n  get() {\n    return this[impl].port;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].port = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nObject.defineProperty(URL.prototype, \"pathname\", {\n  get() {\n    return this[impl].pathname;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].pathname = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nObject.defineProperty(URL.prototype, \"search\", {\n  get() {\n    return this[impl].search;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].search = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nObject.defineProperty(URL.prototype, \"hash\", {\n  get() {\n    return this[impl].hash;\n  },\n  set(V) {\n    V = conversions[\"USVString\"](V);\n    this[impl].hash = V;\n  },\n  enumerable: true,\n  configurable: true\n});\n\n\nmodule.exports = {\n  is(obj) {\n    return !!obj && obj[impl] instanceof Impl.implementation;\n  },\n  create(constructorArgs, privateData) {\n    let obj = Object.create(URL.prototype);\n    this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    obj[impl] = new Impl.implementation(constructorArgs, privateData);\n    obj[impl][utils.wrapperSymbol] = obj;\n  },\n  interface: URL,\n  expose: {\n    Window: { URL: URL },\n    Worker: { URL: URL }\n  }\n};\n\n","\"use strict\";\n\nexports.URL = require(\"./URL\").interface;\nexports.serializeURL = require(\"./url-state-machine\").serializeURL;\nexports.serializeURLOrigin = require(\"./url-state-machine\").serializeURLOrigin;\nexports.basicURLParse = require(\"./url-state-machine\").basicURLParse;\nexports.setTheUsername = require(\"./url-state-machine\").setTheUsername;\nexports.setThePassword = require(\"./url-state-machine\").setThePassword;\nexports.serializeHost = require(\"./url-state-machine\").serializeHost;\nexports.serializeInteger = require(\"./url-state-machine\").serializeInteger;\nexports.parseURL = require(\"./url-state-machine\").parseURL;\n","\"use strict\";\r\nconst punycode = require(\"punycode\");\r\nconst tr46 = require(\"tr46\");\r\n\r\nconst specialSchemes = {\r\n  ftp: 21,\r\n  file: null,\r\n  gopher: 70,\r\n  http: 80,\r\n  https: 443,\r\n  ws: 80,\r\n  wss: 443\r\n};\r\n\r\nconst failure = Symbol(\"failure\");\r\n\r\nfunction countSymbols(str) {\r\n  return punycode.ucs2.decode(str).length;\r\n}\r\n\r\nfunction at(input, idx) {\r\n  const c = input[idx];\r\n  return isNaN(c) ? undefined : String.fromCodePoint(c);\r\n}\r\n\r\nfunction isASCIIDigit(c) {\r\n  return c >= 0x30 && c <= 0x39;\r\n}\r\n\r\nfunction isASCIIAlpha(c) {\r\n  return (c >= 0x41 && c <= 0x5A) || (c >= 0x61 && c <= 0x7A);\r\n}\r\n\r\nfunction isASCIIAlphanumeric(c) {\r\n  return isASCIIAlpha(c) || isASCIIDigit(c);\r\n}\r\n\r\nfunction isASCIIHex(c) {\r\n  return isASCIIDigit(c) || (c >= 0x41 && c <= 0x46) || (c >= 0x61 && c <= 0x66);\r\n}\r\n\r\nfunction isSingleDot(buffer) {\r\n  return buffer === \".\" || buffer.toLowerCase() === \"%2e\";\r\n}\r\n\r\nfunction isDoubleDot(buffer) {\r\n  buffer = buffer.toLowerCase();\r\n  return buffer === \"..\" || buffer === \"%2e.\" || buffer === \".%2e\" || buffer === \"%2e%2e\";\r\n}\r\n\r\nfunction isWindowsDriveLetterCodePoints(cp1, cp2) {\r\n  return isASCIIAlpha(cp1) && (cp2 === 58 || cp2 === 124);\r\n}\r\n\r\nfunction isWindowsDriveLetterString(string) {\r\n  return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && (string[1] === \":\" || string[1] === \"|\");\r\n}\r\n\r\nfunction isNormalizedWindowsDriveLetterString(string) {\r\n  return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && string[1] === \":\";\r\n}\r\n\r\nfunction containsForbiddenHostCodePoint(string) {\r\n  return string.search(/\\u0000|\\u0009|\\u000A|\\u000D|\\u0020|#|%|\\/|:|\\?|@|\\[|\\\\|\\]/) !== -1;\r\n}\r\n\r\nfunction containsForbiddenHostCodePointExcludingPercent(string) {\r\n  return string.search(/\\u0000|\\u0009|\\u000A|\\u000D|\\u0020|#|\\/|:|\\?|@|\\[|\\\\|\\]/) !== -1;\r\n}\r\n\r\nfunction isSpecialScheme(scheme) {\r\n  return specialSchemes[scheme] !== undefined;\r\n}\r\n\r\nfunction isSpecial(url) {\r\n  return isSpecialScheme(url.scheme);\r\n}\r\n\r\nfunction defaultPort(scheme) {\r\n  return specialSchemes[scheme];\r\n}\r\n\r\nfunction percentEncode(c) {\r\n  let hex = c.toString(16).toUpperCase();\r\n  if (hex.length === 1) {\r\n    hex = \"0\" + hex;\r\n  }\r\n\r\n  return \"%\" + hex;\r\n}\r\n\r\nfunction utf8PercentEncode(c) {\r\n  const buf = new Buffer(c);\r\n\r\n  let str = \"\";\r\n\r\n  for (let i = 0; i < buf.length; ++i) {\r\n    str += percentEncode(buf[i]);\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\nfunction utf8PercentDecode(str) {\r\n  const input = new Buffer(str);\r\n  const output = [];\r\n  for (let i = 0; i < input.length; ++i) {\r\n    if (input[i] !== 37) {\r\n      output.push(input[i]);\r\n    } else if (input[i] === 37 && isASCIIHex(input[i + 1]) && isASCIIHex(input[i + 2])) {\r\n      output.push(parseInt(input.slice(i + 1, i + 3).toString(), 16));\r\n      i += 2;\r\n    } else {\r\n      output.push(input[i]);\r\n    }\r\n  }\r\n  return new Buffer(output).toString();\r\n}\r\n\r\nfunction isC0ControlPercentEncode(c) {\r\n  return c <= 0x1F || c > 0x7E;\r\n}\r\n\r\nconst extraPathPercentEncodeSet = new Set([32, 34, 35, 60, 62, 63, 96, 123, 125]);\r\nfunction isPathPercentEncode(c) {\r\n  return isC0ControlPercentEncode(c) || extraPathPercentEncodeSet.has(c);\r\n}\r\n\r\nconst extraUserinfoPercentEncodeSet =\r\n  new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);\r\nfunction isUserinfoPercentEncode(c) {\r\n  return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);\r\n}\r\n\r\nfunction percentEncodeChar(c, encodeSetPredicate) {\r\n  const cStr = String.fromCodePoint(c);\r\n\r\n  if (encodeSetPredicate(c)) {\r\n    return utf8PercentEncode(cStr);\r\n  }\r\n\r\n  return cStr;\r\n}\r\n\r\nfunction parseIPv4Number(input) {\r\n  let R = 10;\r\n\r\n  if (input.length >= 2 && input.charAt(0) === \"0\" && input.charAt(1).toLowerCase() === \"x\") {\r\n    input = input.substring(2);\r\n    R = 16;\r\n  } else if (input.length >= 2 && input.charAt(0) === \"0\") {\r\n    input = input.substring(1);\r\n    R = 8;\r\n  }\r\n\r\n  if (input === \"\") {\r\n    return 0;\r\n  }\r\n\r\n  const regex = R === 10 ? /[^0-9]/ : (R === 16 ? /[^0-9A-Fa-f]/ : /[^0-7]/);\r\n  if (regex.test(input)) {\r\n    return failure;\r\n  }\r\n\r\n  return parseInt(input, R);\r\n}\r\n\r\nfunction parseIPv4(input) {\r\n  const parts = input.split(\".\");\r\n  if (parts[parts.length - 1] === \"\") {\r\n    if (parts.length > 1) {\r\n      parts.pop();\r\n    }\r\n  }\r\n\r\n  if (parts.length > 4) {\r\n    return input;\r\n  }\r\n\r\n  const numbers = [];\r\n  for (const part of parts) {\r\n    if (part === \"\") {\r\n      return input;\r\n    }\r\n    const n = parseIPv4Number(part);\r\n    if (n === failure) {\r\n      return input;\r\n    }\r\n\r\n    numbers.push(n);\r\n  }\r\n\r\n  for (let i = 0; i < numbers.length - 1; ++i) {\r\n    if (numbers[i] > 255) {\r\n      return failure;\r\n    }\r\n  }\r\n  if (numbers[numbers.length - 1] >= Math.pow(256, 5 - numbers.length)) {\r\n    return failure;\r\n  }\r\n\r\n  let ipv4 = numbers.pop();\r\n  let counter = 0;\r\n\r\n  for (const n of numbers) {\r\n    ipv4 += n * Math.pow(256, 3 - counter);\r\n    ++counter;\r\n  }\r\n\r\n  return ipv4;\r\n}\r\n\r\nfunction serializeIPv4(address) {\r\n  let output = \"\";\r\n  let n = address;\r\n\r\n  for (let i = 1; i <= 4; ++i) {\r\n    output = String(n % 256) + output;\r\n    if (i !== 4) {\r\n      output = \".\" + output;\r\n    }\r\n    n = Math.floor(n / 256);\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\nfunction parseIPv6(input) {\r\n  const address = [0, 0, 0, 0, 0, 0, 0, 0];\r\n  let pieceIndex = 0;\r\n  let compress = null;\r\n  let pointer = 0;\r\n\r\n  input = punycode.ucs2.decode(input);\r\n\r\n  if (input[pointer] === 58) {\r\n    if (input[pointer + 1] !== 58) {\r\n      return failure;\r\n    }\r\n\r\n    pointer += 2;\r\n    ++pieceIndex;\r\n    compress = pieceIndex;\r\n  }\r\n\r\n  while (pointer < input.length) {\r\n    if (pieceIndex === 8) {\r\n      return failure;\r\n    }\r\n\r\n    if (input[pointer] === 58) {\r\n      if (compress !== null) {\r\n        return failure;\r\n      }\r\n      ++pointer;\r\n      ++pieceIndex;\r\n      compress = pieceIndex;\r\n      continue;\r\n    }\r\n\r\n    let value = 0;\r\n    let length = 0;\r\n\r\n    while (length < 4 && isASCIIHex(input[pointer])) {\r\n      value = value * 0x10 + parseInt(at(input, pointer), 16);\r\n      ++pointer;\r\n      ++length;\r\n    }\r\n\r\n    if (input[pointer] === 46) {\r\n      if (length === 0) {\r\n        return failure;\r\n      }\r\n\r\n      pointer -= length;\r\n\r\n      if (pieceIndex > 6) {\r\n        return failure;\r\n      }\r\n\r\n      let numbersSeen = 0;\r\n\r\n      while (input[pointer] !== undefined) {\r\n        let ipv4Piece = null;\r\n\r\n        if (numbersSeen > 0) {\r\n          if (input[pointer] === 46 && numbersSeen < 4) {\r\n            ++pointer;\r\n          } else {\r\n            return failure;\r\n          }\r\n        }\r\n\r\n        if (!isASCIIDigit(input[pointer])) {\r\n          return failure;\r\n        }\r\n\r\n        while (isASCIIDigit(input[pointer])) {\r\n          const number = parseInt(at(input, pointer));\r\n          if (ipv4Piece === null) {\r\n            ipv4Piece = number;\r\n          } else if (ipv4Piece === 0) {\r\n            return failure;\r\n          } else {\r\n            ipv4Piece = ipv4Piece * 10 + number;\r\n          }\r\n          if (ipv4Piece > 255) {\r\n            return failure;\r\n          }\r\n          ++pointer;\r\n        }\r\n\r\n        address[pieceIndex] = address[pieceIndex] * 0x100 + ipv4Piece;\r\n\r\n        ++numbersSeen;\r\n\r\n        if (numbersSeen === 2 || numbersSeen === 4) {\r\n          ++pieceIndex;\r\n        }\r\n      }\r\n\r\n      if (numbersSeen !== 4) {\r\n        return failure;\r\n      }\r\n\r\n      break;\r\n    } else if (input[pointer] === 58) {\r\n      ++pointer;\r\n      if (input[pointer] === undefined) {\r\n        return failure;\r\n      }\r\n    } else if (input[pointer] !== undefined) {\r\n      return failure;\r\n    }\r\n\r\n    address[pieceIndex] = value;\r\n    ++pieceIndex;\r\n  }\r\n\r\n  if (compress !== null) {\r\n    let swaps = pieceIndex - compress;\r\n    pieceIndex = 7;\r\n    while (pieceIndex !== 0 && swaps > 0) {\r\n      const temp = address[compress + swaps - 1];\r\n      address[compress + swaps - 1] = address[pieceIndex];\r\n      address[pieceIndex] = temp;\r\n      --pieceIndex;\r\n      --swaps;\r\n    }\r\n  } else if (compress === null && pieceIndex !== 8) {\r\n    return failure;\r\n  }\r\n\r\n  return address;\r\n}\r\n\r\nfunction serializeIPv6(address) {\r\n  let output = \"\";\r\n  const seqResult = findLongestZeroSequence(address);\r\n  const compress = seqResult.idx;\r\n  let ignore0 = false;\r\n\r\n  for (let pieceIndex = 0; pieceIndex <= 7; ++pieceIndex) {\r\n    if (ignore0 && address[pieceIndex] === 0) {\r\n      continue;\r\n    } else if (ignore0) {\r\n      ignore0 = false;\r\n    }\r\n\r\n    if (compress === pieceIndex) {\r\n      const separator = pieceIndex === 0 ? \"::\" : \":\";\r\n      output += separator;\r\n      ignore0 = true;\r\n      continue;\r\n    }\r\n\r\n    output += address[pieceIndex].toString(16);\r\n\r\n    if (pieceIndex !== 7) {\r\n      output += \":\";\r\n    }\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\nfunction parseHost(input, isSpecialArg) {\r\n  if (input[0] === \"[\") {\r\n    if (input[input.length - 1] !== \"]\") {\r\n      return failure;\r\n    }\r\n\r\n    return parseIPv6(input.substring(1, input.length - 1));\r\n  }\r\n\r\n  if (!isSpecialArg) {\r\n    return parseOpaqueHost(input);\r\n  }\r\n\r\n  const domain = utf8PercentDecode(input);\r\n  const asciiDomain = tr46.toASCII(domain, false, tr46.PROCESSING_OPTIONS.NONTRANSITIONAL, false);\r\n  if (asciiDomain === null) {\r\n    return failure;\r\n  }\r\n\r\n  if (containsForbiddenHostCodePoint(asciiDomain)) {\r\n    return failure;\r\n  }\r\n\r\n  const ipv4Host = parseIPv4(asciiDomain);\r\n  if (typeof ipv4Host === \"number\" || ipv4Host === failure) {\r\n    return ipv4Host;\r\n  }\r\n\r\n  return asciiDomain;\r\n}\r\n\r\nfunction parseOpaqueHost(input) {\r\n  if (containsForbiddenHostCodePointExcludingPercent(input)) {\r\n    return failure;\r\n  }\r\n\r\n  let output = \"\";\r\n  const decoded = punycode.ucs2.decode(input);\r\n  for (let i = 0; i < decoded.length; ++i) {\r\n    output += percentEncodeChar(decoded[i], isC0ControlPercentEncode);\r\n  }\r\n  return output;\r\n}\r\n\r\nfunction findLongestZeroSequence(arr) {\r\n  let maxIdx = null;\r\n  let maxLen = 1; // only find elements > 1\r\n  let currStart = null;\r\n  let currLen = 0;\r\n\r\n  for (let i = 0; i < arr.length; ++i) {\r\n    if (arr[i] !== 0) {\r\n      if (currLen > maxLen) {\r\n        maxIdx = currStart;\r\n        maxLen = currLen;\r\n      }\r\n\r\n      currStart = null;\r\n      currLen = 0;\r\n    } else {\r\n      if (currStart === null) {\r\n        currStart = i;\r\n      }\r\n      ++currLen;\r\n    }\r\n  }\r\n\r\n  // if trailing zeros\r\n  if (currLen > maxLen) {\r\n    maxIdx = currStart;\r\n    maxLen = currLen;\r\n  }\r\n\r\n  return {\r\n    idx: maxIdx,\r\n    len: maxLen\r\n  };\r\n}\r\n\r\nfunction serializeHost(host) {\r\n  if (typeof host === \"number\") {\r\n    return serializeIPv4(host);\r\n  }\r\n\r\n  // IPv6 serializer\r\n  if (host instanceof Array) {\r\n    return \"[\" + serializeIPv6(host) + \"]\";\r\n  }\r\n\r\n  return host;\r\n}\r\n\r\nfunction trimControlChars(url) {\r\n  return url.replace(/^[\\u0000-\\u001F\\u0020]+|[\\u0000-\\u001F\\u0020]+$/g, \"\");\r\n}\r\n\r\nfunction trimTabAndNewline(url) {\r\n  return url.replace(/\\u0009|\\u000A|\\u000D/g, \"\");\r\n}\r\n\r\nfunction shortenPath(url) {\r\n  const path = url.path;\r\n  if (path.length === 0) {\r\n    return;\r\n  }\r\n  if (url.scheme === \"file\" && path.length === 1 && isNormalizedWindowsDriveLetter(path[0])) {\r\n    return;\r\n  }\r\n\r\n  path.pop();\r\n}\r\n\r\nfunction includesCredentials(url) {\r\n  return url.username !== \"\" || url.password !== \"\";\r\n}\r\n\r\nfunction cannotHaveAUsernamePasswordPort(url) {\r\n  return url.host === null || url.host === \"\" || url.cannotBeABaseURL || url.scheme === \"file\";\r\n}\r\n\r\nfunction isNormalizedWindowsDriveLetter(string) {\r\n  return /^[A-Za-z]:$/.test(string);\r\n}\r\n\r\nfunction URLStateMachine(input, base, encodingOverride, url, stateOverride) {\r\n  this.pointer = 0;\r\n  this.input = input;\r\n  this.base = base || null;\r\n  this.encodingOverride = encodingOverride || \"utf-8\";\r\n  this.stateOverride = stateOverride;\r\n  this.url = url;\r\n  this.failure = false;\r\n  this.parseError = false;\r\n\r\n  if (!this.url) {\r\n    this.url = {\r\n      scheme: \"\",\r\n      username: \"\",\r\n      password: \"\",\r\n      host: null,\r\n      port: null,\r\n      path: [],\r\n      query: null,\r\n      fragment: null,\r\n\r\n      cannotBeABaseURL: false\r\n    };\r\n\r\n    const res = trimControlChars(this.input);\r\n    if (res !== this.input) {\r\n      this.parseError = true;\r\n    }\r\n    this.input = res;\r\n  }\r\n\r\n  const res = trimTabAndNewline(this.input);\r\n  if (res !== this.input) {\r\n    this.parseError = true;\r\n  }\r\n  this.input = res;\r\n\r\n  this.state = stateOverride || \"scheme start\";\r\n\r\n  this.buffer = \"\";\r\n  this.atFlag = false;\r\n  this.arrFlag = false;\r\n  this.passwordTokenSeenFlag = false;\r\n\r\n  this.input = punycode.ucs2.decode(this.input);\r\n\r\n  for (; this.pointer <= this.input.length; ++this.pointer) {\r\n    const c = this.input[this.pointer];\r\n    const cStr = isNaN(c) ? undefined : String.fromCodePoint(c);\r\n\r\n    // exec state machine\r\n    const ret = this[\"parse \" + this.state](c, cStr);\r\n    if (!ret) {\r\n      break; // terminate algorithm\r\n    } else if (ret === failure) {\r\n      this.failure = true;\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\nURLStateMachine.prototype[\"parse scheme start\"] = function parseSchemeStart(c, cStr) {\r\n  if (isASCIIAlpha(c)) {\r\n    this.buffer += cStr.toLowerCase();\r\n    this.state = \"scheme\";\r\n  } else if (!this.stateOverride) {\r\n    this.state = \"no scheme\";\r\n    --this.pointer;\r\n  } else {\r\n    this.parseError = true;\r\n    return failure;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse scheme\"] = function parseScheme(c, cStr) {\r\n  if (isASCIIAlphanumeric(c) || c === 43 || c === 45 || c === 46) {\r\n    this.buffer += cStr.toLowerCase();\r\n  } else if (c === 58) {\r\n    if (this.stateOverride) {\r\n      if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {\r\n        return false;\r\n      }\r\n\r\n      if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {\r\n        return false;\r\n      }\r\n\r\n      if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === \"file\") {\r\n        return false;\r\n      }\r\n\r\n      if (this.url.scheme === \"file\" && (this.url.host === \"\" || this.url.host === null)) {\r\n        return false;\r\n      }\r\n    }\r\n    this.url.scheme = this.buffer;\r\n    this.buffer = \"\";\r\n    if (this.stateOverride) {\r\n      return false;\r\n    }\r\n    if (this.url.scheme === \"file\") {\r\n      if (this.input[this.pointer + 1] !== 47 || this.input[this.pointer + 2] !== 47) {\r\n        this.parseError = true;\r\n      }\r\n      this.state = \"file\";\r\n    } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {\r\n      this.state = \"special relative or authority\";\r\n    } else if (isSpecial(this.url)) {\r\n      this.state = \"special authority slashes\";\r\n    } else if (this.input[this.pointer + 1] === 47) {\r\n      this.state = \"path or authority\";\r\n      ++this.pointer;\r\n    } else {\r\n      this.url.cannotBeABaseURL = true;\r\n      this.url.path.push(\"\");\r\n      this.state = \"cannot-be-a-base-URL path\";\r\n    }\r\n  } else if (!this.stateOverride) {\r\n    this.buffer = \"\";\r\n    this.state = \"no scheme\";\r\n    this.pointer = -1;\r\n  } else {\r\n    this.parseError = true;\r\n    return failure;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse no scheme\"] = function parseNoScheme(c) {\r\n  if (this.base === null || (this.base.cannotBeABaseURL && c !== 35)) {\r\n    return failure;\r\n  } else if (this.base.cannotBeABaseURL && c === 35) {\r\n    this.url.scheme = this.base.scheme;\r\n    this.url.path = this.base.path.slice();\r\n    this.url.query = this.base.query;\r\n    this.url.fragment = \"\";\r\n    this.url.cannotBeABaseURL = true;\r\n    this.state = \"fragment\";\r\n  } else if (this.base.scheme === \"file\") {\r\n    this.state = \"file\";\r\n    --this.pointer;\r\n  } else {\r\n    this.state = \"relative\";\r\n    --this.pointer;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse special relative or authority\"] = function parseSpecialRelativeOrAuthority(c) {\r\n  if (c === 47 && this.input[this.pointer + 1] === 47) {\r\n    this.state = \"special authority ignore slashes\";\r\n    ++this.pointer;\r\n  } else {\r\n    this.parseError = true;\r\n    this.state = \"relative\";\r\n    --this.pointer;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse path or authority\"] = function parsePathOrAuthority(c) {\r\n  if (c === 47) {\r\n    this.state = \"authority\";\r\n  } else {\r\n    this.state = \"path\";\r\n    --this.pointer;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse relative\"] = function parseRelative(c) {\r\n  this.url.scheme = this.base.scheme;\r\n  if (isNaN(c)) {\r\n    this.url.username = this.base.username;\r\n    this.url.password = this.base.password;\r\n    this.url.host = this.base.host;\r\n    this.url.port = this.base.port;\r\n    this.url.path = this.base.path.slice();\r\n    this.url.query = this.base.query;\r\n  } else if (c === 47) {\r\n    this.state = \"relative slash\";\r\n  } else if (c === 63) {\r\n    this.url.username = this.base.username;\r\n    this.url.password = this.base.password;\r\n    this.url.host = this.base.host;\r\n    this.url.port = this.base.port;\r\n    this.url.path = this.base.path.slice();\r\n    this.url.query = \"\";\r\n    this.state = \"query\";\r\n  } else if (c === 35) {\r\n    this.url.username = this.base.username;\r\n    this.url.password = this.base.password;\r\n    this.url.host = this.base.host;\r\n    this.url.port = this.base.port;\r\n    this.url.path = this.base.path.slice();\r\n    this.url.query = this.base.query;\r\n    this.url.fragment = \"\";\r\n    this.state = \"fragment\";\r\n  } else if (isSpecial(this.url) && c === 92) {\r\n    this.parseError = true;\r\n    this.state = \"relative slash\";\r\n  } else {\r\n    this.url.username = this.base.username;\r\n    this.url.password = this.base.password;\r\n    this.url.host = this.base.host;\r\n    this.url.port = this.base.port;\r\n    this.url.path = this.base.path.slice(0, this.base.path.length - 1);\r\n\r\n    this.state = \"path\";\r\n    --this.pointer;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse relative slash\"] = function parseRelativeSlash(c) {\r\n  if (isSpecial(this.url) && (c === 47 || c === 92)) {\r\n    if (c === 92) {\r\n      this.parseError = true;\r\n    }\r\n    this.state = \"special authority ignore slashes\";\r\n  } else if (c === 47) {\r\n    this.state = \"authority\";\r\n  } else {\r\n    this.url.username = this.base.username;\r\n    this.url.password = this.base.password;\r\n    this.url.host = this.base.host;\r\n    this.url.port = this.base.port;\r\n    this.state = \"path\";\r\n    --this.pointer;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse special authority slashes\"] = function parseSpecialAuthoritySlashes(c) {\r\n  if (c === 47 && this.input[this.pointer + 1] === 47) {\r\n    this.state = \"special authority ignore slashes\";\r\n    ++this.pointer;\r\n  } else {\r\n    this.parseError = true;\r\n    this.state = \"special authority ignore slashes\";\r\n    --this.pointer;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse special authority ignore slashes\"] = function parseSpecialAuthorityIgnoreSlashes(c) {\r\n  if (c !== 47 && c !== 92) {\r\n    this.state = \"authority\";\r\n    --this.pointer;\r\n  } else {\r\n    this.parseError = true;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse authority\"] = function parseAuthority(c, cStr) {\r\n  if (c === 64) {\r\n    this.parseError = true;\r\n    if (this.atFlag) {\r\n      this.buffer = \"%40\" + this.buffer;\r\n    }\r\n    this.atFlag = true;\r\n\r\n    // careful, this is based on buffer and has its own pointer (this.pointer != pointer) and inner chars\r\n    const len = countSymbols(this.buffer);\r\n    for (let pointer = 0; pointer < len; ++pointer) {\r\n      const codePoint = this.buffer.codePointAt(pointer);\r\n\r\n      if (codePoint === 58 && !this.passwordTokenSeenFlag) {\r\n        this.passwordTokenSeenFlag = true;\r\n        continue;\r\n      }\r\n      const encodedCodePoints = percentEncodeChar(codePoint, isUserinfoPercentEncode);\r\n      if (this.passwordTokenSeenFlag) {\r\n        this.url.password += encodedCodePoints;\r\n      } else {\r\n        this.url.username += encodedCodePoints;\r\n      }\r\n    }\r\n    this.buffer = \"\";\r\n  } else if (isNaN(c) || c === 47 || c === 63 || c === 35 ||\r\n             (isSpecial(this.url) && c === 92)) {\r\n    if (this.atFlag && this.buffer === \"\") {\r\n      this.parseError = true;\r\n      return failure;\r\n    }\r\n    this.pointer -= countSymbols(this.buffer) + 1;\r\n    this.buffer = \"\";\r\n    this.state = \"host\";\r\n  } else {\r\n    this.buffer += cStr;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse hostname\"] =\r\nURLStateMachine.prototype[\"parse host\"] = function parseHostName(c, cStr) {\r\n  if (this.stateOverride && this.url.scheme === \"file\") {\r\n    --this.pointer;\r\n    this.state = \"file host\";\r\n  } else if (c === 58 && !this.arrFlag) {\r\n    if (this.buffer === \"\") {\r\n      this.parseError = true;\r\n      return failure;\r\n    }\r\n\r\n    const host = parseHost(this.buffer, isSpecial(this.url));\r\n    if (host === failure) {\r\n      return failure;\r\n    }\r\n\r\n    this.url.host = host;\r\n    this.buffer = \"\";\r\n    this.state = \"port\";\r\n    if (this.stateOverride === \"hostname\") {\r\n      return false;\r\n    }\r\n  } else if (isNaN(c) || c === 47 || c === 63 || c === 35 ||\r\n             (isSpecial(this.url) && c === 92)) {\r\n    --this.pointer;\r\n    if (isSpecial(this.url) && this.buffer === \"\") {\r\n      this.parseError = true;\r\n      return failure;\r\n    } else if (this.stateOverride && this.buffer === \"\" &&\r\n               (includesCredentials(this.url) || this.url.port !== null)) {\r\n      this.parseError = true;\r\n      return false;\r\n    }\r\n\r\n    const host = parseHost(this.buffer, isSpecial(this.url));\r\n    if (host === failure) {\r\n      return failure;\r\n    }\r\n\r\n    this.url.host = host;\r\n    this.buffer = \"\";\r\n    this.state = \"path start\";\r\n    if (this.stateOverride) {\r\n      return false;\r\n    }\r\n  } else {\r\n    if (c === 91) {\r\n      this.arrFlag = true;\r\n    } else if (c === 93) {\r\n      this.arrFlag = false;\r\n    }\r\n    this.buffer += cStr;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse port\"] = function parsePort(c, cStr) {\r\n  if (isASCIIDigit(c)) {\r\n    this.buffer += cStr;\r\n  } else if (isNaN(c) || c === 47 || c === 63 || c === 35 ||\r\n             (isSpecial(this.url) && c === 92) ||\r\n             this.stateOverride) {\r\n    if (this.buffer !== \"\") {\r\n      const port = parseInt(this.buffer);\r\n      if (port > Math.pow(2, 16) - 1) {\r\n        this.parseError = true;\r\n        return failure;\r\n      }\r\n      this.url.port = port === defaultPort(this.url.scheme) ? null : port;\r\n      this.buffer = \"\";\r\n    }\r\n    if (this.stateOverride) {\r\n      return false;\r\n    }\r\n    this.state = \"path start\";\r\n    --this.pointer;\r\n  } else {\r\n    this.parseError = true;\r\n    return failure;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nconst fileOtherwiseCodePoints = new Set([47, 92, 63, 35]);\r\n\r\nURLStateMachine.prototype[\"parse file\"] = function parseFile(c) {\r\n  this.url.scheme = \"file\";\r\n\r\n  if (c === 47 || c === 92) {\r\n    if (c === 92) {\r\n      this.parseError = true;\r\n    }\r\n    this.state = \"file slash\";\r\n  } else if (this.base !== null && this.base.scheme === \"file\") {\r\n    if (isNaN(c)) {\r\n      this.url.host = this.base.host;\r\n      this.url.path = this.base.path.slice();\r\n      this.url.query = this.base.query;\r\n    } else if (c === 63) {\r\n      this.url.host = this.base.host;\r\n      this.url.path = this.base.path.slice();\r\n      this.url.query = \"\";\r\n      this.state = \"query\";\r\n    } else if (c === 35) {\r\n      this.url.host = this.base.host;\r\n      this.url.path = this.base.path.slice();\r\n      this.url.query = this.base.query;\r\n      this.url.fragment = \"\";\r\n      this.state = \"fragment\";\r\n    } else {\r\n      if (this.input.length - this.pointer - 1 === 0 || // remaining consists of 0 code points\r\n          !isWindowsDriveLetterCodePoints(c, this.input[this.pointer + 1]) ||\r\n          (this.input.length - this.pointer - 1 >= 2 && // remaining has at least 2 code points\r\n           !fileOtherwiseCodePoints.has(this.input[this.pointer + 2]))) {\r\n        this.url.host = this.base.host;\r\n        this.url.path = this.base.path.slice();\r\n        shortenPath(this.url);\r\n      } else {\r\n        this.parseError = true;\r\n      }\r\n\r\n      this.state = \"path\";\r\n      --this.pointer;\r\n    }\r\n  } else {\r\n    this.state = \"path\";\r\n    --this.pointer;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse file slash\"] = function parseFileSlash(c) {\r\n  if (c === 47 || c === 92) {\r\n    if (c === 92) {\r\n      this.parseError = true;\r\n    }\r\n    this.state = \"file host\";\r\n  } else {\r\n    if (this.base !== null && this.base.scheme === \"file\") {\r\n      if (isNormalizedWindowsDriveLetterString(this.base.path[0])) {\r\n        this.url.path.push(this.base.path[0]);\r\n      } else {\r\n        this.url.host = this.base.host;\r\n      }\r\n    }\r\n    this.state = \"path\";\r\n    --this.pointer;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse file host\"] = function parseFileHost(c, cStr) {\r\n  if (isNaN(c) || c === 47 || c === 92 || c === 63 || c === 35) {\r\n    --this.pointer;\r\n    if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {\r\n      this.parseError = true;\r\n      this.state = \"path\";\r\n    } else if (this.buffer === \"\") {\r\n      this.url.host = \"\";\r\n      if (this.stateOverride) {\r\n        return false;\r\n      }\r\n      this.state = \"path start\";\r\n    } else {\r\n      let host = parseHost(this.buffer, isSpecial(this.url));\r\n      if (host === failure) {\r\n        return failure;\r\n      }\r\n      if (host === \"localhost\") {\r\n        host = \"\";\r\n      }\r\n      this.url.host = host;\r\n\r\n      if (this.stateOverride) {\r\n        return false;\r\n      }\r\n\r\n      this.buffer = \"\";\r\n      this.state = \"path start\";\r\n    }\r\n  } else {\r\n    this.buffer += cStr;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse path start\"] = function parsePathStart(c) {\r\n  if (isSpecial(this.url)) {\r\n    if (c === 92) {\r\n      this.parseError = true;\r\n    }\r\n    this.state = \"path\";\r\n\r\n    if (c !== 47 && c !== 92) {\r\n      --this.pointer;\r\n    }\r\n  } else if (!this.stateOverride && c === 63) {\r\n    this.url.query = \"\";\r\n    this.state = \"query\";\r\n  } else if (!this.stateOverride && c === 35) {\r\n    this.url.fragment = \"\";\r\n    this.state = \"fragment\";\r\n  } else if (c !== undefined) {\r\n    this.state = \"path\";\r\n    if (c !== 47) {\r\n      --this.pointer;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse path\"] = function parsePath(c) {\r\n  if (isNaN(c) || c === 47 || (isSpecial(this.url) && c === 92) ||\r\n      (!this.stateOverride && (c === 63 || c === 35))) {\r\n    if (isSpecial(this.url) && c === 92) {\r\n      this.parseError = true;\r\n    }\r\n\r\n    if (isDoubleDot(this.buffer)) {\r\n      shortenPath(this.url);\r\n      if (c !== 47 && !(isSpecial(this.url) && c === 92)) {\r\n        this.url.path.push(\"\");\r\n      }\r\n    } else if (isSingleDot(this.buffer) && c !== 47 &&\r\n               !(isSpecial(this.url) && c === 92)) {\r\n      this.url.path.push(\"\");\r\n    } else if (!isSingleDot(this.buffer)) {\r\n      if (this.url.scheme === \"file\" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {\r\n        if (this.url.host !== \"\" && this.url.host !== null) {\r\n          this.parseError = true;\r\n          this.url.host = \"\";\r\n        }\r\n        this.buffer = this.buffer[0] + \":\";\r\n      }\r\n      this.url.path.push(this.buffer);\r\n    }\r\n    this.buffer = \"\";\r\n    if (this.url.scheme === \"file\" && (c === undefined || c === 63 || c === 35)) {\r\n      while (this.url.path.length > 1 && this.url.path[0] === \"\") {\r\n        this.parseError = true;\r\n        this.url.path.shift();\r\n      }\r\n    }\r\n    if (c === 63) {\r\n      this.url.query = \"\";\r\n      this.state = \"query\";\r\n    }\r\n    if (c === 35) {\r\n      this.url.fragment = \"\";\r\n      this.state = \"fragment\";\r\n    }\r\n  } else {\r\n    // TODO: If c is not a URL code point and not \"%\", parse error.\r\n\r\n    if (c === 37 &&\r\n      (!isASCIIHex(this.input[this.pointer + 1]) ||\r\n        !isASCIIHex(this.input[this.pointer + 2]))) {\r\n      this.parseError = true;\r\n    }\r\n\r\n    this.buffer += percentEncodeChar(c, isPathPercentEncode);\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse cannot-be-a-base-URL path\"] = function parseCannotBeABaseURLPath(c) {\r\n  if (c === 63) {\r\n    this.url.query = \"\";\r\n    this.state = \"query\";\r\n  } else if (c === 35) {\r\n    this.url.fragment = \"\";\r\n    this.state = \"fragment\";\r\n  } else {\r\n    // TODO: Add: not a URL code point\r\n    if (!isNaN(c) && c !== 37) {\r\n      this.parseError = true;\r\n    }\r\n\r\n    if (c === 37 &&\r\n        (!isASCIIHex(this.input[this.pointer + 1]) ||\r\n         !isASCIIHex(this.input[this.pointer + 2]))) {\r\n      this.parseError = true;\r\n    }\r\n\r\n    if (!isNaN(c)) {\r\n      this.url.path[0] = this.url.path[0] + percentEncodeChar(c, isC0ControlPercentEncode);\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse query\"] = function parseQuery(c, cStr) {\r\n  if (isNaN(c) || (!this.stateOverride && c === 35)) {\r\n    if (!isSpecial(this.url) || this.url.scheme === \"ws\" || this.url.scheme === \"wss\") {\r\n      this.encodingOverride = \"utf-8\";\r\n    }\r\n\r\n    const buffer = new Buffer(this.buffer); // TODO: Use encoding override instead\r\n    for (let i = 0; i < buffer.length; ++i) {\r\n      if (buffer[i] < 0x21 || buffer[i] > 0x7E || buffer[i] === 0x22 || buffer[i] === 0x23 ||\r\n          buffer[i] === 0x3C || buffer[i] === 0x3E) {\r\n        this.url.query += percentEncode(buffer[i]);\r\n      } else {\r\n        this.url.query += String.fromCodePoint(buffer[i]);\r\n      }\r\n    }\r\n\r\n    this.buffer = \"\";\r\n    if (c === 35) {\r\n      this.url.fragment = \"\";\r\n      this.state = \"fragment\";\r\n    }\r\n  } else {\r\n    // TODO: If c is not a URL code point and not \"%\", parse error.\r\n    if (c === 37 &&\r\n      (!isASCIIHex(this.input[this.pointer + 1]) ||\r\n        !isASCIIHex(this.input[this.pointer + 2]))) {\r\n      this.parseError = true;\r\n    }\r\n\r\n    this.buffer += cStr;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nURLStateMachine.prototype[\"parse fragment\"] = function parseFragment(c) {\r\n  if (isNaN(c)) { // do nothing\r\n  } else if (c === 0x0) {\r\n    this.parseError = true;\r\n  } else {\r\n    // TODO: If c is not a URL code point and not \"%\", parse error.\r\n    if (c === 37 &&\r\n      (!isASCIIHex(this.input[this.pointer + 1]) ||\r\n        !isASCIIHex(this.input[this.pointer + 2]))) {\r\n      this.parseError = true;\r\n    }\r\n\r\n    this.url.fragment += percentEncodeChar(c, isC0ControlPercentEncode);\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nfunction serializeURL(url, excludeFragment) {\r\n  let output = url.scheme + \":\";\r\n  if (url.host !== null) {\r\n    output += \"//\";\r\n\r\n    if (url.username !== \"\" || url.password !== \"\") {\r\n      output += url.username;\r\n      if (url.password !== \"\") {\r\n        output += \":\" + url.password;\r\n      }\r\n      output += \"@\";\r\n    }\r\n\r\n    output += serializeHost(url.host);\r\n\r\n    if (url.port !== null) {\r\n      output += \":\" + url.port;\r\n    }\r\n  } else if (url.host === null && url.scheme === \"file\") {\r\n    output += \"//\";\r\n  }\r\n\r\n  if (url.cannotBeABaseURL) {\r\n    output += url.path[0];\r\n  } else {\r\n    for (const string of url.path) {\r\n      output += \"/\" + string;\r\n    }\r\n  }\r\n\r\n  if (url.query !== null) {\r\n    output += \"?\" + url.query;\r\n  }\r\n\r\n  if (!excludeFragment && url.fragment !== null) {\r\n    output += \"#\" + url.fragment;\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\nfunction serializeOrigin(tuple) {\r\n  let result = tuple.scheme + \"://\";\r\n  result += serializeHost(tuple.host);\r\n\r\n  if (tuple.port !== null) {\r\n    result += \":\" + tuple.port;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nmodule.exports.serializeURL = serializeURL;\r\n\r\nmodule.exports.serializeURLOrigin = function (url) {\r\n  // https://url.spec.whatwg.org/#concept-url-origin\r\n  switch (url.scheme) {\r\n    case \"blob\":\r\n      try {\r\n        return module.exports.serializeURLOrigin(module.exports.parseURL(url.path[0]));\r\n      } catch (e) {\r\n        // serializing an opaque origin returns \"null\"\r\n        return \"null\";\r\n      }\r\n    case \"ftp\":\r\n    case \"gopher\":\r\n    case \"http\":\r\n    case \"https\":\r\n    case \"ws\":\r\n    case \"wss\":\r\n      return serializeOrigin({\r\n        scheme: url.scheme,\r\n        host: url.host,\r\n        port: url.port\r\n      });\r\n    case \"file\":\r\n      // spec says \"exercise to the reader\", chrome says \"file://\"\r\n      return \"file://\";\r\n    default:\r\n      // serializing an opaque origin returns \"null\"\r\n      return \"null\";\r\n  }\r\n};\r\n\r\nmodule.exports.basicURLParse = function (input, options) {\r\n  if (options === undefined) {\r\n    options = {};\r\n  }\r\n\r\n  const usm = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);\r\n  if (usm.failure) {\r\n    return \"failure\";\r\n  }\r\n\r\n  return usm.url;\r\n};\r\n\r\nmodule.exports.setTheUsername = function (url, username) {\r\n  url.username = \"\";\r\n  const decoded = punycode.ucs2.decode(username);\r\n  for (let i = 0; i < decoded.length; ++i) {\r\n    url.username += percentEncodeChar(decoded[i], isUserinfoPercentEncode);\r\n  }\r\n};\r\n\r\nmodule.exports.setThePassword = function (url, password) {\r\n  url.password = \"\";\r\n  const decoded = punycode.ucs2.decode(password);\r\n  for (let i = 0; i < decoded.length; ++i) {\r\n    url.password += percentEncodeChar(decoded[i], isUserinfoPercentEncode);\r\n  }\r\n};\r\n\r\nmodule.exports.serializeHost = serializeHost;\r\n\r\nmodule.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;\r\n\r\nmodule.exports.serializeInteger = function (integer) {\r\n  return String(integer);\r\n};\r\n\r\nmodule.exports.parseURL = function (input, options) {\r\n  if (options === undefined) {\r\n    options = {};\r\n  }\r\n\r\n  // We don't handle blobs, so this just delegates:\r\n  return module.exports.basicURLParse(input, { baseURL: options.baseURL, encodingOverride: options.encodingOverride });\r\n};\r\n","\"use strict\";\n\nmodule.exports.mixin = function mixin(target, source) {\n  const keys = Object.getOwnPropertyNames(source);\n  for (let i = 0; i < keys.length; ++i) {\n    Object.defineProperty(target, keys[i], Object.getOwnPropertyDescriptor(source, keys[i]));\n  }\n};\n\nmodule.exports.wrapperSymbol = Symbol(\"wrapper\");\nmodule.exports.implSymbol = Symbol(\"impl\");\n\nmodule.exports.wrapperForImpl = function (impl) {\n  return impl[module.exports.wrapperSymbol];\n};\n\nmodule.exports.implForWrapper = function (wrapper) {\n  return wrapper[module.exports.implSymbol];\n};\n\n",null,"module.exports = require(\"assert\");","module.exports = require(\"child_process\");","module.exports = require(\"crypto\");","module.exports = require(\"events\");","module.exports = require(\"fs\");","module.exports = require(\"http\");","module.exports = require(\"https\");","module.exports = require(\"net\");","module.exports = require(\"os\");","module.exports = require(\"path\");","module.exports = require(\"punycode\");","module.exports = require(\"stream\");","module.exports = require(\"string_decoder\");","module.exports = require(\"timers\");","module.exports = require(\"tls\");","module.exports = require(\"url\");","module.exports = require(\"util\");","module.exports = require(\"zlib\");","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index_gen = require(\"./v2/index.gen.cjs\");\nconst index_gen$1 = require(\"./v3/index.gen.cjs\");\nexports.v2 = index_gen;\nexports.v3 = index_gen$1;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass API extends api.API {\n  /**\n   * Create a new Project for an Organization. Deprecated in favor of Account\n   * API v3. Generate a new Project for an Organization, specifying its\n   * configuration including name and description.\n   *\n   * @deprecated\n   * @param request - The request {@link CreateProjectRequest}\n   * @returns A Promise of Project\n   */\n  createProject = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateProjectRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/account/v2/projects`\n    },\n    marshalling_gen.unmarshalProject\n  );\n  pageOfListProjects = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/account/v2/projects`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\n          \"organization_id\",\n          request.organizationId ?? this.client.settings.defaultOrganizationId\n        ],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_ids\", request.projectIds]\n      )\n    },\n    marshalling_gen.unmarshalListProjectsResponse\n  );\n  /**\n   * List all Projects of an Organization. Deprecated in favor of Account API\n   * v3. List all Projects of an Organization. The response will include the\n   * total number of Projects as well as their associated Organizations, names\n   * and IDs. Other information include the creation and update date of the\n   * Project.\n   *\n   * @deprecated\n   * @param request - The request {@link ListProjectsRequest}\n   * @returns A Promise of ListProjectsResponse\n   */\n  listProjects = (request = {}) => resourcePaginator.enrichForPagination(\"projects\", this.pageOfListProjects, request);\n  /**\n   * Get an existing Project. Deprecated in favor of Account API v3. Retrieve\n   * information about an existing Project, specified by its Project ID. Its\n   * full details, including ID, name and description, are returned in the\n   * response object.\n   *\n   * @deprecated\n   * @param request - The request {@link GetProjectRequest}\n   * @returns A Promise of Project\n   */\n  getProject = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/account/v2/projects/${marshalling.validatePathParam(\"projectId\", request.projectId ?? this.client.settings.defaultProjectId)}`\n    },\n    marshalling_gen.unmarshalProject\n  );\n  /**\n   * Delete an existing Project. Deprecated in favor of Account API v3. Delete\n   * an existing Project, specified by its Project ID. The Project needs to be\n   * empty (meaning there are no resources left in it) to be deleted\n   * effectively. Note that deleting a Project is permanent, and cannot be\n   * undone.\n   *\n   * @deprecated\n   * @param request - The request {@link DeleteProjectRequest}\n   */\n  deleteProject = (request = {}) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/account/v2/projects/${marshalling.validatePathParam(\"projectId\", request.projectId ?? this.client.settings.defaultProjectId)}`\n  });\n  /**\n   * Update Project. Deprecated in favor of Account API v3. Update the\n   * parameters of an existing Project, specified by its Project ID. These\n   * parameters include the name and description.\n   *\n   * @deprecated\n   * @param request - The request {@link UpdateProjectRequest}\n   * @returns A Promise of Project\n   */\n  updateProject = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateProjectRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/account/v2/projects/${marshalling.validatePathParam(\"projectId\", request.projectId ?? this.client.settings.defaultProjectId)}`\n    },\n    marshalling_gen.unmarshalProject\n  );\n}\nexports.API = API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nexports.API = api_gen.API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst randomName = require(\"@scaleway/random-name\");\nconst json = require(\"../../../helpers/json.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst unmarshalProject = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Project' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    description: data.description,\n    id: data.id,\n    name: data.name,\n    organizationId: data.organization_id,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalListProjectsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListProjectsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    projects: marshalling.unmarshalArrayOfObject(data.projects, unmarshalProject),\n    totalCount: data.total_count\n  };\n};\nconst marshalCreateProjectRequest = (request, defaults) => ({\n  description: request.description,\n  name: request.name || randomName(\"proj\"),\n  organization_id: request.organizationId ?? defaults.defaultOrganizationId\n});\nconst marshalUpdateProjectRequest = (request, defaults) => ({\n  description: request.description,\n  name: request.name\n});\nexports.marshalCreateProjectRequest = marshalCreateProjectRequest;\nexports.marshalUpdateProjectRequest = marshalUpdateProjectRequest;\nexports.unmarshalListProjectsResponse = unmarshalListProjectsResponse;\nexports.unmarshalProject = unmarshalProject;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass ProjectAPI extends api.API {\n  /**\n   * Create a new Project for an Organization. Generate a new Project for an\n   * Organization, specifying its configuration including name and description.\n   *\n   * @param request - The request {@link ProjectApiCreateProjectRequest}\n   * @returns A Promise of Project\n   */\n  createProject = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalProjectApiCreateProjectRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/account/v3/projects`\n    },\n    marshalling_gen.unmarshalProject\n  );\n  pageOfListProjects = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/account/v3/projects`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\n          \"organization_id\",\n          request.organizationId ?? this.client.settings.defaultOrganizationId\n        ],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_ids\", request.projectIds]\n      )\n    },\n    marshalling_gen.unmarshalListProjectsResponse\n  );\n  /**\n   * List all Projects of an Organization. List all Projects of an Organization.\n   * The response will include the total number of Projects as well as their\n   * associated Organizations, names, and IDs. Other information includes the\n   * creation and update date of the Project.\n   *\n   * @param request - The request {@link ProjectApiListProjectsRequest}\n   * @returns A Promise of ListProjectsResponse\n   */\n  listProjects = (request = {}) => resourcePaginator.enrichForPagination(\"projects\", this.pageOfListProjects, request);\n  /**\n   * Get an existing Project. Retrieve information about an existing Project,\n   * specified by its Project ID. Its full details, including ID, name and\n   * description, are returned in the response object.\n   *\n   * @param request - The request {@link ProjectApiGetProjectRequest}\n   * @returns A Promise of Project\n   */\n  getProject = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/account/v3/projects/${marshalling.validatePathParam(\"projectId\", request.projectId ?? this.client.settings.defaultProjectId)}`\n    },\n    marshalling_gen.unmarshalProject\n  );\n  /**\n   * Delete an existing Project. Delete an existing Project, specified by its\n   * Project ID. The Project needs to be empty (meaning there are no resources\n   * left in it) to be deleted effectively. Note that deleting a Project is\n   * permanent, and cannot be undone.\n   *\n   * @param request - The request {@link ProjectApiDeleteProjectRequest}\n   */\n  deleteProject = (request = {}) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/account/v3/projects/${marshalling.validatePathParam(\"projectId\", request.projectId ?? this.client.settings.defaultProjectId)}`\n  });\n  /**\n   * Update Project. Update the parameters of an existing Project, specified by\n   * its Project ID. These parameters include the name and description.\n   *\n   * @param request - The request {@link ProjectApiUpdateProjectRequest}\n   * @returns A Promise of Project\n   */\n  updateProject = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalProjectApiUpdateProjectRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/account/v3/projects/${marshalling.validatePathParam(\"projectId\", request.projectId ?? this.client.settings.defaultProjectId)}`\n    },\n    marshalling_gen.unmarshalProject\n  );\n}\nexports.ProjectAPI = ProjectAPI;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nconst validationRules_gen = require(\"./validation-rules.gen.cjs\");\nexports.ProjectAPI = api_gen.ProjectAPI;\nexports.ValidationRules = validationRules_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst randomName = require(\"@scaleway/random-name\");\nconst json = require(\"../../../helpers/json.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst unmarshalProject = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Project' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    description: data.description,\n    id: data.id,\n    name: data.name,\n    organizationId: data.organization_id,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalListProjectsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListProjectsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    projects: marshalling.unmarshalArrayOfObject(data.projects, unmarshalProject),\n    totalCount: data.total_count\n  };\n};\nconst marshalProjectApiCreateProjectRequest = (request, defaults) => ({\n  description: request.description,\n  name: request.name || randomName(\"proj\"),\n  organization_id: request.organizationId ?? defaults.defaultOrganizationId\n});\nconst marshalProjectApiUpdateProjectRequest = (request, defaults) => ({\n  description: request.description,\n  name: request.name\n});\nexports.marshalProjectApiCreateProjectRequest = marshalProjectApiCreateProjectRequest;\nexports.marshalProjectApiUpdateProjectRequest = marshalProjectApiUpdateProjectRequest;\nexports.unmarshalListProjectsResponse = unmarshalListProjectsResponse;\nexports.unmarshalProject = unmarshalProject;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst ProjectApiCreateProjectRequest = {\n  description: {\n    maxLength: 200\n  },\n  name: {\n    maxLength: 64,\n    minLength: 1,\n    pattern: /^[a-zA-Z0-9\\._\\- ]+$/\n  }\n};\nconst ProjectApiListProjectsRequest = {\n  name: {\n    maxLength: 64,\n    minLength: 1,\n    pattern: /^[a-zA-Z0-9\\._\\- ]+$/\n  },\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThanOrEqual: 1,\n    lessThanOrEqual: 100\n  }\n};\nconst ProjectApiUpdateProjectRequest = {\n  description: {\n    maxLength: 200\n  },\n  name: {\n    maxLength: 64,\n    minLength: 1,\n    pattern: /^[a-zA-Z0-9\\._\\- ]+$/\n  }\n};\nexports.ProjectApiCreateProjectRequest = ProjectApiCreateProjectRequest;\nexports.ProjectApiListProjectsRequest = ProjectApiListProjectsRequest;\nexports.ProjectApiUpdateProjectRequest = ProjectApiUpdateProjectRequest;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index_gen = require(\"./v1alpha1/index.gen.cjs\");\nexports.v1alpha1 = index_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst intervalRetrier = require(\"../../../internal/async/interval-retrier.cjs\");\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass API extends api.API {\n  /** Lists the available zones of the API. */\n  static LOCALITIES = [\"fr-par-3\"];\n  /**\n   * List server types. List all technical details about Apple silicon server\n   * types available in the specified zone. Since there is only one Availability\n   * Zone for Apple silicon servers, the targeted value is `fr-par-3`.\n   *\n   * @param request - The request {@link ListServerTypesRequest}\n   * @returns A Promise of ListServerTypesResponse\n   */\n  listServerTypes = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/apple-silicon/v1alpha1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/server-types`\n    },\n    marshalling_gen.unmarshalListServerTypesResponse\n  );\n  /**\n   * Get a server type. Get technical details (CPU, disk size etc.) of a server\n   * type.\n   *\n   * @param request - The request {@link GetServerTypeRequest}\n   * @returns A Promise of ServerType\n   */\n  getServerType = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/apple-silicon/v1alpha1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/server-type/${marshalling.validatePathParam(\"serverType\", request.serverType)}`\n    },\n    marshalling_gen.unmarshalServerType\n  );\n  /**\n   * Create a server. Create a new server in the targeted zone, specifying its\n   * configuration including name and type.\n   *\n   * @param request - The request {@link CreateServerRequest}\n   * @returns A Promise of Server\n   */\n  createServer = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateServerRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/apple-silicon/v1alpha1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers`\n    },\n    marshalling_gen.unmarshalServer\n  );\n  pageOfListServers = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/apple-silicon/v1alpha1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListServersResponse\n  );\n  /**\n   * List all servers. List all servers in the specified zone. By default,\n   * returned servers in the list are ordered by creation date in ascending\n   * order, though this can be modified via the `order_by` field.\n   *\n   * @param request - The request {@link ListServersRequest}\n   * @returns A Promise of ListServersResponse\n   */\n  listServers = (request = {}) => resourcePaginator.enrichForPagination(\"servers\", this.pageOfListServers, request);\n  pageOfListOS = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/apple-silicon/v1alpha1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/os`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"server_type\", request.serverType]\n      )\n    },\n    marshalling_gen.unmarshalListOSResponse\n  );\n  /**\n   * List all Operating Systems (OS). List all Operating Systems (OS). The\n   * response will include the total number of OS as well as their associated\n   * IDs, names and labels.\n   *\n   * @param request - The request {@link ListOSRequest}\n   * @returns A Promise of ListOSResponse\n   */\n  listOS = (request = {}) => resourcePaginator.enrichForPagination(\"os\", this.pageOfListOS, request);\n  /**\n   * Get an Operating System (OS). Get an Operating System (OS). The response\n   * will include the OS's unique ID as well as its name and label.\n   *\n   * @param request - The request {@link GetOSRequest}\n   * @returns A Promise of OS\n   */\n  getOS = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/apple-silicon/v1alpha1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/os/${marshalling.validatePathParam(\"osId\", request.osId)}`\n    },\n    marshalling_gen.unmarshalOS\n  );\n  /**\n   * Get a server. Retrieve information about an existing Apple silicon server,\n   * specified by its server ID. Its full details, including name, status and IP\n   * address, are returned in the response object.\n   *\n   * @param request - The request {@link GetServerRequest}\n   * @returns A Promise of Server\n   */\n  getServer = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/apple-silicon/v1alpha1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}`\n    },\n    marshalling_gen.unmarshalServer\n  );\n  /**\n   * Waits for {@link Server} to be in a final state.\n   *\n   * @param request - The request {@link GetServerRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Server\n   */\n  waitForServer = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.SERVER_TRANSIENT_STATUSES.includes(res.status))),\n    this.getServer,\n    request,\n    options\n  );\n  /**\n   * Update a server. Update the parameters of an existing Apple silicon server,\n   * specified by its server ID.\n   *\n   * @param request - The request {@link UpdateServerRequest}\n   * @returns A Promise of Server\n   */\n  updateServer = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateServerRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/apple-silicon/v1alpha1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}`\n    },\n    marshalling_gen.unmarshalServer\n  );\n  /**\n   * Delete a server. Delete an existing Apple silicon server, specified by its\n   * server ID. Deleting a server is permanent, and cannot be undone. Note that\n   * the minimum allocation period for Apple silicon-as-a-service is 24 hours,\n   * meaning you cannot delete your server prior to that.\n   *\n   * @param request - The request {@link DeleteServerRequest}\n   */\n  deleteServer = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/apple-silicon/v1alpha1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}`\n  });\n  /**\n   * Reboot a server. Reboot an existing Apple silicon server, specified by its\n   * server ID.\n   *\n   * @param request - The request {@link RebootServerRequest}\n   * @returns A Promise of Server\n   */\n  rebootServer = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/apple-silicon/v1alpha1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/reboot`\n    },\n    marshalling_gen.unmarshalServer\n  );\n  /**\n   * Reinstall a server. Reinstall an existing Apple silicon server (specified\n   * by its server ID) from a new image (OS). All the data on the disk is\n   * deleted and all configuration is reset to the defailt configuration values\n   * of the image (OS).\n   *\n   * @param request - The request {@link ReinstallServerRequest}\n   * @returns A Promise of Server\n   */\n  reinstallServer = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalReinstallServerRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/apple-silicon/v1alpha1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/reinstall`\n    },\n    marshalling_gen.unmarshalServer\n  );\n}\nexports.API = API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst SERVER_TRANSIENT_STATUSES = [\n  \"starting\",\n  \"rebooting\",\n  \"updating\",\n  \"locking\",\n  \"unlocking\",\n  \"reinstalling\"\n];\nexports.SERVER_TRANSIENT_STATUSES = SERVER_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nexports.API = api_gen.API;\nexports.SERVER_TRANSIENT_STATUSES = content_gen.SERVER_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst randomName = require(\"@scaleway/random-name\");\nconst json = require(\"../../../helpers/json.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst unmarshalOS = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'OS' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    compatibleServerTypes: data.compatible_server_types,\n    family: data.family,\n    id: data.id,\n    imageUrl: data.image_url,\n    isBeta: data.is_beta,\n    label: data.label,\n    name: data.name,\n    version: data.version,\n    xcodeVersion: data.xcode_version\n  };\n};\nconst unmarshalServerTypeCPU = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ServerTypeCPU' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    coreCount: data.core_count,\n    frequency: data.frequency,\n    name: data.name\n  };\n};\nconst unmarshalServerTypeDisk = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ServerTypeDisk' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    capacity: data.capacity,\n    type: data.type\n  };\n};\nconst unmarshalServerTypeGPU = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ServerTypeGPU' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    count: data.count\n  };\n};\nconst unmarshalServerTypeMemory = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ServerTypeMemory' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    capacity: data.capacity,\n    type: data.type\n  };\n};\nconst unmarshalServerTypeNetwork = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ServerTypeNetwork' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    publicBandwidthBps: data.public_bandwidth_bps\n  };\n};\nconst unmarshalServerType = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ServerType' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    cpu: data.cpu ? unmarshalServerTypeCPU(data.cpu) : void 0,\n    defaultOs: data.default_os ? unmarshalOS(data.default_os) : void 0,\n    disk: data.disk ? unmarshalServerTypeDisk(data.disk) : void 0,\n    gpu: data.gpu ? unmarshalServerTypeGPU(data.gpu) : void 0,\n    memory: data.memory ? unmarshalServerTypeMemory(data.memory) : void 0,\n    minimumLeaseDuration: data.minimum_lease_duration,\n    name: data.name,\n    network: data.network ? unmarshalServerTypeNetwork(data.network) : void 0,\n    stock: data.stock\n  };\n};\nconst unmarshalServer = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Server' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    deletableAt: marshalling.unmarshalDate(data.deletable_at),\n    deletionScheduled: data.deletion_scheduled,\n    id: data.id,\n    ip: data.ip,\n    name: data.name,\n    organizationId: data.organization_id,\n    os: data.os ? unmarshalOS(data.os) : void 0,\n    projectId: data.project_id,\n    sshUsername: data.ssh_username,\n    status: data.status,\n    sudoPassword: data.sudo_password,\n    type: data.type,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    vncUrl: data.vnc_url,\n    zone: data.zone\n  };\n};\nconst unmarshalListOSResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListOSResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    os: marshalling.unmarshalArrayOfObject(data.os, unmarshalOS),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListServerTypesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListServerTypesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    serverTypes: marshalling.unmarshalArrayOfObject(data.server_types, unmarshalServerType)\n  };\n};\nconst unmarshalListServersResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListServersResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    servers: marshalling.unmarshalArrayOfObject(data.servers, unmarshalServer),\n    totalCount: data.total_count\n  };\n};\nconst marshalCreateServerRequest = (request, defaults) => ({\n  name: request.name || randomName(\"as\"),\n  os_id: request.osId,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  type: request.type\n});\nconst marshalReinstallServerRequest = (request, defaults) => ({\n  os_id: request.osId\n});\nconst marshalUpdateServerRequest = (request, defaults) => ({\n  name: request.name,\n  schedule_deletion: request.scheduleDeletion\n});\nexports.marshalCreateServerRequest = marshalCreateServerRequest;\nexports.marshalReinstallServerRequest = marshalReinstallServerRequest;\nexports.marshalUpdateServerRequest = marshalUpdateServerRequest;\nexports.unmarshalListOSResponse = unmarshalListOSResponse;\nexports.unmarshalListServerTypesResponse = unmarshalListServerTypesResponse;\nexports.unmarshalListServersResponse = unmarshalListServersResponse;\nexports.unmarshalOS = unmarshalOS;\nexports.unmarshalServer = unmarshalServer;\nexports.unmarshalServerType = unmarshalServerType;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index = require(\"./v1/index.cjs\");\nconst index_gen = require(\"./v3/index.gen.cjs\");\nexports.v1 = index;\nexports.v3 = index_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst intervalRetrier = require(\"../../../internal/async/interval-retrier.cjs\");\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass API extends api.API {\n  /** Lists the available zones of the API. */\n  static LOCALITIES = [\n    \"fr-par-1\",\n    \"fr-par-2\",\n    \"nl-ams-1\",\n    \"nl-ams-2\",\n    \"pl-waw-2\",\n    \"pl-waw-3\"\n  ];\n  pageOfListServers = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/baremetal/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"option_id\", request.optionId],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId],\n        [\"status\", request.status],\n        [\"tags\", request.tags]\n      )\n    },\n    marshalling_gen.unmarshalListServersResponse\n  );\n  /**\n   * List Elastic Metal servers for an Organization. List Elastic Metal servers\n   * for a specific Organization.\n   *\n   * @param request - The request {@link ListServersRequest}\n   * @returns A Promise of ListServersResponse\n   */\n  listServers = (request = {}) => resourcePaginator.enrichForPagination(\"servers\", this.pageOfListServers, request);\n  /**\n   * Get a specific Elastic Metal server. Get full details of an existing\n   * Elastic Metal server associated with the ID.\n   *\n   * @param request - The request {@link GetServerRequest}\n   * @returns A Promise of Server\n   */\n  getServer = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/baremetal/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}`\n    },\n    marshalling_gen.unmarshalServer\n  );\n  /**\n   * Waits for {@link Server} to be in a final state.\n   *\n   * @param request - The request {@link GetServerRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Server\n   */\n  waitForServer = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.SERVER_TRANSIENT_STATUSES.includes(res.status))),\n    this.getServer,\n    request,\n    options\n  );\n  /**\n   * Create an Elastic Metal server. Create a new Elastic Metal server. Once the\n   * server is created, proceed with the [installation of an OS](#post-3e949e).\n   *\n   * @param request - The request {@link CreateServerRequest}\n   * @returns A Promise of Server\n   */\n  createServer = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateServerRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/baremetal/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers`\n    },\n    marshalling_gen.unmarshalServer\n  );\n  /**\n   * Update an Elastic Metal server. Update the server associated with the ID.\n   * You can update parameters such as the server's name, tags and description.\n   * Any parameters left null in the request body are not updated.\n   *\n   * @param request - The request {@link UpdateServerRequest}\n   * @returns A Promise of Server\n   */\n  updateServer = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateServerRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/baremetal/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}`\n    },\n    marshalling_gen.unmarshalServer\n  );\n  /**\n   * Install an Elastic Metal server. Install an Operating System (OS) on the\n   * Elastic Metal server with a specific ID.\n   *\n   * @param request - The request {@link InstallServerRequest}\n   * @returns A Promise of Server\n   */\n  installServer = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalInstallServerRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/baremetal/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/install`\n    },\n    marshalling_gen.unmarshalServer\n  );\n  /**\n   * Return server metrics. Get the ping status of the server associated with\n   * the ID.\n   *\n   * @param request - The request {@link GetServerMetricsRequest}\n   * @returns A Promise of GetServerMetricsResponse\n   */\n  getServerMetrics = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/baremetal/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/metrics`\n    },\n    marshalling_gen.unmarshalGetServerMetricsResponse\n  );\n  /**\n   * Delete an Elastic Metal server. Delete the server associated with the ID.\n   *\n   * @param request - The request {@link DeleteServerRequest}\n   * @returns A Promise of Server\n   */\n  deleteServer = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/baremetal/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}`\n    },\n    marshalling_gen.unmarshalServer\n  );\n  /**\n   * Reboot an Elastic Metal server. Reboot the Elastic Metal server associated\n   * with the ID, use the `boot_type` `rescue` to reboot the server in rescue\n   * mode.\n   *\n   * @param request - The request {@link RebootServerRequest}\n   * @returns A Promise of Server\n   */\n  rebootServer = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalRebootServerRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/baremetal/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/reboot`\n    },\n    marshalling_gen.unmarshalServer\n  );\n  /**\n   * Start an Elastic Metal server. Start the server associated with the ID.\n   *\n   * @param request - The request {@link StartServerRequest}\n   * @returns A Promise of Server\n   */\n  startServer = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalStartServerRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/baremetal/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/start`\n    },\n    marshalling_gen.unmarshalServer\n  );\n  /**\n   * Stop an Elastic Metal server. Stop the server associated with the ID. The\n   * server remains allocated to your account and all data remains on the local\n   * storage of the server.\n   *\n   * @param request - The request {@link StopServerRequest}\n   * @returns A Promise of Server\n   */\n  stopServer = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/baremetal/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/stop`\n    },\n    marshalling_gen.unmarshalServer\n  );\n  pageOfListServerEvents = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/baremetal/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/events`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListServerEventsResponse\n  );\n  /**\n   * List server events. List event (i.e. start/stop/reboot) associated to the\n   * server ID.\n   *\n   * @param request - The request {@link ListServerEventsRequest}\n   * @returns A Promise of ListServerEventsResponse\n   */\n  listServerEvents = (request) => resourcePaginator.enrichForPagination(\"events\", this.pageOfListServerEvents, request);\n  /**\n   * Get default partitioning schema. Get the default partitioning schema for\n   * the given offer ID and OS ID.\n   *\n   * @param request - The request {@link GetDefaultPartitioningSchemaRequest}\n   * @returns A Promise of Schema\n   */\n  getDefaultPartitioningSchema = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/baremetal/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/partitioning-schemas/default`,\n      urlParams: marshalling.urlParams(\n        [\"offer_id\", request.offerId],\n        [\"os_id\", request.osId]\n      )\n    },\n    marshalling_gen.unmarshalSchema\n  );\n  /**\n   * Validate client partitioning schema. Validate the incoming partitioning\n   * schema from a user before installing the server. Return default ErrorCode\n   * if invalid.\n   *\n   * @param request - The request {@link ValidatePartitioningSchemaRequest}\n   */\n  validatePartitioningSchema = (request) => this.client.fetch({\n    body: JSON.stringify(\n      marshalling_gen.marshalValidatePartitioningSchemaRequest(request, this.client.settings)\n    ),\n    headers: jsonContentHeaders,\n    method: \"POST\",\n    path: `/baremetal/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/partitioning-schemas/validate`\n  });\n  /**\n   * Start BMC access. Start BMC (Baseboard Management Controller) access\n   * associated with the ID. The BMC (Baseboard Management Controller) access is\n   * available one hour after the installation of the server. You need first to\n   * create an option Remote Access. You will find the ID and the price with a\n   * call to listOffers\n   * (https://developers.scaleway.com/en/products/baremetal/api/#get-78db92).\n   * Then add the option\n   * https://developers.scaleway.com/en/products/baremetal/api/#post-b14abd.\n   * After adding the BMC option, you need to Get Remote Access to get the\n   * login/password\n   * https://developers.scaleway.com/en/products/baremetal/api/#get-cefc0f. Do\n   * not forget to delete the Option after use.\n   *\n   * @param request - The request {@link StartBMCAccessRequest}\n   * @returns A Promise of BMCAccess\n   */\n  startBMCAccess = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalStartBMCAccessRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/baremetal/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/bmc-access`\n    },\n    marshalling_gen.unmarshalBMCAccess\n  );\n  /**\n   * Get BMC access. Get the BMC (Baseboard Management Controller) access\n   * associated with the ID, including the URL and login information needed to\n   * connect.\n   *\n   * @param request - The request {@link GetBMCAccessRequest}\n   * @returns A Promise of BMCAccess\n   */\n  getBMCAccess = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/baremetal/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/bmc-access`\n    },\n    marshalling_gen.unmarshalBMCAccess\n  );\n  /**\n   * Stop BMC access. Stop BMC (Baseboard Management Controller) access\n   * associated with the ID.\n   *\n   * @param request - The request {@link StopBMCAccessRequest}\n   */\n  stopBMCAccess = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/baremetal/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/bmc-access`\n  });\n  /**\n   * Update IP. Configure the IP address associated with the server ID and IP\n   * ID. You can use this method to set a reverse DNS for an IP address.\n   *\n   * @param request - The request {@link UpdateIPRequest}\n   * @returns A Promise of IP\n   */\n  updateIP = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateIPRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/baremetal/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/ips/${marshalling.validatePathParam(\"ipId\", request.ipId)}`\n    },\n    marshalling_gen.unmarshalIP\n  );\n  /**\n   * Add server option. Add an option, such as Private Networks, to a specific\n   * server.\n   *\n   * @param request - The request {@link AddOptionServerRequest}\n   * @returns A Promise of Server\n   */\n  addOptionServer = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalAddOptionServerRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/baremetal/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/options/${marshalling.validatePathParam(\"optionId\", request.optionId)}`\n    },\n    marshalling_gen.unmarshalServer\n  );\n  /**\n   * Delete server option. Delete an option from a specific server.\n   *\n   * @param request - The request {@link DeleteOptionServerRequest}\n   * @returns A Promise of Server\n   */\n  deleteOptionServer = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/baremetal/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/options/${marshalling.validatePathParam(\"optionId\", request.optionId)}`\n    },\n    marshalling_gen.unmarshalServer\n  );\n  pageOfListOffers = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/baremetal/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/offers`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"subscription_period\", request.subscriptionPeriod]\n      )\n    },\n    marshalling_gen.unmarshalListOffersResponse\n  );\n  /**\n   * List offers. List all available Elastic Metal server configurations.\n   *\n   * @param request - The request {@link ListOffersRequest}\n   * @returns A Promise of ListOffersResponse\n   */\n  listOffers = (request = {}) => resourcePaginator.enrichForPagination(\"offers\", this.pageOfListOffers, request);\n  /**\n   * Get offer. Get details of an offer identified by its offer ID.\n   *\n   * @param request - The request {@link GetOfferRequest}\n   * @returns A Promise of Offer\n   */\n  getOffer = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/baremetal/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/offers/${marshalling.validatePathParam(\"offerId\", request.offerId)}`\n    },\n    marshalling_gen.unmarshalOffer\n  );\n  /**\n   * Get option. Return specific option for the ID.\n   *\n   * @param request - The request {@link GetOptionRequest}\n   * @returns A Promise of Option\n   */\n  getOption = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/baremetal/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/options/${marshalling.validatePathParam(\"optionId\", request.optionId)}`\n    },\n    marshalling_gen.unmarshalOption\n  );\n  pageOfListOptions = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/baremetal/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/options`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"offer_id\", request.offerId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListOptionsResponse\n  );\n  /**\n   * List options. List all options matching with filters.\n   *\n   * @param request - The request {@link ListOptionsRequest}\n   * @returns A Promise of ListOptionsResponse\n   */\n  listOptions = (request = {}) => resourcePaginator.enrichForPagination(\"options\", this.pageOfListOptions, request);\n  pageOfListSettings = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/baremetal/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/settings`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\n          \"project_id\",\n          request.projectId ?? this.client.settings.defaultProjectId\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListSettingsResponse\n  );\n  /**\n   * List all settings. Return all settings for a Project ID.\n   *\n   * @param request - The request {@link ListSettingsRequest}\n   * @returns A Promise of ListSettingsResponse\n   */\n  listSettings = (request = {}) => resourcePaginator.enrichForPagination(\"settings\", this.pageOfListSettings, request);\n  /**\n   * Update setting. Update a setting for a Project ID (enable or disable).\n   *\n   * @param request - The request {@link UpdateSettingRequest}\n   * @returns A Promise of Setting\n   */\n  updateSetting = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateSettingRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/baremetal/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/settings/${marshalling.validatePathParam(\"settingId\", request.settingId)}`\n    },\n    marshalling_gen.unmarshalSetting\n  );\n  pageOfListOS = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/baremetal/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/os`,\n      urlParams: marshalling.urlParams(\n        [\"offer_id\", request.offerId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListOSResponse\n  );\n  /**\n   * List available OSes. List all OSes that are available for installation on\n   * Elastic Metal servers.\n   *\n   * @param request - The request {@link ListOSRequest}\n   * @returns A Promise of ListOSResponse\n   */\n  listOS = (request = {}) => resourcePaginator.enrichForPagination(\"os\", this.pageOfListOS, request);\n  /**\n   * Get OS with an ID. Return the specific OS for the ID.\n   *\n   * @param request - The request {@link GetOSRequest}\n   * @returns A Promise of OS\n   */\n  getOS = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/baremetal/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/os/${marshalling.validatePathParam(\"osId\", request.osId)}`\n    },\n    marshalling_gen.unmarshalOS\n  );\n}\nclass PrivateNetworkAPI extends api.API {\n  /** Lists the available zones of the API. */\n  static LOCALITIES = [\"fr-par-2\"];\n  /**\n   * Add a server to a Private Network.\n   *\n   * @param request - The request\n   *   {@link PrivateNetworkApiAddServerPrivateNetworkRequest}\n   * @returns A Promise of ServerPrivateNetwork\n   */\n  addServerPrivateNetwork = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalPrivateNetworkApiAddServerPrivateNetworkRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/baremetal/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/private-networks`\n    },\n    marshalling_gen.unmarshalServerPrivateNetwork\n  );\n  /**\n   * Set multiple Private Networks on a server.\n   *\n   * @param request - The request\n   *   {@link PrivateNetworkApiSetServerPrivateNetworksRequest}\n   * @returns A Promise of SetServerPrivateNetworksResponse\n   */\n  setServerPrivateNetworks = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalPrivateNetworkApiSetServerPrivateNetworksRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/baremetal/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/private-networks`\n    },\n    marshalling_gen.unmarshalSetServerPrivateNetworksResponse\n  );\n  pageOfListServerPrivateNetworks = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/baremetal/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/server-private-networks`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"private_network_id\", request.privateNetworkId],\n        [\"project_id\", request.projectId],\n        [\"server_id\", request.serverId]\n      )\n    },\n    marshalling_gen.unmarshalListServerPrivateNetworksResponse\n  );\n  /**\n   * List the Private Networks of a server.\n   *\n   * @param request - The request\n   *   {@link PrivateNetworkApiListServerPrivateNetworksRequest}\n   * @returns A Promise of ListServerPrivateNetworksResponse\n   */\n  listServerPrivateNetworks = (request = {}) => resourcePaginator.enrichForPagination(\n    \"serverPrivateNetworks\",\n    this.pageOfListServerPrivateNetworks,\n    request\n  );\n  /**\n   * Delete a Private Network.\n   *\n   * @param request - The request\n   *   {@link PrivateNetworkApiDeleteServerPrivateNetworkRequest}\n   */\n  deleteServerPrivateNetwork = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/baremetal/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/private-networks/${marshalling.validatePathParam(\"privateNetworkId\", request.privateNetworkId)}`\n  });\n}\nexports.API = API;\nexports.PrivateNetworkAPI = PrivateNetworkAPI;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst intervalRetrier = require(\"../../../internal/async/interval-retrier.cjs\");\nconst api_gen = require(\"./api.gen.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nclass BaremetalV1UtilsAPI extends api_gen.API {\n  /**\n   * Waits for {@link ServerInstall} to be in a final state.\n   *\n   * @param request - The request {@link GetServerRequest}\n   * @param options - The waiting options\n   * @returns A Promise of ServerInstall\n   */\n  waitForServerInstall = (request, options) => intervalRetrier.tryAtIntervals(\n    async () => {\n      const value = await this.getServer(request).then((server) => {\n        if (!server.install) {\n          throw new Error(\n            `Server creation has not begun for server ${request.serverId}`\n          );\n        }\n        return server.install;\n      });\n      return {\n        done: !content_gen.SERVER_INSTALL_TRANSIENT_STATUSES.includes(value.status),\n        value\n      };\n    },\n    intervalRetrier.createExponentialBackoffStrategy(\n      options?.minDelay ?? 1,\n      options?.maxDelay ?? 30\n    ),\n    options?.timeout\n  );\n}\nexports.BaremetalV1UtilsAPI = BaremetalV1UtilsAPI;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst SERVER_INSTALL_TRANSIENT_STATUSES = [\n  \"to_install\",\n  \"installing\"\n];\nconst SERVER_PRIVATE_NETWORK_TRANSIENT_STATUSES = [\"attaching\", \"detaching\"];\nconst SERVER_TRANSIENT_STATUSES = [\n  \"delivering\",\n  \"stopping\",\n  \"starting\",\n  \"deleting\",\n  \"ordered\",\n  \"resetting\"\n];\nexports.SERVER_INSTALL_TRANSIENT_STATUSES = SERVER_INSTALL_TRANSIENT_STATUSES;\nexports.SERVER_PRIVATE_NETWORK_TRANSIENT_STATUSES = SERVER_PRIVATE_NETWORK_TRANSIENT_STATUSES;\nexports.SERVER_TRANSIENT_STATUSES = SERVER_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_utils = require(\"./api.utils.cjs\");\nconst api_gen = require(\"./api.gen.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst validationRules_gen = require(\"./validation-rules.gen.cjs\");\nexports.API = api_utils.BaremetalV1UtilsAPI;\nexports.PrivateNetworkAPI = api_gen.PrivateNetworkAPI;\nexports.SERVER_INSTALL_TRANSIENT_STATUSES = content_gen.SERVER_INSTALL_TRANSIENT_STATUSES;\nexports.SERVER_PRIVATE_NETWORK_TRANSIENT_STATUSES = content_gen.SERVER_PRIVATE_NETWORK_TRANSIENT_STATUSES;\nexports.SERVER_TRANSIENT_STATUSES = content_gen.SERVER_TRANSIENT_STATUSES;\nexports.ValidationRules = validationRules_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst json = require(\"../../../helpers/json.cjs\");\nconst customMarshalling = require(\"../../../scw/custom-marshalling.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nconst unmarshalSchemaPartition = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SchemaPartition' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    label: data.label,\n    number: data.number,\n    size: data.size\n  };\n};\nconst unmarshalSchemaPool = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SchemaPool' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    devices: data.devices,\n    filesystemOptions: data.filesystem_options,\n    name: data.name,\n    options: data.options,\n    type: data.type\n  };\n};\nconst unmarshalSchemaDisk = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SchemaDisk' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    device: data.device,\n    partitions: marshalling.unmarshalArrayOfObject(\n      data.partitions,\n      unmarshalSchemaPartition\n    )\n  };\n};\nconst unmarshalSchemaFilesystem = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SchemaFilesystem' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    device: data.device,\n    format: data.format,\n    mountpoint: data.mountpoint\n  };\n};\nconst unmarshalSchemaRAID = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SchemaRAID' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    devices: data.devices,\n    level: data.level,\n    name: data.name\n  };\n};\nconst unmarshalSchemaZFS = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SchemaZFS' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    pools: marshalling.unmarshalArrayOfObject(data.pools, unmarshalSchemaPool)\n  };\n};\nconst unmarshalSchema = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Schema' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    disks: marshalling.unmarshalArrayOfObject(data.disks, unmarshalSchemaDisk),\n    filesystems: marshalling.unmarshalArrayOfObject(\n      data.filesystems,\n      unmarshalSchemaFilesystem\n    ),\n    raids: marshalling.unmarshalArrayOfObject(data.raids, unmarshalSchemaRAID),\n    zfs: data.zfs ? unmarshalSchemaZFS(data.zfs) : void 0\n  };\n};\nconst unmarshalIP = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'IP' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    address: data.address,\n    id: data.id,\n    reverse: data.reverse,\n    reverseStatus: data.reverse_status,\n    reverseStatusMessage: data.reverse_status_message,\n    version: data.version\n  };\n};\nconst unmarshalOSOSField = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'OSOSField' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    defaultValue: data.default_value,\n    editable: data.editable,\n    required: data.required\n  };\n};\nconst unmarshalOS = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'OS' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    allowed: data.allowed,\n    customPartitioningSupported: data.custom_partitioning_supported,\n    enabled: data.enabled,\n    id: data.id,\n    licenseRequired: data.license_required,\n    logoUrl: data.logo_url,\n    name: data.name,\n    password: data.password ? unmarshalOSOSField(data.password) : void 0,\n    servicePassword: data.service_password ? unmarshalOSOSField(data.service_password) : void 0,\n    serviceUser: data.service_user ? unmarshalOSOSField(data.service_user) : void 0,\n    ssh: data.ssh ? unmarshalOSOSField(data.ssh) : void 0,\n    user: data.user ? unmarshalOSOSField(data.user) : void 0,\n    version: data.version\n  };\n};\nconst unmarshalCertificationOption = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'CertificationOption' failed as data isn't a dictionary.`\n    );\n  }\n  return {};\n};\nconst unmarshalLicenseOption = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'LicenseOption' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    osId: data.os_id\n  };\n};\nconst unmarshalPrivateNetworkOption = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'PrivateNetworkOption' failed as data isn't a dictionary.`\n    );\n  }\n  return {};\n};\nconst unmarshalPublicBandwidthOption = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'PublicBandwidthOption' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    bandwidthInBps: data.bandwidth_in_bps\n  };\n};\nconst unmarshalRemoteAccessOption = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'RemoteAccessOption' failed as data isn't a dictionary.`\n    );\n  }\n  return {};\n};\nconst unmarshalCPU = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'CPU' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    benchmark: data.benchmark,\n    coreCount: data.core_count,\n    frequency: data.frequency,\n    name: data.name,\n    threadCount: data.thread_count\n  };\n};\nconst unmarshalDisk = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Disk' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    capacity: data.capacity,\n    type: data.type\n  };\n};\nconst unmarshalMemory = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Memory' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    capacity: data.capacity,\n    frequency: data.frequency,\n    isEcc: data.is_ecc,\n    type: data.type\n  };\n};\nconst unmarshalOfferOptionOffer = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'OfferOptionOffer' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    certification: data.certification ? unmarshalCertificationOption(data.certification) : void 0,\n    enabled: data.enabled,\n    id: data.id,\n    license: data.license ? unmarshalLicenseOption(data.license) : void 0,\n    manageable: data.manageable,\n    name: data.name,\n    osId: data.os_id,\n    price: data.price ? customMarshalling.unmarshalMoney(data.price) : void 0,\n    privateNetwork: data.private_network ? unmarshalPrivateNetworkOption(data.private_network) : void 0,\n    publicBandwidth: data.public_bandwidth ? unmarshalPublicBandwidthOption(data.public_bandwidth) : void 0,\n    remoteAccess: data.remote_access ? unmarshalRemoteAccessOption(data.remote_access) : void 0,\n    subscriptionPeriod: data.subscription_period\n  };\n};\nconst unmarshalPersistentMemory = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'PersistentMemory' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    capacity: data.capacity,\n    frequency: data.frequency,\n    type: data.type\n  };\n};\nconst unmarshalRaidController = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'RaidController' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    model: data.model,\n    raidLevel: data.raid_level\n  };\n};\nconst unmarshalOffer = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Offer' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    bandwidth: data.bandwidth,\n    commercialRange: data.commercial_range,\n    cpus: marshalling.unmarshalArrayOfObject(data.cpus, unmarshalCPU),\n    disks: marshalling.unmarshalArrayOfObject(data.disks, unmarshalDisk),\n    enable: data.enable,\n    fee: data.fee ? customMarshalling.unmarshalMoney(data.fee) : void 0,\n    id: data.id,\n    incompatibleOsIds: data.incompatible_os_ids,\n    maxBandwidth: data.max_bandwidth,\n    memories: marshalling.unmarshalArrayOfObject(data.memories, unmarshalMemory),\n    name: data.name,\n    operationPath: data.operation_path,\n    options: marshalling.unmarshalArrayOfObject(data.options, unmarshalOfferOptionOffer),\n    persistentMemories: marshalling.unmarshalArrayOfObject(\n      data.persistent_memories,\n      unmarshalPersistentMemory\n    ),\n    pricePerHour: data.price_per_hour ? customMarshalling.unmarshalMoney(data.price_per_hour) : void 0,\n    pricePerMonth: data.price_per_month ? customMarshalling.unmarshalMoney(data.price_per_month) : void 0,\n    privateBandwidth: data.private_bandwidth,\n    quotaName: data.quota_name,\n    raidControllers: marshalling.unmarshalArrayOfObject(\n      data.raid_controllers,\n      unmarshalRaidController\n    ),\n    sharedBandwidth: data.shared_bandwidth,\n    stock: data.stock,\n    subscriptionPeriod: data.subscription_period,\n    tags: data.tags\n  };\n};\nconst unmarshalOption = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Option' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    certification: data.certification ? unmarshalCertificationOption(data.certification) : void 0,\n    id: data.id,\n    license: data.license ? unmarshalLicenseOption(data.license) : void 0,\n    manageable: data.manageable,\n    name: data.name,\n    privateNetwork: data.private_network ? unmarshalPrivateNetworkOption(data.private_network) : void 0,\n    publicBandwidth: data.public_bandwidth ? unmarshalPublicBandwidthOption(data.public_bandwidth) : void 0,\n    remoteAccess: data.remote_access ? unmarshalRemoteAccessOption(data.remote_access) : void 0\n  };\n};\nconst unmarshalServerPrivateNetwork = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ServerPrivateNetwork' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    id: data.id,\n    privateNetworkId: data.private_network_id,\n    projectId: data.project_id,\n    serverId: data.server_id,\n    status: data.status,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    vlan: data.vlan\n  };\n};\nconst unmarshalServerInstall = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ServerInstall' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    hostname: data.hostname,\n    osId: data.os_id,\n    partitioningSchema: data.partitioning_schema ? unmarshalSchema(data.partitioning_schema) : void 0,\n    serviceUrl: data.service_url,\n    serviceUser: data.service_user,\n    sshKeyIds: data.ssh_key_ids,\n    status: data.status,\n    user: data.user\n  };\n};\nconst unmarshalServerOption = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ServerOption' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    certification: data.certification ? unmarshalCertificationOption(data.certification) : void 0,\n    expiresAt: marshalling.unmarshalDate(data.expires_at),\n    id: data.id,\n    license: data.license ? unmarshalLicenseOption(data.license) : void 0,\n    manageable: data.manageable,\n    name: data.name,\n    privateNetwork: data.private_network ? unmarshalPrivateNetworkOption(data.private_network) : void 0,\n    publicBandwidth: data.public_bandwidth ? unmarshalPublicBandwidthOption(data.public_bandwidth) : void 0,\n    remoteAccess: data.remote_access ? unmarshalRemoteAccessOption(data.remote_access) : void 0,\n    status: data.status\n  };\n};\nconst unmarshalServerRescueServer = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ServerRescueServer' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    password: data.password,\n    user: data.user\n  };\n};\nconst unmarshalServer = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Server' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    bootType: data.boot_type,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    description: data.description,\n    domain: data.domain,\n    id: data.id,\n    install: data.install ? unmarshalServerInstall(data.install) : void 0,\n    ips: marshalling.unmarshalArrayOfObject(data.ips, unmarshalIP),\n    name: data.name,\n    offerId: data.offer_id,\n    offerName: data.offer_name,\n    options: marshalling.unmarshalArrayOfObject(data.options, unmarshalServerOption),\n    organizationId: data.organization_id,\n    pingStatus: data.ping_status,\n    projectId: data.project_id,\n    rescueServer: data.rescue_server ? unmarshalServerRescueServer(data.rescue_server) : void 0,\n    status: data.status,\n    tags: data.tags,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    zone: data.zone\n  };\n};\nconst unmarshalSetting = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Setting' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    enabled: data.enabled,\n    id: data.id,\n    projectId: data.project_id,\n    type: data.type\n  };\n};\nconst unmarshalBMCAccess = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'BMCAccess' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    expiresAt: marshalling.unmarshalDate(data.expires_at),\n    login: data.login,\n    password: data.password,\n    url: data.url\n  };\n};\nconst unmarshalGetServerMetricsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'GetServerMetricsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    pings: data.pings ? customMarshalling.unmarshalTimeSeries(data.pings) : void 0\n  };\n};\nconst unmarshalListOSResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListOSResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    os: marshalling.unmarshalArrayOfObject(data.os, unmarshalOS),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListOffersResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListOffersResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    offers: marshalling.unmarshalArrayOfObject(data.offers, unmarshalOffer),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListOptionsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListOptionsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    options: marshalling.unmarshalArrayOfObject(data.options, unmarshalOption),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalServerEvent = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ServerEvent' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    action: data.action,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    id: data.id,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalListServerEventsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListServerEventsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    events: marshalling.unmarshalArrayOfObject(data.events, unmarshalServerEvent),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListServerPrivateNetworksResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListServerPrivateNetworksResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    serverPrivateNetworks: marshalling.unmarshalArrayOfObject(\n      data.server_private_networks,\n      unmarshalServerPrivateNetwork\n    ),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListServersResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListServersResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    servers: marshalling.unmarshalArrayOfObject(data.servers, unmarshalServer),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListSettingsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListSettingsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    settings: marshalling.unmarshalArrayOfObject(data.settings, unmarshalSetting),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalSetServerPrivateNetworksResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SetServerPrivateNetworksResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    serverPrivateNetworks: marshalling.unmarshalArrayOfObject(\n      data.server_private_networks,\n      unmarshalServerPrivateNetwork\n    )\n  };\n};\nconst marshalAddOptionServerRequest = (request, defaults) => ({\n  expires_at: request.expiresAt\n});\nconst marshalSchemaPartition = (request, defaults) => ({\n  label: request.label,\n  number: request.number,\n  size: request.size\n});\nconst marshalSchemaPool = (request, defaults) => ({\n  devices: request.devices,\n  filesystem_options: request.filesystemOptions,\n  name: request.name,\n  options: request.options,\n  type: request.type\n});\nconst marshalSchemaDisk = (request, defaults) => ({\n  device: request.device,\n  partitions: request.partitions.map(\n    (elt) => marshalSchemaPartition(elt)\n  )\n});\nconst marshalSchemaFilesystem = (request, defaults) => ({\n  device: request.device,\n  format: request.format,\n  mountpoint: request.mountpoint\n});\nconst marshalSchemaRAID = (request, defaults) => ({\n  devices: request.devices,\n  level: request.level,\n  name: request.name\n});\nconst marshalSchemaZFS = (request, defaults) => ({\n  pools: request.pools.map((elt) => marshalSchemaPool(elt))\n});\nconst marshalSchema = (request, defaults) => ({\n  disks: request.disks.map((elt) => marshalSchemaDisk(elt)),\n  filesystems: request.filesystems.map(\n    (elt) => marshalSchemaFilesystem(elt)\n  ),\n  raids: request.raids.map((elt) => marshalSchemaRAID(elt)),\n  zfs: request.zfs !== void 0 ? marshalSchemaZFS(request.zfs) : void 0\n});\nconst marshalCreateServerRequestInstall = (request, defaults) => ({\n  hostname: request.hostname,\n  os_id: request.osId,\n  partitioning_schema: request.partitioningSchema !== void 0 ? marshalSchema(request.partitioningSchema) : void 0,\n  password: request.password,\n  service_password: request.servicePassword,\n  service_user: request.serviceUser,\n  ssh_key_ids: request.sshKeyIds,\n  user: request.user\n});\nconst marshalCreateServerRequest = (request, defaults) => ({\n  description: request.description,\n  install: request.install !== void 0 ? marshalCreateServerRequestInstall(request.install) : void 0,\n  name: request.name,\n  offer_id: request.offerId,\n  option_ids: request.optionIds,\n  tags: request.tags,\n  ...marshalling.resolveOneOf([\n    {\n      default: defaults.defaultProjectId,\n      param: \"project_id\",\n      value: request.projectId\n    },\n    {\n      default: defaults.defaultOrganizationId,\n      param: \"organization_id\",\n      value: request.organizationId\n    }\n  ])\n});\nconst marshalInstallServerRequest = (request, defaults) => ({\n  hostname: request.hostname,\n  os_id: request.osId,\n  partitioning_schema: request.partitioningSchema !== void 0 ? marshalSchema(request.partitioningSchema) : void 0,\n  password: request.password,\n  service_password: request.servicePassword,\n  service_user: request.serviceUser,\n  ssh_key_ids: request.sshKeyIds,\n  user: request.user\n});\nconst marshalPrivateNetworkApiAddServerPrivateNetworkRequest = (request, defaults) => ({\n  private_network_id: request.privateNetworkId\n});\nconst marshalPrivateNetworkApiSetServerPrivateNetworksRequest = (request, defaults) => ({\n  private_network_ids: request.privateNetworkIds\n});\nconst marshalRebootServerRequest = (request, defaults) => ({\n  boot_type: request.bootType\n});\nconst marshalStartBMCAccessRequest = (request, defaults) => ({\n  ip: request.ip\n});\nconst marshalStartServerRequest = (request, defaults) => ({\n  boot_type: request.bootType\n});\nconst marshalUpdateIPRequest = (request, defaults) => ({\n  reverse: request.reverse\n});\nconst marshalUpdateServerRequest = (request, defaults) => ({\n  description: request.description,\n  name: request.name,\n  tags: request.tags\n});\nconst marshalUpdateSettingRequest = (request, defaults) => ({\n  enabled: request.enabled\n});\nconst marshalValidatePartitioningSchemaRequest = (request, defaults) => ({\n  offer_id: request.offerId,\n  os_id: request.osId,\n  partitioning_schema: request.partitioningSchema !== void 0 ? marshalSchema(request.partitioningSchema) : void 0\n});\nexports.marshalAddOptionServerRequest = marshalAddOptionServerRequest;\nexports.marshalCreateServerRequest = marshalCreateServerRequest;\nexports.marshalInstallServerRequest = marshalInstallServerRequest;\nexports.marshalPrivateNetworkApiAddServerPrivateNetworkRequest = marshalPrivateNetworkApiAddServerPrivateNetworkRequest;\nexports.marshalPrivateNetworkApiSetServerPrivateNetworksRequest = marshalPrivateNetworkApiSetServerPrivateNetworksRequest;\nexports.marshalRebootServerRequest = marshalRebootServerRequest;\nexports.marshalSchema = marshalSchema;\nexports.marshalStartBMCAccessRequest = marshalStartBMCAccessRequest;\nexports.marshalStartServerRequest = marshalStartServerRequest;\nexports.marshalUpdateIPRequest = marshalUpdateIPRequest;\nexports.marshalUpdateServerRequest = marshalUpdateServerRequest;\nexports.marshalUpdateSettingRequest = marshalUpdateSettingRequest;\nexports.marshalValidatePartitioningSchemaRequest = marshalValidatePartitioningSchemaRequest;\nexports.unmarshalBMCAccess = unmarshalBMCAccess;\nexports.unmarshalGetServerMetricsResponse = unmarshalGetServerMetricsResponse;\nexports.unmarshalIP = unmarshalIP;\nexports.unmarshalListOSResponse = unmarshalListOSResponse;\nexports.unmarshalListOffersResponse = unmarshalListOffersResponse;\nexports.unmarshalListOptionsResponse = unmarshalListOptionsResponse;\nexports.unmarshalListServerEventsResponse = unmarshalListServerEventsResponse;\nexports.unmarshalListServerPrivateNetworksResponse = unmarshalListServerPrivateNetworksResponse;\nexports.unmarshalListServersResponse = unmarshalListServersResponse;\nexports.unmarshalListSettingsResponse = unmarshalListSettingsResponse;\nexports.unmarshalOS = unmarshalOS;\nexports.unmarshalOffer = unmarshalOffer;\nexports.unmarshalOption = unmarshalOption;\nexports.unmarshalSchema = unmarshalSchema;\nexports.unmarshalServer = unmarshalServer;\nexports.unmarshalServerPrivateNetwork = unmarshalServerPrivateNetwork;\nexports.unmarshalSetServerPrivateNetworksResponse = unmarshalSetServerPrivateNetworksResponse;\nexports.unmarshalSetting = unmarshalSetting;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst CreateServerRequest = {\n  description: {\n    maxLength: 255\n  },\n  name: {\n    minLength: 1\n  }\n};\nconst CreateServerRequestInstall = {\n  hostname: {\n    maxLength: 255\n  },\n  password: {\n    maxLength: 255\n  },\n  servicePassword: {\n    maxLength: 255\n  },\n  serviceUser: {\n    maxLength: 255\n  },\n  user: {\n    maxLength: 255\n  }\n};\nconst InstallServerRequest = {\n  hostname: {\n    maxLength: 255\n  },\n  password: {\n    maxLength: 255\n  },\n  servicePassword: {\n    maxLength: 255\n  },\n  serviceUser: {\n    maxLength: 255\n  },\n  user: {\n    maxLength: 255\n  }\n};\nconst ListOSRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nconst ListOffersRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nconst ListOptionsRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nconst ListServerEventsRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nconst ListServersRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nconst ListSettingsRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nconst UpdateServerRequest = {\n  description: {\n    maxLength: 255\n  },\n  name: {\n    maxLength: 255\n  }\n};\nexports.CreateServerRequest = CreateServerRequest;\nexports.CreateServerRequestInstall = CreateServerRequestInstall;\nexports.InstallServerRequest = InstallServerRequest;\nexports.ListOSRequest = ListOSRequest;\nexports.ListOffersRequest = ListOffersRequest;\nexports.ListOptionsRequest = ListOptionsRequest;\nexports.ListServerEventsRequest = ListServerEventsRequest;\nexports.ListServersRequest = ListServersRequest;\nexports.ListSettingsRequest = ListSettingsRequest;\nexports.UpdateServerRequest = UpdateServerRequest;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass PrivateNetworkAPI extends api.API {\n  /** Lists the available zones of the API. */\n  static LOCALITIES = [\n    \"fr-par-1\",\n    \"fr-par-2\",\n    \"nl-ams-1\",\n    \"nl-ams-2\",\n    \"pl-waw-2\",\n    \"pl-waw-3\"\n  ];\n  /**\n   * Add a server to a Private Network. Add an Elastic Metal server to a Private\n   * Network.\n   *\n   * @param request - The request\n   *   {@link PrivateNetworkApiAddServerPrivateNetworkRequest}\n   * @returns A Promise of ServerPrivateNetwork\n   */\n  addServerPrivateNetwork = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalPrivateNetworkApiAddServerPrivateNetworkRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/baremetal/v3/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/private-networks`\n    },\n    marshalling_gen.unmarshalServerPrivateNetwork\n  );\n  /**\n   * Set multiple Private Networks on a server. Configure multiple Private\n   * Networks on an Elastic Metal server.\n   *\n   * @param request - The request\n   *   {@link PrivateNetworkApiSetServerPrivateNetworksRequest}\n   * @returns A Promise of SetServerPrivateNetworksResponse\n   */\n  setServerPrivateNetworks = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalPrivateNetworkApiSetServerPrivateNetworksRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/baremetal/v3/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/private-networks`\n    },\n    marshalling_gen.unmarshalSetServerPrivateNetworksResponse\n  );\n  pageOfListServerPrivateNetworks = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/baremetal/v3/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/server-private-networks`,\n      urlParams: marshalling.urlParams(\n        [\"ipam_ip_ids\", request.ipamIpIds],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"private_network_id\", request.privateNetworkId],\n        [\"project_id\", request.projectId],\n        [\"server_id\", request.serverId]\n      )\n    },\n    marshalling_gen.unmarshalListServerPrivateNetworksResponse\n  );\n  /**\n   * List the Private Networks of a server. List the Private Networks of an\n   * Elastic Metal server.\n   *\n   * @param request - The request\n   *   {@link PrivateNetworkApiListServerPrivateNetworksRequest}\n   * @returns A Promise of ListServerPrivateNetworksResponse\n   */\n  listServerPrivateNetworks = (request = {}) => resourcePaginator.enrichForPagination(\n    \"serverPrivateNetworks\",\n    this.pageOfListServerPrivateNetworks,\n    request\n  );\n  /**\n   * Delete a Private Network.\n   *\n   * @param request - The request\n   *   {@link PrivateNetworkApiDeleteServerPrivateNetworkRequest}\n   */\n  deleteServerPrivateNetwork = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/baremetal/v3/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/private-networks/${marshalling.validatePathParam(\"privateNetworkId\", request.privateNetworkId)}`\n  });\n}\nexports.PrivateNetworkAPI = PrivateNetworkAPI;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst SERVER_PRIVATE_NETWORK_TRANSIENT_STATUSES = [\"attaching\", \"detaching\"];\nexports.SERVER_PRIVATE_NETWORK_TRANSIENT_STATUSES = SERVER_PRIVATE_NETWORK_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nexports.PrivateNetworkAPI = api_gen.PrivateNetworkAPI;\nexports.SERVER_PRIVATE_NETWORK_TRANSIENT_STATUSES = content_gen.SERVER_PRIVATE_NETWORK_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst json = require(\"../../../helpers/json.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst unmarshalServerPrivateNetwork = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ServerPrivateNetwork' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    id: data.id,\n    ipamIpIds: data.ipam_ip_ids,\n    privateNetworkId: data.private_network_id,\n    projectId: data.project_id,\n    serverId: data.server_id,\n    status: data.status,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    vlan: data.vlan\n  };\n};\nconst unmarshalListServerPrivateNetworksResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListServerPrivateNetworksResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    serverPrivateNetworks: marshalling.unmarshalArrayOfObject(\n      data.server_private_networks,\n      unmarshalServerPrivateNetwork\n    ),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalSetServerPrivateNetworksResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SetServerPrivateNetworksResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    serverPrivateNetworks: marshalling.unmarshalArrayOfObject(\n      data.server_private_networks,\n      unmarshalServerPrivateNetwork\n    )\n  };\n};\nconst marshalPrivateNetworkApiAddServerPrivateNetworkRequest = (request, defaults) => ({\n  ipam_ip_ids: request.ipamIpIds,\n  private_network_id: request.privateNetworkId\n});\nconst marshalPrivateNetworkApiSetServerPrivateNetworksRequest = (request, defaults) => ({\n  per_private_network_ipam_ip_ids: request.perPrivateNetworkIpamIpIds\n});\nexports.marshalPrivateNetworkApiAddServerPrivateNetworkRequest = marshalPrivateNetworkApiAddServerPrivateNetworkRequest;\nexports.marshalPrivateNetworkApiSetServerPrivateNetworksRequest = marshalPrivateNetworkApiSetServerPrivateNetworksRequest;\nexports.unmarshalListServerPrivateNetworksResponse = unmarshalListServerPrivateNetworksResponse;\nexports.unmarshalServerPrivateNetwork = unmarshalServerPrivateNetwork;\nexports.unmarshalSetServerPrivateNetworksResponse = unmarshalSetServerPrivateNetworksResponse;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index_gen = require(\"./v2alpha1/index.gen.cjs\");\nconst index_gen$1 = require(\"./v2beta1/index.gen.cjs\");\nexports.v2alpha1 = index_gen;\nexports.v2beta1 = index_gen$1;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nclass API extends api.API {\n  /**\n   * Get current month's consumption. The consumption reflects the amount of\n   * money you have spent for the products you have used. The consumption value\n   * is monetary and is not computed in real time.\n   *\n   * @param request - The request {@link GetConsumptionRequest}\n   * @returns A Promise of GetConsumptionResponse\n   */\n  getConsumption = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/billing/v2alpha1/consumption`,\n      urlParams: marshalling.urlParams([\n        \"organization_id\",\n        request.organizationId ?? this.client.settings.defaultOrganizationId\n      ])\n    },\n    marshalling_gen.unmarshalGetConsumptionResponse\n  );\n  pageOfListInvoices = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/billing/v2alpha1/invoices`,\n      urlParams: marshalling.urlParams(\n        [\"invoice_type\", request.invoiceType],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"started_after\", request.startedAfter],\n        [\"started_before\", request.startedBefore]\n      )\n    },\n    marshalling_gen.unmarshalListInvoicesResponse\n  );\n  /**\n   * List invoices. List all your invoices, filtering by `start_date` and\n   * `invoice_type`. Each invoice has its own ID.\n   *\n   * @param request - The request {@link ListInvoicesRequest}\n   * @returns A Promise of ListInvoicesResponse\n   */\n  listInvoices = (request = {}) => resourcePaginator.enrichForPagination(\"invoices\", this.pageOfListInvoices, request);\n  /**\n   * Download an invoice. Download a specific invoice, specified by its ID.\n   *\n   * @param request - The request {@link DownloadInvoiceRequest}\n   * @returns A Promise of Blob\n   */\n  downloadInvoice = (request) => this.client.fetch({\n    method: \"GET\",\n    path: `/billing/v2alpha1/invoices/${marshalling.validatePathParam(\"invoiceId\", request.invoiceId)}/download`,\n    urlParams: marshalling.urlParams([\"dl\", 1], [\"file_type\", request.fileType]),\n    responseType: \"blob\"\n  });\n  pageOfListDiscounts = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/billing/v2alpha1/discounts`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListDiscountsResponse\n  );\n  /**\n   * List all user's discounts. List all discounts for an organization and\n   * usable categories/products/offers/references/regions/zones where the\n   * discount can be applied.\n   *\n   * @param request - The request {@link ListDiscountsRequest}\n   * @returns A Promise of ListDiscountsResponse\n   */\n  listDiscounts = (request = {}) => resourcePaginator.enrichForPagination(\"discounts\", this.pageOfListDiscounts, request);\n}\nexports.API = API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nexports.API = api_gen.API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst json = require(\"../../../helpers/json.cjs\");\nconst customMarshalling = require(\"../../../scw/custom-marshalling.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nconst unmarshalGetConsumptionResponseConsumption = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'GetConsumptionResponseConsumption' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    category: data.category,\n    description: data.description,\n    operationPath: data.operation_path,\n    projectId: data.project_id,\n    value: data.value ? customMarshalling.unmarshalMoney(data.value) : void 0\n  };\n};\nconst unmarshalGetConsumptionResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'GetConsumptionResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    consumptions: marshalling.unmarshalArrayOfObject(\n      data.consumptions,\n      unmarshalGetConsumptionResponseConsumption\n    ),\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalDiscountCoupon = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DiscountCoupon' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    description: data.description\n  };\n};\nconst unmarshalDiscountFilter = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DiscountFilter' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    exclude: data.exclude,\n    type: data.type,\n    value: data.value\n  };\n};\nconst unmarshalDiscount = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Discount' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    coupon: data.coupon ? unmarshalDiscountCoupon(data.coupon) : void 0,\n    creationDate: marshalling.unmarshalDate(data.creation_date),\n    description: data.description,\n    filters: marshalling.unmarshalArrayOfObject(data.filters, unmarshalDiscountFilter),\n    id: data.id,\n    mode: data.mode,\n    organizationId: data.organization_id,\n    startDate: marshalling.unmarshalDate(data.start_date),\n    stopDate: marshalling.unmarshalDate(data.stop_date),\n    value: data.value,\n    valueRemaining: data.value_remaining,\n    valueUsed: data.value_used\n  };\n};\nconst unmarshalListDiscountsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListDiscountsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    discounts: marshalling.unmarshalArrayOfObject(data.discounts, unmarshalDiscount),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalInvoice = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Invoice' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    dueDate: marshalling.unmarshalDate(data.due_date),\n    id: data.id,\n    invoiceType: data.invoice_type,\n    issuedDate: marshalling.unmarshalDate(data.issued_date),\n    number: data.number,\n    startDate: marshalling.unmarshalDate(data.start_date),\n    totalTaxed: data.total_taxed ? customMarshalling.unmarshalMoney(data.total_taxed) : void 0,\n    totalUntaxed: data.total_untaxed ? customMarshalling.unmarshalMoney(data.total_untaxed) : void 0\n  };\n};\nconst unmarshalListInvoicesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListInvoicesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    invoices: marshalling.unmarshalArrayOfObject(data.invoices, unmarshalInvoice),\n    totalCount: data.total_count\n  };\n};\nexports.unmarshalGetConsumptionResponse = unmarshalGetConsumptionResponse;\nexports.unmarshalListDiscountsResponse = unmarshalListDiscountsResponse;\nexports.unmarshalListInvoicesResponse = unmarshalListInvoicesResponse;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nclass API extends api.API {\n  pageOfListConsumptions = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/billing/v2beta1/consumptions`,\n      urlParams: marshalling.urlParams(\n        [\"billing_period\", request.billingPeriod],\n        [\"category_name\", request.categoryName],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        ...Object.entries(\n          marshalling.resolveOneOf([\n            {\n              default: this.client.settings.defaultOrganizationId,\n              param: \"organization_id\",\n              value: request.organizationId\n            },\n            {\n              default: this.client.settings.defaultProjectId,\n              param: \"project_id\",\n              value: request.projectId\n            }\n          ])\n        )\n      )\n    },\n    marshalling_gen.unmarshalListConsumptionsResponse\n  );\n  /**\n   * Get monthly consumption. Consumption allows you to retrieve your past or\n   * current consumption cost, by project or category.\n   *\n   * @param request - The request {@link ListConsumptionsRequest}\n   * @returns A Promise of ListConsumptionsResponse\n   */\n  listConsumptions = (request = {}) => resourcePaginator.enrichForPagination(\"consumptions\", this.pageOfListConsumptions, request);\n  pageOfListTaxes = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/billing/v2beta1/taxes`,\n      urlParams: marshalling.urlParams(\n        [\"billing_period\", request.billingPeriod],\n        [\"order_by\", request.orderBy],\n        [\n          \"organization_id\",\n          request.organizationId ?? this.client.settings.defaultOrganizationId\n        ],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListTaxesResponse\n  );\n  /**\n   * Get monthly consumption taxes. Consumption Tax allows you to retrieve your\n   * past or current tax charges, by project or category.\n   *\n   * @param request - The request {@link ListTaxesRequest}\n   * @returns A Promise of ListTaxesResponse\n   */\n  listTaxes = (request = {}) => resourcePaginator.enrichForPagination(\"taxes\", this.pageOfListTaxes, request);\n  pageOfListInvoices = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/billing/v2beta1/invoices`,\n      urlParams: marshalling.urlParams(\n        [\"billing_period_start_after\", request.billingPeriodStartAfter],\n        [\"billing_period_start_before\", request.billingPeriodStartBefore],\n        [\"invoice_type\", request.invoiceType],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListInvoicesResponse\n  );\n  /**\n   * List invoices. List all your invoices, filtering by `start_date` and\n   * `invoice_type`. Each invoice has its own ID.\n   *\n   * @param request - The request {@link ListInvoicesRequest}\n   * @returns A Promise of ListInvoicesResponse\n   */\n  listInvoices = (request = {}) => resourcePaginator.enrichForPagination(\"invoices\", this.pageOfListInvoices, request);\n  /**\n   * Export invoices. Export invoices in a CSV file.\n   *\n   * @param request - The request {@link ExportInvoicesRequest}\n   * @returns A Promise of Blob\n   */\n  exportInvoices = (request = {}) => this.client.fetch({\n    method: \"GET\",\n    path: `/billing/v2beta1/export-invoices`,\n    urlParams: marshalling.urlParams(\n      [\"dl\", 1],\n      [\"billing_period_start_after\", request.billingPeriodStartAfter],\n      [\"billing_period_start_before\", request.billingPeriodStartBefore],\n      [\"file_type\", request.fileType],\n      [\"invoice_type\", request.invoiceType],\n      [\"order_by\", request.orderBy],\n      [\"organization_id\", request.organizationId],\n      [\"page\", request.page],\n      [\"page_size\", request.pageSize ?? this.client.settings.defaultPageSize]\n    ),\n    responseType: \"blob\"\n  });\n  /**\n   * Get an invoice. Get a specific invoice, specified by its ID.\n   *\n   * @param request - The request {@link GetInvoiceRequest}\n   * @returns A Promise of Invoice\n   */\n  getInvoice = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/billing/v2beta1/invoices/${marshalling.validatePathParam(\"invoiceId\", request.invoiceId)}`\n    },\n    marshalling_gen.unmarshalInvoice\n  );\n  /**\n   * Download an invoice. Download a specific invoice, specified by its ID.\n   *\n   * @param request - The request {@link DownloadInvoiceRequest}\n   * @returns A Promise of Blob\n   */\n  downloadInvoice = (request) => this.client.fetch({\n    method: \"GET\",\n    path: `/billing/v2beta1/invoices/${marshalling.validatePathParam(\"invoiceId\", request.invoiceId)}/download`,\n    urlParams: marshalling.urlParams([\"dl\", 1], [\"file_type\", request.fileType]),\n    responseType: \"blob\"\n  });\n  pageOfListDiscounts = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/billing/v2beta1/discounts`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListDiscountsResponse\n  );\n  /**\n   * List discounts. List all discounts for your organization and usable\n   * categories, products, offers, references, regions and zones where the\n   * discount can be applied.\n   *\n   * @param request - The request {@link ListDiscountsRequest}\n   * @returns A Promise of ListDiscountsResponse\n   */\n  listDiscounts = (request = {}) => resourcePaginator.enrichForPagination(\"discounts\", this.pageOfListDiscounts, request);\n}\nexports.API = API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nexports.API = api_gen.API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst json = require(\"../../../helpers/json.cjs\");\nconst customMarshalling = require(\"../../../scw/custom-marshalling.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nconst unmarshalInvoice = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Invoice' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    billingPeriod: marshalling.unmarshalDate(data.billing_period),\n    dueDate: marshalling.unmarshalDate(data.due_date),\n    id: data.id,\n    issuedDate: marshalling.unmarshalDate(data.issued_date),\n    number: data.number,\n    organizationId: data.organization_id,\n    organizationName: data.organization_name,\n    sellerName: data.seller_name,\n    startDate: marshalling.unmarshalDate(data.start_date),\n    state: data.state,\n    stopDate: marshalling.unmarshalDate(data.stop_date),\n    totalDiscount: data.total_discount ? customMarshalling.unmarshalMoney(data.total_discount) : void 0,\n    totalTax: data.total_tax ? customMarshalling.unmarshalMoney(data.total_tax) : void 0,\n    totalTaxed: data.total_taxed ? customMarshalling.unmarshalMoney(data.total_taxed) : void 0,\n    totalUndiscount: data.total_undiscount ? customMarshalling.unmarshalMoney(data.total_undiscount) : void 0,\n    totalUntaxed: data.total_untaxed ? customMarshalling.unmarshalMoney(data.total_untaxed) : void 0,\n    type: data.type\n  };\n};\nconst unmarshalListConsumptionsResponseConsumption = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListConsumptionsResponseConsumption' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    billedQuantity: data.billed_quantity,\n    categoryName: data.category_name,\n    productName: data.product_name,\n    projectId: data.project_id,\n    resourceName: data.resource_name,\n    sku: data.sku,\n    unit: data.unit,\n    value: data.value ? customMarshalling.unmarshalMoney(data.value) : void 0\n  };\n};\nconst unmarshalListConsumptionsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListConsumptionsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    consumptions: marshalling.unmarshalArrayOfObject(\n      data.consumptions,\n      unmarshalListConsumptionsResponseConsumption\n    ),\n    totalCount: data.total_count,\n    totalDiscountUntaxedValue: data.total_discount_untaxed_value,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalDiscountCoupon = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DiscountCoupon' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    description: data.description\n  };\n};\nconst unmarshalDiscountFilter = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DiscountFilter' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    exclude: data.exclude,\n    type: data.type,\n    value: data.value\n  };\n};\nconst unmarshalDiscount = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Discount' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    coupon: data.coupon ? unmarshalDiscountCoupon(data.coupon) : void 0,\n    creationDate: marshalling.unmarshalDate(data.creation_date),\n    description: data.description,\n    filters: marshalling.unmarshalArrayOfObject(data.filters, unmarshalDiscountFilter),\n    id: data.id,\n    mode: data.mode,\n    organizationId: data.organization_id,\n    startDate: marshalling.unmarshalDate(data.start_date),\n    stopDate: marshalling.unmarshalDate(data.stop_date),\n    value: data.value,\n    valueRemaining: data.value_remaining,\n    valueUsed: data.value_used\n  };\n};\nconst unmarshalListDiscountsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListDiscountsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    discounts: marshalling.unmarshalArrayOfObject(data.discounts, unmarshalDiscount),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListInvoicesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListInvoicesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    invoices: marshalling.unmarshalArrayOfObject(data.invoices, unmarshalInvoice),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListTaxesResponseTax = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListTaxesResponseTax' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    currency: data.currency,\n    description: data.description,\n    rate: data.rate,\n    totalTaxValue: data.total_tax_value\n  };\n};\nconst unmarshalListTaxesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListTaxesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    taxes: marshalling.unmarshalArrayOfObject(data.taxes, unmarshalListTaxesResponseTax),\n    totalCount: data.total_count,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nexports.unmarshalInvoice = unmarshalInvoice;\nexports.unmarshalListConsumptionsResponse = unmarshalListConsumptionsResponse;\nexports.unmarshalListDiscountsResponse = unmarshalListDiscountsResponse;\nexports.unmarshalListInvoicesResponse = unmarshalListInvoicesResponse;\nexports.unmarshalListTaxesResponse = unmarshalListTaxesResponse;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index_gen = require(\"./v1alpha1/index.gen.cjs\");\nexports.v1alpha1 = index_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst intervalRetrier = require(\"../../../internal/async/interval-retrier.cjs\");\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass API extends api.API {\n  /** Lists the available zones of the API. */\n  static LOCALITIES = [\n    \"fr-par-1\",\n    \"fr-par-2\",\n    \"nl-ams-1\",\n    \"nl-ams-2\",\n    \"nl-ams-3\",\n    \"pl-waw-3\"\n  ];\n  pageOfListVolumeTypes = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/block/v1alpha1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/volume-types`,\n      urlParams: marshalling.urlParams(\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListVolumeTypesResponse\n  );\n  /**\n   * List volume types. List all available volume types in a specified zone. The\n   * volume types listed are ordered by name in ascending order.\n   *\n   * @param request - The request {@link ListVolumeTypesRequest}\n   * @returns A Promise of ListVolumeTypesResponse\n   */\n  listVolumeTypes = (request = {}) => resourcePaginator.enrichForPagination(\"volumeTypes\", this.pageOfListVolumeTypes, request);\n  pageOfListVolumes = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/block/v1alpha1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/volumes`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"product_resource_id\", request.productResourceId],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListVolumesResponse\n  );\n  /**\n   * List volumes. List all existing volumes in a specified zone. By default,\n   * the volumes listed are ordered by creation date in ascending order. This\n   * can be modified via the `order_by` field.\n   *\n   * @param request - The request {@link ListVolumesRequest}\n   * @returns A Promise of ListVolumesResponse\n   */\n  listVolumes = (request = {}) => resourcePaginator.enrichForPagination(\"volumes\", this.pageOfListVolumes, request);\n  /**\n   * Create a volume. To create a new volume from scratch, you must specify\n   * `from_empty` and the `size`. To create a volume from an existing snapshot,\n   * specify `from_snapshot` and the `snapshot_id` in the request payload\n   * instead, size is optional and can be specified if you need to extend the\n   * original size. The volume will take on the same volume class and underlying\n   * IOPS limitations as the original snapshot.\n   *\n   * @param request - The request {@link CreateVolumeRequest}\n   * @returns A Promise of Volume\n   */\n  createVolume = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateVolumeRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/block/v1alpha1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/volumes`\n    },\n    marshalling_gen.unmarshalVolume\n  );\n  /**\n   * Get a volume. Retrieve technical information about a specific volume.\n   * Details such as size, type, and status are returned in the response.\n   *\n   * @param request - The request {@link GetVolumeRequest}\n   * @returns A Promise of Volume\n   */\n  getVolume = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/block/v1alpha1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/volumes/${marshalling.validatePathParam(\"volumeId\", request.volumeId)}`\n    },\n    marshalling_gen.unmarshalVolume\n  );\n  /**\n   * Waits for {@link Volume} to be in a final state.\n   *\n   * @param request - The request {@link GetVolumeRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Volume\n   */\n  waitForVolume = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.VOLUME_TRANSIENT_STATUSES.includes(res.status))),\n    this.getVolume,\n    request,\n    options\n  );\n  /**\n   * Delete a detached volume. You must specify the `volume_id` of the volume\n   * you want to delete. The volume must not be in the `in_use` status.\n   *\n   * @param request - The request {@link DeleteVolumeRequest}\n   */\n  deleteVolume = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/block/v1alpha1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/volumes/${marshalling.validatePathParam(\"volumeId\", request.volumeId)}`\n  });\n  /**\n   * Update a volume. Update the technical details of a volume, such as its\n   * name, tags, or its new size and `volume_type` (within the same Block\n   * Storage class). You can only resize a volume to a larger size. It is\n   * currently not possible to change your Block Storage Class.\n   *\n   * @param request - The request {@link UpdateVolumeRequest}\n   * @returns A Promise of Volume\n   */\n  updateVolume = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateVolumeRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/block/v1alpha1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/volumes/${marshalling.validatePathParam(\"volumeId\", request.volumeId)}`\n    },\n    marshalling_gen.unmarshalVolume\n  );\n  pageOfListSnapshots = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/block/v1alpha1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/snapshots`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId],\n        [\"volume_id\", request.volumeId]\n      )\n    },\n    marshalling_gen.unmarshalListSnapshotsResponse\n  );\n  /**\n   * List all snapshots. List all available snapshots in a specified zone. By\n   * default, the snapshots listed are ordered by creation date in ascending\n   * order. This can be modified via the `order_by` field.\n   *\n   * @param request - The request {@link ListSnapshotsRequest}\n   * @returns A Promise of ListSnapshotsResponse\n   */\n  listSnapshots = (request = {}) => resourcePaginator.enrichForPagination(\"snapshots\", this.pageOfListSnapshots, request);\n  /**\n   * Get a snapshot. Retrieve technical information about a specific snapshot.\n   * Details such as size, volume type, and status are returned in the\n   * response.\n   *\n   * @param request - The request {@link GetSnapshotRequest}\n   * @returns A Promise of Snapshot\n   */\n  getSnapshot = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/block/v1alpha1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/snapshots/${marshalling.validatePathParam(\"snapshotId\", request.snapshotId)}`\n    },\n    marshalling_gen.unmarshalSnapshot\n  );\n  /**\n   * Waits for {@link Snapshot} to be in a final state.\n   *\n   * @param request - The request {@link GetSnapshotRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Snapshot\n   */\n  waitForSnapshot = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.SNAPSHOT_TRANSIENT_STATUSES.includes(res.status))),\n    this.getSnapshot,\n    request,\n    options\n  );\n  /**\n   * Create a snapshot of a volume. To create a snapshot, the volume must be in\n   * the `in_use` or the `available` status. If your volume is in a transient\n   * state, you need to wait until the end of the current operation.\n   *\n   * @param request - The request {@link CreateSnapshotRequest}\n   * @returns A Promise of Snapshot\n   */\n  createSnapshot = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateSnapshotRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/block/v1alpha1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/snapshots`\n    },\n    marshalling_gen.unmarshalSnapshot\n  );\n  /**\n   * (Deprecated in favor of `ImportSnapshotFromObjectStorage`). Import a\n   * snapshot from a Scaleway Object Storage bucket The bucket must contain a\n   * QCOW2 image. The bucket can be imported into any Availability Zone as long\n   * as it is in the same region as the bucket.\n   *\n   * @deprecated\n   * @param request - The request {@link ImportSnapshotFromS3Request}\n   * @returns A Promise of Snapshot\n   */\n  importSnapshotFromS3 = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalImportSnapshotFromS3Request(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/block/v1alpha1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/snapshots/import-from-s3`\n    },\n    marshalling_gen.unmarshalSnapshot\n  );\n  /**\n   * Import a snapshot from a Scaleway Object Storage bucket. The bucket must\n   * contain a QCOW2 image. The bucket can be imported into any Availability\n   * Zone as long as it is in the same region as the bucket.\n   *\n   * @param request - The request {@link ImportSnapshotFromObjectStorageRequest}\n   * @returns A Promise of Snapshot\n   */\n  importSnapshotFromObjectStorage = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalImportSnapshotFromObjectStorageRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/block/v1alpha1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/snapshots/import-from-object-storage`\n    },\n    marshalling_gen.unmarshalSnapshot\n  );\n  /**\n   * Export a snapshot to a Scaleway Object Storage bucket. The snapshot is\n   * exported in QCOW2 format. The snapshot must not be in transient state.\n   *\n   * @param request - The request {@link ExportSnapshotToObjectStorageRequest}\n   * @returns A Promise of Snapshot\n   */\n  exportSnapshotToObjectStorage = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalExportSnapshotToObjectStorageRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/block/v1alpha1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/snapshots/${marshalling.validatePathParam(\"snapshotId\", request.snapshotId)}/export-to-object-storage`\n    },\n    marshalling_gen.unmarshalSnapshot\n  );\n  /**\n   * Delete a snapshot. You must specify the `snapshot_id` of the snapshot you\n   * want to delete. The snapshot must not be in use.\n   *\n   * @param request - The request {@link DeleteSnapshotRequest}\n   */\n  deleteSnapshot = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/block/v1alpha1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/snapshots/${marshalling.validatePathParam(\"snapshotId\", request.snapshotId)}`\n  });\n  /**\n   * Update a snapshot. Update the name or tags of the snapshot.\n   *\n   * @param request - The request {@link UpdateSnapshotRequest}\n   * @returns A Promise of Snapshot\n   */\n  updateSnapshot = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateSnapshotRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/block/v1alpha1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/snapshots/${marshalling.validatePathParam(\"snapshotId\", request.snapshotId)}`\n    },\n    marshalling_gen.unmarshalSnapshot\n  );\n}\nexports.API = API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst REFERENCE_TRANSIENT_STATUSES = [\n  \"attaching\",\n  \"detaching\",\n  \"creating\"\n];\nconst SNAPSHOT_TRANSIENT_STATUSES = [\n  \"creating\",\n  \"deleting\",\n  \"exporting\"\n];\nconst VOLUME_TRANSIENT_STATUSES = [\n  \"creating\",\n  \"deleting\",\n  \"resizing\",\n  \"snapshotting\",\n  \"updating\"\n];\nexports.REFERENCE_TRANSIENT_STATUSES = REFERENCE_TRANSIENT_STATUSES;\nexports.SNAPSHOT_TRANSIENT_STATUSES = SNAPSHOT_TRANSIENT_STATUSES;\nexports.VOLUME_TRANSIENT_STATUSES = VOLUME_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst validationRules_gen = require(\"./validation-rules.gen.cjs\");\nexports.API = api_gen.API;\nexports.REFERENCE_TRANSIENT_STATUSES = content_gen.REFERENCE_TRANSIENT_STATUSES;\nexports.SNAPSHOT_TRANSIENT_STATUSES = content_gen.SNAPSHOT_TRANSIENT_STATUSES;\nexports.VOLUME_TRANSIENT_STATUSES = content_gen.VOLUME_TRANSIENT_STATUSES;\nexports.ValidationRules = validationRules_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst json = require(\"../../../helpers/json.cjs\");\nconst customMarshalling = require(\"../../../scw/custom-marshalling.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nconst unmarshalReference = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Reference' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    id: data.id,\n    productResourceId: data.product_resource_id,\n    productResourceType: data.product_resource_type,\n    status: data.status,\n    type: data.type\n  };\n};\nconst unmarshalSnapshotParentVolume = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SnapshotParentVolume' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    id: data.id,\n    name: data.name,\n    status: data.status,\n    type: data.type\n  };\n};\nconst unmarshalSnapshot = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Snapshot' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    class: data.class,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    id: data.id,\n    name: data.name,\n    parentVolume: data.parent_volume ? unmarshalSnapshotParentVolume(data.parent_volume) : void 0,\n    projectId: data.project_id,\n    references: marshalling.unmarshalArrayOfObject(data.references, unmarshalReference),\n    size: data.size,\n    status: data.status,\n    tags: data.tags,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    zone: data.zone\n  };\n};\nconst unmarshalVolumeSpecifications = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'VolumeSpecifications' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    class: data.class,\n    perfIops: data.perf_iops\n  };\n};\nconst unmarshalVolume = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Volume' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    id: data.id,\n    lastDetachedAt: marshalling.unmarshalDate(data.last_detached_at),\n    name: data.name,\n    parentSnapshotId: data.parent_snapshot_id,\n    projectId: data.project_id,\n    references: marshalling.unmarshalArrayOfObject(data.references, unmarshalReference),\n    size: data.size,\n    specs: data.specs ? unmarshalVolumeSpecifications(data.specs) : void 0,\n    status: data.status,\n    tags: data.tags,\n    type: data.type,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    zone: data.zone\n  };\n};\nconst unmarshalListSnapshotsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListSnapshotsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    snapshots: marshalling.unmarshalArrayOfObject(data.snapshots, unmarshalSnapshot),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalVolumeType = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'VolumeType' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    pricing: data.pricing ? customMarshalling.unmarshalMoney(data.pricing) : void 0,\n    snapshotPricing: data.snapshot_pricing ? customMarshalling.unmarshalMoney(data.snapshot_pricing) : void 0,\n    specs: data.specs ? unmarshalVolumeSpecifications(data.specs) : void 0,\n    type: data.type\n  };\n};\nconst unmarshalListVolumeTypesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListVolumeTypesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    totalCount: data.total_count,\n    volumeTypes: marshalling.unmarshalArrayOfObject(data.volume_types, unmarshalVolumeType)\n  };\n};\nconst unmarshalListVolumesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListVolumesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    totalCount: data.total_count,\n    volumes: marshalling.unmarshalArrayOfObject(data.volumes, unmarshalVolume)\n  };\n};\nconst marshalCreateSnapshotRequest = (request, defaults) => ({\n  name: request.name,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  tags: request.tags,\n  volume_id: request.volumeId\n});\nconst marshalCreateVolumeRequestFromEmpty = (request, defaults) => ({\n  size: request.size\n});\nconst marshalCreateVolumeRequestFromSnapshot = (request, defaults) => ({\n  size: request.size,\n  snapshot_id: request.snapshotId\n});\nconst marshalCreateVolumeRequest = (request, defaults) => ({\n  name: request.name,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  tags: request.tags,\n  ...marshalling.resolveOneOf([\n    {\n      param: \"from_empty\",\n      value: request.fromEmpty !== void 0 ? marshalCreateVolumeRequestFromEmpty(request.fromEmpty) : void 0\n    },\n    {\n      param: \"from_snapshot\",\n      value: request.fromSnapshot !== void 0 ? marshalCreateVolumeRequestFromSnapshot(\n        request.fromSnapshot\n      ) : void 0\n    }\n  ]),\n  ...marshalling.resolveOneOf([{ param: \"perf_iops\", value: request.perfIops }])\n});\nconst marshalExportSnapshotToObjectStorageRequest = (request, defaults) => ({\n  bucket: request.bucket,\n  key: request.key\n});\nconst marshalImportSnapshotFromObjectStorageRequest = (request, defaults) => ({\n  bucket: request.bucket,\n  key: request.key,\n  name: request.name,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  size: request.size,\n  tags: request.tags\n});\nconst marshalImportSnapshotFromS3Request = (request, defaults) => ({\n  bucket: request.bucket,\n  key: request.key,\n  name: request.name,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  size: request.size,\n  tags: request.tags\n});\nconst marshalUpdateSnapshotRequest = (request, defaults) => ({\n  name: request.name,\n  tags: request.tags\n});\nconst marshalUpdateVolumeRequest = (request, defaults) => ({\n  name: request.name,\n  perf_iops: request.perfIops,\n  size: request.size,\n  tags: request.tags\n});\nexports.marshalCreateSnapshotRequest = marshalCreateSnapshotRequest;\nexports.marshalCreateVolumeRequest = marshalCreateVolumeRequest;\nexports.marshalExportSnapshotToObjectStorageRequest = marshalExportSnapshotToObjectStorageRequest;\nexports.marshalImportSnapshotFromObjectStorageRequest = marshalImportSnapshotFromObjectStorageRequest;\nexports.marshalImportSnapshotFromS3Request = marshalImportSnapshotFromS3Request;\nexports.marshalUpdateSnapshotRequest = marshalUpdateSnapshotRequest;\nexports.marshalUpdateVolumeRequest = marshalUpdateVolumeRequest;\nexports.unmarshalListSnapshotsResponse = unmarshalListSnapshotsResponse;\nexports.unmarshalListVolumeTypesResponse = unmarshalListVolumeTypesResponse;\nexports.unmarshalListVolumesResponse = unmarshalListVolumesResponse;\nexports.unmarshalReference = unmarshalReference;\nexports.unmarshalSnapshot = unmarshalSnapshot;\nexports.unmarshalVolume = unmarshalVolume;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst CreateSnapshotRequest = {\n  name: {\n    minLength: 1\n  }\n};\nconst CreateVolumeRequest = {\n  name: {\n    minLength: 1\n  }\n};\nconst ImportSnapshotFromObjectStorageRequest = {\n  name: {\n    minLength: 1\n  }\n};\nconst ImportSnapshotFromS3Request = {\n  name: {\n    minLength: 1\n  }\n};\nconst ListSnapshotsRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nconst ListVolumeTypesRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nconst ListVolumesRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nconst Reference = {\n  productResourceType: {\n    minLength: 1\n  }\n};\nexports.CreateSnapshotRequest = CreateSnapshotRequest;\nexports.CreateVolumeRequest = CreateVolumeRequest;\nexports.ImportSnapshotFromObjectStorageRequest = ImportSnapshotFromObjectStorageRequest;\nexports.ImportSnapshotFromS3Request = ImportSnapshotFromS3Request;\nexports.ListSnapshotsRequest = ListSnapshotsRequest;\nexports.ListVolumeTypesRequest = ListVolumeTypesRequest;\nexports.ListVolumesRequest = ListVolumesRequest;\nexports.Reference = Reference;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index_gen = require(\"./v1/index.gen.cjs\");\nconst index_gen$1 = require(\"./v1beta1/index.gen.cjs\");\nexports.v1 = index_gen;\nexports.v1beta1 = index_gen$1;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass GlobalAPI extends api.API {\n  /**\n   * Get your Cockpit's Grafana. Retrieve information on your Cockpit's Grafana,\n   * specified by the ID of the Project the Cockpit belongs to. The output\n   * returned displays the URL to access your Cockpit's Grafana.\n   *\n   * @param request - The request {@link GlobalApiGetGrafanaRequest}\n   * @returns A Promise of Grafana\n   */\n  getGrafana = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/cockpit/v1/grafana`,\n      urlParams: marshalling.urlParams([\n        \"project_id\",\n        request.projectId ?? this.client.settings.defaultProjectId\n      ])\n    },\n    marshalling_gen.unmarshalGrafana\n  );\n  /**\n   * Synchronize Grafana data sources. Trigger the synchronization of all your\n   * data sources and the alert manager in the relevant regions. The alert\n   * manager will only be synchronized if you have enabled it.\n   *\n   * @param request - The request {@link GlobalApiSyncGrafanaDataSourcesRequest}\n   */\n  syncGrafanaDataSources = (request = {}) => this.client.fetch({\n    body: JSON.stringify(\n      marshalling_gen.marshalGlobalApiSyncGrafanaDataSourcesRequest(\n        request,\n        this.client.settings\n      )\n    ),\n    headers: jsonContentHeaders,\n    method: \"POST\",\n    path: `/cockpit/v1/grafana/sync-data-sources`\n  });\n  /**\n   * Create a Grafana user. Create a Grafana user to connect to your Cockpit's\n   * Grafana. Upon creation, your user password displays only once, so make sure\n   * that you save it. Each Grafana user is associated with a role: viewer or\n   * editor. A viewer can only view dashboards, whereas an editor can create and\n   * edit dashboards. Note that the `admin` username is not available for\n   * creation.\n   *\n   * @param request - The request {@link GlobalApiCreateGrafanaUserRequest}\n   * @returns A Promise of GrafanaUser\n   */\n  createGrafanaUser = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalGlobalApiCreateGrafanaUserRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/cockpit/v1/grafana/users`\n    },\n    marshalling_gen.unmarshalGrafanaUser\n  );\n  pageOfListGrafanaUsers = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/cockpit/v1/grafana/users`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\n          \"project_id\",\n          request.projectId ?? this.client.settings.defaultProjectId\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListGrafanaUsersResponse\n  );\n  /**\n   * List Grafana users. List all Grafana users created in your Cockpit's\n   * Grafana. By default, the Grafana users returned in the list are ordered in\n   * ascending order.\n   *\n   * @param request - The request {@link GlobalApiListGrafanaUsersRequest}\n   * @returns A Promise of ListGrafanaUsersResponse\n   */\n  listGrafanaUsers = (request = {}) => resourcePaginator.enrichForPagination(\"grafanaUsers\", this.pageOfListGrafanaUsers, request);\n  /**\n   * Delete a Grafana user. Delete a Grafana user from your Cockpit's Grafana,\n   * specified by the ID of the Project the Cockpit belongs to, and the ID of\n   * the Grafana user.\n   *\n   * @param request - The request {@link GlobalApiDeleteGrafanaUserRequest}\n   */\n  deleteGrafanaUser = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/cockpit/v1/grafana/users/${marshalling.validatePathParam(\"grafanaUserId\", request.grafanaUserId)}`,\n    urlParams: marshalling.urlParams([\n      \"project_id\",\n      request.projectId ?? this.client.settings.defaultProjectId\n    ])\n  });\n  /**\n   * Reset a Grafana user password. Reset the password of a Grafana user,\n   * specified by the ID of the Project the Cockpit belongs to, and the ID of\n   * the Grafana user. A new password regenerates and only displays once. Make\n   * sure that you save it.\n   *\n   * @param request - The request\n   *   {@link GlobalApiResetGrafanaUserPasswordRequest}\n   * @returns A Promise of GrafanaUser\n   */\n  resetGrafanaUserPassword = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalGlobalApiResetGrafanaUserPasswordRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/cockpit/v1/grafana/users/${marshalling.validatePathParam(\"grafanaUserId\", request.grafanaUserId)}/reset-password`\n    },\n    marshalling_gen.unmarshalGrafanaUser\n  );\n  pageOfListGrafanaProductDashboards = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/cockpit/v1/grafana/product-dashboards`,\n      urlParams: marshalling.urlParams(\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\n          \"project_id\",\n          request.projectId ?? this.client.settings.defaultProjectId\n        ],\n        [\"tags\", request.tags]\n      )\n    },\n    marshalling_gen.unmarshalListGrafanaProductDashboardsResponse\n  );\n  /**\n   * List Scaleway resources dashboards. Retrieve a list of available dashboards\n   * in Grafana, for all Scaleway resources which are integrated with Cockpit.\n   *\n   * @param request - The request\n   *   {@link GlobalApiListGrafanaProductDashboardsRequest}\n   * @returns A Promise of ListGrafanaProductDashboardsResponse\n   */\n  listGrafanaProductDashboards = (request = {}) => resourcePaginator.enrichForPagination(\n    \"dashboards\",\n    this.pageOfListGrafanaProductDashboards,\n    request\n  );\n  /**\n   * Get Scaleway resource dashboard. Retrieve information about the dashboard\n   * of a Scaleway resource in Grafana, specified by the ID of the Project the\n   * Cockpit belongs to, and the name of the dashboard.\n   *\n   * @param request - The request\n   *   {@link GlobalApiGetGrafanaProductDashboardRequest}\n   * @returns A Promise of GrafanaProductDashboard\n   */\n  getGrafanaProductDashboard = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/cockpit/v1/grafana/product-dashboards/${marshalling.validatePathParam(\"dashboardName\", request.dashboardName)}`,\n      urlParams: marshalling.urlParams([\n        \"project_id\",\n        request.projectId ?? this.client.settings.defaultProjectId\n      ])\n    },\n    marshalling_gen.unmarshalGrafanaProductDashboard\n  );\n  pageOfListPlans = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/cockpit/v1/plans`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListPlansResponse\n  );\n  /**\n   * List plan types. Retrieve a list of available pricing plan types.\n   *\n   * @param request - The request {@link GlobalApiListPlansRequest}\n   * @returns A Promise of ListPlansResponse\n   */\n  listPlans = (request = {}) => resourcePaginator.enrichForPagination(\"plans\", this.pageOfListPlans, request);\n  /**\n   * Apply a pricing plan. Apply a pricing plan on a given Project. You must\n   * specify the ID of the pricing plan type. Note that you will be billed for\n   * the plan you apply.\n   *\n   * @param request - The request {@link GlobalApiSelectPlanRequest}\n   * @returns A Promise of Plan\n   */\n  selectPlan = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalGlobalApiSelectPlanRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/cockpit/v1/plans`\n    },\n    marshalling_gen.unmarshalPlan\n  );\n  /**\n   * Get current plan. Retrieve a pricing plan for the given Project, specified\n   * by the ID of the Project.\n   *\n   * @param request - The request {@link GlobalApiGetCurrentPlanRequest}\n   * @returns A Promise of Plan\n   */\n  getCurrentPlan = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/cockpit/v1/current-plan`,\n      urlParams: marshalling.urlParams([\n        \"project_id\",\n        request.projectId ?? this.client.settings.defaultProjectId\n      ])\n    },\n    marshalling_gen.unmarshalPlan\n  );\n}\nclass RegionalAPI extends api.API {\n  /** Lists the available regions of the API. */\n  static LOCALITIES = [\"fr-par\", \"nl-ams\", \"pl-waw\"];\n  /**\n   * Create a data source. You must specify the data source type upon creation.\n   * Available data source types include:\n   *\n   * - Metrics\n   * - Logs\n   * - Traces The name of the data source will then be used as reference to name\n   *   the associated Grafana data source.\n   *\n   * @param request - The request {@link RegionalApiCreateDataSourceRequest}\n   * @returns A Promise of DataSource\n   */\n  createDataSource = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalRegionalApiCreateDataSourceRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/cockpit/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/data-sources`\n    },\n    marshalling_gen.unmarshalDataSource\n  );\n  /**\n   * Get a data source. Retrieve information about a given data source,\n   * specified by the data source ID. The data source's information such as its\n   * name, type, URL, origin, and retention period, is returned.\n   *\n   * @param request - The request {@link RegionalApiGetDataSourceRequest}\n   * @returns A Promise of DataSource\n   */\n  getDataSource = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/cockpit/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/data-sources/${marshalling.validatePathParam(\"dataSourceId\", request.dataSourceId)}`\n    },\n    marshalling_gen.unmarshalDataSource\n  );\n  /**\n   * Delete a data source. Delete a given data source, specified by the data\n   * source ID. Note that deleting a data source is irreversible, and cannot be\n   * undone.\n   *\n   * @param request - The request {@link RegionalApiDeleteDataSourceRequest}\n   */\n  deleteDataSource = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/cockpit/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/data-sources/${marshalling.validatePathParam(\"dataSourceId\", request.dataSourceId)}`\n  });\n  pageOfListDataSources = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/cockpit/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/data-sources`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"origin\", request.origin],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\n          \"project_id\",\n          request.projectId ?? this.client.settings.defaultProjectId\n        ],\n        [\"types\", request.types]\n      )\n    },\n    marshalling_gen.unmarshalListDataSourcesResponse\n  );\n  /**\n   * List data sources. Retrieve the list of data sources available in the\n   * specified region. By default, the data sources returned in the list are\n   * ordered by creation date, in ascending order. You can list data sources by\n   * Project, type and origin.\n   *\n   * @param request - The request {@link RegionalApiListDataSourcesRequest}\n   * @returns A Promise of ListDataSourcesResponse\n   */\n  listDataSources = (request = {}) => resourcePaginator.enrichForPagination(\"dataSources\", this.pageOfListDataSources, request);\n  /**\n   * Update a data source. Update a given data source name, specified by the\n   * data source ID.\n   *\n   * @param request - The request {@link RegionalApiUpdateDataSourceRequest}\n   * @returns A Promise of DataSource\n   */\n  updateDataSource = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalRegionalApiUpdateDataSourceRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/cockpit/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/data-sources/${marshalling.validatePathParam(\"dataSourceId\", request.dataSourceId)}`\n    },\n    marshalling_gen.unmarshalDataSource\n  );\n  /**\n   * Get data source usage overview. Retrieve the data source usage overview per\n   * type for the specified Project.\n   *\n   * @param request - The request {@link RegionalApiGetUsageOverviewRequest}\n   * @returns A Promise of UsageOverview\n   */\n  getUsageOverview = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/cockpit/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/usage-overview`,\n      urlParams: marshalling.urlParams(\n        [\"interval\", request.interval],\n        [\n          \"project_id\",\n          request.projectId ?? this.client.settings.defaultProjectId\n        ]\n      )\n    },\n    marshalling_gen.unmarshalUsageOverview\n  );\n  /**\n   * Create a token. Give your token the relevant scopes to ensure it has the\n   * right permissions to interact with your data sources and the Alert manager.\n   * Make sure that you create your token in the same regions as the data\n   * sources you want to use it for. Upon creation, your token's secret key\n   * display only once. Make sure that you save it.\n   *\n   * @param request - The request {@link RegionalApiCreateTokenRequest}\n   * @returns A Promise of Token\n   */\n  createToken = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalRegionalApiCreateTokenRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/cockpit/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/tokens`\n    },\n    marshalling_gen.unmarshalToken\n  );\n  pageOfListTokens = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/cockpit/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/tokens`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\n          \"project_id\",\n          request.projectId ?? this.client.settings.defaultProjectId\n        ],\n        [\"token_scopes\", request.tokenScopes]\n      )\n    },\n    marshalling_gen.unmarshalListTokensResponse\n  );\n  /**\n   * List tokens. Retrieve a list of all tokens in the specified region. By\n   * default, tokens returned in the list are ordered by creation date, in\n   * ascending order. You can filter tokens by Project ID and token scopes.\n   *\n   * @param request - The request {@link RegionalApiListTokensRequest}\n   * @returns A Promise of ListTokensResponse\n   */\n  listTokens = (request = {}) => resourcePaginator.enrichForPagination(\"tokens\", this.pageOfListTokens, request);\n  /**\n   * Get a token. Retrieve information about a given token, specified by the\n   * token ID. The token's information such as its scopes, is returned.\n   *\n   * @param request - The request {@link RegionalApiGetTokenRequest}\n   * @returns A Promise of Token\n   */\n  getToken = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/cockpit/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/tokens/${marshalling.validatePathParam(\"tokenId\", request.tokenId)}`\n    },\n    marshalling_gen.unmarshalToken\n  );\n  /**\n   * Delete a token. Delete a given token, specified by the token ID. Deleting a\n   * token is irreversible and cannot be undone.\n   *\n   * @param request - The request {@link RegionalApiDeleteTokenRequest}\n   */\n  deleteToken = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/cockpit/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/tokens/${marshalling.validatePathParam(\"tokenId\", request.tokenId)}`\n  });\n  /**\n   * Get the Alert manager. Retrieve information about the Alert manager which\n   * is unique per Project and region. By default the Alert manager is disabled.\n   * The output returned displays a URL to access the Alert manager, and whether\n   * the Alert manager and managed alerts are enabled.\n   *\n   * @param request - The request {@link RegionalApiGetAlertManagerRequest}\n   * @returns A Promise of AlertManager\n   */\n  getAlertManager = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/cockpit/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/alert-manager`,\n      urlParams: marshalling.urlParams([\n        \"project_id\",\n        request.projectId ?? this.client.settings.defaultProjectId\n      ])\n    },\n    marshalling_gen.unmarshalAlertManager\n  );\n  /**\n   * Enable the Alert manager. Enabling the Alert manager allows you to enable\n   * managed alerts and create contact points in the specified Project and\n   * region, to be notified when your Scaleway resources may require your\n   * attention.\n   *\n   * @param request - The request {@link RegionalApiEnableAlertManagerRequest}\n   * @returns A Promise of AlertManager\n   */\n  enableAlertManager = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalRegionalApiEnableAlertManagerRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/cockpit/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/alert-manager/enable`\n    },\n    marshalling_gen.unmarshalAlertManager\n  );\n  /**\n   * Disable the Alert manager. Disabling the Alert manager deletes the contact\n   * points you have created and disables managed alerts in the specified\n   * Project and region.\n   *\n   * @param request - The request {@link RegionalApiDisableAlertManagerRequest}\n   * @returns A Promise of AlertManager\n   */\n  disableAlertManager = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalRegionalApiDisableAlertManagerRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/cockpit/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/alert-manager/disable`\n    },\n    marshalling_gen.unmarshalAlertManager\n  );\n  /**\n   * Create a contact point. Contact points are email addresses associated with\n   * the default receiver, that the Alert manager sends alerts to. The source of\n   * the alerts are data sources within the same Project and region as the Alert\n   * manager. If you need to receive alerts for other receivers, you can create\n   * additional contact points and receivers in Grafana. Make sure that you\n   * select the Scaleway Alert manager.\n   *\n   * @param request - The request {@link RegionalApiCreateContactPointRequest}\n   * @returns A Promise of ContactPoint\n   */\n  createContactPoint = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalRegionalApiCreateContactPointRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/cockpit/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/alert-manager/contact-points`\n    },\n    marshalling_gen.unmarshalContactPoint\n  );\n  pageOfListContactPoints = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/cockpit/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/alert-manager/contact-points`,\n      urlParams: marshalling.urlParams(\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\n          \"project_id\",\n          request.projectId ?? this.client.settings.defaultProjectId\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListContactPointsResponse\n  );\n  /**\n   * List contact points. Retrieve a list of contact points for the specified\n   * Project. The response lists all contact points and receivers created in\n   * Grafana or via the API.\n   *\n   * @param request - The request {@link RegionalApiListContactPointsRequest}\n   * @returns A Promise of ListContactPointsResponse\n   */\n  listContactPoints = (request = {}) => resourcePaginator.enrichForPagination(\"contactPoints\", this.pageOfListContactPoints, request);\n  /**\n   * Delete a contact point. Delete a contact point associated with the default\n   * receiver.\n   *\n   * @param request - The request {@link RegionalApiDeleteContactPointRequest}\n   */\n  deleteContactPoint = (request = {}) => this.client.fetch({\n    body: JSON.stringify(\n      marshalling_gen.marshalRegionalApiDeleteContactPointRequest(\n        request,\n        this.client.settings\n      )\n    ),\n    headers: jsonContentHeaders,\n    method: \"POST\",\n    path: `/cockpit/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/alert-manager/contact-points/delete`\n  });\n  pageOfListManagedAlerts = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/cockpit/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/managed-alerts`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\n          \"project_id\",\n          request.projectId ?? this.client.settings.defaultProjectId\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListManagedAlertsResponse\n  );\n  /**\n   * List managed alerts. List all managed alerts for the specified Project.\n   *\n   * @param request - The request {@link RegionalApiListManagedAlertsRequest}\n   * @returns A Promise of ListManagedAlertsResponse\n   */\n  listManagedAlerts = (request = {}) => resourcePaginator.enrichForPagination(\"alerts\", this.pageOfListManagedAlerts, request);\n  /**\n   * Enable managed alerts. Enable the sending of managed alerts for the\n   * specified Project. Managed alerts are predefined alerts that apply to\n   * Scaleway recources integrated with Cockpit by default.\n   *\n   * @param request - The request {@link RegionalApiEnableManagedAlertsRequest}\n   * @returns A Promise of AlertManager\n   */\n  enableManagedAlerts = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalRegionalApiEnableManagedAlertsRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/cockpit/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/alert-manager/managed-alerts/enable`\n    },\n    marshalling_gen.unmarshalAlertManager\n  );\n  /**\n   * Disable managed alerts. Disable the sending of managed alerts for the\n   * specified Project.\n   *\n   * @param request - The request {@link RegionalApiDisableManagedAlertsRequest}\n   * @returns A Promise of AlertManager\n   */\n  disableManagedAlerts = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalRegionalApiDisableManagedAlertsRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/cockpit/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/alert-manager/managed-alerts/disable`\n    },\n    marshalling_gen.unmarshalAlertManager\n  );\n  /**\n   * Trigger a test alert. Send a test alert to the Alert manager to make sure\n   * your contact points get notified.\n   *\n   * @param request - The request {@link RegionalApiTriggerTestAlertRequest}\n   */\n  triggerTestAlert = (request = {}) => this.client.fetch({\n    body: JSON.stringify(\n      marshalling_gen.marshalRegionalApiTriggerTestAlertRequest(\n        request,\n        this.client.settings\n      )\n    ),\n    headers: jsonContentHeaders,\n    method: \"POST\",\n    path: `/cockpit/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/alert-manager/trigger-test-alert`\n  });\n}\nexports.GlobalAPI = GlobalAPI;\nexports.RegionalAPI = RegionalAPI;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nconst validationRules_gen = require(\"./validation-rules.gen.cjs\");\nexports.GlobalAPI = api_gen.GlobalAPI;\nexports.RegionalAPI = api_gen.RegionalAPI;\nexports.ValidationRules = validationRules_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst json = require(\"../../../helpers/json.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst unmarshalContactPointEmail = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ContactPointEmail' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    to: data.to\n  };\n};\nconst unmarshalContactPoint = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ContactPoint' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    email: data.email ? unmarshalContactPointEmail(data.email) : void 0,\n    region: data.region\n  };\n};\nconst unmarshalDataSource = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DataSource' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    id: data.id,\n    name: data.name,\n    origin: data.origin,\n    projectId: data.project_id,\n    region: data.region,\n    synchronizedWithGrafana: data.synchronized_with_grafana,\n    type: data.type,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    url: data.url\n  };\n};\nconst unmarshalGrafanaProductDashboard = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'GrafanaProductDashboard' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    name: data.name,\n    tags: data.tags,\n    title: data.title,\n    url: data.url,\n    variables: data.variables\n  };\n};\nconst unmarshalGrafanaUser = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'GrafanaUser' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    id: data.id,\n    login: data.login,\n    password: data.password,\n    role: data.role\n  };\n};\nconst unmarshalPlan = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Plan' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    logsIngestionPrice: data.logs_ingestion_price,\n    monthlyPrice: data.monthly_price,\n    name: data.name,\n    retentionLogsInterval: data.retention_logs_interval,\n    retentionMetricsInterval: data.retention_metrics_interval,\n    retentionTracesInterval: data.retention_traces_interval,\n    sampleIngestionPrice: data.sample_ingestion_price,\n    tracesIngestionPrice: data.traces_ingestion_price\n  };\n};\nconst unmarshalToken = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Token' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    id: data.id,\n    name: data.name,\n    projectId: data.project_id,\n    region: data.region,\n    scopes: data.scopes,\n    secretKey: data.secret_key,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalAlertManager = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'AlertManager' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    alertManagerEnabled: data.alert_manager_enabled,\n    alertManagerUrl: data.alert_manager_url,\n    managedAlertsEnabled: data.managed_alerts_enabled,\n    region: data.region\n  };\n};\nconst unmarshalGrafana = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Grafana' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    grafanaUrl: data.grafana_url\n  };\n};\nconst unmarshalListContactPointsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListContactPointsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    contactPoints: marshalling.unmarshalArrayOfObject(\n      data.contact_points,\n      unmarshalContactPoint\n    ),\n    hasAdditionalContactPoints: data.has_additional_contact_points,\n    hasAdditionalReceivers: data.has_additional_receivers,\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListDataSourcesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListDataSourcesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    dataSources: marshalling.unmarshalArrayOfObject(data.data_sources, unmarshalDataSource),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListGrafanaProductDashboardsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListGrafanaProductDashboardsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    dashboards: marshalling.unmarshalArrayOfObject(\n      data.dashboards,\n      unmarshalGrafanaProductDashboard\n    ),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListGrafanaUsersResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListGrafanaUsersResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    grafanaUsers: marshalling.unmarshalArrayOfObject(\n      data.grafana_users,\n      unmarshalGrafanaUser\n    ),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalAlert = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Alert' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    description: data.description,\n    name: data.name,\n    product: data.product,\n    productFamily: data.product_family,\n    rule: data.rule\n  };\n};\nconst unmarshalListManagedAlertsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListManagedAlertsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    alerts: marshalling.unmarshalArrayOfObject(data.alerts, unmarshalAlert),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListPlansResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListPlansResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    plans: marshalling.unmarshalArrayOfObject(data.plans, unmarshalPlan),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListTokensResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListTokensResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    tokens: marshalling.unmarshalArrayOfObject(data.tokens, unmarshalToken),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalUsage = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Usage' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    dataSourceId: data.data_source_id,\n    dataSourceOrigin: data.data_source_origin,\n    dataSourceType: data.data_source_type,\n    interval: data.interval,\n    projectId: data.project_id,\n    quantityOverInterval: data.quantity_over_interval,\n    region: data.region,\n    unit: data.unit\n  };\n};\nconst unmarshalUsageOverview = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'UsageOverview' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    externalLogsUsage: data.external_logs_usage ? unmarshalUsage(data.external_logs_usage) : void 0,\n    externalMetricsUsage: data.external_metrics_usage ? unmarshalUsage(data.external_metrics_usage) : void 0,\n    externalTracesUsage: data.external_traces_usage ? unmarshalUsage(data.external_traces_usage) : void 0,\n    scalewayLogsUsage: data.scaleway_logs_usage ? unmarshalUsage(data.scaleway_logs_usage) : void 0,\n    scalewayMetricsUsage: data.scaleway_metrics_usage ? unmarshalUsage(data.scaleway_metrics_usage) : void 0\n  };\n};\nconst marshalGlobalApiCreateGrafanaUserRequest = (request, defaults) => ({\n  login: request.login,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  role: request.role\n});\nconst marshalGlobalApiResetGrafanaUserPasswordRequest = (request, defaults) => ({\n  project_id: request.projectId ?? defaults.defaultProjectId\n});\nconst marshalGlobalApiSelectPlanRequest = (request, defaults) => ({\n  plan_name: request.planName,\n  project_id: request.projectId ?? defaults.defaultProjectId\n});\nconst marshalGlobalApiSyncGrafanaDataSourcesRequest = (request, defaults) => ({\n  project_id: request.projectId ?? defaults.defaultProjectId\n});\nconst marshalContactPointEmail = (request, defaults) => ({\n  to: request.to\n});\nconst marshalRegionalApiCreateContactPointRequest = (request, defaults) => ({\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  ...marshalling.resolveOneOf([\n    {\n      param: \"email\",\n      value: request.email !== void 0 ? marshalContactPointEmail(request.email) : void 0\n    }\n  ])\n});\nconst marshalRegionalApiCreateDataSourceRequest = (request, defaults) => ({\n  name: request.name,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  type: request.type\n});\nconst marshalRegionalApiCreateTokenRequest = (request, defaults) => ({\n  name: request.name,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  token_scopes: request.tokenScopes !== void 0 ? request.tokenScopes : void 0\n});\nconst marshalRegionalApiDeleteContactPointRequest = (request, defaults) => ({\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  ...marshalling.resolveOneOf([\n    {\n      param: \"email\",\n      value: request.email !== void 0 ? marshalContactPointEmail(request.email) : void 0\n    }\n  ])\n});\nconst marshalRegionalApiDisableAlertManagerRequest = (request, defaults) => ({\n  project_id: request.projectId ?? defaults.defaultProjectId\n});\nconst marshalRegionalApiDisableManagedAlertsRequest = (request, defaults) => ({\n  project_id: request.projectId ?? defaults.defaultProjectId\n});\nconst marshalRegionalApiEnableAlertManagerRequest = (request, defaults) => ({\n  project_id: request.projectId ?? defaults.defaultProjectId\n});\nconst marshalRegionalApiEnableManagedAlertsRequest = (request, defaults) => ({\n  project_id: request.projectId ?? defaults.defaultProjectId\n});\nconst marshalRegionalApiTriggerTestAlertRequest = (request, defaults) => ({\n  project_id: request.projectId ?? defaults.defaultProjectId\n});\nconst marshalRegionalApiUpdateDataSourceRequest = (request, defaults) => ({\n  name: request.name\n});\nexports.marshalGlobalApiCreateGrafanaUserRequest = marshalGlobalApiCreateGrafanaUserRequest;\nexports.marshalGlobalApiResetGrafanaUserPasswordRequest = marshalGlobalApiResetGrafanaUserPasswordRequest;\nexports.marshalGlobalApiSelectPlanRequest = marshalGlobalApiSelectPlanRequest;\nexports.marshalGlobalApiSyncGrafanaDataSourcesRequest = marshalGlobalApiSyncGrafanaDataSourcesRequest;\nexports.marshalRegionalApiCreateContactPointRequest = marshalRegionalApiCreateContactPointRequest;\nexports.marshalRegionalApiCreateDataSourceRequest = marshalRegionalApiCreateDataSourceRequest;\nexports.marshalRegionalApiCreateTokenRequest = marshalRegionalApiCreateTokenRequest;\nexports.marshalRegionalApiDeleteContactPointRequest = marshalRegionalApiDeleteContactPointRequest;\nexports.marshalRegionalApiDisableAlertManagerRequest = marshalRegionalApiDisableAlertManagerRequest;\nexports.marshalRegionalApiDisableManagedAlertsRequest = marshalRegionalApiDisableManagedAlertsRequest;\nexports.marshalRegionalApiEnableAlertManagerRequest = marshalRegionalApiEnableAlertManagerRequest;\nexports.marshalRegionalApiEnableManagedAlertsRequest = marshalRegionalApiEnableManagedAlertsRequest;\nexports.marshalRegionalApiTriggerTestAlertRequest = marshalRegionalApiTriggerTestAlertRequest;\nexports.marshalRegionalApiUpdateDataSourceRequest = marshalRegionalApiUpdateDataSourceRequest;\nexports.unmarshalAlertManager = unmarshalAlertManager;\nexports.unmarshalContactPoint = unmarshalContactPoint;\nexports.unmarshalDataSource = unmarshalDataSource;\nexports.unmarshalGrafana = unmarshalGrafana;\nexports.unmarshalGrafanaProductDashboard = unmarshalGrafanaProductDashboard;\nexports.unmarshalGrafanaUser = unmarshalGrafanaUser;\nexports.unmarshalListContactPointsResponse = unmarshalListContactPointsResponse;\nexports.unmarshalListDataSourcesResponse = unmarshalListDataSourcesResponse;\nexports.unmarshalListGrafanaProductDashboardsResponse = unmarshalListGrafanaProductDashboardsResponse;\nexports.unmarshalListGrafanaUsersResponse = unmarshalListGrafanaUsersResponse;\nexports.unmarshalListManagedAlertsResponse = unmarshalListManagedAlertsResponse;\nexports.unmarshalListPlansResponse = unmarshalListPlansResponse;\nexports.unmarshalListTokensResponse = unmarshalListTokensResponse;\nexports.unmarshalPlan = unmarshalPlan;\nexports.unmarshalToken = unmarshalToken;\nexports.unmarshalUsageOverview = unmarshalUsageOverview;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst RegionalApiCreateDataSourceRequest = {\n  name: {\n    maxLength: 50,\n    minLength: 3,\n    pattern: /^[A-Za-z0-9-_. ]+$/\n  }\n};\nconst RegionalApiCreateTokenRequest = {\n  name: {\n    maxLength: 50,\n    minLength: 3,\n    pattern: /^[A-Za-z0-9-_]+$/\n  }\n};\nconst RegionalApiListContactPointsRequest = {\n  page: {\n    greaterThanOrEqual: 1\n  },\n  pageSize: {\n    greaterThanOrEqual: 1,\n    lessThanOrEqual: 1e3\n  }\n};\nconst RegionalApiListDataSourcesRequest = {\n  page: {\n    greaterThanOrEqual: 1\n  },\n  pageSize: {\n    greaterThanOrEqual: 1,\n    lessThanOrEqual: 1e3\n  }\n};\nconst RegionalApiListManagedAlertsRequest = {\n  page: {\n    greaterThanOrEqual: 1\n  },\n  pageSize: {\n    greaterThanOrEqual: 1,\n    lessThanOrEqual: 1e3\n  }\n};\nconst RegionalApiListTokensRequest = {\n  page: {\n    greaterThanOrEqual: 1\n  },\n  pageSize: {\n    greaterThanOrEqual: 1,\n    lessThanOrEqual: 1e3\n  }\n};\nconst RegionalApiUpdateDataSourceRequest = {\n  name: {\n    maxLength: 50,\n    minLength: 3,\n    pattern: /^[A-Za-z0-9-_. ]+$/\n  }\n};\nexports.RegionalApiCreateDataSourceRequest = RegionalApiCreateDataSourceRequest;\nexports.RegionalApiCreateTokenRequest = RegionalApiCreateTokenRequest;\nexports.RegionalApiListContactPointsRequest = RegionalApiListContactPointsRequest;\nexports.RegionalApiListDataSourcesRequest = RegionalApiListDataSourcesRequest;\nexports.RegionalApiListManagedAlertsRequest = RegionalApiListManagedAlertsRequest;\nexports.RegionalApiListTokensRequest = RegionalApiListTokensRequest;\nexports.RegionalApiUpdateDataSourceRequest = RegionalApiUpdateDataSourceRequest;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst intervalRetrier = require(\"../../../internal/async/interval-retrier.cjs\");\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass API extends api.API {\n  /**\n   * Activate the Cockpit of a given Project specified by the Project ID.\n   *\n   * @param request - The request {@link ActivateCockpitRequest}\n   * @returns A Promise of Cockpit\n   */\n  activateCockpit = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalActivateCockpitRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/cockpit/v1beta1/activate`\n    },\n    marshalling_gen.unmarshalCockpit\n  );\n  /**\n   * Retrieve the Cockpit of a given Project specified by the Project ID.\n   *\n   * @param request - The request {@link GetCockpitRequest}\n   * @returns A Promise of Cockpit\n   */\n  getCockpit = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/cockpit/v1beta1/cockpit`,\n      urlParams: marshalling.urlParams([\n        \"project_id\",\n        request.projectId ?? this.client.settings.defaultProjectId\n      ])\n    },\n    marshalling_gen.unmarshalCockpit\n  );\n  /**\n   * Waits for {@link Cockpit} to be in a final state.\n   *\n   * @param request - The request {@link GetCockpitRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Cockpit\n   */\n  waitForCockpit = (request = {}, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.COCKPIT_TRANSIENT_STATUSES.includes(res.status))),\n    this.getCockpit,\n    request,\n    options\n  );\n  /**\n   * Retrieve metrics from your Cockpit specified by the ID of the Project the\n   * Cockpit belongs to.\n   *\n   * @param request - The request {@link GetCockpitMetricsRequest}\n   * @returns A Promise of CockpitMetrics\n   */\n  getCockpitMetrics = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/cockpit/v1beta1/cockpit/metrics`,\n      urlParams: marshalling.urlParams(\n        [\"end_date\", request.endDate],\n        [\"metric_name\", request.metricName],\n        [\n          \"project_id\",\n          request.projectId ?? this.client.settings.defaultProjectId\n        ],\n        [\"start_date\", request.startDate]\n      )\n    },\n    marshalling_gen.unmarshalCockpitMetrics\n  );\n  /**\n   * Deactivate the Cockpit of a given Project specified by the Project ID.\n   *\n   * @param request - The request {@link DeactivateCockpitRequest}\n   * @returns A Promise of Cockpit\n   */\n  deactivateCockpit = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalDeactivateCockpitRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/cockpit/v1beta1/deactivate`\n    },\n    marshalling_gen.unmarshalCockpit\n  );\n  /**\n   * Create a data source for a given Project specified by the Project ID and\n   * the data source type.\n   *\n   * @param request - The request {@link CreateDatasourceRequest}\n   * @returns A Promise of Datasource\n   */\n  createDatasource = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateDatasourceRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/cockpit/v1beta1/datasources`\n    },\n    marshalling_gen.unmarshalDatasource\n  );\n  /**\n   * Delete a given data source specified by the data source ID.\n   *\n   * @param request - The request {@link DeleteDatasourceRequest}\n   */\n  deleteDatasource = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/cockpit/v1beta1/datasources/${marshalling.validatePathParam(\"datasourceId\", request.datasourceId)}`\n  });\n  pageOfListDatasources = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/cockpit/v1beta1/datasources`,\n      urlParams: marshalling.urlParams(\n        [\"is_managed_by_scaleway\", request.isManagedByScaleway],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\n          \"project_id\",\n          request.projectId ?? this.client.settings.defaultProjectId\n        ],\n        [\"types\", request.types]\n      )\n    },\n    marshalling_gen.unmarshalListDatasourcesResponse\n  );\n  /**\n   * Get a list of data sources for the specified Project ID.\n   *\n   * @param request - The request {@link ListDatasourcesRequest}\n   * @returns A Promise of ListDatasourcesResponse\n   */\n  listDatasources = (request = {}) => resourcePaginator.enrichForPagination(\"datasources\", this.pageOfListDatasources, request);\n  /**\n   * Create a token in a given Project specified by the Project ID.\n   *\n   * @param request - The request {@link CreateTokenRequest}\n   * @returns A Promise of Token\n   */\n  createToken = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateTokenRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/cockpit/v1beta1/tokens`\n    },\n    marshalling_gen.unmarshalToken\n  );\n  pageOfListTokens = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/cockpit/v1beta1/tokens`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\n          \"project_id\",\n          request.projectId ?? this.client.settings.defaultProjectId\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListTokensResponse\n  );\n  /**\n   * Get a list of tokens in a given Project specified by the Project ID.\n   *\n   * @param request - The request {@link ListTokensRequest}\n   * @returns A Promise of ListTokensResponse\n   */\n  listTokens = (request = {}) => resourcePaginator.enrichForPagination(\"tokens\", this.pageOfListTokens, request);\n  /**\n   * Retrieve a given token specified by the token ID.\n   *\n   * @param request - The request {@link GetTokenRequest}\n   * @returns A Promise of Token\n   */\n  getToken = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/cockpit/v1beta1/tokens/${marshalling.validatePathParam(\"tokenId\", request.tokenId)}`\n    },\n    marshalling_gen.unmarshalToken\n  );\n  /**\n   * Delete a given token specified by the token ID.\n   *\n   * @param request - The request {@link DeleteTokenRequest}\n   */\n  deleteToken = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/cockpit/v1beta1/tokens/${marshalling.validatePathParam(\"tokenId\", request.tokenId)}`\n  });\n  /**\n   * Create a contact point associated with the default receiver, to receive\n   * alerts.\n   *\n   * @param request - The request {@link CreateContactPointRequest}\n   * @returns A Promise of ContactPoint\n   */\n  createContactPoint = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateContactPointRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/cockpit/v1beta1/contact-points`\n    },\n    marshalling_gen.unmarshalContactPoint\n  );\n  pageOfListContactPoints = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/cockpit/v1beta1/contact-points`,\n      urlParams: marshalling.urlParams(\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\n          \"project_id\",\n          request.projectId ?? this.client.settings.defaultProjectId\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListContactPointsResponse\n  );\n  /**\n   * Get a list of contact points created for a given Cockpit, specified by the\n   * ID of the Project the Cockpit belongs to.\n   *\n   * @param request - The request {@link ListContactPointsRequest}\n   * @returns A Promise of ListContactPointsResponse\n   */\n  listContactPoints = (request = {}) => resourcePaginator.enrichForPagination(\"contactPoints\", this.pageOfListContactPoints, request);\n  /**\n   * Delete a contact point associated with the default receiver.\n   *\n   * @param request - The request {@link DeleteContactPointRequest}\n   */\n  deleteContactPoint = (request = {}) => this.client.fetch({\n    body: JSON.stringify(\n      marshalling_gen.marshalDeleteContactPointRequest(request, this.client.settings)\n    ),\n    headers: jsonContentHeaders,\n    method: \"POST\",\n    path: `/cockpit/v1beta1/delete-contact-point`\n  });\n  /**\n   * Enable the sending of managed alerts for a given Cockpit, specified by the\n   * ID of the Project the Cockpit belongs to.\n   *\n   * @param request - The request {@link EnableManagedAlertsRequest}\n   */\n  enableManagedAlerts = (request = {}) => this.client.fetch({\n    body: JSON.stringify(\n      marshalling_gen.marshalEnableManagedAlertsRequest(request, this.client.settings)\n    ),\n    headers: jsonContentHeaders,\n    method: \"POST\",\n    path: `/cockpit/v1beta1/enable-managed-alerts`\n  });\n  /**\n   * Disable the sending of managed alerts for a given Cockpit, specified by the\n   * ID of the Project the Cockpit belongs to.\n   *\n   * @param request - The request {@link DisableManagedAlertsRequest}\n   */\n  disableManagedAlerts = (request = {}) => this.client.fetch({\n    body: JSON.stringify(\n      marshalling_gen.marshalDisableManagedAlertsRequest(request, this.client.settings)\n    ),\n    headers: jsonContentHeaders,\n    method: \"POST\",\n    path: `/cockpit/v1beta1/disable-managed-alerts`\n  });\n  /**\n   * Send a test alert to make sure your contact points get notified when an\n   * actual alert is triggered.\n   *\n   * @param request - The request {@link TriggerTestAlertRequest}\n   */\n  triggerTestAlert = (request = {}) => this.client.fetch({\n    body: JSON.stringify(\n      marshalling_gen.marshalTriggerTestAlertRequest(request, this.client.settings)\n    ),\n    headers: jsonContentHeaders,\n    method: \"POST\",\n    path: `/cockpit/v1beta1/trigger-test-alert`\n  });\n  /**\n   * Create a Grafana user for your Cockpit's Grafana. Make sure you save the\n   * automatically-generated password and the Grafana user ID.\n   *\n   * @param request - The request {@link CreateGrafanaUserRequest}\n   * @returns A Promise of GrafanaUser\n   */\n  createGrafanaUser = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateGrafanaUserRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/cockpit/v1beta1/grafana-users`\n    },\n    marshalling_gen.unmarshalGrafanaUser\n  );\n  pageOfListGrafanaUsers = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/cockpit/v1beta1/grafana-users`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\n          \"project_id\",\n          request.projectId ?? this.client.settings.defaultProjectId\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListGrafanaUsersResponse\n  );\n  /**\n   * Get a list of all Grafana users created in your Cockpit's Grafana.\n   *\n   * @param request - The request {@link ListGrafanaUsersRequest}\n   * @returns A Promise of ListGrafanaUsersResponse\n   */\n  listGrafanaUsers = (request = {}) => resourcePaginator.enrichForPagination(\"grafanaUsers\", this.pageOfListGrafanaUsers, request);\n  /**\n   * Delete a Grafana user from your Cockpit's Grafana, specified by the ID of\n   * the Project the Cockpit belongs to, and the ID of the Grafana user.\n   *\n   * @param request - The request {@link DeleteGrafanaUserRequest}\n   */\n  deleteGrafanaUser = (request) => this.client.fetch({\n    body: JSON.stringify(\n      marshalling_gen.marshalDeleteGrafanaUserRequest(request, this.client.settings)\n    ),\n    headers: jsonContentHeaders,\n    method: \"POST\",\n    path: `/cockpit/v1beta1/grafana-users/${marshalling.validatePathParam(\"grafanaUserId\", request.grafanaUserId)}/delete`\n  });\n  /**\n   * Reset the password of a Grafana user, specified by the ID of the Project\n   * the Cockpit belongs to, and the ID of the Grafana user.\n   *\n   * @param request - The request {@link ResetGrafanaUserPasswordRequest}\n   * @returns A Promise of GrafanaUser\n   */\n  resetGrafanaUserPassword = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalResetGrafanaUserPasswordRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/cockpit/v1beta1/grafana-users/${marshalling.validatePathParam(\"grafanaUserId\", request.grafanaUserId)}/reset-password`\n    },\n    marshalling_gen.unmarshalGrafanaUser\n  );\n  pageOfListPlans = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/cockpit/v1beta1/plans`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListPlansResponse\n  );\n  /**\n   * Get a list of all pricing plans available.\n   *\n   * @param request - The request {@link ListPlansRequest}\n   * @returns A Promise of ListPlansResponse\n   */\n  listPlans = (request = {}) => resourcePaginator.enrichForPagination(\"plans\", this.pageOfListPlans, request);\n  /**\n   * Select your chosen pricing plan for your Cockpit, specifying the Cockpit's\n   * Project ID and the pricing plan's ID in the request.\n   *\n   * @param request - The request {@link SelectPlanRequest}\n   * @returns A Promise of SelectPlanResponse\n   */\n  selectPlan = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSelectPlanRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/cockpit/v1beta1/select-plan`\n    },\n    marshalling_gen.unmarshalSelectPlanResponse\n  );\n  pageOfListGrafanaProductDashboards = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/cockpit/v1beta1/grafana-product-dashboards`,\n      urlParams: marshalling.urlParams(\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\n          \"project_id\",\n          request.projectId ?? this.client.settings.defaultProjectId\n        ],\n        [\"tags\", request.tags]\n      )\n    },\n    marshalling_gen.unmarshalListGrafanaProductDashboardsResponse\n  );\n  /**\n   * List product dashboards. Get a list of available product dashboards.\n   *\n   * @param request - The request {@link ListGrafanaProductDashboardsRequest}\n   * @returns A Promise of ListGrafanaProductDashboardsResponse\n   */\n  listGrafanaProductDashboards = (request = {}) => resourcePaginator.enrichForPagination(\n    \"dashboards\",\n    this.pageOfListGrafanaProductDashboards,\n    request\n  );\n  /**\n   * Get a product dashboard. Get a product dashboard specified by the dashboard\n   * ID.\n   *\n   * @param request - The request {@link GetGrafanaProductDashboardRequest}\n   * @returns A Promise of GrafanaProductDashboard\n   */\n  getGrafanaProductDashboard = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/cockpit/v1beta1/grafana-product-dashboards/${marshalling.validatePathParam(\"dashboardName\", request.dashboardName)}`,\n      urlParams: marshalling.urlParams([\n        \"project_id\",\n        request.projectId ?? this.client.settings.defaultProjectId\n      ])\n    },\n    marshalling_gen.unmarshalGrafanaProductDashboard\n  );\n}\nexports.API = API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst COCKPIT_TRANSIENT_STATUSES = [\n  \"creating\",\n  \"deleting\",\n  \"updating\"\n];\nexports.COCKPIT_TRANSIENT_STATUSES = COCKPIT_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nexports.API = api_gen.API;\nexports.COCKPIT_TRANSIENT_STATUSES = content_gen.COCKPIT_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst randomName = require(\"@scaleway/random-name\");\nconst json = require(\"../../../helpers/json.cjs\");\nconst customMarshalling = require(\"../../../scw/custom-marshalling.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nconst unmarshalContactPointEmail = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ContactPointEmail' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    to: data.to\n  };\n};\nconst unmarshalContactPoint = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ContactPoint' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    email: data.email ? unmarshalContactPointEmail(data.email) : void 0\n  };\n};\nconst unmarshalDatasource = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Datasource' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    id: data.id,\n    isManagedByScaleway: data.is_managed_by_scaleway,\n    name: data.name,\n    projectId: data.project_id,\n    type: data.type,\n    url: data.url\n  };\n};\nconst unmarshalGrafanaProductDashboard = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'GrafanaProductDashboard' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    dashboardName: data.dashboard_name,\n    tags: data.tags,\n    title: data.title,\n    url: data.url,\n    variables: data.variables\n  };\n};\nconst unmarshalGrafanaUser = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'GrafanaUser' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    id: data.id,\n    login: data.login,\n    password: data.password,\n    role: data.role\n  };\n};\nconst unmarshalTokenScopes = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'TokenScopes' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    queryLogs: data.query_logs,\n    queryMetrics: data.query_metrics,\n    queryTraces: data.query_traces,\n    setupAlerts: data.setup_alerts,\n    setupLogsRules: data.setup_logs_rules,\n    setupMetricsRules: data.setup_metrics_rules,\n    writeLogs: data.write_logs,\n    writeMetrics: data.write_metrics,\n    writeTraces: data.write_traces\n  };\n};\nconst unmarshalToken = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Token' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    id: data.id,\n    name: data.name,\n    projectId: data.project_id,\n    scopes: data.scopes ? unmarshalTokenScopes(data.scopes) : void 0,\n    secretKey: data.secret_key,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalCockpitEndpoints = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'CockpitEndpoints' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    alertmanagerUrl: data.alertmanager_url,\n    grafanaUrl: data.grafana_url,\n    logsUrl: data.logs_url,\n    metricsUrl: data.metrics_url,\n    tracesUrl: data.traces_url\n  };\n};\nconst unmarshalPlan = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Plan' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    id: data.id,\n    logsIngestionPrice: data.logs_ingestion_price,\n    name: data.name,\n    retentionLogsInterval: data.retention_logs_interval,\n    retentionMetricsInterval: data.retention_metrics_interval,\n    retentionPrice: data.retention_price,\n    retentionTracesInterval: data.retention_traces_interval,\n    sampleIngestionPrice: data.sample_ingestion_price,\n    tracesIngestionPrice: data.traces_ingestion_price\n  };\n};\nconst unmarshalCockpit = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Cockpit' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    endpoints: data.endpoints ? unmarshalCockpitEndpoints(data.endpoints) : void 0,\n    managedAlertsEnabled: data.managed_alerts_enabled,\n    plan: data.plan ? unmarshalPlan(data.plan) : void 0,\n    projectId: data.project_id,\n    status: data.status,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalCockpitMetrics = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'CockpitMetrics' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    timeseries: marshalling.unmarshalArrayOfObject(data.timeseries, customMarshalling.unmarshalTimeSeries)\n  };\n};\nconst unmarshalListContactPointsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListContactPointsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    contactPoints: marshalling.unmarshalArrayOfObject(\n      data.contact_points,\n      unmarshalContactPoint\n    ),\n    hasAdditionalContactPoints: data.has_additional_contact_points,\n    hasAdditionalReceivers: data.has_additional_receivers,\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListDatasourcesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListDatasourcesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    datasources: marshalling.unmarshalArrayOfObject(data.datasources, unmarshalDatasource),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListGrafanaProductDashboardsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListGrafanaProductDashboardsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    dashboards: marshalling.unmarshalArrayOfObject(\n      data.dashboards,\n      unmarshalGrafanaProductDashboard\n    ),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListGrafanaUsersResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListGrafanaUsersResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    grafanaUsers: marshalling.unmarshalArrayOfObject(\n      data.grafana_users,\n      unmarshalGrafanaUser\n    ),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListPlansResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListPlansResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    plans: marshalling.unmarshalArrayOfObject(data.plans, unmarshalPlan),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListTokensResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListTokensResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    tokens: marshalling.unmarshalArrayOfObject(data.tokens, unmarshalToken),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalSelectPlanResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SelectPlanResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {};\n};\nconst marshalActivateCockpitRequest = (request, defaults) => ({\n  project_id: request.projectId ?? defaults.defaultProjectId\n});\nconst marshalContactPointEmail = (request, defaults) => ({\n  to: request.to\n});\nconst marshalContactPoint = (request, defaults) => ({\n  ...marshalling.resolveOneOf([\n    {\n      param: \"email\",\n      value: request.email !== void 0 ? marshalContactPointEmail(request.email) : void 0\n    }\n  ])\n});\nconst marshalCreateContactPointRequest = (request, defaults) => ({\n  contact_point: request.contactPoint !== void 0 ? marshalContactPoint(request.contactPoint) : void 0,\n  project_id: request.projectId ?? defaults.defaultProjectId\n});\nconst marshalCreateDatasourceRequest = (request, defaults) => ({\n  is_default: request.isDefault,\n  name: request.name,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  type: request.type\n});\nconst marshalCreateGrafanaUserRequest = (request, defaults) => ({\n  login: request.login,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  role: request.role\n});\nconst marshalTokenScopes = (request, defaults) => ({\n  query_logs: request.queryLogs,\n  query_metrics: request.queryMetrics,\n  query_traces: request.queryTraces,\n  setup_alerts: request.setupAlerts,\n  setup_logs_rules: request.setupLogsRules,\n  setup_metrics_rules: request.setupMetricsRules,\n  write_logs: request.writeLogs,\n  write_metrics: request.writeMetrics,\n  write_traces: request.writeTraces\n});\nconst marshalCreateTokenRequest = (request, defaults) => ({\n  name: request.name || randomName(\"token\"),\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  scopes: request.scopes !== void 0 ? marshalTokenScopes(request.scopes) : void 0\n});\nconst marshalDeactivateCockpitRequest = (request, defaults) => ({\n  project_id: request.projectId ?? defaults.defaultProjectId\n});\nconst marshalDeleteContactPointRequest = (request, defaults) => ({\n  contact_point: request.contactPoint !== void 0 ? marshalContactPoint(request.contactPoint) : void 0,\n  project_id: request.projectId ?? defaults.defaultProjectId\n});\nconst marshalDeleteGrafanaUserRequest = (request, defaults) => ({\n  project_id: request.projectId ?? defaults.defaultProjectId\n});\nconst marshalDisableManagedAlertsRequest = (request, defaults) => ({\n  project_id: request.projectId ?? defaults.defaultProjectId\n});\nconst marshalEnableManagedAlertsRequest = (request, defaults) => ({\n  project_id: request.projectId ?? defaults.defaultProjectId\n});\nconst marshalResetGrafanaUserPasswordRequest = (request, defaults) => ({\n  project_id: request.projectId ?? defaults.defaultProjectId\n});\nconst marshalSelectPlanRequest = (request, defaults) => ({\n  plan_id: request.planId,\n  project_id: request.projectId ?? defaults.defaultProjectId\n});\nconst marshalTriggerTestAlertRequest = (request, defaults) => ({\n  project_id: request.projectId ?? defaults.defaultProjectId\n});\nexports.marshalActivateCockpitRequest = marshalActivateCockpitRequest;\nexports.marshalCreateContactPointRequest = marshalCreateContactPointRequest;\nexports.marshalCreateDatasourceRequest = marshalCreateDatasourceRequest;\nexports.marshalCreateGrafanaUserRequest = marshalCreateGrafanaUserRequest;\nexports.marshalCreateTokenRequest = marshalCreateTokenRequest;\nexports.marshalDeactivateCockpitRequest = marshalDeactivateCockpitRequest;\nexports.marshalDeleteContactPointRequest = marshalDeleteContactPointRequest;\nexports.marshalDeleteGrafanaUserRequest = marshalDeleteGrafanaUserRequest;\nexports.marshalDisableManagedAlertsRequest = marshalDisableManagedAlertsRequest;\nexports.marshalEnableManagedAlertsRequest = marshalEnableManagedAlertsRequest;\nexports.marshalResetGrafanaUserPasswordRequest = marshalResetGrafanaUserPasswordRequest;\nexports.marshalSelectPlanRequest = marshalSelectPlanRequest;\nexports.marshalTriggerTestAlertRequest = marshalTriggerTestAlertRequest;\nexports.unmarshalCockpit = unmarshalCockpit;\nexports.unmarshalCockpitMetrics = unmarshalCockpitMetrics;\nexports.unmarshalContactPoint = unmarshalContactPoint;\nexports.unmarshalDatasource = unmarshalDatasource;\nexports.unmarshalGrafanaProductDashboard = unmarshalGrafanaProductDashboard;\nexports.unmarshalGrafanaUser = unmarshalGrafanaUser;\nexports.unmarshalListContactPointsResponse = unmarshalListContactPointsResponse;\nexports.unmarshalListDatasourcesResponse = unmarshalListDatasourcesResponse;\nexports.unmarshalListGrafanaProductDashboardsResponse = unmarshalListGrafanaProductDashboardsResponse;\nexports.unmarshalListGrafanaUsersResponse = unmarshalListGrafanaUsersResponse;\nexports.unmarshalListPlansResponse = unmarshalListPlansResponse;\nexports.unmarshalListTokensResponse = unmarshalListTokensResponse;\nexports.unmarshalSelectPlanResponse = unmarshalSelectPlanResponse;\nexports.unmarshalToken = unmarshalToken;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index_gen = require(\"./v1beta1/index.gen.cjs\");\nexports.v1beta1 = index_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst intervalRetrier = require(\"../../../internal/async/interval-retrier.cjs\");\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass API extends api.API {\n  /** Lists the available regions of the API. */\n  static LOCALITIES = [\"fr-par\", \"nl-ams\", \"pl-waw\"];\n  pageOfListNamespaces = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/containers/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/namespaces`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListNamespacesResponse\n  );\n  /**\n   * List all your namespaces. List all namespaces in a specified region.\n   *\n   * @param request - The request {@link ListNamespacesRequest}\n   * @returns A Promise of ListNamespacesResponse\n   */\n  listNamespaces = (request = {}) => resourcePaginator.enrichForPagination(\"namespaces\", this.pageOfListNamespaces, request);\n  /**\n   * Get a namespace. Get the namespace associated with the specified ID.\n   *\n   * @param request - The request {@link GetNamespaceRequest}\n   * @returns A Promise of Namespace\n   */\n  getNamespace = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/containers/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/namespaces/${marshalling.validatePathParam(\"namespaceId\", request.namespaceId)}`\n    },\n    marshalling_gen.unmarshalNamespace\n  );\n  /**\n   * Waits for {@link Namespace} to be in a final state.\n   *\n   * @param request - The request {@link GetNamespaceRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Namespace\n   */\n  waitForNamespace = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.NAMESPACE_TRANSIENT_STATUSES.includes(res.status))),\n    this.getNamespace,\n    request,\n    options\n  );\n  /**\n   * Create a new namespace. Create a new namespace in a specified region.\n   *\n   * @param request - The request {@link CreateNamespaceRequest}\n   * @returns A Promise of Namespace\n   */\n  createNamespace = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateNamespaceRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/containers/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/namespaces`\n    },\n    marshalling_gen.unmarshalNamespace\n  );\n  /**\n   * Update an existing namespace. Update the space associated with the\n   * specified ID.\n   *\n   * @param request - The request {@link UpdateNamespaceRequest}\n   * @returns A Promise of Namespace\n   */\n  updateNamespace = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateNamespaceRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/containers/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/namespaces/${marshalling.validatePathParam(\"namespaceId\", request.namespaceId)}`\n    },\n    marshalling_gen.unmarshalNamespace\n  );\n  /**\n   * Delete an existing namespace. Delete the namespace associated with the\n   * specified ID.\n   *\n   * @param request - The request {@link DeleteNamespaceRequest}\n   * @returns A Promise of Namespace\n   */\n  deleteNamespace = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/containers/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/namespaces/${marshalling.validatePathParam(\"namespaceId\", request.namespaceId)}`\n    },\n    marshalling_gen.unmarshalNamespace\n  );\n  pageOfListContainers = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/containers/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/containers`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"namespace_id\", request.namespaceId],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListContainersResponse\n  );\n  /**\n   * List all your containers. List all containers for a specified region.\n   *\n   * @param request - The request {@link ListContainersRequest}\n   * @returns A Promise of ListContainersResponse\n   */\n  listContainers = (request) => resourcePaginator.enrichForPagination(\"containers\", this.pageOfListContainers, request);\n  /**\n   * Get a container. Get the container associated with the specified ID.\n   *\n   * @param request - The request {@link GetContainerRequest}\n   * @returns A Promise of Container\n   */\n  getContainer = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/containers/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/containers/${marshalling.validatePathParam(\"containerId\", request.containerId)}`\n    },\n    marshalling_gen.unmarshalContainer\n  );\n  /**\n   * Waits for {@link Container} to be in a final state.\n   *\n   * @param request - The request {@link GetContainerRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Container\n   */\n  waitForContainer = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.CONTAINER_TRANSIENT_STATUSES.includes(res.status))),\n    this.getContainer,\n    request,\n    options\n  );\n  /**\n   * Create a new container. Create a new container in the specified region.\n   *\n   * @param request - The request {@link CreateContainerRequest}\n   * @returns A Promise of Container\n   */\n  createContainer = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateContainerRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/containers/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/containers`\n    },\n    marshalling_gen.unmarshalContainer\n  );\n  /**\n   * Update an existing container. Update the container associated with the\n   * specified ID.\n   *\n   * @param request - The request {@link UpdateContainerRequest}\n   * @returns A Promise of Container\n   */\n  updateContainer = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateContainerRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/containers/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/containers/${marshalling.validatePathParam(\"containerId\", request.containerId)}`\n    },\n    marshalling_gen.unmarshalContainer\n  );\n  /**\n   * Delete a container. Delete the container associated with the specified ID.\n   *\n   * @param request - The request {@link DeleteContainerRequest}\n   * @returns A Promise of Container\n   */\n  deleteContainer = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/containers/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/containers/${marshalling.validatePathParam(\"containerId\", request.containerId)}`\n    },\n    marshalling_gen.unmarshalContainer\n  );\n  /**\n   * Deploy a container. Deploy a container associated with the specified ID.\n   *\n   * @param request - The request {@link DeployContainerRequest}\n   * @returns A Promise of Container\n   */\n  deployContainer = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/containers/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/containers/${marshalling.validatePathParam(\"containerId\", request.containerId)}/deploy`\n    },\n    marshalling_gen.unmarshalContainer\n  );\n  pageOfListCrons = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/containers/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/crons`,\n      urlParams: marshalling.urlParams(\n        [\"container_id\", request.containerId],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListCronsResponse\n  );\n  /**\n   * List all your crons.\n   *\n   * @param request - The request {@link ListCronsRequest}\n   * @returns A Promise of ListCronsResponse\n   */\n  listCrons = (request) => resourcePaginator.enrichForPagination(\"crons\", this.pageOfListCrons, request);\n  /**\n   * Get a cron. Get the cron associated with the specified ID.\n   *\n   * @param request - The request {@link GetCronRequest}\n   * @returns A Promise of Cron\n   */\n  getCron = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/containers/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/crons/${marshalling.validatePathParam(\"cronId\", request.cronId)}`\n    },\n    marshalling_gen.unmarshalCron\n  );\n  /**\n   * Waits for {@link Cron} to be in a final state.\n   *\n   * @param request - The request {@link GetCronRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Cron\n   */\n  waitForCron = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.CRON_TRANSIENT_STATUSES.includes(res.status))),\n    this.getCron,\n    request,\n    options\n  );\n  /**\n   * Create a new cron.\n   *\n   * @param request - The request {@link CreateCronRequest}\n   * @returns A Promise of Cron\n   */\n  createCron = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateCronRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/containers/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/crons`\n    },\n    marshalling_gen.unmarshalCron\n  );\n  /**\n   * Update an existing cron. Update the cron associated with the specified ID.\n   *\n   * @param request - The request {@link UpdateCronRequest}\n   * @returns A Promise of Cron\n   */\n  updateCron = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateCronRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/containers/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/crons/${marshalling.validatePathParam(\"cronId\", request.cronId)}`\n    },\n    marshalling_gen.unmarshalCron\n  );\n  /**\n   * Delete an existing cron. Delete the cron associated with the specified ID.\n   *\n   * @param request - The request {@link DeleteCronRequest}\n   * @returns A Promise of Cron\n   */\n  deleteCron = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/containers/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/crons/${marshalling.validatePathParam(\"cronId\", request.cronId)}`\n    },\n    marshalling_gen.unmarshalCron\n  );\n  pageOfListDomains = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/containers/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/domains`,\n      urlParams: marshalling.urlParams(\n        [\"container_id\", request.containerId],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListDomainsResponse\n  );\n  /**\n   * List all domain name bindings. List all domain name bindings in a specified\n   * region.\n   *\n   * @param request - The request {@link ListDomainsRequest}\n   * @returns A Promise of ListDomainsResponse\n   */\n  listDomains = (request) => resourcePaginator.enrichForPagination(\"domains\", this.pageOfListDomains, request);\n  /**\n   * Get a domain name binding. Get a domain name binding for the container with\n   * the specified ID.\n   *\n   * @param request - The request {@link GetDomainRequest}\n   * @returns A Promise of Domain\n   */\n  getDomain = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/containers/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/domains/${marshalling.validatePathParam(\"domainId\", request.domainId)}`\n    },\n    marshalling_gen.unmarshalDomain\n  );\n  /**\n   * Waits for {@link Domain} to be in a final state.\n   *\n   * @param request - The request {@link GetDomainRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Domain\n   */\n  waitForDomain = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.DOMAIN_TRANSIENT_STATUSES.includes(res.status))),\n    this.getDomain,\n    request,\n    options\n  );\n  /**\n   * Create a domain name binding. Create a domain name binding for the\n   * container with the specified ID.\n   *\n   * @param request - The request {@link CreateDomainRequest}\n   * @returns A Promise of Domain\n   */\n  createDomain = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateDomainRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/containers/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/domains`\n    },\n    marshalling_gen.unmarshalDomain\n  );\n  /**\n   * Delete a domain name binding. Delete the domain name binding with the\n   * specific ID.\n   *\n   * @param request - The request {@link DeleteDomainRequest}\n   * @returns A Promise of Domain\n   */\n  deleteDomain = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/containers/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/domains/${marshalling.validatePathParam(\"domainId\", request.domainId)}`\n    },\n    marshalling_gen.unmarshalDomain\n  );\n  /**\n   * Create a new revocable token.\n   *\n   * @param request - The request {@link CreateTokenRequest}\n   * @returns A Promise of Token\n   */\n  createToken = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateTokenRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/containers/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/tokens`\n    },\n    marshalling_gen.unmarshalToken\n  );\n  /**\n   * Get a token. Get a token with a specified ID.\n   *\n   * @param request - The request {@link GetTokenRequest}\n   * @returns A Promise of Token\n   */\n  getToken = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/containers/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/tokens/${marshalling.validatePathParam(\"tokenId\", request.tokenId)}`\n    },\n    marshalling_gen.unmarshalToken\n  );\n  /**\n   * Waits for {@link Token} to be in a final state.\n   *\n   * @param request - The request {@link GetTokenRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Token\n   */\n  waitForToken = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.TOKEN_TRANSIENT_STATUSES.includes(res.status))),\n    this.getToken,\n    request,\n    options\n  );\n  pageOfListTokens = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/containers/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/tokens`,\n      urlParams: marshalling.urlParams(\n        [\"container_id\", request.containerId],\n        [\"namespace_id\", request.namespaceId],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListTokensResponse\n  );\n  /**\n   * List all tokens. List all tokens belonging to a specified Organization or\n   * Project.\n   *\n   * @param request - The request {@link ListTokensRequest}\n   * @returns A Promise of ListTokensResponse\n   */\n  listTokens = (request = {}) => resourcePaginator.enrichForPagination(\"tokens\", this.pageOfListTokens, request);\n  /**\n   * Delete a token. Delete a token with a specified ID.\n   *\n   * @param request - The request {@link DeleteTokenRequest}\n   * @returns A Promise of Token\n   */\n  deleteToken = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/containers/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/tokens/${marshalling.validatePathParam(\"tokenId\", request.tokenId)}`\n    },\n    marshalling_gen.unmarshalToken\n  );\n  /**\n   * Create a trigger. Create a new trigger for a specified container.\n   *\n   * @param request - The request {@link CreateTriggerRequest}\n   * @returns A Promise of Trigger\n   */\n  createTrigger = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateTriggerRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/containers/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/triggers`\n    },\n    marshalling_gen.unmarshalTrigger\n  );\n  /**\n   * Get a trigger. Get a trigger with a specified ID.\n   *\n   * @param request - The request {@link GetTriggerRequest}\n   * @returns A Promise of Trigger\n   */\n  getTrigger = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/containers/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/triggers/${marshalling.validatePathParam(\"triggerId\", request.triggerId)}`\n    },\n    marshalling_gen.unmarshalTrigger\n  );\n  /**\n   * Waits for {@link Trigger} to be in a final state.\n   *\n   * @param request - The request {@link GetTriggerRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Trigger\n   */\n  waitForTrigger = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.TRIGGER_TRANSIENT_STATUSES.includes(res.status))),\n    this.getTrigger,\n    request,\n    options\n  );\n  pageOfListTriggers = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/containers/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/triggers`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        ...Object.entries(\n          marshalling.resolveOneOf([\n            { param: \"container_id\", value: request.containerId },\n            { param: \"namespace_id\", value: request.namespaceId },\n            {\n              default: this.client.settings.defaultProjectId,\n              param: \"project_id\",\n              value: request.projectId\n            }\n          ])\n        )\n      )\n    },\n    marshalling_gen.unmarshalListTriggersResponse\n  );\n  /**\n   * List all triggers. List all triggers belonging to a specified Organization\n   * or Project.\n   *\n   * @param request - The request {@link ListTriggersRequest}\n   * @returns A Promise of ListTriggersResponse\n   */\n  listTriggers = (request = {}) => resourcePaginator.enrichForPagination(\"triggers\", this.pageOfListTriggers, request);\n  /**\n   * Update a trigger. Update a trigger with a specified ID.\n   *\n   * @param request - The request {@link UpdateTriggerRequest}\n   * @returns A Promise of Trigger\n   */\n  updateTrigger = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateTriggerRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/containers/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/triggers/${marshalling.validatePathParam(\"triggerId\", request.triggerId)}`\n    },\n    marshalling_gen.unmarshalTrigger\n  );\n  /**\n   * Delete a trigger. Delete a trigger with a specified ID.\n   *\n   * @param request - The request {@link DeleteTriggerRequest}\n   * @returns A Promise of Trigger\n   */\n  deleteTrigger = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/containers/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/triggers/${marshalling.validatePathParam(\"triggerId\", request.triggerId)}`\n    },\n    marshalling_gen.unmarshalTrigger\n  );\n}\nexports.API = API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst CONTAINER_TRANSIENT_STATUSES = [\n  \"deleting\",\n  \"creating\",\n  \"pending\"\n];\nconst CRON_TRANSIENT_STATUSES = [\n  \"deleting\",\n  \"creating\",\n  \"pending\"\n];\nconst DOMAIN_TRANSIENT_STATUSES = [\n  \"deleting\",\n  \"creating\",\n  \"pending\"\n];\nconst NAMESPACE_TRANSIENT_STATUSES = [\n  \"deleting\",\n  \"creating\",\n  \"pending\"\n];\nconst TOKEN_TRANSIENT_STATUSES = [\"deleting\", \"creating\"];\nconst TRIGGER_TRANSIENT_STATUSES = [\n  \"deleting\",\n  \"creating\",\n  \"pending\"\n];\nexports.CONTAINER_TRANSIENT_STATUSES = CONTAINER_TRANSIENT_STATUSES;\nexports.CRON_TRANSIENT_STATUSES = CRON_TRANSIENT_STATUSES;\nexports.DOMAIN_TRANSIENT_STATUSES = DOMAIN_TRANSIENT_STATUSES;\nexports.NAMESPACE_TRANSIENT_STATUSES = NAMESPACE_TRANSIENT_STATUSES;\nexports.TOKEN_TRANSIENT_STATUSES = TOKEN_TRANSIENT_STATUSES;\nexports.TRIGGER_TRANSIENT_STATUSES = TRIGGER_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst validationRules_gen = require(\"./validation-rules.gen.cjs\");\nexports.API = api_gen.API;\nexports.CONTAINER_TRANSIENT_STATUSES = content_gen.CONTAINER_TRANSIENT_STATUSES;\nexports.CRON_TRANSIENT_STATUSES = content_gen.CRON_TRANSIENT_STATUSES;\nexports.DOMAIN_TRANSIENT_STATUSES = content_gen.DOMAIN_TRANSIENT_STATUSES;\nexports.NAMESPACE_TRANSIENT_STATUSES = content_gen.NAMESPACE_TRANSIENT_STATUSES;\nexports.TOKEN_TRANSIENT_STATUSES = content_gen.TOKEN_TRANSIENT_STATUSES;\nexports.TRIGGER_TRANSIENT_STATUSES = content_gen.TRIGGER_TRANSIENT_STATUSES;\nexports.ValidationRules = validationRules_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst randomName = require(\"@scaleway/random-name\");\nconst json = require(\"../../../helpers/json.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst unmarshalSecretHashedValue = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SecretHashedValue' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    hashedValue: data.hashed_value,\n    key: data.key\n  };\n};\nconst unmarshalContainer = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Container' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    cpuLimit: data.cpu_limit,\n    description: data.description,\n    domainName: data.domain_name,\n    environmentVariables: data.environment_variables,\n    errorMessage: data.error_message,\n    httpOption: data.http_option,\n    id: data.id,\n    localStorageLimit: data.local_storage_limit,\n    maxConcurrency: data.max_concurrency,\n    maxScale: data.max_scale,\n    memoryLimit: data.memory_limit,\n    minScale: data.min_scale,\n    name: data.name,\n    namespaceId: data.namespace_id,\n    port: data.port,\n    privacy: data.privacy,\n    protocol: data.protocol,\n    region: data.region,\n    registryImage: data.registry_image,\n    sandbox: data.sandbox,\n    secretEnvironmentVariables: marshalling.unmarshalArrayOfObject(\n      data.secret_environment_variables,\n      unmarshalSecretHashedValue\n    ),\n    status: data.status,\n    timeout: data.timeout\n  };\n};\nconst unmarshalCron = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Cron' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    args: data.args,\n    containerId: data.container_id,\n    id: data.id,\n    name: data.name,\n    schedule: data.schedule,\n    status: data.status\n  };\n};\nconst unmarshalDomain = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Domain' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    containerId: data.container_id,\n    errorMessage: data.error_message,\n    hostname: data.hostname,\n    id: data.id,\n    status: data.status,\n    url: data.url\n  };\n};\nconst unmarshalNamespace = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Namespace' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    description: data.description,\n    environmentVariables: data.environment_variables,\n    errorMessage: data.error_message,\n    id: data.id,\n    name: data.name,\n    organizationId: data.organization_id,\n    projectId: data.project_id,\n    region: data.region,\n    registryEndpoint: data.registry_endpoint,\n    registryNamespaceId: data.registry_namespace_id,\n    secretEnvironmentVariables: marshalling.unmarshalArrayOfObject(\n      data.secret_environment_variables,\n      unmarshalSecretHashedValue\n    ),\n    status: data.status\n  };\n};\nconst unmarshalToken = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Token' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    containerId: data.container_id,\n    description: data.description,\n    expiresAt: marshalling.unmarshalDate(data.expires_at),\n    id: data.id,\n    namespaceId: data.namespace_id,\n    publicKey: data.public_key,\n    status: data.status,\n    token: data.token\n  };\n};\nconst unmarshalTriggerMnqNatsClientConfig = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'TriggerMnqNatsClientConfig' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    mnqCredentialId: data.mnq_credential_id,\n    mnqNatsAccountId: data.mnq_nats_account_id,\n    mnqProjectId: data.mnq_project_id,\n    mnqRegion: data.mnq_region,\n    subject: data.subject\n  };\n};\nconst unmarshalTriggerMnqSqsClientConfig = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'TriggerMnqSqsClientConfig' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    mnqCredentialId: data.mnq_credential_id,\n    mnqProjectId: data.mnq_project_id,\n    mnqRegion: data.mnq_region,\n    queue: data.queue\n  };\n};\nconst unmarshalTriggerSqsClientConfig = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'TriggerSqsClientConfig' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    accessKey: data.access_key,\n    endpoint: data.endpoint,\n    queueUrl: data.queue_url,\n    secretKey: data.secret_key\n  };\n};\nconst unmarshalTrigger = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Trigger' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    containerId: data.container_id,\n    description: data.description,\n    errorMessage: data.error_message,\n    id: data.id,\n    inputType: data.input_type,\n    name: data.name,\n    scwNatsConfig: data.scw_nats_config ? unmarshalTriggerMnqNatsClientConfig(data.scw_nats_config) : void 0,\n    scwSqsConfig: data.scw_sqs_config ? unmarshalTriggerMnqSqsClientConfig(data.scw_sqs_config) : void 0,\n    sqsConfig: data.sqs_config ? unmarshalTriggerSqsClientConfig(data.sqs_config) : void 0,\n    status: data.status\n  };\n};\nconst unmarshalListContainersResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListContainersResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    containers: marshalling.unmarshalArrayOfObject(data.containers, unmarshalContainer),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListCronsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListCronsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    crons: marshalling.unmarshalArrayOfObject(data.crons, unmarshalCron),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListDomainsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListDomainsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    domains: marshalling.unmarshalArrayOfObject(data.domains, unmarshalDomain),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListNamespacesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListNamespacesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    namespaces: marshalling.unmarshalArrayOfObject(data.namespaces, unmarshalNamespace),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListTokensResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListTokensResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    tokens: marshalling.unmarshalArrayOfObject(data.tokens, unmarshalToken),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListTriggersResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListTriggersResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    totalCount: data.total_count,\n    triggers: marshalling.unmarshalArrayOfObject(data.triggers, unmarshalTrigger)\n  };\n};\nconst marshalSecret = (request, defaults) => ({\n  key: request.key,\n  value: request.value\n});\nconst marshalCreateContainerRequest = (request, defaults) => ({\n  cpu_limit: request.cpuLimit,\n  description: request.description,\n  environment_variables: request.environmentVariables,\n  http_option: request.httpOption,\n  local_storage_limit: request.localStorageLimit,\n  max_concurrency: request.maxConcurrency,\n  max_scale: request.maxScale,\n  memory_limit: request.memoryLimit,\n  min_scale: request.minScale,\n  name: request.name,\n  namespace_id: request.namespaceId,\n  port: request.port,\n  privacy: request.privacy,\n  protocol: request.protocol,\n  registry_image: request.registryImage,\n  sandbox: request.sandbox,\n  secret_environment_variables: request.secretEnvironmentVariables !== void 0 ? request.secretEnvironmentVariables.map(\n    (elt) => marshalSecret(elt)\n  ) : void 0,\n  timeout: request.timeout\n});\nconst marshalCreateCronRequest = (request, defaults) => ({\n  args: request.args,\n  container_id: request.containerId,\n  name: request.name,\n  schedule: request.schedule\n});\nconst marshalCreateDomainRequest = (request, defaults) => ({\n  container_id: request.containerId,\n  hostname: request.hostname\n});\nconst marshalCreateNamespaceRequest = (request, defaults) => ({\n  description: request.description,\n  environment_variables: request.environmentVariables,\n  name: request.name || randomName(\"cns\"),\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  secret_environment_variables: request.secretEnvironmentVariables !== void 0 ? request.secretEnvironmentVariables.map(\n    (elt) => marshalSecret(elt)\n  ) : void 0\n});\nconst marshalCreateTokenRequest = (request, defaults) => ({\n  description: request.description,\n  expires_at: request.expiresAt,\n  ...marshalling.resolveOneOf([\n    { param: \"container_id\", value: request.containerId },\n    { param: \"namespace_id\", value: request.namespaceId }\n  ])\n});\nconst marshalCreateTriggerRequestMnqNatsClientConfig = (request, defaults) => ({\n  mnq_nats_account_id: request.mnqNatsAccountId,\n  mnq_project_id: request.mnqProjectId,\n  mnq_region: request.mnqRegion,\n  subject: request.subject\n});\nconst marshalCreateTriggerRequestMnqSqsClientConfig = (request, defaults) => ({\n  mnq_project_id: request.mnqProjectId,\n  mnq_region: request.mnqRegion,\n  queue: request.queue\n});\nconst marshalCreateTriggerRequestSqsClientConfig = (request, defaults) => ({\n  access_key: request.accessKey,\n  endpoint: request.endpoint,\n  queue_url: request.queueUrl,\n  secret_key: request.secretKey\n});\nconst marshalCreateTriggerRequest = (request, defaults) => ({\n  container_id: request.containerId,\n  description: request.description,\n  name: request.name,\n  ...marshalling.resolveOneOf([\n    {\n      param: \"scw_sqs_config\",\n      value: request.scwSqsConfig !== void 0 ? marshalCreateTriggerRequestMnqSqsClientConfig(\n        request.scwSqsConfig\n      ) : void 0\n    },\n    {\n      param: \"scw_nats_config\",\n      value: request.scwNatsConfig !== void 0 ? marshalCreateTriggerRequestMnqNatsClientConfig(\n        request.scwNatsConfig\n      ) : void 0\n    },\n    {\n      param: \"sqs_config\",\n      value: request.sqsConfig !== void 0 ? marshalCreateTriggerRequestSqsClientConfig(\n        request.sqsConfig\n      ) : void 0\n    }\n  ])\n});\nconst marshalUpdateContainerRequest = (request, defaults) => ({\n  cpu_limit: request.cpuLimit,\n  description: request.description,\n  environment_variables: request.environmentVariables,\n  http_option: request.httpOption,\n  local_storage_limit: request.localStorageLimit,\n  max_concurrency: request.maxConcurrency,\n  max_scale: request.maxScale,\n  memory_limit: request.memoryLimit,\n  min_scale: request.minScale,\n  port: request.port,\n  privacy: request.privacy,\n  protocol: request.protocol,\n  redeploy: request.redeploy,\n  registry_image: request.registryImage,\n  sandbox: request.sandbox,\n  secret_environment_variables: request.secretEnvironmentVariables !== void 0 ? request.secretEnvironmentVariables.map(\n    (elt) => marshalSecret(elt)\n  ) : void 0,\n  timeout: request.timeout\n});\nconst marshalUpdateCronRequest = (request, defaults) => ({\n  args: request.args,\n  container_id: request.containerId,\n  name: request.name,\n  schedule: request.schedule\n});\nconst marshalUpdateNamespaceRequest = (request, defaults) => ({\n  description: request.description,\n  environment_variables: request.environmentVariables,\n  secret_environment_variables: request.secretEnvironmentVariables !== void 0 ? request.secretEnvironmentVariables.map(\n    (elt) => marshalSecret(elt)\n  ) : void 0\n});\nconst marshalUpdateTriggerRequestSqsClientConfig = (request, defaults) => ({\n  access_key: request.accessKey,\n  secret_key: request.secretKey\n});\nconst marshalUpdateTriggerRequest = (request, defaults) => ({\n  description: request.description,\n  name: request.name,\n  ...marshalling.resolveOneOf([\n    {\n      param: \"sqs_config\",\n      value: request.sqsConfig !== void 0 ? marshalUpdateTriggerRequestSqsClientConfig(\n        request.sqsConfig\n      ) : void 0\n    }\n  ])\n});\nexports.marshalCreateContainerRequest = marshalCreateContainerRequest;\nexports.marshalCreateCronRequest = marshalCreateCronRequest;\nexports.marshalCreateDomainRequest = marshalCreateDomainRequest;\nexports.marshalCreateNamespaceRequest = marshalCreateNamespaceRequest;\nexports.marshalCreateTokenRequest = marshalCreateTokenRequest;\nexports.marshalCreateTriggerRequest = marshalCreateTriggerRequest;\nexports.marshalUpdateContainerRequest = marshalUpdateContainerRequest;\nexports.marshalUpdateCronRequest = marshalUpdateCronRequest;\nexports.marshalUpdateNamespaceRequest = marshalUpdateNamespaceRequest;\nexports.marshalUpdateTriggerRequest = marshalUpdateTriggerRequest;\nexports.unmarshalContainer = unmarshalContainer;\nexports.unmarshalCron = unmarshalCron;\nexports.unmarshalDomain = unmarshalDomain;\nexports.unmarshalListContainersResponse = unmarshalListContainersResponse;\nexports.unmarshalListCronsResponse = unmarshalListCronsResponse;\nexports.unmarshalListDomainsResponse = unmarshalListDomainsResponse;\nexports.unmarshalListNamespacesResponse = unmarshalListNamespacesResponse;\nexports.unmarshalListTokensResponse = unmarshalListTokensResponse;\nexports.unmarshalListTriggersResponse = unmarshalListTriggersResponse;\nexports.unmarshalNamespace = unmarshalNamespace;\nexports.unmarshalToken = unmarshalToken;\nexports.unmarshalTrigger = unmarshalTrigger;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst CreateTriggerRequest = {\n  description: {\n    maxLength: 255\n  },\n  name: {\n    maxLength: 50,\n    minLength: 1\n  }\n};\nconst CreateTriggerRequestMnqNatsClientConfig = {\n  mnqRegion: {\n    maxLength: 20,\n    minLength: 1\n  },\n  subject: {\n    maxLength: 100,\n    minLength: 1,\n    pattern: /^[^\\s]+$/\n  }\n};\nconst CreateTriggerRequestMnqSqsClientConfig = {\n  mnqRegion: {\n    maxLength: 20,\n    minLength: 1\n  },\n  queue: {\n    maxLength: 100,\n    minLength: 1\n  }\n};\nconst UpdateTriggerRequest = {\n  description: {\n    maxLength: 255\n  },\n  name: {\n    maxLength: 50,\n    minLength: 1\n  }\n};\nexports.CreateTriggerRequest = CreateTriggerRequest;\nexports.CreateTriggerRequestMnqNatsClientConfig = CreateTriggerRequestMnqNatsClientConfig;\nexports.CreateTriggerRequestMnqSqsClientConfig = CreateTriggerRequestMnqSqsClientConfig;\nexports.UpdateTriggerRequest = UpdateTriggerRequest;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index_gen = require(\"./v1/index.gen.cjs\");\nexports.v1 = index_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst intervalRetrier = require(\"../../../internal/async/interval-retrier.cjs\");\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass API extends api.API {\n  /** Lists the available zones of the API. */\n  static LOCALITIES = [\n    \"fr-par-1\",\n    \"fr-par-2\",\n    \"nl-ams-1\"\n  ];\n  pageOfListServers = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\n          \"project_id\",\n          request.projectId ?? this.client.settings.defaultProjectId\n        ],\n        [\"search\", request.search]\n      )\n    },\n    marshalling_gen.unmarshalListServersResponse\n  );\n  /**\n   * List baremetal servers for project.\n   *\n   * @param request - The request {@link ListServersRequest}\n   * @returns A Promise of ListServersResponse\n   */\n  listServers = (request = {}) => resourcePaginator.enrichForPagination(\"servers\", this.pageOfListServers, request);\n  /**\n   * Get a specific baremetal server. Get the server associated with the given\n   * ID.\n   *\n   * @param request - The request {@link GetServerRequest}\n   * @returns A Promise of Server\n   */\n  getServer = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}`\n    },\n    marshalling_gen.unmarshalServer\n  );\n  /**\n   * Waits for {@link Server} to be in a final state.\n   *\n   * @param request - The request {@link GetServerRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Server\n   */\n  waitForServer = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.SERVER_TRANSIENT_STATUSES.includes(res.status))),\n    this.getServer,\n    request,\n    options\n  );\n  getServerBackup = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/backups`\n    },\n    marshalling_gen.unmarshalBackup\n  );\n  updateServerBackup = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateServerBackupRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/backups`\n    },\n    marshalling_gen.unmarshalBackup\n  );\n  pageOfListSubscribableServerOptions = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/subscribable-server-options`,\n      urlParams: marshalling.urlParams(\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListSubscribableServerOptionsResponse\n  );\n  /**\n   * List subscribable server options. List subscribable options associated to\n   * the given server ID.\n   *\n   * @param request - The request {@link ListSubscribableServerOptionsRequest}\n   * @returns A Promise of ListSubscribableServerOptionsResponse\n   */\n  listSubscribableServerOptions = (request) => resourcePaginator.enrichForPagination(\n    \"serverOptions\",\n    this.pageOfListSubscribableServerOptions,\n    request\n  );\n  /**\n   * Subscribe server option. Subscribe option for the given server ID.\n   *\n   * @param request - The request {@link SubscribeServerOptionRequest}\n   * @returns A Promise of Service\n   */\n  subscribeServerOption = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSubscribeServerOptionRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/subscribe-server-option`\n    },\n    marshalling_gen.unmarshalService\n  );\n  /**\n   * Create a baremetal server. Create a new baremetal server. The order return\n   * you a service ID to follow the provisionning status you could call\n   * GetService.\n   *\n   * @param request - The request {@link CreateServerRequest}\n   * @returns A Promise of Service\n   */\n  createServer = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateServerRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers`\n    },\n    marshalling_gen.unmarshalService\n  );\n  /**\n   * Subscribe storage server option. Subscribe storage option for the given\n   * server ID.\n   *\n   * @param request - The request {@link SubscribeStorageOptionsRequest}\n   * @returns A Promise of SubscribeStorageOptionsResponse\n   */\n  subscribeStorageOptions = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSubscribeStorageOptionsRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/subscribe-storage-options`\n    },\n    marshalling_gen.unmarshalSubscribeStorageOptionsResponse\n  );\n  /**\n   * Update a baremetal server. Update the server associated with the given ID.\n   *\n   * @param request - The request {@link UpdateServerRequest}\n   * @returns A Promise of Server\n   */\n  updateServer = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateServerRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}`\n    },\n    marshalling_gen.unmarshalServer\n  );\n  updateServerTags = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateServerTagsRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/tags`\n    },\n    marshalling_gen.unmarshalServer\n  );\n  /**\n   * Reboot a baremetal server. Reboot the server associated with the given ID,\n   * use boot param to reboot in rescue.\n   *\n   * @param request - The request {@link RebootServerRequest}\n   */\n  rebootServer = (request) => this.client.fetch({\n    body: \"{}\",\n    headers: jsonContentHeaders,\n    method: \"POST\",\n    path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/reboot`\n  });\n  /**\n   * Start a baremetal server. Start the server associated with the given ID.\n   *\n   * @param request - The request {@link StartServerRequest}\n   */\n  startServer = (request) => this.client.fetch({\n    body: \"{}\",\n    headers: jsonContentHeaders,\n    method: \"POST\",\n    path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/start`\n  });\n  /**\n   * Stop a baremetal server. Stop the server associated with the given ID.\n   *\n   * @param request - The request {@link StopServerRequest}\n   */\n  stopServer = (request) => this.client.fetch({\n    body: \"{}\",\n    headers: jsonContentHeaders,\n    method: \"POST\",\n    path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/stop`\n  });\n  /**\n   * Delete a baremetal server. Delete the server associated with the given ID.\n   *\n   * @param request - The request {@link DeleteServerRequest}\n   */\n  deleteServer = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}`\n  });\n  pageOfListServerEvents = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/events`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListServerEventsResponse\n  );\n  /**\n   * List server events. List events associated to the given server ID.\n   *\n   * @param request - The request {@link ListServerEventsRequest}\n   * @returns A Promise of ListServerEventsResponse\n   */\n  listServerEvents = (request) => resourcePaginator.enrichForPagination(\"events\", this.pageOfListServerEvents, request);\n  pageOfListServerDisks = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/disks`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListServerDisksResponse\n  );\n  /**\n   * List server disks. List disks associated to the given server ID.\n   *\n   * @param request - The request {@link ListServerDisksRequest}\n   * @returns A Promise of ListServerDisksResponse\n   */\n  listServerDisks = (request) => resourcePaginator.enrichForPagination(\"disks\", this.pageOfListServerDisks, request);\n  getOrderedService = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/ordered-services/${marshalling.validatePathParam(\"orderedServiceId\", request.orderedServiceId)}`\n    },\n    marshalling_gen.unmarshalService\n  );\n  /**\n   * Get a specific service. Get the service associated with the given ID.\n   *\n   * @param request - The request {@link GetServiceRequest}\n   * @returns A Promise of Service\n   */\n  getService = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/services/${marshalling.validatePathParam(\"serviceId\", request.serviceId)}`\n    },\n    marshalling_gen.unmarshalService\n  );\n  /**\n   * Delete a specific service. Delete the service associated with the given ID.\n   *\n   * @param request - The request {@link DeleteServiceRequest}\n   * @returns A Promise of Service\n   */\n  deleteService = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/services/${marshalling.validatePathParam(\"serviceId\", request.serviceId)}`\n    },\n    marshalling_gen.unmarshalService\n  );\n  pageOfListServices = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/services`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListServicesResponse\n  );\n  /**\n   * List services.\n   *\n   * @param request - The request {@link ListServicesRequest}\n   * @returns A Promise of ListServicesResponse\n   */\n  listServices = (request = {}) => resourcePaginator.enrichForPagination(\"services\", this.pageOfListServices, request);\n  /**\n   * Install a baremetal server. Install an OS on the server associated with the\n   * given ID.\n   *\n   * @param request - The request {@link InstallServerRequest}\n   * @returns A Promise of ServerInstall\n   */\n  installServer = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalInstallServerRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/install`\n    },\n    marshalling_gen.unmarshalServerInstall\n  );\n  /**\n   * Get a specific server installation status. Get the server installation\n   * status associated with the given server ID.\n   *\n   * @param request - The request {@link GetServerInstallRequest}\n   * @returns A Promise of ServerInstall\n   */\n  getServerInstall = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/install`\n    },\n    marshalling_gen.unmarshalServerInstall\n  );\n  /**\n   * Waits for {@link ServerInstall} to be in a final state.\n   *\n   * @param request - The request {@link GetServerInstallRequest}\n   * @param options - The waiting options\n   * @returns A Promise of ServerInstall\n   */\n  waitForServerInstall = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(\n      !content_gen.SERVER_INSTALL_TRANSIENT_STATUSES.includes(res.status)\n    )),\n    this.getServerInstall,\n    request,\n    options\n  );\n  /**\n   * Cancels the current (running) server installation. Cancels the current\n   * server installation associated with the given server ID.\n   *\n   * @param request - The request {@link CancelServerInstallRequest}\n   */\n  cancelServerInstall = (request) => this.client.fetch({\n    method: \"POST\",\n    path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/cancel-install`\n  });\n  /**\n   * Get server default partitioning. Get the server default partitioning schema\n   * associated with the given server ID and OS ID.\n   *\n   * @param request - The request {@link GetServerDefaultPartitioningRequest}\n   * @returns A Promise of ServerDefaultPartitioning\n   */\n  getServerDefaultPartitioning = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/partitioning/${marshalling.validatePathParam(\"osId\", request.osId)}`\n    },\n    marshalling_gen.unmarshalServerDefaultPartitioning\n  );\n  /**\n   * Start BMC (Baseboard Management Controller) access for a given baremetal\n   * server. Start BMC (Baseboard Management Controller) access associated with\n   * the given ID. The BMC (Baseboard Management Controller) access is available\n   * one hour after the installation of the server.\n   *\n   * @param request - The request {@link StartBMCAccessRequest}\n   */\n  startBMCAccess = (request) => this.client.fetch({\n    body: JSON.stringify(\n      marshalling_gen.marshalStartBMCAccessRequest(request, this.client.settings)\n    ),\n    headers: jsonContentHeaders,\n    method: \"POST\",\n    path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/bmc-access`\n  });\n  /**\n   * Get BMC (Baseboard Management Controller) access for a given baremetal\n   * server. Get the BMC (Baseboard Management Controller) access associated\n   * with the given ID.\n   *\n   * @param request - The request {@link GetBMCAccessRequest}\n   * @returns A Promise of BMCAccess\n   */\n  getBMCAccess = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/bmc-access`\n    },\n    marshalling_gen.unmarshalBMCAccess\n  );\n  /**\n   * Waits for {@link BMCAccess} to be in a final state.\n   *\n   * @param request - The request {@link GetBMCAccessRequest}\n   * @param options - The waiting options\n   * @returns A Promise of BMCAccess\n   */\n  waitForBMCAccess = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.BMC_ACCESS_TRANSIENT_STATUSES.includes(res.status))),\n    this.getBMCAccess,\n    request,\n    options\n  );\n  /**\n   * Stop BMC (Baseboard Management Controller) access for a given baremetal\n   * server. Stop BMC (Baseboard Management Controller) access associated with\n   * the given ID.\n   *\n   * @param request - The request {@link StopBMCAccessRequest}\n   */\n  stopBMCAccess = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/bmc-access`\n  });\n  pageOfListOffers = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/offers`,\n      urlParams: marshalling.urlParams(\n        [\"available_only\", request.availableOnly],\n        [\"catalog\", request.catalog],\n        [\"commercial_range\", request.commercialRange],\n        [\"is_failover_block\", request.isFailoverBlock],\n        [\"is_failover_ip\", request.isFailoverIp],\n        [\"is_rpn_san\", request.isRpnSan],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId],\n        [\n          \"sold_in\",\n          request.soldIn && request.soldIn.length > 0 ? request.soldIn.join(\",\") : void 0\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListOffersResponse\n  );\n  /**\n   * List offers. List all available server offers.\n   *\n   * @param request - The request {@link ListOffersRequest}\n   * @returns A Promise of ListOffersResponse\n   */\n  listOffers = (request = {}) => resourcePaginator.enrichForPagination(\"offers\", this.pageOfListOffers, request);\n  /**\n   * Get offer. Return specific offer for the given ID.\n   *\n   * @param request - The request {@link GetOfferRequest}\n   * @returns A Promise of Offer\n   */\n  getOffer = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/offers/${marshalling.validatePathParam(\"offerId\", request.offerId)}`,\n      urlParams: marshalling.urlParams([\"project_id\", request.projectId])\n    },\n    marshalling_gen.unmarshalOffer\n  );\n  pageOfListOS = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/os`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId],\n        [\"server_id\", request.serverId],\n        [\"type\", request.type]\n      )\n    },\n    marshalling_gen.unmarshalListOSResponse\n  );\n  /**\n   * List all available OS that can be install on a baremetal server.\n   *\n   * @param request - The request {@link ListOSRequest}\n   * @returns A Promise of ListOSResponse\n   */\n  listOS = (request) => resourcePaginator.enrichForPagination(\"os\", this.pageOfListOS, request);\n  /**\n   * Get an OS with a given ID. Return specific OS for the given ID.\n   *\n   * @param request - The request {@link GetOSRequest}\n   * @returns A Promise of OS\n   */\n  getOS = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/os/${marshalling.validatePathParam(\"osId\", request.osId)}`,\n      urlParams: marshalling.urlParams(\n        [\"project_id\", request.projectId],\n        [\"server_id\", request.serverId]\n      )\n    },\n    marshalling_gen.unmarshalOS\n  );\n  /**\n   * Update reverse of ip. Update reverse of ip associated with the given ID.\n   *\n   * @param request - The request {@link UpdateReverseRequest}\n   * @returns A Promise of IP\n   */\n  updateReverse = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateReverseRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/reverses/${marshalling.validatePathParam(\"ipId\", request.ipId)}`\n    },\n    marshalling_gen.unmarshalIP\n  );\n  /**\n   * Order failover IPs. Order X failover IPs.\n   *\n   * @param request - The request {@link CreateFailoverIPsRequest}\n   * @returns A Promise of CreateFailoverIPsResponse\n   */\n  createFailoverIPs = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateFailoverIPsRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/failover-ips`\n    },\n    marshalling_gen.unmarshalCreateFailoverIPsResponse\n  );\n  /**\n   * Attach failovers on baremetal server. Attach failovers on the server\n   * associated with the given ID.\n   *\n   * @param request - The request {@link AttachFailoverIPsRequest}\n   */\n  attachFailoverIPs = (request) => this.client.fetch({\n    body: JSON.stringify(\n      marshalling_gen.marshalAttachFailoverIPsRequest(request, this.client.settings)\n    ),\n    headers: jsonContentHeaders,\n    method: \"POST\",\n    path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/failover-ips/attach`\n  });\n  /**\n   * Detach failovers on baremetal server. Detach failovers on the server\n   * associated with the given ID.\n   *\n   * @param request - The request {@link DetachFailoverIPsRequest}\n   */\n  detachFailoverIPs = (request) => this.client.fetch({\n    body: JSON.stringify(\n      marshalling_gen.marshalDetachFailoverIPsRequest(request, this.client.settings)\n    ),\n    headers: jsonContentHeaders,\n    method: \"POST\",\n    path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/failover-ips/detach`\n  });\n  /**\n   * Attach a failover IP to a MAC address.\n   *\n   * @param request - The request {@link AttachFailoverIPToMacAddressRequest}\n   * @returns A Promise of IP\n   */\n  attachFailoverIPToMacAddress = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalAttachFailoverIPToMacAddressRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/failover-ips/${marshalling.validatePathParam(\"ipId\", request.ipId)}/attach-to-mac-address`\n    },\n    marshalling_gen.unmarshalIP\n  );\n  /**\n   * Detach a failover IP from a MAC address.\n   *\n   * @param request - The request {@link DetachFailoverIPFromMacAddressRequest}\n   * @returns A Promise of IP\n   */\n  detachFailoverIPFromMacAddress = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/failover-ips/${marshalling.validatePathParam(\"ipId\", request.ipId)}/detach-from-mac-address`\n    },\n    marshalling_gen.unmarshalIP\n  );\n  /**\n   * Delete a failover server. Delete the failover associated with the given ID.\n   *\n   * @param request - The request {@link DeleteFailoverIPRequest}\n   */\n  deleteFailoverIP = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/failover-ips/${marshalling.validatePathParam(\"ipId\", request.ipId)}`\n  });\n  pageOfListFailoverIPs = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/failover-ips`,\n      urlParams: marshalling.urlParams(\n        [\"only_available\", request.onlyAvailable],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\n          \"project_id\",\n          request.projectId ?? this.client.settings.defaultProjectId\n        ],\n        [\"search\", request.search]\n      )\n    },\n    marshalling_gen.unmarshalListFailoverIPsResponse\n  );\n  /**\n   * List failovers for project. List failovers servers for project.\n   *\n   * @param request - The request {@link ListFailoverIPsRequest}\n   * @returns A Promise of ListFailoverIPsResponse\n   */\n  listFailoverIPs = (request = {}) => resourcePaginator.enrichForPagination(\"failoverIps\", this.pageOfListFailoverIPs, request);\n  /**\n   * Get a specific baremetal server. Get the server associated with the given\n   * ID.\n   *\n   * @param request - The request {@link GetFailoverIPRequest}\n   * @returns A Promise of FailoverIP\n   */\n  getFailoverIP = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/failover-ips/${marshalling.validatePathParam(\"ipId\", request.ipId)}`\n    },\n    marshalling_gen.unmarshalFailoverIP\n  );\n  /**\n   * Get remaining quota.\n   *\n   * @param request - The request {@link GetRemainingQuotaRequest}\n   * @returns A Promise of GetRemainingQuotaResponse\n   */\n  getRemainingQuota = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/remaining-quota`,\n      urlParams: marshalling.urlParams([\"project_id\", request.projectId])\n    },\n    marshalling_gen.unmarshalGetRemainingQuotaResponse\n  );\n  /**\n   * Get raid. Return raid for the given server ID.\n   *\n   * @param request - The request {@link GetRaidRequest}\n   * @returns A Promise of Raid\n   */\n  getRaid = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/raid`\n    },\n    marshalling_gen.unmarshalRaid\n  );\n  /**\n   * Update RAID. Update RAID associated with the given server ID.\n   *\n   * @param request - The request {@link UpdateRaidRequest}\n   */\n  updateRaid = (request) => this.client.fetch({\n    body: JSON.stringify(\n      marshalling_gen.marshalUpdateRaidRequest(request, this.client.settings)\n    ),\n    headers: jsonContentHeaders,\n    method: \"POST\",\n    path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/update-raid`\n  });\n  /**\n   * Start in rescue baremetal server. Start in rescue the server associated\n   * with the given ID.\n   *\n   * @param request - The request {@link StartRescueRequest}\n   * @returns A Promise of Rescue\n   */\n  startRescue = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalStartRescueRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/rescue`\n    },\n    marshalling_gen.unmarshalRescue\n  );\n  /**\n   * Get rescue information. Return rescue information for the given server ID.\n   *\n   * @param request - The request {@link GetRescueRequest}\n   * @returns A Promise of Rescue\n   */\n  getRescue = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/rescue`\n    },\n    marshalling_gen.unmarshalRescue\n  );\n  /**\n   * Stop rescue on baremetal server. Stop rescue on the server associated with\n   * the given ID.\n   *\n   * @param request - The request {@link StopRescueRequest}\n   */\n  stopRescue = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/dedibox/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/rescue`\n  });\n}\nclass BillingAPI extends api.API {\n  pageOfListInvoices = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/invoices`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListInvoicesResponse\n  );\n  listInvoices = (request = {}) => resourcePaginator.enrichForPagination(\"invoices\", this.pageOfListInvoices, request);\n  getInvoice = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/invoices/${marshalling.validatePathParam(\"invoiceId\", request.invoiceId)}`\n    },\n    marshalling_gen.unmarshalInvoice\n  );\n  downloadInvoice = (request) => this.client.fetch({\n    method: \"GET\",\n    path: `/dedibox/v1/invoices/${marshalling.validatePathParam(\"invoiceId\", request.invoiceId)}/download`,\n    urlParams: marshalling.urlParams([\"dl\", 1]),\n    responseType: \"blob\"\n  });\n  pageOfListRefunds = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/refunds`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListRefundsResponse\n  );\n  listRefunds = (request = {}) => resourcePaginator.enrichForPagination(\"refunds\", this.pageOfListRefunds, request);\n  getRefund = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/refunds/${marshalling.validatePathParam(\"refundId\", request.refundId)}`\n    },\n    marshalling_gen.unmarshalRefund\n  );\n  downloadRefund = (request) => this.client.fetch({\n    method: \"GET\",\n    path: `/dedibox/v1/refunds/${marshalling.validatePathParam(\"refundId\", request.refundId)}/download`,\n    urlParams: marshalling.urlParams([\"dl\", 1]),\n    responseType: \"blob\"\n  });\n  canOrder = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/can-order`,\n      urlParams: marshalling.urlParams([\n        \"project_id\",\n        request.projectId ?? this.client.settings.defaultProjectId\n      ])\n    },\n    marshalling_gen.unmarshalCanOrderResponse\n  );\n}\nclass IPv6BlockAPI extends api.API {\n  /**\n   * Get IPv6 block quota. Get IPv6 block quota with the given project ID. /48\n   * one per organization. /56 link to your number of server. /64 link to your\n   * number of failover IP.\n   *\n   * @param request - The request {@link IPv6BlockApiGetIPv6BlockQuotasRequest}\n   * @returns A Promise of GetIPv6BlockQuotasResponse\n   */\n  getIPv6BlockQuotas = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/ipv6-block-quotas`,\n      urlParams: marshalling.urlParams([\"project_id\", request.projectId])\n    },\n    marshalling_gen.unmarshalGetIPv6BlockQuotasResponse\n  );\n  /**\n   * Create IPv6 block for baremetal server. Create IPv6 block associated with\n   * the given project ID.\n   *\n   * @param request - The request {@link IPv6BlockApiCreateIPv6BlockRequest}\n   * @returns A Promise of IPv6Block\n   */\n  createIPv6Block = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalIPv6BlockApiCreateIPv6BlockRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/dedibox/v1/ipv6-block`\n    },\n    marshalling_gen.unmarshalIPv6Block\n  );\n  /**\n   * Get a specific IPv6 block. Get the IPv6 block associated with the given ID.\n   *\n   * @param request - The request {@link IPv6BlockApiGetIPv6BlockRequest}\n   * @returns A Promise of IPv6Block\n   */\n  getIPv6Block = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/ipv6-block`,\n      urlParams: marshalling.urlParams([\"project_id\", request.projectId])\n    },\n    marshalling_gen.unmarshalIPv6Block\n  );\n  /**\n   * Update IPv6 block. Update DNS associated to IPv6 block. If DNS is used,\n   * minimum of 2 is necessary and maximum of 5 (no duplicate).\n   *\n   * @param request - The request {@link IPv6BlockApiUpdateIPv6BlockRequest}\n   * @returns A Promise of IPv6Block\n   */\n  updateIPv6Block = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalIPv6BlockApiUpdateIPv6BlockRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/dedibox/v1/ipv6-blocks/${marshalling.validatePathParam(\"blockId\", request.blockId)}`\n    },\n    marshalling_gen.unmarshalIPv6Block\n  );\n  /**\n   * Delete IPv6 block. Delete IPv6 block subnet with the given ID.\n   *\n   * @param request - The request {@link IPv6BlockApiDeleteIPv6BlockRequest}\n   */\n  deleteIPv6Block = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/dedibox/v1/ipv6-blocks/${marshalling.validatePathParam(\"blockId\", request.blockId)}`\n  });\n  /**\n   * Create IPv6 block subnet. Create IPv6 block subnet for the given IP ID. /48\n   * could create subnet in /56 (quota link to your number of server). /56 could\n   * create subnet in /64 (quota link to your number of failover IP).\n   *\n   * @param request - The request\n   *   {@link IPv6BlockApiCreateIPv6BlockSubnetRequest}\n   * @returns A Promise of IPv6Block\n   */\n  createIPv6BlockSubnet = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalIPv6BlockApiCreateIPv6BlockSubnetRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/dedibox/v1/ipv6-blocks/${marshalling.validatePathParam(\"blockId\", request.blockId)}/subnets`\n    },\n    marshalling_gen.unmarshalIPv6Block\n  );\n  /**\n   * List available IPv6 block subnets. List all available IPv6 block subnets\n   * for given IP ID.\n   *\n   * @param request - The request\n   *   {@link IPv6BlockApiListIPv6BlockSubnetsAvailableRequest}\n   * @returns A Promise of ListIPv6BlockSubnetsAvailableResponse\n   */\n  listIPv6BlockSubnetsAvailable = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/ipv6-blocks/${marshalling.validatePathParam(\"blockId\", request.blockId)}/subnets`\n    },\n    marshalling_gen.unmarshalListIPv6BlockSubnetsAvailableResponse\n  );\n}\nclass RpnAPI extends api.API {\n  pageOfListRpnServerCapabilities = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/rpn/server-capabilities`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListRpnServerCapabilitiesResponse\n  );\n  listRpnServerCapabilities = (request = {}) => resourcePaginator.enrichForPagination(\n    \"servers\",\n    this.pageOfListRpnServerCapabilities,\n    request\n  );\n  getRpnStatus = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/rpn/status`,\n      urlParams: marshalling.urlParams(\n        [\"project_id\", request.projectId],\n        [\"rpnv1_group_id\", request.rpnv1GroupId],\n        [\"rpnv2_group_id\", request.rpnv2GroupId]\n      )\n    },\n    marshalling_gen.unmarshalGetRpnStatusResponse\n  );\n}\nclass RpnSanAPI extends api.API {\n  pageOfListRpnSans = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/rpn-sans`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListRpnSansResponse\n  );\n  listRpnSans = (request = {}) => resourcePaginator.enrichForPagination(\"rpnSans\", this.pageOfListRpnSans, request);\n  getRpnSan = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/rpn-sans/${marshalling.validatePathParam(\"rpnSanId\", request.rpnSanId)}`\n    },\n    marshalling_gen.unmarshalRpnSan\n  );\n  /**\n   * Waits for {@link RpnSan} to be in a final state.\n   *\n   * @param request - The request {@link RpnSanApiGetRpnSanRequest}\n   * @param options - The waiting options\n   * @returns A Promise of RpnSan\n   */\n  waitForRpnSan = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.RPN_SAN_TRANSIENT_STATUSES.includes(res.status))),\n    this.getRpnSan,\n    request,\n    options\n  );\n  deleteRpnSan = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/dedibox/v1/rpn-sans/${marshalling.validatePathParam(\"rpnSanId\", request.rpnSanId)}`\n  });\n  createRpnSan = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalRpnSanApiCreateRpnSanRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/dedibox/v1/rpn-sans`\n    },\n    marshalling_gen.unmarshalService\n  );\n  listIps = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/rpn-sans/${marshalling.validatePathParam(\"rpnSanId\", request.rpnSanId)}/ips`,\n      urlParams: marshalling.urlParams([\"type\", request.type])\n    },\n    marshalling_gen.unmarshalListIpsResponse\n  );\n  addIp = (request) => this.client.fetch({\n    body: JSON.stringify(\n      marshalling_gen.marshalRpnSanApiAddIpRequest(request, this.client.settings)\n    ),\n    headers: jsonContentHeaders,\n    method: \"POST\",\n    path: `/dedibox/v1/rpn-sans/${marshalling.validatePathParam(\"rpnSanId\", request.rpnSanId)}/ips`\n  });\n  removeIp = (request) => this.client.fetch({\n    body: JSON.stringify(\n      marshalling_gen.marshalRpnSanApiRemoveIpRequest(request, this.client.settings)\n    ),\n    headers: jsonContentHeaders,\n    method: \"DELETE\",\n    path: `/dedibox/v1/rpn-sans/${marshalling.validatePathParam(\"rpnSanId\", request.rpnSanId)}/ips`\n  });\n  listAvailableIps = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/rpn-sans/${marshalling.validatePathParam(\"rpnSanId\", request.rpnSanId)}/available-ips`,\n      urlParams: marshalling.urlParams([\"type\", request.type])\n    },\n    marshalling_gen.unmarshalListIpsResponse\n  );\n}\nclass RpnV1API extends api.API {\n  pageOfListRpnGroups = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/rpnv1/groups`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListRpnGroupsResponse\n  );\n  listRpnGroups = (request = {}) => resourcePaginator.enrichForPagination(\"rpnGroups\", this.pageOfListRpnGroups, request);\n  getRpnGroup = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/rpnv1/groups/${marshalling.validatePathParam(\"groupId\", request.groupId)}`\n    },\n    marshalling_gen.unmarshalRpnGroup\n  );\n  createRpnGroup = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalRpnV1ApiCreateRpnGroupRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/dedibox/v1/rpnv1/groups`\n    },\n    marshalling_gen.unmarshalRpnGroup\n  );\n  deleteRpnGroup = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/dedibox/v1/rpnv1/groups/${marshalling.validatePathParam(\"groupId\", request.groupId)}`\n  });\n  updateRpnGroupName = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalRpnV1ApiUpdateRpnGroupNameRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/dedibox/v1/rpnv1/groups/${marshalling.validatePathParam(\"groupId\", request.groupId)}`\n    },\n    marshalling_gen.unmarshalRpnGroup\n  );\n  pageOfListRpnGroupMembers = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/rpnv1/groups/${marshalling.validatePathParam(\"groupId\", request.groupId)}/members`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListRpnGroupMembersResponse\n  );\n  listRpnGroupMembers = (request) => resourcePaginator.enrichForPagination(\"members\", this.pageOfListRpnGroupMembers, request);\n  rpnGroupInvite = (request) => this.client.fetch({\n    body: JSON.stringify(\n      marshalling_gen.marshalRpnV1ApiRpnGroupInviteRequest(request, this.client.settings)\n    ),\n    headers: jsonContentHeaders,\n    method: \"POST\",\n    path: `/dedibox/v1/rpnv1/groups/${marshalling.validatePathParam(\"groupId\", request.groupId)}/invite`\n  });\n  leaveRpnGroup = (request) => this.client.fetch({\n    body: JSON.stringify(\n      marshalling_gen.marshalRpnV1ApiLeaveRpnGroupRequest(request, this.client.settings)\n    ),\n    headers: jsonContentHeaders,\n    method: \"POST\",\n    path: `/dedibox/v1/rpnv1/groups/${marshalling.validatePathParam(\"groupId\", request.groupId)}/leave`\n  });\n  addRpnGroupMembers = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalRpnV1ApiAddRpnGroupMembersRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/dedibox/v1/rpnv1/groups/${marshalling.validatePathParam(\"groupId\", request.groupId)}/members`\n    },\n    marshalling_gen.unmarshalRpnGroup\n  );\n  deleteRpnGroupMembers = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalRpnV1ApiDeleteRpnGroupMembersRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"DELETE\",\n      path: `/dedibox/v1/rpnv1/groups/${marshalling.validatePathParam(\"groupId\", request.groupId)}/members`\n    },\n    marshalling_gen.unmarshalRpnGroup\n  );\n  pageOfListRpnCapableServers = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/rpnv1/capable-servers`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListRpnCapableServersResponse\n  );\n  listRpnCapableServers = (request = {}) => resourcePaginator.enrichForPagination(\"servers\", this.pageOfListRpnCapableServers, request);\n  pageOfListRpnCapableSanServers = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/rpnv1/capable-san-servers`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListRpnCapableSanServersResponse\n  );\n  listRpnCapableSanServers = (request = {}) => resourcePaginator.enrichForPagination(\n    \"sanServers\",\n    this.pageOfListRpnCapableSanServers,\n    request\n  );\n  pageOfListRpnInvites = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/rpnv1/invites`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\n          \"project_id\",\n          request.projectId ?? this.client.settings.defaultProjectId\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListRpnInvitesResponse\n  );\n  listRpnInvites = (request = {}) => resourcePaginator.enrichForPagination(\"members\", this.pageOfListRpnInvites, request);\n  acceptRpnInvite = (request) => this.client.fetch({\n    method: \"POST\",\n    path: `/dedibox/v1/rpnv1/invites/${marshalling.validatePathParam(\"memberId\", request.memberId)}/accept`\n  });\n  refuseRpnInvite = (request) => this.client.fetch({\n    method: \"POST\",\n    path: `/dedibox/v1/rpnv1/invites/${marshalling.validatePathParam(\"memberId\", request.memberId)}/refuse`\n  });\n}\nclass RpnV2API extends api.API {\n  pageOfListRpnV2Groups = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/rpnv2/groups`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListRpnV2GroupsResponse\n  );\n  listRpnV2Groups = (request = {}) => resourcePaginator.enrichForPagination(\"rpnGroups\", this.pageOfListRpnV2Groups, request);\n  pageOfListRpnV2Members = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/rpnv2/groups/${marshalling.validatePathParam(\"groupId\", request.groupId)}/members`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"type\", request.type]\n      )\n    },\n    marshalling_gen.unmarshalListRpnV2MembersResponse\n  );\n  listRpnV2Members = (request) => resourcePaginator.enrichForPagination(\"members\", this.pageOfListRpnV2Members, request);\n  getRpnV2Group = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/rpnv2/groups/${marshalling.validatePathParam(\"groupId\", request.groupId)}`\n    },\n    marshalling_gen.unmarshalRpnV2Group\n  );\n  /**\n   * Waits for {@link RpnV2Group} to be in a final state.\n   *\n   * @param request - The request {@link RpnV2ApiGetRpnV2GroupRequest}\n   * @param options - The waiting options\n   * @returns A Promise of RpnV2Group\n   */\n  waitForRpnV2Group = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(\n      !content_gen.RPN_V2_GROUP_TRANSIENT_STATUSES.includes(res.status)\n    )),\n    this.getRpnV2Group,\n    request,\n    options\n  );\n  createRpnV2Group = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalRpnV2ApiCreateRpnV2GroupRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/dedibox/v1/rpnv2/groups`\n    },\n    marshalling_gen.unmarshalRpnV2Group\n  );\n  deleteRpnV2Group = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/dedibox/v1/rpnv2/groups/${marshalling.validatePathParam(\"groupId\", request.groupId)}`\n  });\n  updateRpnV2GroupName = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalRpnV2ApiUpdateRpnV2GroupNameRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/dedibox/v1/rpnv2/groups/${marshalling.validatePathParam(\"groupId\", request.groupId)}`\n    },\n    marshalling_gen.unmarshalRpnV2Group\n  );\n  addRpnV2Members = (request) => this.client.fetch({\n    body: JSON.stringify(\n      marshalling_gen.marshalRpnV2ApiAddRpnV2MembersRequest(request, this.client.settings)\n    ),\n    headers: jsonContentHeaders,\n    method: \"POST\",\n    path: `/dedibox/v1/rpnv2/groups/${marshalling.validatePathParam(\"groupId\", request.groupId)}/members`\n  });\n  deleteRpnV2Members = (request) => this.client.fetch({\n    body: JSON.stringify(\n      marshalling_gen.marshalRpnV2ApiDeleteRpnV2MembersRequest(request, this.client.settings)\n    ),\n    headers: jsonContentHeaders,\n    method: \"DELETE\",\n    path: `/dedibox/v1/rpnv2/groups/${marshalling.validatePathParam(\"groupId\", request.groupId)}/members`\n  });\n  pageOfListRpnV2CapableResources = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/rpnv2/groups/capable`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListRpnV2CapableResourcesResponse\n  );\n  listRpnV2CapableResources = (request = {}) => resourcePaginator.enrichForPagination(\n    \"servers\",\n    this.pageOfListRpnV2CapableResources,\n    request\n  );\n  pageOfListRpnV2GroupLogs = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/dedibox/v1/rpnv2/groups/${marshalling.validatePathParam(\"groupId\", request.groupId)}/logs`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListRpnV2GroupLogsResponse\n  );\n  listRpnV2GroupLogs = (request) => resourcePaginator.enrichForPagination(\"logs\", this.pageOfListRpnV2GroupLogs, request);\n  updateRpnV2VlanForMembers = (request) => this.client.fetch({\n    body: JSON.stringify(\n      marshalling_gen.marshalRpnV2ApiUpdateRpnV2VlanForMembersRequest(\n        request,\n        this.client.settings\n      )\n    ),\n    headers: jsonContentHeaders,\n    method: \"PATCH\",\n    path: `/dedibox/v1/rpnv2/groups/${marshalling.validatePathParam(\"groupId\", request.groupId)}/vlan`\n  });\n  enableRpnV2GroupCompatibility = (request) => this.client.fetch({\n    body: JSON.stringify(\n      marshalling_gen.marshalRpnV2ApiEnableRpnV2GroupCompatibilityRequest(\n        request,\n        this.client.settings\n      )\n    ),\n    headers: jsonContentHeaders,\n    method: \"POST\",\n    path: `/dedibox/v1/rpnv2/groups/${marshalling.validatePathParam(\"groupId\", request.groupId)}/enable-compatibility`\n  });\n  disableRpnV2GroupCompatibility = (request) => this.client.fetch({\n    body: \"{}\",\n    headers: jsonContentHeaders,\n    method: \"POST\",\n    path: `/dedibox/v1/rpnv2/groups/${marshalling.validatePathParam(\"groupId\", request.groupId)}/disable-compatibility`\n  });\n}\nexports.API = API;\nexports.BillingAPI = BillingAPI;\nexports.IPv6BlockAPI = IPv6BlockAPI;\nexports.RpnAPI = RpnAPI;\nexports.RpnSanAPI = RpnSanAPI;\nexports.RpnV1API = RpnV1API;\nexports.RpnV2API = RpnV2API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst BMC_ACCESS_TRANSIENT_STATUSES = [\n  \"creating\",\n  \"deleting\"\n];\nconst I_PV6_BLOCK_DELEGATION_TRANSIENT_STATUSES = [\"updating\"];\nconst RPN_GROUP_MEMBER_TRANSIENT_STATUSES = [\n  \"creating\",\n  \"deleting\"\n];\nconst RPN_SAN_TRANSIENT_STATUSES = [\n  \"creating\",\n  \"deleting\"\n];\nconst RPN_V2_GROUP_TRANSIENT_STATUSES = [\n  \"creating\",\n  \"updating\",\n  \"deleting\"\n];\nconst RPN_V2_MEMBER_TRANSIENT_STATUSES = [\n  \"creating\",\n  \"updating\",\n  \"deleting\"\n];\nconst SERVER_INSTALL_TRANSIENT_STATUSES = [\n  \"booting\",\n  \"setting_up_raid\",\n  \"partitioning\",\n  \"formatting\",\n  \"installing\",\n  \"configuring\",\n  \"configuring_bootloader\",\n  \"rebooting\"\n];\nconst SERVER_TRANSIENT_STATUSES = [\n  \"delivering\",\n  \"installing\"\n];\nconst SERVICE_PROVISIONING_TRANSIENT_STATUSES = [\"delivering\", \"expiring\"];\nexports.BMC_ACCESS_TRANSIENT_STATUSES = BMC_ACCESS_TRANSIENT_STATUSES;\nexports.I_PV6_BLOCK_DELEGATION_TRANSIENT_STATUSES = I_PV6_BLOCK_DELEGATION_TRANSIENT_STATUSES;\nexports.RPN_GROUP_MEMBER_TRANSIENT_STATUSES = RPN_GROUP_MEMBER_TRANSIENT_STATUSES;\nexports.RPN_SAN_TRANSIENT_STATUSES = RPN_SAN_TRANSIENT_STATUSES;\nexports.RPN_V2_GROUP_TRANSIENT_STATUSES = RPN_V2_GROUP_TRANSIENT_STATUSES;\nexports.RPN_V2_MEMBER_TRANSIENT_STATUSES = RPN_V2_MEMBER_TRANSIENT_STATUSES;\nexports.SERVER_INSTALL_TRANSIENT_STATUSES = SERVER_INSTALL_TRANSIENT_STATUSES;\nexports.SERVER_TRANSIENT_STATUSES = SERVER_TRANSIENT_STATUSES;\nexports.SERVICE_PROVISIONING_TRANSIENT_STATUSES = SERVICE_PROVISIONING_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst validationRules_gen = require(\"./validation-rules.gen.cjs\");\nexports.API = api_gen.API;\nexports.BillingAPI = api_gen.BillingAPI;\nexports.IPv6BlockAPI = api_gen.IPv6BlockAPI;\nexports.RpnAPI = api_gen.RpnAPI;\nexports.RpnSanAPI = api_gen.RpnSanAPI;\nexports.RpnV1API = api_gen.RpnV1API;\nexports.RpnV2API = api_gen.RpnV2API;\nexports.BMC_ACCESS_TRANSIENT_STATUSES = content_gen.BMC_ACCESS_TRANSIENT_STATUSES;\nexports.I_PV6_BLOCK_DELEGATION_TRANSIENT_STATUSES = content_gen.I_PV6_BLOCK_DELEGATION_TRANSIENT_STATUSES;\nexports.RPN_GROUP_MEMBER_TRANSIENT_STATUSES = content_gen.RPN_GROUP_MEMBER_TRANSIENT_STATUSES;\nexports.RPN_SAN_TRANSIENT_STATUSES = content_gen.RPN_SAN_TRANSIENT_STATUSES;\nexports.RPN_V2_GROUP_TRANSIENT_STATUSES = content_gen.RPN_V2_GROUP_TRANSIENT_STATUSES;\nexports.RPN_V2_MEMBER_TRANSIENT_STATUSES = content_gen.RPN_V2_MEMBER_TRANSIENT_STATUSES;\nexports.SERVER_INSTALL_TRANSIENT_STATUSES = content_gen.SERVER_INSTALL_TRANSIENT_STATUSES;\nexports.SERVER_TRANSIENT_STATUSES = content_gen.SERVER_TRANSIENT_STATUSES;\nexports.SERVICE_PROVISIONING_TRANSIENT_STATUSES = content_gen.SERVICE_PROVISIONING_TRANSIENT_STATUSES;\nexports.ValidationRules = validationRules_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst json = require(\"../../../helpers/json.cjs\");\nconst customMarshalling = require(\"../../../scw/custom-marshalling.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nconst unmarshalIP = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'IP' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    address: data.address,\n    cidr: data.cidr,\n    gateway: data.gateway,\n    ipId: data.ip_id,\n    netmask: data.netmask,\n    reverse: data.reverse,\n    semantic: data.semantic,\n    status: data.status,\n    version: data.version\n  };\n};\nconst unmarshalCPU = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'CPU' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    coreCount: data.core_count,\n    frequency: data.frequency,\n    name: data.name,\n    threadCount: data.thread_count\n  };\n};\nconst unmarshalDisk = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Disk' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    capacity: data.capacity,\n    type: data.type\n  };\n};\nconst unmarshalMemory = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Memory' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    capacity: data.capacity,\n    frequency: data.frequency,\n    isEcc: data.is_ecc,\n    type: data.type\n  };\n};\nconst unmarshalPersistentMemory = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'PersistentMemory' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    capacity: data.capacity,\n    frequency: data.frequency,\n    model: data.model\n  };\n};\nconst unmarshalRaidController = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'RaidController' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    model: data.model,\n    raidLevel: data.raid_level\n  };\n};\nconst unmarshalOfferAntiDosInfo = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'OfferAntiDosInfo' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    type: data.type\n  };\n};\nconst unmarshalOfferBackupInfo = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'OfferBackupInfo' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    size: data.size\n  };\n};\nconst unmarshalOfferBandwidthInfo = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'OfferBandwidthInfo' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    speed: data.speed\n  };\n};\nconst unmarshalOfferFailoverBlockInfo = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'OfferFailoverBlockInfo' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    onetimeFees: data.onetime_fees ? unmarshalOffer(data.onetime_fees) : void 0\n  };\n};\nconst unmarshalOfferFailoverIpInfo = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'OfferFailoverIpInfo' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    onetimeFees: data.onetime_fees ? unmarshalOffer(data.onetime_fees) : void 0\n  };\n};\nconst unmarshalOfferLicenseInfo = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'OfferLicenseInfo' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    boundToIp: data.bound_to_ip\n  };\n};\nconst unmarshalOfferRPNInfo = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'OfferRPNInfo' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    speed: data.speed\n  };\n};\nconst unmarshalOfferSANInfo = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'OfferSANInfo' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    deviceType: data.device_type,\n    ha: data.ha,\n    size: data.size\n  };\n};\nconst unmarshalOfferServerInfo = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'OfferServerInfo' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    availableOptions: marshalling.unmarshalArrayOfObject(\n      data.available_options,\n      unmarshalOffer\n    ),\n    bandwidth: data.bandwidth,\n    commercialRange: data.commercial_range,\n    connectivity: data.connectivity,\n    cpus: marshalling.unmarshalArrayOfObject(data.cpus, unmarshalCPU),\n    disks: marshalling.unmarshalArrayOfObject(data.disks, unmarshalDisk),\n    memories: marshalling.unmarshalArrayOfObject(data.memories, unmarshalMemory),\n    onetimeFees: data.onetime_fees ? unmarshalOffer(data.onetime_fees) : void 0,\n    persistentMemories: marshalling.unmarshalArrayOfObject(\n      data.persistent_memories,\n      unmarshalPersistentMemory\n    ),\n    raidControllers: marshalling.unmarshalArrayOfObject(\n      data.raid_controllers,\n      unmarshalRaidController\n    ),\n    rpnVersion: data.rpn_version,\n    stock: data.stock,\n    stockByDatacenter: data.stock_by_datacenter\n  };\n};\nconst unmarshalOfferServiceLevelInfo = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'OfferServiceLevelInfo' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    antidos: data.antidos,\n    availableOptions: marshalling.unmarshalArrayOfObject(\n      data.available_options,\n      unmarshalOffer\n    ),\n    customization: data.customization,\n    extraFailoverQuota: data.extra_failover_quota,\n    git: data.git,\n    highRpnBandwidth: data.high_rpn_bandwidth,\n    prioritySupport: data.priority_support,\n    salesSupport: data.sales_support,\n    sla: data.sla,\n    supportPhone: data.support_phone,\n    supportTicket: data.support_ticket\n  };\n};\nconst unmarshalOfferStorageInfo = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'OfferStorageInfo' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    maxQuota: data.max_quota,\n    size: data.size\n  };\n};\nconst unmarshalOffer = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Offer' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    antidosInfo: data.antidos_info ? unmarshalOfferAntiDosInfo(data.antidos_info) : void 0,\n    backupInfo: data.backup_info ? unmarshalOfferBackupInfo(data.backup_info) : void 0,\n    bandwidthInfo: data.bandwidth_info ? unmarshalOfferBandwidthInfo(data.bandwidth_info) : void 0,\n    catalog: data.catalog,\n    failoverBlockInfo: data.failover_block_info ? unmarshalOfferFailoverBlockInfo(data.failover_block_info) : void 0,\n    failoverIpInfo: data.failover_ip_info ? unmarshalOfferFailoverIpInfo(data.failover_ip_info) : void 0,\n    id: data.id,\n    licenseInfo: data.license_info ? unmarshalOfferLicenseInfo(data.license_info) : void 0,\n    name: data.name,\n    paymentFrequency: data.payment_frequency,\n    pricing: data.pricing ? customMarshalling.unmarshalMoney(data.pricing) : void 0,\n    rpnInfo: data.rpn_info ? unmarshalOfferRPNInfo(data.rpn_info) : void 0,\n    sanInfo: data.san_info ? unmarshalOfferSANInfo(data.san_info) : void 0,\n    serverInfo: data.server_info ? unmarshalOfferServerInfo(data.server_info) : void 0,\n    serviceLevelInfo: data.service_level_info ? unmarshalOfferServiceLevelInfo(data.service_level_info) : void 0,\n    storageInfo: data.storage_info ? unmarshalOfferStorageInfo(data.storage_info) : void 0,\n    usbStorageInfo: data.usb_storage_info ? unmarshalOfferStorageInfo(data.usb_storage_info) : void 0\n  };\n};\nconst unmarshalOS = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'OS' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    allowCustomPartitioning: data.allow_custom_partitioning,\n    allowSshKeys: data.allow_ssh_keys,\n    allowedFilesystems: data.allowed_filesystems,\n    arch: data.arch,\n    displayName: data.display_name,\n    hostnameMaxLength: data.hostname_max_length,\n    hostnameRegex: data.hostname_regex,\n    id: data.id,\n    licenseOffers: marshalling.unmarshalArrayOfObject(data.license_offers, unmarshalOffer),\n    maxPartitions: data.max_partitions,\n    name: data.name,\n    panelPasswordRegex: data.panel_password_regex,\n    passwordRegex: data.password_regex,\n    releasedAt: marshalling.unmarshalDate(data.released_at),\n    requiresAdminPassword: data.requires_admin_password,\n    requiresLicense: data.requires_license,\n    requiresPanelPassword: data.requires_panel_password,\n    requiresUser: data.requires_user,\n    requiresValidHostname: data.requires_valid_hostname,\n    type: data.type,\n    version: data.version\n  };\n};\nconst unmarshalRpnSan = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'RpnSan' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    datacenterName: data.datacenter_name,\n    deliveredAt: marshalling.unmarshalDate(data.delivered_at),\n    expiresAt: marshalling.unmarshalDate(data.expires_at),\n    id: data.id,\n    iqn: data.iqn,\n    iqnSuffix: data.iqn_suffix,\n    offer: data.offer ? unmarshalOffer(data.offer) : void 0,\n    offerId: data.offer_id,\n    offerName: data.offer_name,\n    organizationId: data.organization_id,\n    projectId: data.project_id,\n    rpnv1Compatible: data.rpnv1_compatible,\n    rpnv1Implicit: data.rpnv1_implicit,\n    serverHostname: data.server_hostname,\n    status: data.status,\n    storageSize: data.storage_size,\n    terminatedAt: marshalling.unmarshalDate(data.terminated_at)\n  };\n};\nconst unmarshalRpnGroup = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'RpnGroup' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    active: data.active,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    id: data.id,\n    membersCount: data.members_count,\n    name: data.name,\n    organizationId: data.organization_id,\n    owner: data.owner,\n    projectId: data.project_id,\n    type: data.type\n  };\n};\nconst unmarshalNetworkInterface = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'NetworkInterface' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    cardId: data.card_id,\n    deviceId: data.device_id,\n    ips: marshalling.unmarshalArrayOfObject(data.ips, unmarshalIP),\n    mac: data.mac,\n    type: data.type\n  };\n};\nconst unmarshalServerLocation = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ServerLocation' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    datacenterName: data.datacenter_name,\n    rack: data.rack,\n    room: data.room\n  };\n};\nconst unmarshalServerOption = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ServerOption' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    expiredAt: marshalling.unmarshalDate(data.expired_at),\n    offer: data.offer ? unmarshalOffer(data.offer) : void 0,\n    options: marshalling.unmarshalArrayOfObject(data.options, unmarshalServerOption),\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalServiceLevel = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ServiceLevel' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    level: data.level,\n    offerId: data.offer_id\n  };\n};\nconst unmarshalServer = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Server' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    abuseContact: data.abuse_contact,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    expiredAt: marshalling.unmarshalDate(data.expired_at),\n    hasBmc: data.has_bmc,\n    hostname: data.hostname,\n    id: data.id,\n    interfaces: marshalling.unmarshalArrayOfObject(\n      data.interfaces,\n      unmarshalNetworkInterface\n    ),\n    ipv6Slaac: data.ipv6_slaac,\n    isOutsourced: data.is_outsourced,\n    isRpnv2Member: data.is_rpnv2_member,\n    level: data.level ? unmarshalServiceLevel(data.level) : void 0,\n    location: data.location ? unmarshalServerLocation(data.location) : void 0,\n    offer: data.offer ? unmarshalOffer(data.offer) : void 0,\n    options: marshalling.unmarshalArrayOfObject(data.options, unmarshalServerOption),\n    organizationId: data.organization_id,\n    os: data.os ? unmarshalOS(data.os) : void 0,\n    projectId: data.project_id,\n    qinq: data.qinq,\n    rebootedAt: marshalling.unmarshalDate(data.rebooted_at),\n    rescueOs: data.rescue_os ? unmarshalOS(data.rescue_os) : void 0,\n    status: data.status,\n    tags: data.tags,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    zone: data.zone\n  };\n};\nconst unmarshalRpnV2GroupSubnet = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'RpnV2GroupSubnet' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    address: data.address,\n    cidr: data.cidr\n  };\n};\nconst unmarshalRpnV2Group = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'RpnV2Group' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    compatibleRpnv1: data.compatible_rpnv1,\n    gateway: data.gateway,\n    id: data.id,\n    membersCount: data.members_count,\n    name: data.name,\n    organizationId: data.organization_id,\n    owner: data.owner,\n    projectId: data.project_id,\n    rpnv1Group: data.rpnv1_group ? unmarshalRpnGroup(data.rpnv1_group) : void 0,\n    status: data.status,\n    subnet: data.subnet ? unmarshalRpnV2GroupSubnet(data.subnet) : void 0,\n    type: data.type\n  };\n};\nconst unmarshalService = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Service' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    deliveredAt: marshalling.unmarshalDate(data.delivered_at),\n    expiresAt: marshalling.unmarshalDate(data.expires_at),\n    id: data.id,\n    offer: data.offer ? unmarshalOffer(data.offer) : void 0,\n    provisioningStatus: data.provisioning_status,\n    resourceId: data.resource_id,\n    terminatedAt: marshalling.unmarshalDate(data.terminated_at),\n    type: data.type\n  };\n};\nconst unmarshalFailoverBlock = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'FailoverBlock' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    address: data.address,\n    cidr: data.cidr,\n    gatewayIp: data.gateway_ip,\n    id: data.id,\n    ipVersion: data.ip_version,\n    nameservers: data.nameservers,\n    netmask: data.netmask\n  };\n};\nconst unmarshalFailoverIP = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'FailoverIP' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    address: data.address,\n    block: data.block ? unmarshalFailoverBlock(data.block) : void 0,\n    cidr: data.cidr,\n    gatewayIp: data.gateway_ip,\n    id: data.id,\n    ipVersion: data.ip_version,\n    mac: data.mac,\n    netmask: data.netmask,\n    reverse: data.reverse,\n    serverId: data.server_id,\n    serverZone: data.server_zone,\n    status: data.status,\n    type: data.type\n  };\n};\nconst unmarshalBMCAccess = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'BMCAccess' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    expiresAt: marshalling.unmarshalDate(data.expires_at),\n    login: data.login,\n    password: data.password,\n    status: data.status,\n    url: data.url\n  };\n};\nconst unmarshalBackup = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Backup' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    aclEnabled: data.acl_enabled,\n    autologin: data.autologin,\n    id: data.id,\n    login: data.login,\n    quotaFiles: data.quota_files,\n    quotaFilesUsed: data.quota_files_used,\n    quotaSpace: data.quota_space,\n    quotaSpaceUsed: data.quota_space_used,\n    server: data.server,\n    status: data.status\n  };\n};\nconst unmarshalCanOrderResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'CanOrderResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    billingOk: data.billing_ok,\n    canOrder: data.can_order,\n    emailConfirmed: data.email_confirmed,\n    message: data.message,\n    paymentMode: data.payment_mode,\n    phoneConfirmed: data.phone_confirmed,\n    quotaOk: data.quota_ok,\n    userConfirmed: data.user_confirmed\n  };\n};\nconst unmarshalCreateFailoverIPsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'CreateFailoverIPsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    services: marshalling.unmarshalArrayOfObject(data.services, unmarshalService),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalGetIPv6BlockQuotasResponseQuota = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'GetIPv6BlockQuotasResponseQuota' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    cidr: data.cidr,\n    quota: data.quota\n  };\n};\nconst unmarshalGetIPv6BlockQuotasResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'GetIPv6BlockQuotasResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    quotas: marshalling.unmarshalArrayOfObject(\n      data.quotas,\n      unmarshalGetIPv6BlockQuotasResponseQuota\n    ),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalGetRemainingQuotaResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'GetRemainingQuotaResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    failoverBlockQuota: data.failover_block_quota,\n    failoverBlockRemainingQuota: data.failover_block_remaining_quota,\n    failoverIpQuota: data.failover_ip_quota,\n    failoverIpRemainingQuota: data.failover_ip_remaining_quota\n  };\n};\nconst unmarshalGetRpnStatusResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'GetRpnStatusResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    operationsLeft: data.operations_left,\n    status: data.status\n  };\n};\nconst unmarshalIPv6Block = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'IPv6Block' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    address: data.address,\n    cidr: data.cidr,\n    delegationStatus: data.delegation_status,\n    duid: data.duid,\n    id: data.id,\n    nameservers: data.nameservers,\n    subnets: marshalling.unmarshalArrayOfObject(data.subnets, unmarshalIPv6Block)\n  };\n};\nconst unmarshalInvoice = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Invoice' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    content: data.content,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    id: data.id,\n    paidAt: marshalling.unmarshalDate(data.paid_at),\n    paymentMethod: data.payment_method,\n    status: data.status,\n    totalWithTaxes: data.total_with_taxes ? customMarshalling.unmarshalMoney(data.total_with_taxes) : void 0,\n    totalWithoutTaxes: data.total_without_taxes ? customMarshalling.unmarshalMoney(data.total_without_taxes) : void 0,\n    transactionId: data.transaction_id\n  };\n};\nconst unmarshalListFailoverIPsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListFailoverIPsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    failoverIps: marshalling.unmarshalArrayOfObject(data.failover_ips, unmarshalFailoverIP),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListIPv6BlockSubnetsAvailableResponseSubnet = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListIPv6BlockSubnetsAvailableResponseSubnet' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    address: data.address,\n    cidr: data.cidr\n  };\n};\nconst unmarshalListIPv6BlockSubnetsAvailableResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListIPv6BlockSubnetsAvailableResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    subnetAvailables: marshalling.unmarshalArrayOfObject(\n      data.subnet_availables,\n      unmarshalListIPv6BlockSubnetsAvailableResponseSubnet\n    ),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalInvoiceSummary = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'InvoiceSummary' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    id: data.id,\n    paidAt: marshalling.unmarshalDate(data.paid_at),\n    paymentMethod: data.payment_method,\n    status: data.status,\n    totalWithTaxes: data.total_with_taxes ? customMarshalling.unmarshalMoney(data.total_with_taxes) : void 0,\n    totalWithoutTaxes: data.total_without_taxes ? customMarshalling.unmarshalMoney(data.total_without_taxes) : void 0,\n    transactionId: data.transaction_id\n  };\n};\nconst unmarshalListInvoicesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListInvoicesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    invoices: marshalling.unmarshalArrayOfObject(data.invoices, unmarshalInvoiceSummary),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalRpnSanIpRpnV2Group = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'RpnSanIpRpnV2Group' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    id: data.id,\n    name: data.name\n  };\n};\nconst unmarshalRpnSanIpServer = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'RpnSanIpServer' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    datacenterName: data.datacenter_name,\n    hostname: data.hostname,\n    id: data.id\n  };\n};\nconst unmarshalRpnSanIp = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'RpnSanIp' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    ip: data.ip ? unmarshalIP(data.ip) : void 0,\n    rpnv2Group: data.rpnv2_group ? unmarshalRpnSanIpRpnV2Group(data.rpnv2_group) : void 0,\n    server: data.server ? unmarshalRpnSanIpServer(data.server) : void 0,\n    type: data.type\n  };\n};\nconst unmarshalListIpsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListIpsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    ips: marshalling.unmarshalArrayOfObject(data.ips, unmarshalRpnSanIp),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListOSResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListOSResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    os: marshalling.unmarshalArrayOfObject(data.os, unmarshalOS),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListOffersResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListOffersResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    offers: marshalling.unmarshalArrayOfObject(data.offers, unmarshalOffer),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalRefundSummary = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'RefundSummary' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    id: data.id,\n    method: data.method,\n    refundedAt: marshalling.unmarshalDate(data.refunded_at),\n    status: data.status,\n    totalWithTaxes: data.total_with_taxes ? customMarshalling.unmarshalMoney(data.total_with_taxes) : void 0,\n    totalWithoutTaxes: data.total_without_taxes ? customMarshalling.unmarshalMoney(data.total_without_taxes) : void 0\n  };\n};\nconst unmarshalListRefundsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListRefundsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    refunds: marshalling.unmarshalArrayOfObject(data.refunds, unmarshalRefundSummary),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalRpnSanServer = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'RpnSanServer' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    datacenterName: data.datacenter_name,\n    hostname: data.hostname,\n    id: data.id,\n    sans: marshalling.unmarshalArrayOfObject(data.sans, unmarshalRpnSan),\n    zone: data.zone\n  };\n};\nconst unmarshalListRpnCapableSanServersResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListRpnCapableSanServersResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    sanServers: marshalling.unmarshalArrayOfObject(data.san_servers, unmarshalRpnSanServer),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListRpnCapableServersResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListRpnCapableServersResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    servers: marshalling.unmarshalArrayOfObject(data.servers, unmarshalServer),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalRpnGroupMember = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'RpnGroupMember' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    groupId: data.group_id,\n    groupName: data.group_name,\n    groupOwner: data.group_owner,\n    id: data.id,\n    owner: data.owner,\n    sanServer: data.san_server ? unmarshalRpnSanServer(data.san_server) : void 0,\n    server: data.server ? unmarshalServer(data.server) : void 0,\n    speed: data.speed,\n    status: data.status\n  };\n};\nconst unmarshalListRpnGroupMembersResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListRpnGroupMembersResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    members: marshalling.unmarshalArrayOfObject(data.members, unmarshalRpnGroupMember),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListRpnGroupsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListRpnGroupsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    rpnGroups: marshalling.unmarshalArrayOfObject(data.rpn_groups, unmarshalRpnGroup),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListRpnInvitesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListRpnInvitesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    members: marshalling.unmarshalArrayOfObject(data.members, unmarshalRpnGroupMember),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalRpnSanSummary = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'RpnSanSummary' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    datacenterName: data.datacenter_name,\n    deliveredAt: marshalling.unmarshalDate(data.delivered_at),\n    expiresAt: marshalling.unmarshalDate(data.expires_at),\n    id: data.id,\n    iqnSuffix: data.iqn_suffix,\n    offerId: data.offer_id,\n    offerName: data.offer_name,\n    organizationId: data.organization_id,\n    projectId: data.project_id,\n    rpnv1Compatible: data.rpnv1_compatible,\n    rpnv1Implicit: data.rpnv1_implicit,\n    serverHostname: data.server_hostname,\n    status: data.status,\n    storageSize: data.storage_size,\n    terminatedAt: marshalling.unmarshalDate(data.terminated_at)\n  };\n};\nconst unmarshalListRpnSansResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListRpnSansResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    rpnSans: marshalling.unmarshalArrayOfObject(data.rpn_sans, unmarshalRpnSanSummary),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalRpnServerCapability = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'RpnServerCapability' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    canJoinQinqGroup: data.can_join_qinq_group,\n    canJoinRpnv2Group: data.can_join_rpnv2_group,\n    compatibleQinq: data.compatible_qinq,\n    datacenterName: data.datacenter_name,\n    hostname: data.hostname,\n    id: data.id,\n    ipAddress: data.ip_address,\n    rpnVersion: data.rpn_version,\n    rpnv1GroupCount: data.rpnv1_group_count,\n    rpnv2GroupCount: data.rpnv2_group_count,\n    zone: data.zone\n  };\n};\nconst unmarshalListRpnServerCapabilitiesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListRpnServerCapabilitiesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    servers: marshalling.unmarshalArrayOfObject(data.servers, unmarshalRpnServerCapability),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListRpnV2CapableResourcesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListRpnV2CapableResourcesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    servers: marshalling.unmarshalArrayOfObject(data.servers, unmarshalServer),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalRpnV2Member = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'RpnV2Member' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    id: data.id,\n    rpnv1Group: data.rpnv1_group ? unmarshalRpnGroup(data.rpnv1_group) : void 0,\n    server: data.server ? unmarshalServer(data.server) : void 0,\n    speed: data.speed,\n    status: data.status,\n    vlan: data.vlan\n  };\n};\nconst unmarshalLog = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Log' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    action: data.action,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    finishedAt: marshalling.unmarshalDate(data.finished_at),\n    group: data.group ? unmarshalRpnV2Group(data.group) : void 0,\n    id: data.id,\n    member: data.member ? unmarshalRpnV2Member(data.member) : void 0,\n    status: data.status\n  };\n};\nconst unmarshalListRpnV2GroupLogsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListRpnV2GroupLogsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    logs: marshalling.unmarshalArrayOfObject(data.logs, unmarshalLog),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListRpnV2GroupsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListRpnV2GroupsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    rpnGroups: marshalling.unmarshalArrayOfObject(data.rpn_groups, unmarshalRpnV2Group),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListRpnV2MembersResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListRpnV2MembersResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    members: marshalling.unmarshalArrayOfObject(data.members, unmarshalRpnV2Member),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalServerDisk = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ServerDisk' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    capacity: data.capacity,\n    connector: data.connector,\n    id: data.id,\n    isAddon: data.is_addon,\n    type: data.type\n  };\n};\nconst unmarshalListServerDisksResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListServerDisksResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    disks: marshalling.unmarshalArrayOfObject(data.disks, unmarshalServerDisk),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalServerEvent = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ServerEvent' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    date: marshalling.unmarshalDate(data.date),\n    description: data.description,\n    eventId: data.event_id\n  };\n};\nconst unmarshalListServerEventsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListServerEventsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    events: marshalling.unmarshalArrayOfObject(data.events, unmarshalServerEvent),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalServerSummary = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ServerSummary' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    datacenterName: data.datacenter_name,\n    expiredAt: marshalling.unmarshalDate(data.expired_at),\n    hostname: data.hostname,\n    id: data.id,\n    interfaces: marshalling.unmarshalArrayOfObject(\n      data.interfaces,\n      unmarshalNetworkInterface\n    ),\n    isOutsourced: data.is_outsourced,\n    level: data.level ? unmarshalServiceLevel(data.level) : void 0,\n    offerId: data.offer_id,\n    offerName: data.offer_name,\n    organizationId: data.organization_id,\n    osId: data.os_id,\n    projectId: data.project_id,\n    qinq: data.qinq,\n    rpnVersion: data.rpn_version,\n    status: data.status,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    zone: data.zone\n  };\n};\nconst unmarshalListServersResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListServersResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    servers: marshalling.unmarshalArrayOfObject(data.servers, unmarshalServerSummary),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListServicesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListServicesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    services: marshalling.unmarshalArrayOfObject(data.services, unmarshalService),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListSubscribableServerOptionsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListSubscribableServerOptionsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    serverOptions: marshalling.unmarshalArrayOfObject(data.server_options, unmarshalOffer),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalRaidArray = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'RaidArray' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    disks: marshalling.unmarshalArrayOfObject(data.disks, unmarshalServerDisk),\n    raidLevel: data.raid_level\n  };\n};\nconst unmarshalRaid = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Raid' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    raidArrays: marshalling.unmarshalArrayOfObject(data.raid_arrays, unmarshalRaidArray)\n  };\n};\nconst unmarshalRefund = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Refund' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    content: data.content,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    id: data.id,\n    method: data.method,\n    refundedAt: marshalling.unmarshalDate(data.refunded_at),\n    status: data.status,\n    totalWithTaxes: data.total_with_taxes ? customMarshalling.unmarshalMoney(data.total_with_taxes) : void 0,\n    totalWithoutTaxes: data.total_without_taxes ? customMarshalling.unmarshalMoney(data.total_without_taxes) : void 0\n  };\n};\nconst unmarshalRescue = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Rescue' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    login: data.login,\n    osId: data.os_id,\n    password: data.password,\n    protocol: data.protocol\n  };\n};\nconst unmarshalPartition = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Partition' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    capacity: data.capacity,\n    connectors: data.connectors,\n    fileSystem: data.file_system,\n    mountPoint: data.mount_point,\n    raidLevel: data.raid_level,\n    type: data.type\n  };\n};\nconst unmarshalServerDefaultPartitioning = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ServerDefaultPartitioning' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    partitions: marshalling.unmarshalArrayOfObject(data.partitions, unmarshalPartition)\n  };\n};\nconst unmarshalServerInstall = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ServerInstall' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    hostname: data.hostname,\n    osId: data.os_id,\n    panelUrl: data.panel_url,\n    partitions: marshalling.unmarshalArrayOfObject(data.partitions, unmarshalPartition),\n    sshKeyIds: data.ssh_key_ids,\n    status: data.status,\n    userLogin: data.user_login\n  };\n};\nconst unmarshalSubscribeStorageOptionsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SubscribeStorageOptionsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    services: marshalling.unmarshalArrayOfObject(data.services, unmarshalService)\n  };\n};\nconst marshalAttachFailoverIPToMacAddressRequest = (request, defaults) => ({\n  mac: request.mac,\n  type: request.type\n});\nconst marshalAttachFailoverIPsRequest = (request, defaults) => ({\n  fips_ids: request.fipsIds,\n  server_id: request.serverId\n});\nconst marshalCreateFailoverIPsRequest = (request, defaults) => ({\n  offer_id: request.offerId,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  quantity: request.quantity\n});\nconst marshalCreateServerRequest = (request, defaults) => ({\n  datacenter_name: request.datacenterName,\n  offer_id: request.offerId,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  server_option_ids: request.serverOptionIds\n});\nconst marshalDetachFailoverIPsRequest = (request, defaults) => ({\n  fips_ids: request.fipsIds\n});\nconst marshalIPv6BlockApiCreateIPv6BlockRequest = (request, defaults) => ({\n  project_id: request.projectId ?? defaults.defaultProjectId\n});\nconst marshalIPv6BlockApiCreateIPv6BlockSubnetRequest = (request, defaults) => ({\n  address: request.address,\n  cidr: request.cidr\n});\nconst marshalIPv6BlockApiUpdateIPv6BlockRequest = (request, defaults) => ({\n  nameservers: request.nameservers\n});\nconst marshalInstallPartition = (request, defaults) => ({\n  capacity: request.capacity,\n  connectors: request.connectors,\n  file_system: request.fileSystem,\n  mount_point: request.mountPoint,\n  raid_level: request.raidLevel\n});\nconst marshalInstallServerRequest = (request, defaults) => ({\n  hostname: request.hostname,\n  ip_id: request.ipId,\n  license_offer_id: request.licenseOfferId,\n  os_id: request.osId,\n  panel_password: request.panelPassword,\n  partitions: request.partitions !== void 0 ? request.partitions.map((elt) => marshalInstallPartition(elt)) : void 0,\n  root_password: request.rootPassword,\n  ssh_key_ids: request.sshKeyIds,\n  user_login: request.userLogin,\n  user_password: request.userPassword\n});\nconst marshalRpnSanApiAddIpRequest = (request, defaults) => ({\n  ip_ids: request.ipIds\n});\nconst marshalRpnSanApiCreateRpnSanRequest = (request, defaults) => ({\n  offer_id: request.offerId,\n  project_id: request.projectId ?? defaults.defaultProjectId\n});\nconst marshalRpnSanApiRemoveIpRequest = (request, defaults) => ({\n  ip_ids: request.ipIds\n});\nconst marshalRpnV1ApiAddRpnGroupMembersRequest = (request, defaults) => ({\n  san_server_ids: request.sanServerIds,\n  server_ids: request.serverIds\n});\nconst marshalRpnV1ApiCreateRpnGroupRequest = (request, defaults) => ({\n  name: request.name,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  san_server_ids: request.sanServerIds,\n  server_ids: request.serverIds\n});\nconst marshalRpnV1ApiDeleteRpnGroupMembersRequest = (request, defaults) => ({\n  member_ids: request.memberIds\n});\nconst marshalRpnV1ApiLeaveRpnGroupRequest = (request, defaults) => ({\n  member_ids: request.memberIds,\n  project_id: request.projectId ?? defaults.defaultProjectId\n});\nconst marshalRpnV1ApiRpnGroupInviteRequest = (request, defaults) => ({\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  server_ids: request.serverIds\n});\nconst marshalRpnV1ApiUpdateRpnGroupNameRequest = (request, defaults) => ({\n  name: request.name\n});\nconst marshalRpnV2ApiAddRpnV2MembersRequest = (request, defaults) => ({\n  servers: request.servers\n});\nconst marshalRpnV2ApiCreateRpnV2GroupRequest = (request, defaults) => ({\n  name: request.name,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  servers: request.servers,\n  type: request.type\n});\nconst marshalRpnV2ApiDeleteRpnV2MembersRequest = (request, defaults) => ({\n  member_ids: request.memberIds\n});\nconst marshalRpnV2ApiEnableRpnV2GroupCompatibilityRequest = (request, defaults) => ({\n  rpnv1_group_id: request.rpnv1GroupId\n});\nconst marshalRpnV2ApiUpdateRpnV2GroupNameRequest = (request, defaults) => ({\n  name: request.name\n});\nconst marshalRpnV2ApiUpdateRpnV2VlanForMembersRequest = (request, defaults) => ({\n  member_ids: request.memberIds,\n  vlan: request.vlan\n});\nconst marshalStartBMCAccessRequest = (request, defaults) => ({\n  ip: request.ip\n});\nconst marshalStartRescueRequest = (request, defaults) => ({\n  os_id: request.osId\n});\nconst marshalSubscribeServerOptionRequest = (request, defaults) => ({\n  option_id: request.optionId\n});\nconst marshalSubscribeStorageOptionsRequest = (request, defaults) => ({\n  options_ids: request.optionsIds\n});\nconst marshalUpdatableRaidArray = (request, defaults) => ({\n  disk_ids: request.diskIds,\n  raid_level: request.raidLevel\n});\nconst marshalUpdateRaidRequest = (request, defaults) => ({\n  raid_arrays: request.raidArrays.map(\n    (elt) => marshalUpdatableRaidArray(elt)\n  )\n});\nconst marshalUpdateReverseRequest = (request, defaults) => ({\n  reverse: request.reverse\n});\nconst marshalUpdateServerBackupRequest = (request, defaults) => ({\n  acl_enabled: request.aclEnabled,\n  autologin: request.autologin,\n  password: request.password\n});\nconst marshalUpdateServerRequest = (request, defaults) => ({\n  enable_ipv6: request.enableIpv6,\n  hostname: request.hostname\n});\nconst marshalUpdateServerTagsRequest = (request, defaults) => ({\n  tags: request.tags\n});\nexports.marshalAttachFailoverIPToMacAddressRequest = marshalAttachFailoverIPToMacAddressRequest;\nexports.marshalAttachFailoverIPsRequest = marshalAttachFailoverIPsRequest;\nexports.marshalCreateFailoverIPsRequest = marshalCreateFailoverIPsRequest;\nexports.marshalCreateServerRequest = marshalCreateServerRequest;\nexports.marshalDetachFailoverIPsRequest = marshalDetachFailoverIPsRequest;\nexports.marshalIPv6BlockApiCreateIPv6BlockRequest = marshalIPv6BlockApiCreateIPv6BlockRequest;\nexports.marshalIPv6BlockApiCreateIPv6BlockSubnetRequest = marshalIPv6BlockApiCreateIPv6BlockSubnetRequest;\nexports.marshalIPv6BlockApiUpdateIPv6BlockRequest = marshalIPv6BlockApiUpdateIPv6BlockRequest;\nexports.marshalInstallServerRequest = marshalInstallServerRequest;\nexports.marshalRpnSanApiAddIpRequest = marshalRpnSanApiAddIpRequest;\nexports.marshalRpnSanApiCreateRpnSanRequest = marshalRpnSanApiCreateRpnSanRequest;\nexports.marshalRpnSanApiRemoveIpRequest = marshalRpnSanApiRemoveIpRequest;\nexports.marshalRpnV1ApiAddRpnGroupMembersRequest = marshalRpnV1ApiAddRpnGroupMembersRequest;\nexports.marshalRpnV1ApiCreateRpnGroupRequest = marshalRpnV1ApiCreateRpnGroupRequest;\nexports.marshalRpnV1ApiDeleteRpnGroupMembersRequest = marshalRpnV1ApiDeleteRpnGroupMembersRequest;\nexports.marshalRpnV1ApiLeaveRpnGroupRequest = marshalRpnV1ApiLeaveRpnGroupRequest;\nexports.marshalRpnV1ApiRpnGroupInviteRequest = marshalRpnV1ApiRpnGroupInviteRequest;\nexports.marshalRpnV1ApiUpdateRpnGroupNameRequest = marshalRpnV1ApiUpdateRpnGroupNameRequest;\nexports.marshalRpnV2ApiAddRpnV2MembersRequest = marshalRpnV2ApiAddRpnV2MembersRequest;\nexports.marshalRpnV2ApiCreateRpnV2GroupRequest = marshalRpnV2ApiCreateRpnV2GroupRequest;\nexports.marshalRpnV2ApiDeleteRpnV2MembersRequest = marshalRpnV2ApiDeleteRpnV2MembersRequest;\nexports.marshalRpnV2ApiEnableRpnV2GroupCompatibilityRequest = marshalRpnV2ApiEnableRpnV2GroupCompatibilityRequest;\nexports.marshalRpnV2ApiUpdateRpnV2GroupNameRequest = marshalRpnV2ApiUpdateRpnV2GroupNameRequest;\nexports.marshalRpnV2ApiUpdateRpnV2VlanForMembersRequest = marshalRpnV2ApiUpdateRpnV2VlanForMembersRequest;\nexports.marshalStartBMCAccessRequest = marshalStartBMCAccessRequest;\nexports.marshalStartRescueRequest = marshalStartRescueRequest;\nexports.marshalSubscribeServerOptionRequest = marshalSubscribeServerOptionRequest;\nexports.marshalSubscribeStorageOptionsRequest = marshalSubscribeStorageOptionsRequest;\nexports.marshalUpdateRaidRequest = marshalUpdateRaidRequest;\nexports.marshalUpdateReverseRequest = marshalUpdateReverseRequest;\nexports.marshalUpdateServerBackupRequest = marshalUpdateServerBackupRequest;\nexports.marshalUpdateServerRequest = marshalUpdateServerRequest;\nexports.marshalUpdateServerTagsRequest = marshalUpdateServerTagsRequest;\nexports.unmarshalBMCAccess = unmarshalBMCAccess;\nexports.unmarshalBackup = unmarshalBackup;\nexports.unmarshalCanOrderResponse = unmarshalCanOrderResponse;\nexports.unmarshalCreateFailoverIPsResponse = unmarshalCreateFailoverIPsResponse;\nexports.unmarshalFailoverIP = unmarshalFailoverIP;\nexports.unmarshalGetIPv6BlockQuotasResponse = unmarshalGetIPv6BlockQuotasResponse;\nexports.unmarshalGetRemainingQuotaResponse = unmarshalGetRemainingQuotaResponse;\nexports.unmarshalGetRpnStatusResponse = unmarshalGetRpnStatusResponse;\nexports.unmarshalIP = unmarshalIP;\nexports.unmarshalIPv6Block = unmarshalIPv6Block;\nexports.unmarshalInvoice = unmarshalInvoice;\nexports.unmarshalListFailoverIPsResponse = unmarshalListFailoverIPsResponse;\nexports.unmarshalListIPv6BlockSubnetsAvailableResponse = unmarshalListIPv6BlockSubnetsAvailableResponse;\nexports.unmarshalListInvoicesResponse = unmarshalListInvoicesResponse;\nexports.unmarshalListIpsResponse = unmarshalListIpsResponse;\nexports.unmarshalListOSResponse = unmarshalListOSResponse;\nexports.unmarshalListOffersResponse = unmarshalListOffersResponse;\nexports.unmarshalListRefundsResponse = unmarshalListRefundsResponse;\nexports.unmarshalListRpnCapableSanServersResponse = unmarshalListRpnCapableSanServersResponse;\nexports.unmarshalListRpnCapableServersResponse = unmarshalListRpnCapableServersResponse;\nexports.unmarshalListRpnGroupMembersResponse = unmarshalListRpnGroupMembersResponse;\nexports.unmarshalListRpnGroupsResponse = unmarshalListRpnGroupsResponse;\nexports.unmarshalListRpnInvitesResponse = unmarshalListRpnInvitesResponse;\nexports.unmarshalListRpnSansResponse = unmarshalListRpnSansResponse;\nexports.unmarshalListRpnServerCapabilitiesResponse = unmarshalListRpnServerCapabilitiesResponse;\nexports.unmarshalListRpnV2CapableResourcesResponse = unmarshalListRpnV2CapableResourcesResponse;\nexports.unmarshalListRpnV2GroupLogsResponse = unmarshalListRpnV2GroupLogsResponse;\nexports.unmarshalListRpnV2GroupsResponse = unmarshalListRpnV2GroupsResponse;\nexports.unmarshalListRpnV2MembersResponse = unmarshalListRpnV2MembersResponse;\nexports.unmarshalListServerDisksResponse = unmarshalListServerDisksResponse;\nexports.unmarshalListServerEventsResponse = unmarshalListServerEventsResponse;\nexports.unmarshalListServersResponse = unmarshalListServersResponse;\nexports.unmarshalListServicesResponse = unmarshalListServicesResponse;\nexports.unmarshalListSubscribableServerOptionsResponse = unmarshalListSubscribableServerOptionsResponse;\nexports.unmarshalOS = unmarshalOS;\nexports.unmarshalOffer = unmarshalOffer;\nexports.unmarshalRaid = unmarshalRaid;\nexports.unmarshalRefund = unmarshalRefund;\nexports.unmarshalRescue = unmarshalRescue;\nexports.unmarshalRpnGroup = unmarshalRpnGroup;\nexports.unmarshalRpnSan = unmarshalRpnSan;\nexports.unmarshalRpnV2Group = unmarshalRpnV2Group;\nexports.unmarshalServer = unmarshalServer;\nexports.unmarshalServerDefaultPartitioning = unmarshalServerDefaultPartitioning;\nexports.unmarshalServerInstall = unmarshalServerInstall;\nexports.unmarshalService = unmarshalService;\nexports.unmarshalSubscribeStorageOptionsResponse = unmarshalSubscribeStorageOptionsResponse;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst AttachFailoverIPToMacAddressRequest = {\n  ipId: {\n    greaterThan: 0\n  }\n};\nconst AttachFailoverIPsRequest = {\n  serverId: {\n    greaterThan: 0\n  }\n};\nconst BillingApiDownloadInvoiceRequest = {\n  invoiceId: {\n    greaterThan: 0\n  }\n};\nconst BillingApiDownloadRefundRequest = {\n  refundId: {\n    greaterThan: 0\n  }\n};\nconst BillingApiGetInvoiceRequest = {\n  invoiceId: {\n    greaterThan: 0\n  }\n};\nconst BillingApiGetRefundRequest = {\n  refundId: {\n    greaterThan: 0\n  }\n};\nconst BillingApiListInvoicesRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nconst BillingApiListRefundsRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nconst CancelServerInstallRequest = {\n  serverId: {\n    greaterThan: 0\n  }\n};\nconst DeleteFailoverIPRequest = {\n  ipId: {\n    greaterThan: 0\n  }\n};\nconst DeleteServerRequest = {\n  serverId: {\n    greaterThan: 0\n  }\n};\nconst DeleteServiceRequest = {\n  serviceId: {\n    greaterThan: 0\n  }\n};\nconst DetachFailoverIPFromMacAddressRequest = {\n  ipId: {\n    greaterThan: 0\n  }\n};\nconst GetBMCAccessRequest = {\n  serverId: {\n    greaterThan: 0\n  }\n};\nconst GetFailoverIPRequest = {\n  ipId: {\n    greaterThan: 0\n  }\n};\nconst GetOSRequest = {\n  osId: {\n    greaterThan: 0\n  },\n  serverId: {\n    greaterThan: 0\n  }\n};\nconst GetOfferRequest = {\n  offerId: {\n    greaterThan: 0\n  }\n};\nconst GetOrderedServiceRequest = {\n  orderedServiceId: {\n    greaterThan: 0\n  }\n};\nconst GetRaidRequest = {\n  serverId: {\n    greaterThan: 0\n  }\n};\nconst GetRescueRequest = {\n  serverId: {\n    greaterThan: 0\n  }\n};\nconst GetServerBackupRequest = {\n  serverId: {\n    greaterThan: 0\n  }\n};\nconst GetServerInstallRequest = {\n  serverId: {\n    greaterThan: 0\n  }\n};\nconst GetServerRequest = {\n  serverId: {\n    greaterThan: 0\n  }\n};\nconst GetServiceRequest = {\n  serviceId: {\n    greaterThan: 0\n  }\n};\nconst IPv6Block = {\n  id: {\n    greaterThan: 0\n  }\n};\nconst IPv6BlockApiCreateIPv6BlockSubnetRequest = {\n  blockId: {\n    greaterThan: 0\n  }\n};\nconst IPv6BlockApiDeleteIPv6BlockRequest = {\n  blockId: {\n    greaterThan: 0\n  }\n};\nconst IPv6BlockApiListIPv6BlockSubnetsAvailableRequest = {\n  blockId: {\n    greaterThan: 0\n  }\n};\nconst IPv6BlockApiUpdateIPv6BlockRequest = {\n  blockId: {\n    greaterThan: 0\n  }\n};\nconst InstallServerRequest = {\n  osId: {\n    greaterThan: 0\n  },\n  serverId: {\n    greaterThan: 0\n  }\n};\nconst ListFailoverIPsRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nconst ListOSRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  },\n  serverId: {\n    greaterThan: 0\n  }\n};\nconst ListOffersRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nconst ListServerDisksRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  },\n  serverId: {\n    greaterThan: 0\n  }\n};\nconst ListServerEventsRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  },\n  serverId: {\n    greaterThan: 0\n  }\n};\nconst ListServersRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nconst ListServicesRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nconst ListSubscribableServerOptionsRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  },\n  serverId: {\n    greaterThan: 0\n  }\n};\nconst RebootServerRequest = {\n  serverId: {\n    greaterThan: 0\n  }\n};\nconst RpnApiListRpnServerCapabilitiesRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nconst RpnSanApiAddIpRequest = {\n  rpnSanId: {\n    greaterThan: 0\n  }\n};\nconst RpnSanApiDeleteRpnSanRequest = {\n  rpnSanId: {\n    greaterThan: 0\n  }\n};\nconst RpnSanApiGetRpnSanRequest = {\n  rpnSanId: {\n    greaterThan: 0\n  }\n};\nconst RpnSanApiListAvailableIpsRequest = {\n  rpnSanId: {\n    greaterThan: 0\n  }\n};\nconst RpnSanApiListIpsRequest = {\n  rpnSanId: {\n    greaterThan: 0\n  }\n};\nconst RpnSanApiListRpnSansRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nconst RpnSanApiRemoveIpRequest = {\n  rpnSanId: {\n    greaterThan: 0\n  }\n};\nconst RpnV1ApiAcceptRpnInviteRequest = {\n  memberId: {\n    greaterThan: 0\n  }\n};\nconst RpnV1ApiAddRpnGroupMembersRequest = {\n  groupId: {\n    greaterThan: 0\n  }\n};\nconst RpnV1ApiDeleteRpnGroupMembersRequest = {\n  groupId: {\n    greaterThan: 0\n  }\n};\nconst RpnV1ApiDeleteRpnGroupRequest = {\n  groupId: {\n    greaterThan: 0\n  }\n};\nconst RpnV1ApiGetRpnGroupRequest = {\n  groupId: {\n    greaterThan: 0\n  }\n};\nconst RpnV1ApiLeaveRpnGroupRequest = {\n  groupId: {\n    greaterThan: 0\n  }\n};\nconst RpnV1ApiListRpnCapableSanServersRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nconst RpnV1ApiListRpnCapableServersRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nconst RpnV1ApiListRpnGroupMembersRequest = {\n  groupId: {\n    greaterThan: 0\n  },\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nconst RpnV1ApiListRpnGroupsRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nconst RpnV1ApiListRpnInvitesRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nconst RpnV1ApiRefuseRpnInviteRequest = {\n  memberId: {\n    greaterThan: 0\n  }\n};\nconst RpnV1ApiRpnGroupInviteRequest = {\n  groupId: {\n    greaterThan: 0\n  }\n};\nconst RpnV1ApiUpdateRpnGroupNameRequest = {\n  groupId: {\n    greaterThan: 0\n  }\n};\nconst RpnV2ApiAddRpnV2MembersRequest = {\n  groupId: {\n    greaterThan: 0\n  }\n};\nconst RpnV2ApiDeleteRpnV2GroupRequest = {\n  groupId: {\n    greaterThan: 0\n  }\n};\nconst RpnV2ApiDeleteRpnV2MembersRequest = {\n  groupId: {\n    greaterThan: 0\n  }\n};\nconst RpnV2ApiDisableRpnV2GroupCompatibilityRequest = {\n  groupId: {\n    greaterThan: 0\n  }\n};\nconst RpnV2ApiEnableRpnV2GroupCompatibilityRequest = {\n  groupId: {\n    greaterThan: 0\n  }\n};\nconst RpnV2ApiGetRpnV2GroupRequest = {\n  groupId: {\n    greaterThan: 0\n  }\n};\nconst RpnV2ApiListRpnV2CapableResourcesRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nconst RpnV2ApiListRpnV2GroupLogsRequest = {\n  groupId: {\n    greaterThan: 0\n  },\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nconst RpnV2ApiListRpnV2GroupsRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nconst RpnV2ApiListRpnV2MembersRequest = {\n  groupId: {\n    greaterThan: 0\n  },\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nconst RpnV2ApiUpdateRpnV2GroupNameRequest = {\n  groupId: {\n    greaterThan: 0\n  }\n};\nconst RpnV2ApiUpdateRpnV2VlanForMembersRequest = {\n  groupId: {\n    greaterThan: 0\n  }\n};\nconst StartRescueRequest = {\n  serverId: {\n    greaterThan: 0\n  }\n};\nconst StartServerRequest = {\n  serverId: {\n    greaterThan: 0\n  }\n};\nconst StopBMCAccessRequest = {\n  serverId: {\n    greaterThan: 0\n  }\n};\nconst StopRescueRequest = {\n  serverId: {\n    greaterThan: 0\n  }\n};\nconst StopServerRequest = {\n  serverId: {\n    greaterThan: 0\n  }\n};\nconst SubscribeServerOptionRequest = {\n  optionId: {\n    greaterThan: 0\n  },\n  serverId: {\n    greaterThan: 0\n  }\n};\nconst SubscribeStorageOptionsRequest = {\n  serverId: {\n    greaterThan: 0\n  }\n};\nconst UpdateRaidRequest = {\n  serverId: {\n    greaterThan: 0\n  }\n};\nconst UpdateReverseRequest = {\n  ipId: {\n    greaterThan: 0\n  }\n};\nconst UpdateServerBackupRequest = {\n  serverId: {\n    greaterThan: 0\n  }\n};\nconst UpdateServerRequest = {\n  serverId: {\n    greaterThan: 0\n  }\n};\nconst UpdateServerTagsRequest = {\n  serverId: {\n    greaterThan: 0\n  }\n};\nexports.AttachFailoverIPToMacAddressRequest = AttachFailoverIPToMacAddressRequest;\nexports.AttachFailoverIPsRequest = AttachFailoverIPsRequest;\nexports.BillingApiDownloadInvoiceRequest = BillingApiDownloadInvoiceRequest;\nexports.BillingApiDownloadRefundRequest = BillingApiDownloadRefundRequest;\nexports.BillingApiGetInvoiceRequest = BillingApiGetInvoiceRequest;\nexports.BillingApiGetRefundRequest = BillingApiGetRefundRequest;\nexports.BillingApiListInvoicesRequest = BillingApiListInvoicesRequest;\nexports.BillingApiListRefundsRequest = BillingApiListRefundsRequest;\nexports.CancelServerInstallRequest = CancelServerInstallRequest;\nexports.DeleteFailoverIPRequest = DeleteFailoverIPRequest;\nexports.DeleteServerRequest = DeleteServerRequest;\nexports.DeleteServiceRequest = DeleteServiceRequest;\nexports.DetachFailoverIPFromMacAddressRequest = DetachFailoverIPFromMacAddressRequest;\nexports.GetBMCAccessRequest = GetBMCAccessRequest;\nexports.GetFailoverIPRequest = GetFailoverIPRequest;\nexports.GetOSRequest = GetOSRequest;\nexports.GetOfferRequest = GetOfferRequest;\nexports.GetOrderedServiceRequest = GetOrderedServiceRequest;\nexports.GetRaidRequest = GetRaidRequest;\nexports.GetRescueRequest = GetRescueRequest;\nexports.GetServerBackupRequest = GetServerBackupRequest;\nexports.GetServerInstallRequest = GetServerInstallRequest;\nexports.GetServerRequest = GetServerRequest;\nexports.GetServiceRequest = GetServiceRequest;\nexports.IPv6Block = IPv6Block;\nexports.IPv6BlockApiCreateIPv6BlockSubnetRequest = IPv6BlockApiCreateIPv6BlockSubnetRequest;\nexports.IPv6BlockApiDeleteIPv6BlockRequest = IPv6BlockApiDeleteIPv6BlockRequest;\nexports.IPv6BlockApiListIPv6BlockSubnetsAvailableRequest = IPv6BlockApiListIPv6BlockSubnetsAvailableRequest;\nexports.IPv6BlockApiUpdateIPv6BlockRequest = IPv6BlockApiUpdateIPv6BlockRequest;\nexports.InstallServerRequest = InstallServerRequest;\nexports.ListFailoverIPsRequest = ListFailoverIPsRequest;\nexports.ListOSRequest = ListOSRequest;\nexports.ListOffersRequest = ListOffersRequest;\nexports.ListServerDisksRequest = ListServerDisksRequest;\nexports.ListServerEventsRequest = ListServerEventsRequest;\nexports.ListServersRequest = ListServersRequest;\nexports.ListServicesRequest = ListServicesRequest;\nexports.ListSubscribableServerOptionsRequest = ListSubscribableServerOptionsRequest;\nexports.RebootServerRequest = RebootServerRequest;\nexports.RpnApiListRpnServerCapabilitiesRequest = RpnApiListRpnServerCapabilitiesRequest;\nexports.RpnSanApiAddIpRequest = RpnSanApiAddIpRequest;\nexports.RpnSanApiDeleteRpnSanRequest = RpnSanApiDeleteRpnSanRequest;\nexports.RpnSanApiGetRpnSanRequest = RpnSanApiGetRpnSanRequest;\nexports.RpnSanApiListAvailableIpsRequest = RpnSanApiListAvailableIpsRequest;\nexports.RpnSanApiListIpsRequest = RpnSanApiListIpsRequest;\nexports.RpnSanApiListRpnSansRequest = RpnSanApiListRpnSansRequest;\nexports.RpnSanApiRemoveIpRequest = RpnSanApiRemoveIpRequest;\nexports.RpnV1ApiAcceptRpnInviteRequest = RpnV1ApiAcceptRpnInviteRequest;\nexports.RpnV1ApiAddRpnGroupMembersRequest = RpnV1ApiAddRpnGroupMembersRequest;\nexports.RpnV1ApiDeleteRpnGroupMembersRequest = RpnV1ApiDeleteRpnGroupMembersRequest;\nexports.RpnV1ApiDeleteRpnGroupRequest = RpnV1ApiDeleteRpnGroupRequest;\nexports.RpnV1ApiGetRpnGroupRequest = RpnV1ApiGetRpnGroupRequest;\nexports.RpnV1ApiLeaveRpnGroupRequest = RpnV1ApiLeaveRpnGroupRequest;\nexports.RpnV1ApiListRpnCapableSanServersRequest = RpnV1ApiListRpnCapableSanServersRequest;\nexports.RpnV1ApiListRpnCapableServersRequest = RpnV1ApiListRpnCapableServersRequest;\nexports.RpnV1ApiListRpnGroupMembersRequest = RpnV1ApiListRpnGroupMembersRequest;\nexports.RpnV1ApiListRpnGroupsRequest = RpnV1ApiListRpnGroupsRequest;\nexports.RpnV1ApiListRpnInvitesRequest = RpnV1ApiListRpnInvitesRequest;\nexports.RpnV1ApiRefuseRpnInviteRequest = RpnV1ApiRefuseRpnInviteRequest;\nexports.RpnV1ApiRpnGroupInviteRequest = RpnV1ApiRpnGroupInviteRequest;\nexports.RpnV1ApiUpdateRpnGroupNameRequest = RpnV1ApiUpdateRpnGroupNameRequest;\nexports.RpnV2ApiAddRpnV2MembersRequest = RpnV2ApiAddRpnV2MembersRequest;\nexports.RpnV2ApiDeleteRpnV2GroupRequest = RpnV2ApiDeleteRpnV2GroupRequest;\nexports.RpnV2ApiDeleteRpnV2MembersRequest = RpnV2ApiDeleteRpnV2MembersRequest;\nexports.RpnV2ApiDisableRpnV2GroupCompatibilityRequest = RpnV2ApiDisableRpnV2GroupCompatibilityRequest;\nexports.RpnV2ApiEnableRpnV2GroupCompatibilityRequest = RpnV2ApiEnableRpnV2GroupCompatibilityRequest;\nexports.RpnV2ApiGetRpnV2GroupRequest = RpnV2ApiGetRpnV2GroupRequest;\nexports.RpnV2ApiListRpnV2CapableResourcesRequest = RpnV2ApiListRpnV2CapableResourcesRequest;\nexports.RpnV2ApiListRpnV2GroupLogsRequest = RpnV2ApiListRpnV2GroupLogsRequest;\nexports.RpnV2ApiListRpnV2GroupsRequest = RpnV2ApiListRpnV2GroupsRequest;\nexports.RpnV2ApiListRpnV2MembersRequest = RpnV2ApiListRpnV2MembersRequest;\nexports.RpnV2ApiUpdateRpnV2GroupNameRequest = RpnV2ApiUpdateRpnV2GroupNameRequest;\nexports.RpnV2ApiUpdateRpnV2VlanForMembersRequest = RpnV2ApiUpdateRpnV2VlanForMembersRequest;\nexports.StartRescueRequest = StartRescueRequest;\nexports.StartServerRequest = StartServerRequest;\nexports.StopBMCAccessRequest = StopBMCAccessRequest;\nexports.StopRescueRequest = StopRescueRequest;\nexports.StopServerRequest = StopServerRequest;\nexports.SubscribeServerOptionRequest = SubscribeServerOptionRequest;\nexports.SubscribeStorageOptionsRequest = SubscribeStorageOptionsRequest;\nexports.UpdateRaidRequest = UpdateRaidRequest;\nexports.UpdateReverseRequest = UpdateReverseRequest;\nexports.UpdateServerBackupRequest = UpdateServerBackupRequest;\nexports.UpdateServerRequest = UpdateServerRequest;\nexports.UpdateServerTagsRequest = UpdateServerTagsRequest;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index_gen = require(\"./v1beta1/index.gen.cjs\");\nexports.v1beta1 = index_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst intervalRetrier = require(\"../../../internal/async/interval-retrier.cjs\");\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass API extends api.API {\n  /** Lists the available regions of the API. */\n  static LOCALITIES = [\"fr-par\", \"nl-ams\", \"pl-waw\"];\n  pageOfListDatabaseEngines = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/database-engines`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"version\", request.version]\n      )\n    },\n    marshalling_gen.unmarshalListDatabaseEnginesResponse\n  );\n  /**\n   * List available database engines. List the FerretDB database engines\n   * available at Scaleway.\n   *\n   * @param request - The request {@link ListDatabaseEnginesRequest}\n   * @returns A Promise of ListDatabaseEnginesResponse\n   */\n  listDatabaseEngines = (request = {}) => resourcePaginator.enrichForPagination(\"engines\", this.pageOfListDatabaseEngines, request);\n  pageOfListNodeTypes = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/node-types`,\n      urlParams: marshalling.urlParams(\n        [\"include_disabled_types\", request.includeDisabledTypes],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListNodeTypesResponse\n  );\n  /**\n   * List available node types. List all available node types. By default, the\n   * node types returned in the list are ordered by creation date in ascending\n   * order, though this can be modified via the `order_by` field.\n   *\n   * @param request - The request {@link ListNodeTypesRequest}\n   * @returns A Promise of ListNodeTypesResponse\n   */\n  listNodeTypes = (request) => resourcePaginator.enrichForPagination(\"nodeTypes\", this.pageOfListNodeTypes, request);\n  /**\n   * Upgrade a Database Instance. Upgrade your current Database Instance\n   * specifications like node type, high availability, volume, or the database\n   * engine version. Note that upon upgrade the `enable_ha` parameter can only\n   * be set to `true`.\n   *\n   * @param request - The request {@link UpgradeInstanceRequest}\n   * @returns A Promise of Instance\n   */\n  upgradeInstance = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpgradeInstanceRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/upgrade`\n    },\n    marshalling_gen.unmarshalInstance\n  );\n  pageOfListInstances = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId],\n        [\"tags\", request.tags]\n      )\n    },\n    marshalling_gen.unmarshalListInstancesResponse\n  );\n  /**\n   * List Database Instances. List all Database Instances in the specified\n   * region, for a given Scaleway Organization or Scaleway Project. By default,\n   * the Database Instances returned in the list are ordered by creation date in\n   * ascending order, though this can be modified via the order_by field. You\n   * can define additional parameters for your query, such as `tags` and `name`.\n   * For the `name` parameter, the value you include will be checked against the\n   * whole name string to see if it includes the string you put in the\n   * parameter.\n   *\n   * @param request - The request {@link ListInstancesRequest}\n   * @returns A Promise of ListInstancesResponse\n   */\n  listInstances = (request = {}) => resourcePaginator.enrichForPagination(\"instances\", this.pageOfListInstances, request);\n  /**\n   * Get a Database Instance. Retrieve information about a given Database\n   * Instance, specified by the `region` and `instance_id` parameters. Its full\n   * details, including name, status, IP address and port, are returned in the\n   * response object.\n   *\n   * @param request - The request {@link GetInstanceRequest}\n   * @returns A Promise of Instance\n   */\n  getInstance = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}`\n    },\n    marshalling_gen.unmarshalInstance\n  );\n  /**\n   * Waits for {@link Instance} to be in a final state.\n   *\n   * @param request - The request {@link GetInstanceRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Instance\n   */\n  waitForInstance = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.INSTANCE_TRANSIENT_STATUSES.includes(res.status))),\n    this.getInstance,\n    request,\n    options\n  );\n  /**\n   * Create a Database Instance. Create a new Database Instance. You must set\n   * the `engine`, `user_name`, `password` and `node_type` parameters.\n   * Optionally, you can specify the volume type and size.\n   *\n   * @param request - The request {@link CreateInstanceRequest}\n   * @returns A Promise of Instance\n   */\n  createInstance = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateInstanceRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances`\n    },\n    marshalling_gen.unmarshalInstance\n  );\n  /**\n   * Update a Database Instance. Update the parameters of a Database Instance,\n   * including name, tags and backup schedule details.\n   *\n   * @param request - The request {@link UpdateInstanceRequest}\n   * @returns A Promise of Instance\n   */\n  updateInstance = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateInstanceRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}`\n    },\n    marshalling_gen.unmarshalInstance\n  );\n  /**\n   * Delete a Database Instance. Delete a given Database Instance, specified by\n   * the `region` and `instance_id` parameters. Deleting a Database Instance is\n   * permanent, and cannot be undone. Note that upon deletion all your data will\n   * be lost.\n   *\n   * @param request - The request {@link DeleteInstanceRequest}\n   * @returns A Promise of Instance\n   */\n  deleteInstance = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}`\n    },\n    marshalling_gen.unmarshalInstance\n  );\n  /**\n   * Clone a Database Instance. Clone a given Database Instance, specified by\n   * the `region` and `instance_id` parameters. The clone feature allows you to\n   * create a new Database Instance from an existing one. The clone includes all\n   * existing databases, users and permissions. You can create a clone on a\n   * Database Instance bigger than your current one.\n   *\n   * @param request - The request {@link CloneInstanceRequest}\n   * @returns A Promise of Instance\n   */\n  cloneInstance = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCloneInstanceRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/clone`\n    },\n    marshalling_gen.unmarshalInstance\n  );\n  /**\n   * Restart Database Instance. Restart a given Database Instance, specified by\n   * the `region` and `instance_id` parameters. The status of the Database\n   * Instance returned in the response.\n   *\n   * @param request - The request {@link RestartInstanceRequest}\n   * @returns A Promise of Instance\n   */\n  restartInstance = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/restart`\n    },\n    marshalling_gen.unmarshalInstance\n  );\n  /**\n   * Get the TLS certificate of a Database Instance. Retrieve information about\n   * the TLS certificate of a given Database Instance. Details like name and\n   * content are returned in the response.\n   *\n   * @param request - The request {@link GetInstanceCertificateRequest}\n   * @returns A Promise of Blob\n   */\n  getInstanceCertificate = (request) => this.client.fetch({\n    method: \"GET\",\n    path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/certificate`,\n    urlParams: marshalling.urlParams([\"dl\", 1]),\n    responseType: \"blob\"\n  });\n  /**\n   * Renew the TLS certificate of a Database Instance. Renew a TLS for a\n   * Database Instance. Renewing a certificate means that you will not be able\n   * to connect to your Database Instance using the previous certificate. You\n   * will also need to download and update the new certificate for all database\n   * clients.\n   *\n   * @param request - The request {@link RenewInstanceCertificateRequest}\n   */\n  renewInstanceCertificate = (request) => this.client.fetch({\n    body: \"{}\",\n    headers: jsonContentHeaders,\n    method: \"POST\",\n    path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/renew-certificate`\n  });\n  /**\n   * Get Database Instance metrics. Retrieve the time series metrics of a given\n   * Database Instance. You can define the period from which to retrieve metrics\n   * by specifying the `start_date` and `end_date`.\n   *\n   * @param request - The request {@link GetInstanceMetricsRequest}\n   * @returns A Promise of InstanceMetrics\n   */\n  getInstanceMetrics = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/metrics`,\n      urlParams: marshalling.urlParams(\n        [\"end_date\", request.endDate],\n        [\"metric_name\", request.metricName],\n        [\"start_date\", request.startDate]\n      )\n    },\n    marshalling_gen.unmarshalInstanceMetrics\n  );\n  /**\n   * Create a Read Replica. Create a new Read Replica of a Database Instance.\n   * You must specify the `region` and the `instance_id`. You can only create a\n   * maximum of 3 Read Replicas per Database Instance.\n   *\n   * @param request - The request {@link CreateReadReplicaRequest}\n   * @returns A Promise of ReadReplica\n   */\n  createReadReplica = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateReadReplicaRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/read-replicas`\n    },\n    marshalling_gen.unmarshalReadReplica\n  );\n  /**\n   * Get a Read Replica. Retrieve information about a Database Instance Read\n   * Replica. Full details about the Read Replica, like `endpoints`, `status`\n   * and `region` are returned in the response.\n   *\n   * @param request - The request {@link GetReadReplicaRequest}\n   * @returns A Promise of ReadReplica\n   */\n  getReadReplica = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/read-replicas/${marshalling.validatePathParam(\"readReplicaId\", request.readReplicaId)}`\n    },\n    marshalling_gen.unmarshalReadReplica\n  );\n  /**\n   * Waits for {@link ReadReplica} to be in a final state.\n   *\n   * @param request - The request {@link GetReadReplicaRequest}\n   * @param options - The waiting options\n   * @returns A Promise of ReadReplica\n   */\n  waitForReadReplica = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(\n      !content_gen.READ_REPLICA_TRANSIENT_STATUSES.includes(res.status)\n    )),\n    this.getReadReplica,\n    request,\n    options\n  );\n  /**\n   * Delete a Read Replica. Delete a Read Replica of a Database Instance. You\n   * must specify the `region` and `read_replica_id` parameters of the Read\n   * Replica you want to delete.\n   *\n   * @param request - The request {@link DeleteReadReplicaRequest}\n   * @returns A Promise of ReadReplica\n   */\n  deleteReadReplica = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/read-replicas/${marshalling.validatePathParam(\"readReplicaId\", request.readReplicaId)}`\n    },\n    marshalling_gen.unmarshalReadReplica\n  );\n  /**\n   * Resync a Read Replica. When you resync a Read Replica, first it is reset,\n   * then its data is resynchronized from the primary node. Your Read Replica\n   * remains unavailable during the resync process. The duration of this process\n   * is proportional to the size of your Database Instance. The configured\n   * endpoints do not change.\n   *\n   * @param request - The request {@link ResetReadReplicaRequest}\n   * @returns A Promise of ReadReplica\n   */\n  resetReadReplica = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/read-replicas/${marshalling.validatePathParam(\"readReplicaId\", request.readReplicaId)}/reset`\n    },\n    marshalling_gen.unmarshalReadReplica\n  );\n  /**\n   * Promote a Read Replica. Promote a Read Replica to Database Instance\n   * automatically.\n   *\n   * @param request - The request {@link PromoteReadReplicaRequest}\n   * @returns A Promise of Instance\n   */\n  promoteReadReplica = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/read-replicas/${marshalling.validatePathParam(\"readReplicaId\", request.readReplicaId)}/promote`\n    },\n    marshalling_gen.unmarshalInstance\n  );\n  /**\n   * Create an endpoint for a Read Replica. Create a new endpoint for a Read\n   * Replica. Read Replicas can have at most one direct access and one Private\n   * Network endpoint.\n   *\n   * @param request - The request {@link CreateReadReplicaEndpointRequest}\n   * @returns A Promise of ReadReplica\n   */\n  createReadReplicaEndpoint = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateReadReplicaEndpointRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/read-replicas/${marshalling.validatePathParam(\"readReplicaId\", request.readReplicaId)}/endpoints`\n    },\n    marshalling_gen.unmarshalReadReplica\n  );\n  /**\n   * List available logs of a Database Instance. List the available logs of a\n   * Database Instance. By default, the logs returned in the list are ordered by\n   * creation date in ascending order, though this can be modified via the\n   * order_by field.\n   *\n   * @param request - The request {@link ListInstanceLogsRequest}\n   * @returns A Promise of ListInstanceLogsResponse\n   */\n  listInstanceLogs = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/logs`,\n      urlParams: marshalling.urlParams([\"order_by\", request.orderBy])\n    },\n    marshalling_gen.unmarshalListInstanceLogsResponse\n  );\n  /**\n   * Get given logs of a Database Instance. Retrieve information about the logs\n   * of a Database Instance. Specify the `instance_log_id` and `region` in your\n   * request to get information such as `download_url`, `status`, `expires_at`\n   * and `created_at` about your logs in the response.\n   *\n   * @param request - The request {@link GetInstanceLogRequest}\n   * @returns A Promise of InstanceLog\n   */\n  getInstanceLog = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/logs/${marshalling.validatePathParam(\"instanceLogId\", request.instanceLogId)}`\n    },\n    marshalling_gen.unmarshalInstanceLog\n  );\n  /**\n   * Waits for {@link InstanceLog} to be in a final state.\n   *\n   * @param request - The request {@link GetInstanceLogRequest}\n   * @param options - The waiting options\n   * @returns A Promise of InstanceLog\n   */\n  waitForInstanceLog = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(\n      !content_gen.INSTANCE_LOG_TRANSIENT_STATUSES.includes(res.status)\n    )),\n    this.getInstanceLog,\n    request,\n    options\n  );\n  /**\n   * Purge remote Database Instance logs. Purge a given remote log from a\n   * Database Instance. You can specify the `log_name` of the log you wish to\n   * clean from your Database Instance.\n   *\n   * @param request - The request {@link PurgeInstanceLogsRequest}\n   */\n  purgeInstanceLogs = (request) => this.client.fetch({\n    body: JSON.stringify(\n      marshalling_gen.marshalPurgeInstanceLogsRequest(request, this.client.settings)\n    ),\n    headers: jsonContentHeaders,\n    method: \"POST\",\n    path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/purge-logs`\n  });\n  /**\n   * List remote Database Instance logs details. List remote log details. By\n   * default, the details returned in the list are ordered by creation date in\n   * ascending order, though this can be modified via the order_by field.\n   *\n   * @param request - The request {@link ListInstanceLogsDetailsRequest}\n   * @returns A Promise of ListInstanceLogsDetailsResponse\n   */\n  listInstanceLogsDetails = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/logs-details`\n    },\n    marshalling_gen.unmarshalListInstanceLogsDetailsResponse\n  );\n  /**\n   * Add Database Instance advanced settings. Add an advanced setting to a\n   * Database Instance. You must set the `name` and the `value` of each\n   * setting.\n   *\n   * @param request - The request {@link AddInstanceSettingsRequest}\n   * @returns A Promise of AddInstanceSettingsResponse\n   */\n  addInstanceSettings = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalAddInstanceSettingsRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/settings`\n    },\n    marshalling_gen.unmarshalAddInstanceSettingsResponse\n  );\n  /**\n   * Delete Database Instance advanced settings. Delete an advanced setting in a\n   * Database Instance. You must specify the names of the settings you want to\n   * delete in the request.\n   *\n   * @param request - The request {@link DeleteInstanceSettingsRequest}\n   * @returns A Promise of DeleteInstanceSettingsResponse\n   */\n  deleteInstanceSettings = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalDeleteInstanceSettingsRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"DELETE\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/settings`\n    },\n    marshalling_gen.unmarshalDeleteInstanceSettingsResponse\n  );\n  /**\n   * Set Database Instance advanced settings. Update an advanced setting for a\n   * Database Instance. Settings added upon database engine initalization can\n   * only be defined once, and cannot, therefore, be updated.\n   *\n   * @param request - The request {@link SetInstanceSettingsRequest}\n   * @returns A Promise of SetInstanceSettingsResponse\n   */\n  setInstanceSettings = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSetInstanceSettingsRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/settings`\n    },\n    marshalling_gen.unmarshalSetInstanceSettingsResponse\n  );\n  pageOfListInstanceACLRules = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/acls`,\n      urlParams: marshalling.urlParams(\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListInstanceACLRulesResponse\n  );\n  /**\n   * List ACL rules of a Database Instance. List the ACL rules for a given\n   * Database Instance. The response is an array of ACL objects, each one\n   * representing an ACL that denies, allows or redirects traffic based on\n   * certain conditions.\n   *\n   * @param request - The request {@link ListInstanceACLRulesRequest}\n   * @returns A Promise of ListInstanceACLRulesResponse\n   */\n  listInstanceACLRules = (request) => resourcePaginator.enrichForPagination(\"rules\", this.pageOfListInstanceACLRules, request);\n  /**\n   * Add an ACL rule to a Database Instance. Add an additional ACL rule to a\n   * Database Instance.\n   *\n   * @param request - The request {@link AddInstanceACLRulesRequest}\n   * @returns A Promise of AddInstanceACLRulesResponse\n   */\n  addInstanceACLRules = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalAddInstanceACLRulesRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/acls`\n    },\n    marshalling_gen.unmarshalAddInstanceACLRulesResponse\n  );\n  /**\n   * Set ACL rules for a Database Instance. Replace all the ACL rules of a\n   * Database Instance.\n   *\n   * @param request - The request {@link SetInstanceACLRulesRequest}\n   * @returns A Promise of SetInstanceACLRulesResponse\n   */\n  setInstanceACLRules = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSetInstanceACLRulesRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/acls`\n    },\n    marshalling_gen.unmarshalSetInstanceACLRulesResponse\n  );\n  /**\n   * Delete ACL rules of a Database Instance. Delete one or more ACL rules of a\n   * Database Instance.\n   *\n   * @param request - The request {@link DeleteInstanceACLRulesRequest}\n   * @returns A Promise of DeleteInstanceACLRulesResponse\n   */\n  deleteInstanceACLRules = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalDeleteInstanceACLRulesRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"DELETE\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/acls`\n    },\n    marshalling_gen.unmarshalDeleteInstanceACLRulesResponse\n  );\n  pageOfListUsers = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/users`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListUsersResponse\n  );\n  /**\n   * List users of a Database Instance. List all users of a given Database\n   * Instance. By default, the users returned in the list are ordered by\n   * creation date in ascending order, though this can be modified via the\n   * order_by field.\n   *\n   * @param request - The request {@link ListUsersRequest}\n   * @returns A Promise of ListUsersResponse\n   */\n  listUsers = (request) => resourcePaginator.enrichForPagination(\"users\", this.pageOfListUsers, request);\n  /**\n   * Create a user for a Database Instance. Create a new user for a Database\n   * Instance. You must define the `name`, `password` and `is_admin`\n   * parameters.\n   *\n   * @param request - The request {@link CreateUserRequest}\n   * @returns A Promise of User\n   */\n  createUser = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateUserRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/users`\n    },\n    marshalling_gen.unmarshalUser\n  );\n  /**\n   * Update a user on a Database Instance. Update the parameters of a user on a\n   * Database Instance. You can update the `password` and `is_admin` parameters,\n   * but you cannot change the name of the user.\n   *\n   * @param request - The request {@link UpdateUserRequest}\n   * @returns A Promise of User\n   */\n  updateUser = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateUserRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/users/${marshalling.validatePathParam(\"name\", request.name)}`\n    },\n    marshalling_gen.unmarshalUser\n  );\n  /**\n   * Delete a user on a Database Instance. Delete a given user on a Database\n   * Instance. You must specify, in the endpoint, the `region`, `instance_id`\n   * and `name` parameters of the user you want to delete.\n   *\n   * @param request - The request {@link DeleteUserRequest}\n   */\n  deleteUser = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/users/${marshalling.validatePathParam(\"name\", request.name)}`\n  });\n  pageOfListDatabases = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/databases`,\n      urlParams: marshalling.urlParams(\n        [\"managed\", request.managed],\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"owner\", request.owner],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListDatabasesResponse\n  );\n  /**\n   * List databases in a Database Instance. List all databases of a given\n   * Database Instance. By default, the databases returned in the list are\n   * ordered by creation date in ascending order, though this can be modified\n   * via the order_by field. You can define additional parameters for your\n   * query, such as `name`, `managed` and `owner`.\n   *\n   * @param request - The request {@link ListDatabasesRequest}\n   * @returns A Promise of ListDatabasesResponse\n   */\n  listDatabases = (request) => resourcePaginator.enrichForPagination(\"databases\", this.pageOfListDatabases, request);\n  /**\n   * Create a database in a Database Instance. Create a new database. You must\n   * define the `name` parameter in the request.\n   *\n   * @param request - The request {@link CreateDatabaseRequest}\n   * @returns A Promise of Database\n   */\n  createDatabase = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateDatabaseRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/databases`\n    },\n    marshalling_gen.unmarshalDatabase\n  );\n  /**\n   * Delete a database in a Database Instance. Delete a given database on a\n   * Database Instance. You must specify, in the endpoint, the `region`,\n   * `instance_id` and `name` parameters of the database you want to delete.\n   *\n   * @param request - The request {@link DeleteDatabaseRequest}\n   */\n  deleteDatabase = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/databases/${marshalling.validatePathParam(\"name\", request.name)}`\n  });\n  pageOfListPrivileges = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/privileges`,\n      urlParams: marshalling.urlParams(\n        [\"database_name\", request.databaseName],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"user_name\", request.userName]\n      )\n    },\n    marshalling_gen.unmarshalListPrivilegesResponse\n  );\n  /**\n   * List user privileges for a database. List privileges of a user on a\n   * database. By default, the details returned in the list are ordered by\n   * creation date in ascending order, though this can be modified via the\n   * order_by field. You can define additional parameters for your query, such\n   * as `database_name` and `user_name`.\n   *\n   * @param request - The request {@link ListPrivilegesRequest}\n   * @returns A Promise of ListPrivilegesResponse\n   */\n  listPrivileges = (request) => resourcePaginator.enrichForPagination(\"privileges\", this.pageOfListPrivileges, request);\n  /**\n   * Set user privileges for a database. Set the privileges of a user on a\n   * database. You must define `database_name`, `user_name` and `permission` in\n   * the request body.\n   *\n   * @param request - The request {@link SetPrivilegeRequest}\n   * @returns A Promise of Privilege\n   */\n  setPrivilege = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSetPrivilegeRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/privileges`\n    },\n    marshalling_gen.unmarshalPrivilege\n  );\n  pageOfListSnapshots = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/snapshots`,\n      urlParams: marshalling.urlParams(\n        [\"instance_id\", request.instanceId],\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListSnapshotsResponse\n  );\n  /**\n   * List snapshots. List snapshots. You can include the `instance_id` or\n   * `project_id` in your query to get the list of snapshots for specific\n   * Database Instances and/or Projects. By default, the details returned in the\n   * list are ordered by creation date in ascending order, though this can be\n   * modified via the `order_by` field.\n   *\n   * @param request - The request {@link ListSnapshotsRequest}\n   * @returns A Promise of ListSnapshotsResponse\n   */\n  listSnapshots = (request = {}) => resourcePaginator.enrichForPagination(\"snapshots\", this.pageOfListSnapshots, request);\n  /**\n   * Get a Database Instance snapshot. Retrieve information about a given\n   * snapshot, specified by its `snapshot_id` and `region`. Full details about\n   * the snapshot, like size and expiration date, are returned in the response.\n   *\n   * @param request - The request {@link GetSnapshotRequest}\n   * @returns A Promise of Snapshot\n   */\n  getSnapshot = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/snapshots/${marshalling.validatePathParam(\"snapshotId\", request.snapshotId)}`\n    },\n    marshalling_gen.unmarshalSnapshot\n  );\n  /**\n   * Waits for {@link Snapshot} to be in a final state.\n   *\n   * @param request - The request {@link GetSnapshotRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Snapshot\n   */\n  waitForSnapshot = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.SNAPSHOT_TRANSIENT_STATUSES.includes(res.status))),\n    this.getSnapshot,\n    request,\n    options\n  );\n  /**\n   * Create a Database Instance snapshot. Create a new snapshot of a Database\n   * Instance. You must define the `name` parameter in the request.\n   *\n   * @param request - The request {@link CreateSnapshotRequest}\n   * @returns A Promise of Snapshot\n   */\n  createSnapshot = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateSnapshotRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/snapshots`\n    },\n    marshalling_gen.unmarshalSnapshot\n  );\n  /**\n   * Update a Database Instance snapshot. Update the parameters of a snapshot of\n   * a Database Instance. You can update the `name` and `expires_at`\n   * parameters.\n   *\n   * @param request - The request {@link UpdateSnapshotRequest}\n   * @returns A Promise of Snapshot\n   */\n  updateSnapshot = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateSnapshotRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/snapshots/${marshalling.validatePathParam(\"snapshotId\", request.snapshotId)}`\n    },\n    marshalling_gen.unmarshalSnapshot\n  );\n  /**\n   * Delete a Database Instance snapshot. Delete a given snapshot of a Database\n   * Instance. You must specify, in the endpoint, the `region` and `snapshot_id`\n   * parameters of the snapshot you want to delete.\n   *\n   * @param request - The request {@link DeleteSnapshotRequest}\n   * @returns A Promise of Snapshot\n   */\n  deleteSnapshot = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/snapshots/${marshalling.validatePathParam(\"snapshotId\", request.snapshotId)}`\n    },\n    marshalling_gen.unmarshalSnapshot\n  );\n  /**\n   * Create a new Database Instance from a snapshot. Restore a snapshot. When\n   * you restore a snapshot, a new Instance is created and billed to your\n   * account. Note that is possible to select a larger node type for your new\n   * Database Instance. However, the Block volume size will be the same as the\n   * size of the restored snapshot. All Instance settings will be restored if\n   * you chose a node type with the same or more memory size than the initial\n   * Instance. Settings will be reset to the default if your node type has less\n   * memory.\n   *\n   * @param request - The request {@link CreateInstanceFromSnapshotRequest}\n   * @returns A Promise of Instance\n   */\n  createInstanceFromSnapshot = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateInstanceFromSnapshotRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/snapshots/${marshalling.validatePathParam(\"snapshotId\", request.snapshotId)}/create-instance`\n    },\n    marshalling_gen.unmarshalInstance\n  );\n  /**\n   * Create a new Database Instance endpoint. Create a new endpoint for a\n   * Database Instance. You can add `load_balancer` and `private_network`\n   * specifications to the body of the request.\n   *\n   * @param request - The request {@link CreateEndpointRequest}\n   * @returns A Promise of Endpoint\n   */\n  createEndpoint = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateEndpointRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/endpoints`\n    },\n    marshalling_gen.unmarshalEndpoint\n  );\n  /**\n   * Delete a Database Instance endpoint. Delete the endpoint of a Database\n   * Instance. You must specify the `region` and `endpoint_id` parameters of the\n   * endpoint you want to delete. Note that might need to update any environment\n   * configurations that point to the deleted endpoint.\n   *\n   * @param request - The request {@link DeleteEndpointRequest}\n   */\n  deleteEndpoint = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/endpoints/${marshalling.validatePathParam(\"endpointId\", request.endpointId)}`\n  });\n  /**\n   * Get a Database Instance endpoint. Retrieve information about a Database\n   * Instance endpoint. Full details about the endpoint, like `ip`, `port`,\n   * `private_network` and `load_balancer` specifications are returned in the\n   * response.\n   *\n   * @param request - The request {@link GetEndpointRequest}\n   * @returns A Promise of Endpoint\n   */\n  getEndpoint = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/endpoints/${marshalling.validatePathParam(\"endpointId\", request.endpointId)}`\n    },\n    marshalling_gen.unmarshalEndpoint\n  );\n  /**\n   * Migrate Database Instance endpoint. Migrate an existing Database Instance\n   * endpoint to another Database Instance.\n   *\n   * @param request - The request {@link MigrateEndpointRequest}\n   * @returns A Promise of Endpoint\n   */\n  migrateEndpoint = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalMigrateEndpointRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/endpoints/${marshalling.validatePathParam(\"endpointId\", request.endpointId)}/migrate`\n    },\n    marshalling_gen.unmarshalEndpoint\n  );\n  /**\n   * Apply an instance maintenance. Apply a pending instance maintenance on your\n   * instance. This action can generate some service interruption.\n   *\n   * @param request - The request {@link ApplyInstanceMaintenanceRequest}\n   * @returns A Promise of Maintenance\n   */\n  applyInstanceMaintenance = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/document-db/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/apply-maintenance`\n    },\n    marshalling_gen.unmarshalMaintenance\n  );\n}\nexports.API = API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst INSTANCE_LOG_TRANSIENT_STATUSES = [\"creating\"];\nconst INSTANCE_TRANSIENT_STATUSES = [\n  \"provisioning\",\n  \"configuring\",\n  \"deleting\",\n  \"autohealing\",\n  \"initializing\",\n  \"backuping\",\n  \"snapshotting\",\n  \"restarting\"\n];\nconst MAINTENANCE_TRANSIENT_STATUSES = [\"ongoing\"];\nconst READ_REPLICA_TRANSIENT_STATUSES = [\n  \"provisioning\",\n  \"initializing\",\n  \"deleting\",\n  \"configuring\",\n  \"promoting\"\n];\nconst SNAPSHOT_TRANSIENT_STATUSES = [\n  \"creating\",\n  \"restoring\",\n  \"deleting\"\n];\nexports.INSTANCE_LOG_TRANSIENT_STATUSES = INSTANCE_LOG_TRANSIENT_STATUSES;\nexports.INSTANCE_TRANSIENT_STATUSES = INSTANCE_TRANSIENT_STATUSES;\nexports.MAINTENANCE_TRANSIENT_STATUSES = MAINTENANCE_TRANSIENT_STATUSES;\nexports.READ_REPLICA_TRANSIENT_STATUSES = READ_REPLICA_TRANSIENT_STATUSES;\nexports.SNAPSHOT_TRANSIENT_STATUSES = SNAPSHOT_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst validationRules_gen = require(\"./validation-rules.gen.cjs\");\nexports.API = api_gen.API;\nexports.INSTANCE_LOG_TRANSIENT_STATUSES = content_gen.INSTANCE_LOG_TRANSIENT_STATUSES;\nexports.INSTANCE_TRANSIENT_STATUSES = content_gen.INSTANCE_TRANSIENT_STATUSES;\nexports.MAINTENANCE_TRANSIENT_STATUSES = content_gen.MAINTENANCE_TRANSIENT_STATUSES;\nexports.READ_REPLICA_TRANSIENT_STATUSES = content_gen.READ_REPLICA_TRANSIENT_STATUSES;\nexports.SNAPSHOT_TRANSIENT_STATUSES = content_gen.SNAPSHOT_TRANSIENT_STATUSES;\nexports.ValidationRules = validationRules_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst randomName = require(\"@scaleway/random-name\");\nconst json = require(\"../../../helpers/json.cjs\");\nconst customMarshalling = require(\"../../../scw/custom-marshalling.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nconst unmarshalEndpointDirectAccessDetails = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'EndpointDirectAccessDetails' failed as data isn't a dictionary.`\n    );\n  }\n  return {};\n};\nconst unmarshalEndpointLoadBalancerDetails = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'EndpointLoadBalancerDetails' failed as data isn't a dictionary.`\n    );\n  }\n  return {};\n};\nconst unmarshalEndpointPrivateNetworkDetails = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'EndpointPrivateNetworkDetails' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    privateNetworkId: data.private_network_id,\n    serviceIp: data.service_ip,\n    zone: data.zone\n  };\n};\nconst unmarshalEndpoint = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Endpoint' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    directAccess: data.direct_access ? unmarshalEndpointDirectAccessDetails(data.direct_access) : void 0,\n    hostname: data.hostname,\n    id: data.id,\n    ip: data.ip,\n    loadBalancer: data.load_balancer ? unmarshalEndpointLoadBalancerDetails(data.load_balancer) : void 0,\n    name: data.name,\n    port: data.port,\n    privateNetwork: data.private_network ? unmarshalEndpointPrivateNetworkDetails(data.private_network) : void 0\n  };\n};\nconst unmarshalMaintenance = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Maintenance' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    closedAt: marshalling.unmarshalDate(data.closed_at),\n    forcedAt: marshalling.unmarshalDate(data.forced_at),\n    reason: data.reason,\n    startsAt: marshalling.unmarshalDate(data.starts_at),\n    status: data.status,\n    stopsAt: marshalling.unmarshalDate(data.stops_at)\n  };\n};\nconst unmarshalReadReplica = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ReadReplica' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    endpoints: marshalling.unmarshalArrayOfObject(data.endpoints, unmarshalEndpoint),\n    id: data.id,\n    region: data.region,\n    sameZone: data.same_zone,\n    status: data.status\n  };\n};\nconst unmarshalDatabase = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Database' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    managed: data.managed,\n    name: data.name,\n    owner: data.owner,\n    size: data.size\n  };\n};\nconst unmarshalInstanceLog = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'InstanceLog' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    downloadUrl: data.download_url,\n    expiresAt: marshalling.unmarshalDate(data.expires_at),\n    id: data.id,\n    nodeName: data.node_name,\n    region: data.region,\n    status: data.status\n  };\n};\nconst unmarshalBackupSchedule = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'BackupSchedule' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    disabled: data.disabled,\n    frequency: data.frequency,\n    nextRunAt: marshalling.unmarshalDate(data.next_run_at),\n    retention: data.retention\n  };\n};\nconst unmarshalInstanceSetting = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'InstanceSetting' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    name: data.name,\n    value: data.value\n  };\n};\nconst unmarshalLogsPolicy = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'LogsPolicy' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    maxAgeRetention: data.max_age_retention,\n    totalDiskRetention: data.total_disk_retention\n  };\n};\nconst unmarshalUpgradableVersion = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'UpgradableVersion' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    id: data.id,\n    minorVersion: data.minor_version,\n    name: data.name,\n    version: data.version\n  };\n};\nconst unmarshalVolume = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Volume' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    class: data.class,\n    size: data.size,\n    type: data.type\n  };\n};\nconst unmarshalInstance = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Instance' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    backupSameRegion: data.backup_same_region,\n    backupSchedule: data.backup_schedule ? unmarshalBackupSchedule(data.backup_schedule) : void 0,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    endpoint: data.endpoint ? unmarshalEndpoint(data.endpoint) : void 0,\n    endpoints: marshalling.unmarshalArrayOfObject(data.endpoints, unmarshalEndpoint),\n    engine: data.engine,\n    id: data.id,\n    initSettings: marshalling.unmarshalArrayOfObject(\n      data.init_settings,\n      unmarshalInstanceSetting\n    ),\n    isHaCluster: data.is_ha_cluster,\n    logsPolicy: data.logs_policy ? unmarshalLogsPolicy(data.logs_policy) : void 0,\n    maintenances: marshalling.unmarshalArrayOfObject(\n      data.maintenances,\n      unmarshalMaintenance\n    ),\n    name: data.name,\n    nodeType: data.node_type,\n    organizationId: data.organization_id,\n    projectId: data.project_id,\n    readReplicas: marshalling.unmarshalArrayOfObject(\n      data.read_replicas,\n      unmarshalReadReplica\n    ),\n    region: data.region,\n    settings: marshalling.unmarshalArrayOfObject(data.settings, unmarshalInstanceSetting),\n    status: data.status,\n    tags: data.tags,\n    upgradableVersion: marshalling.unmarshalArrayOfObject(\n      data.upgradable_version,\n      unmarshalUpgradableVersion\n    ),\n    volume: data.volume ? unmarshalVolume(data.volume) : void 0\n  };\n};\nconst unmarshalPrivilege = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Privilege' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    databaseName: data.database_name,\n    permission: data.permission,\n    userName: data.user_name\n  };\n};\nconst unmarshalSnapshotVolumeType = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SnapshotVolumeType' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    class: data.class,\n    type: data.type\n  };\n};\nconst unmarshalSnapshot = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Snapshot' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    expiresAt: marshalling.unmarshalDate(data.expires_at),\n    id: data.id,\n    instanceId: data.instance_id,\n    instanceName: data.instance_name,\n    name: data.name,\n    nodeType: data.node_type,\n    region: data.region,\n    size: data.size,\n    status: data.status,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    volumeType: data.volume_type ? unmarshalSnapshotVolumeType(data.volume_type) : void 0\n  };\n};\nconst unmarshalUser = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'User' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    isAdmin: data.is_admin,\n    name: data.name\n  };\n};\nconst unmarshalACLRule = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ACLRule' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    action: data.action,\n    description: data.description,\n    direction: data.direction,\n    ip: data.ip,\n    port: data.port,\n    protocol: data.protocol\n  };\n};\nconst unmarshalAddInstanceACLRulesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'AddInstanceACLRulesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    rules: marshalling.unmarshalArrayOfObject(data.rules, unmarshalACLRule)\n  };\n};\nconst unmarshalAddInstanceSettingsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'AddInstanceSettingsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    settings: marshalling.unmarshalArrayOfObject(data.settings, unmarshalInstanceSetting)\n  };\n};\nconst unmarshalDeleteInstanceACLRulesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DeleteInstanceACLRulesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    rules: marshalling.unmarshalArrayOfObject(data.rules, unmarshalACLRule)\n  };\n};\nconst unmarshalDeleteInstanceSettingsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DeleteInstanceSettingsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    settings: marshalling.unmarshalArrayOfObject(data.settings, unmarshalInstanceSetting)\n  };\n};\nconst unmarshalInstanceMetrics = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'InstanceMetrics' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    timeseries: marshalling.unmarshalArrayOfObject(data.timeseries, customMarshalling.unmarshalTimeSeries)\n  };\n};\nconst unmarshalEngineSetting = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'EngineSetting' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    defaultValue: data.default_value,\n    description: data.description,\n    floatMax: data.float_max,\n    floatMin: data.float_min,\n    hotConfigurable: data.hot_configurable,\n    intMax: data.int_max,\n    intMin: data.int_min,\n    name: data.name,\n    propertyType: data.property_type,\n    stringConstraint: data.string_constraint,\n    unit: data.unit\n  };\n};\nconst unmarshalEngineVersion = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'EngineVersion' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    availableInitSettings: marshalling.unmarshalArrayOfObject(\n      data.available_init_settings,\n      unmarshalEngineSetting\n    ),\n    availableSettings: marshalling.unmarshalArrayOfObject(\n      data.available_settings,\n      unmarshalEngineSetting\n    ),\n    beta: data.beta,\n    disabled: data.disabled,\n    endOfLife: marshalling.unmarshalDate(data.end_of_life),\n    name: data.name,\n    version: data.version\n  };\n};\nconst unmarshalDatabaseEngine = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DatabaseEngine' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    logoUrl: data.logo_url,\n    name: data.name,\n    region: data.region,\n    versions: marshalling.unmarshalArrayOfObject(data.versions, unmarshalEngineVersion)\n  };\n};\nconst unmarshalListDatabaseEnginesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListDatabaseEnginesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    engines: marshalling.unmarshalArrayOfObject(data.engines, unmarshalDatabaseEngine),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListDatabasesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListDatabasesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    databases: marshalling.unmarshalArrayOfObject(data.databases, unmarshalDatabase),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListInstanceACLRulesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListInstanceACLRulesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    rules: marshalling.unmarshalArrayOfObject(data.rules, unmarshalACLRule),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListInstanceLogsDetailsResponseInstanceLogDetail = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListInstanceLogsDetailsResponseInstanceLogDetail' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    logName: data.log_name,\n    size: data.size\n  };\n};\nconst unmarshalListInstanceLogsDetailsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListInstanceLogsDetailsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    details: marshalling.unmarshalArrayOfObject(\n      data.details,\n      unmarshalListInstanceLogsDetailsResponseInstanceLogDetail\n    )\n  };\n};\nconst unmarshalListInstanceLogsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListInstanceLogsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    instanceLogs: marshalling.unmarshalArrayOfObject(\n      data.instance_logs,\n      unmarshalInstanceLog\n    )\n  };\n};\nconst unmarshalListInstancesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListInstancesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    instances: marshalling.unmarshalArrayOfObject(data.instances, unmarshalInstance),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalNodeTypeVolumeConstraintSizes = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'NodeTypeVolumeConstraintSizes' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    maxSize: data.max_size,\n    minSize: data.min_size\n  };\n};\nconst unmarshalNodeTypeVolumeType = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'NodeTypeVolumeType' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    chunkSize: data.chunk_size,\n    class: data.class,\n    description: data.description,\n    maxSize: data.max_size,\n    minSize: data.min_size,\n    type: data.type\n  };\n};\nconst unmarshalNodeType = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'NodeType' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    availableVolumeTypes: marshalling.unmarshalArrayOfObject(\n      data.available_volume_types,\n      unmarshalNodeTypeVolumeType\n    ),\n    beta: data.beta,\n    description: data.description,\n    disabled: data.disabled,\n    generation: data.generation,\n    instanceRange: data.instance_range,\n    isBssdCompatible: data.is_bssd_compatible,\n    isHaRequired: data.is_ha_required,\n    memory: data.memory,\n    name: data.name,\n    region: data.region,\n    stockStatus: data.stock_status,\n    vcpus: data.vcpus,\n    volumeConstraint: data.volume_constraint ? unmarshalNodeTypeVolumeConstraintSizes(data.volume_constraint) : void 0\n  };\n};\nconst unmarshalListNodeTypesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListNodeTypesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    nodeTypes: marshalling.unmarshalArrayOfObject(data.node_types, unmarshalNodeType),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListPrivilegesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListPrivilegesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    privileges: marshalling.unmarshalArrayOfObject(data.privileges, unmarshalPrivilege),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListSnapshotsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListSnapshotsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    snapshots: marshalling.unmarshalArrayOfObject(data.snapshots, unmarshalSnapshot),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListUsersResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListUsersResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    totalCount: data.total_count,\n    users: marshalling.unmarshalArrayOfObject(data.users, unmarshalUser)\n  };\n};\nconst unmarshalSetInstanceACLRulesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SetInstanceACLRulesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    rules: marshalling.unmarshalArrayOfObject(data.rules, unmarshalACLRule)\n  };\n};\nconst unmarshalSetInstanceSettingsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SetInstanceSettingsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    settings: marshalling.unmarshalArrayOfObject(data.settings, unmarshalInstanceSetting)\n  };\n};\nconst marshalACLRuleRequest = (request, defaults) => ({\n  description: request.description,\n  ip: request.ip\n});\nconst marshalAddInstanceACLRulesRequest = (request, defaults) => ({\n  rules: request.rules.map((elt) => marshalACLRuleRequest(elt))\n});\nconst marshalInstanceSetting = (request, defaults) => ({\n  name: request.name,\n  value: request.value\n});\nconst marshalAddInstanceSettingsRequest = (request, defaults) => ({\n  settings: request.settings.map((elt) => marshalInstanceSetting(elt))\n});\nconst marshalCloneInstanceRequest = (request, defaults) => ({\n  name: request.name,\n  node_type: request.nodeType\n});\nconst marshalCreateDatabaseRequest = (request, defaults) => ({\n  name: request.name\n});\nconst marshalEndpointSpecPrivateNetworkIpamConfig = (request, defaults) => ({});\nconst marshalEndpointSpecLoadBalancer = (request, defaults) => ({});\nconst marshalEndpointSpecPrivateNetwork = (request, defaults) => ({\n  private_network_id: request.privateNetworkId,\n  ...marshalling.resolveOneOf([\n    { param: \"service_ip\", value: request.serviceIp },\n    {\n      param: \"ipam_config\",\n      value: request.ipamConfig !== void 0 ? marshalEndpointSpecPrivateNetworkIpamConfig(\n        request.ipamConfig\n      ) : void 0\n    }\n  ])\n});\nconst marshalEndpointSpec = (request, defaults) => ({\n  ...marshalling.resolveOneOf([\n    {\n      param: \"load_balancer\",\n      value: request.loadBalancer !== void 0 ? marshalEndpointSpecLoadBalancer(request.loadBalancer) : void 0\n    },\n    {\n      param: \"private_network\",\n      value: request.privateNetwork !== void 0 ? marshalEndpointSpecPrivateNetwork(request.privateNetwork) : void 0\n    }\n  ])\n});\nconst marshalCreateEndpointRequest = (request, defaults) => ({\n  endpoint_spec: request.endpointSpec !== void 0 ? marshalEndpointSpec(request.endpointSpec) : void 0\n});\nconst marshalCreateInstanceFromSnapshotRequest = (request, defaults) => ({\n  instance_name: request.instanceName,\n  is_ha_cluster: request.isHaCluster,\n  node_type: request.nodeType\n});\nconst marshalCreateInstanceRequest = (request, defaults) => ({\n  backup_same_region: request.backupSameRegion,\n  disable_backup: request.disableBackup,\n  engine: request.engine,\n  init_endpoints: request.initEndpoints !== void 0 ? request.initEndpoints.map((elt) => marshalEndpointSpec(elt)) : void 0,\n  init_settings: request.initSettings !== void 0 ? request.initSettings.map((elt) => marshalInstanceSetting(elt)) : void 0,\n  is_ha_cluster: request.isHaCluster,\n  name: request.name || randomName(\"ins\"),\n  node_type: request.nodeType,\n  password: request.password,\n  tags: request.tags,\n  user_name: request.userName,\n  volume_size: request.volumeSize,\n  volume_type: request.volumeType,\n  ...marshalling.resolveOneOf([\n    {\n      default: defaults.defaultOrganizationId,\n      param: \"organization_id\",\n      value: request.organizationId\n    },\n    {\n      default: defaults.defaultProjectId,\n      param: \"project_id\",\n      value: request.projectId\n    }\n  ])\n});\nconst marshalReadReplicaEndpointSpecPrivateNetworkIpamConfig = (request, defaults) => ({});\nconst marshalReadReplicaEndpointSpecDirectAccess = (request, defaults) => ({});\nconst marshalReadReplicaEndpointSpecPrivateNetwork = (request, defaults) => ({\n  private_network_id: request.privateNetworkId,\n  ...marshalling.resolveOneOf([\n    { param: \"service_ip\", value: request.serviceIp },\n    {\n      param: \"ipam_config\",\n      value: request.ipamConfig !== void 0 ? marshalReadReplicaEndpointSpecPrivateNetworkIpamConfig(\n        request.ipamConfig\n      ) : void 0\n    }\n  ])\n});\nconst marshalReadReplicaEndpointSpec = (request, defaults) => ({\n  ...marshalling.resolveOneOf([\n    {\n      param: \"direct_access\",\n      value: request.directAccess !== void 0 ? marshalReadReplicaEndpointSpecDirectAccess(\n        request.directAccess\n      ) : void 0\n    },\n    {\n      param: \"private_network\",\n      value: request.privateNetwork !== void 0 ? marshalReadReplicaEndpointSpecPrivateNetwork(\n        request.privateNetwork\n      ) : void 0\n    }\n  ])\n});\nconst marshalCreateReadReplicaEndpointRequest = (request, defaults) => ({\n  endpoint_spec: request.endpointSpec.map(\n    (elt) => marshalReadReplicaEndpointSpec(elt)\n  )\n});\nconst marshalCreateReadReplicaRequest = (request, defaults) => ({\n  endpoint_spec: request.endpointSpec !== void 0 ? request.endpointSpec.map(\n    (elt) => marshalReadReplicaEndpointSpec(elt)\n  ) : void 0,\n  instance_id: request.instanceId,\n  same_zone: request.sameZone\n});\nconst marshalCreateSnapshotRequest = (request, defaults) => ({\n  expires_at: request.expiresAt,\n  name: request.name || randomName(\"snp\")\n});\nconst marshalCreateUserRequest = (request, defaults) => ({\n  is_admin: request.isAdmin,\n  name: request.name,\n  password: request.password\n});\nconst marshalDeleteInstanceACLRulesRequest = (request, defaults) => ({\n  acl_rule_ips: request.aclRuleIps\n});\nconst marshalDeleteInstanceSettingsRequest = (request, defaults) => ({\n  setting_names: request.settingNames\n});\nconst marshalMigrateEndpointRequest = (request, defaults) => ({\n  instance_id: request.instanceId\n});\nconst marshalPurgeInstanceLogsRequest = (request, defaults) => ({\n  log_name: request.logName\n});\nconst marshalSetInstanceACLRulesRequest = (request, defaults) => ({\n  rules: request.rules.map((elt) => marshalACLRuleRequest(elt))\n});\nconst marshalSetInstanceSettingsRequest = (request, defaults) => ({\n  settings: request.settings.map((elt) => marshalInstanceSetting(elt))\n});\nconst marshalSetPrivilegeRequest = (request, defaults) => ({\n  database_name: request.databaseName,\n  permission: request.permission,\n  user_name: request.userName\n});\nconst marshalLogsPolicy = (request, defaults) => ({\n  max_age_retention: request.maxAgeRetention,\n  total_disk_retention: request.totalDiskRetention\n});\nconst marshalUpdateInstanceRequest = (request, defaults) => ({\n  backup_same_region: request.backupSameRegion,\n  backup_schedule_frequency: request.backupScheduleFrequency,\n  backup_schedule_retention: request.backupScheduleRetention,\n  backup_schedule_start_hour: request.backupScheduleStartHour,\n  is_backup_schedule_disabled: request.isBackupScheduleDisabled,\n  logs_policy: request.logsPolicy !== void 0 ? marshalLogsPolicy(request.logsPolicy) : void 0,\n  name: request.name,\n  tags: request.tags\n});\nconst marshalUpdateSnapshotRequest = (request, defaults) => ({\n  expires_at: request.expiresAt,\n  name: request.name\n});\nconst marshalUpdateUserRequest = (request, defaults) => ({\n  is_admin: request.isAdmin,\n  password: request.password\n});\nconst marshalUpgradeInstanceRequestMajorUpgradeWorkflow = (request, defaults) => ({\n  upgradable_version_id: request.upgradableVersionId,\n  with_endpoints: request.withEndpoints\n});\nconst marshalUpgradeInstanceRequest = (request, defaults) => ({\n  ...marshalling.resolveOneOf([\n    { param: \"node_type\", value: request.nodeType },\n    { param: \"enable_ha\", value: request.enableHa },\n    { param: \"volume_size\", value: request.volumeSize },\n    { param: \"volume_type\", value: request.volumeType },\n    { param: \"upgradable_version_id\", value: request.upgradableVersionId },\n    {\n      param: \"major_upgrade_workflow\",\n      value: request.majorUpgradeWorkflow !== void 0 ? marshalUpgradeInstanceRequestMajorUpgradeWorkflow(\n        request.majorUpgradeWorkflow\n      ) : void 0\n    }\n  ])\n});\nexports.marshalAddInstanceACLRulesRequest = marshalAddInstanceACLRulesRequest;\nexports.marshalAddInstanceSettingsRequest = marshalAddInstanceSettingsRequest;\nexports.marshalCloneInstanceRequest = marshalCloneInstanceRequest;\nexports.marshalCreateDatabaseRequest = marshalCreateDatabaseRequest;\nexports.marshalCreateEndpointRequest = marshalCreateEndpointRequest;\nexports.marshalCreateInstanceFromSnapshotRequest = marshalCreateInstanceFromSnapshotRequest;\nexports.marshalCreateInstanceRequest = marshalCreateInstanceRequest;\nexports.marshalCreateReadReplicaEndpointRequest = marshalCreateReadReplicaEndpointRequest;\nexports.marshalCreateReadReplicaRequest = marshalCreateReadReplicaRequest;\nexports.marshalCreateSnapshotRequest = marshalCreateSnapshotRequest;\nexports.marshalCreateUserRequest = marshalCreateUserRequest;\nexports.marshalDeleteInstanceACLRulesRequest = marshalDeleteInstanceACLRulesRequest;\nexports.marshalDeleteInstanceSettingsRequest = marshalDeleteInstanceSettingsRequest;\nexports.marshalMigrateEndpointRequest = marshalMigrateEndpointRequest;\nexports.marshalPurgeInstanceLogsRequest = marshalPurgeInstanceLogsRequest;\nexports.marshalSetInstanceACLRulesRequest = marshalSetInstanceACLRulesRequest;\nexports.marshalSetInstanceSettingsRequest = marshalSetInstanceSettingsRequest;\nexports.marshalSetPrivilegeRequest = marshalSetPrivilegeRequest;\nexports.marshalUpdateInstanceRequest = marshalUpdateInstanceRequest;\nexports.marshalUpdateSnapshotRequest = marshalUpdateSnapshotRequest;\nexports.marshalUpdateUserRequest = marshalUpdateUserRequest;\nexports.marshalUpgradeInstanceRequest = marshalUpgradeInstanceRequest;\nexports.unmarshalAddInstanceACLRulesResponse = unmarshalAddInstanceACLRulesResponse;\nexports.unmarshalAddInstanceSettingsResponse = unmarshalAddInstanceSettingsResponse;\nexports.unmarshalDatabase = unmarshalDatabase;\nexports.unmarshalDeleteInstanceACLRulesResponse = unmarshalDeleteInstanceACLRulesResponse;\nexports.unmarshalDeleteInstanceSettingsResponse = unmarshalDeleteInstanceSettingsResponse;\nexports.unmarshalEndpoint = unmarshalEndpoint;\nexports.unmarshalInstance = unmarshalInstance;\nexports.unmarshalInstanceLog = unmarshalInstanceLog;\nexports.unmarshalInstanceMetrics = unmarshalInstanceMetrics;\nexports.unmarshalListDatabaseEnginesResponse = unmarshalListDatabaseEnginesResponse;\nexports.unmarshalListDatabasesResponse = unmarshalListDatabasesResponse;\nexports.unmarshalListInstanceACLRulesResponse = unmarshalListInstanceACLRulesResponse;\nexports.unmarshalListInstanceLogsDetailsResponse = unmarshalListInstanceLogsDetailsResponse;\nexports.unmarshalListInstanceLogsResponse = unmarshalListInstanceLogsResponse;\nexports.unmarshalListInstancesResponse = unmarshalListInstancesResponse;\nexports.unmarshalListNodeTypesResponse = unmarshalListNodeTypesResponse;\nexports.unmarshalListPrivilegesResponse = unmarshalListPrivilegesResponse;\nexports.unmarshalListSnapshotsResponse = unmarshalListSnapshotsResponse;\nexports.unmarshalListUsersResponse = unmarshalListUsersResponse;\nexports.unmarshalMaintenance = unmarshalMaintenance;\nexports.unmarshalPrivilege = unmarshalPrivilege;\nexports.unmarshalReadReplica = unmarshalReadReplica;\nexports.unmarshalSetInstanceACLRulesResponse = unmarshalSetInstanceACLRulesResponse;\nexports.unmarshalSetInstanceSettingsResponse = unmarshalSetInstanceSettingsResponse;\nexports.unmarshalSnapshot = unmarshalSnapshot;\nexports.unmarshalUser = unmarshalUser;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst UpdateInstanceRequest = {\n  backupScheduleStartHour: {\n    lessThanOrEqual: 23\n  }\n};\nexports.UpdateInstanceRequest = UpdateInstanceRequest;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index_gen = require(\"./v2beta1/index.gen.cjs\");\nexports.v2beta1 = index_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst intervalRetrier = require(\"../../../internal/async/interval-retrier.cjs\");\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass API extends api.API {\n  pageOfListDNSZones = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/domain/v2beta1/dns-zones`,\n      urlParams: marshalling.urlParams(\n        [\"created_after\", request.createdAfter],\n        [\"created_before\", request.createdBefore],\n        [\"dns_zone\", request.dnsZone],\n        [\"dns_zones\", request.dnsZones],\n        [\"domain\", request.domain],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId],\n        [\"updated_after\", request.updatedAfter],\n        [\"updated_before\", request.updatedBefore]\n      )\n    },\n    marshalling_gen.unmarshalListDNSZonesResponse\n  );\n  /**\n   * List DNS zones. Retrieve the list of DNS zones you can manage and filter\n   * DNS zones associated with specific domain names.\n   *\n   * @param request - The request {@link ListDNSZonesRequest}\n   * @returns A Promise of ListDNSZonesResponse\n   */\n  listDNSZones = (request) => resourcePaginator.enrichForPagination(\"dnsZones\", this.pageOfListDNSZones, request);\n  /**\n   * Create a DNS zone. Create a new DNS zone specified by the domain name, the\n   * subdomain and the Project ID.\n   *\n   * @param request - The request {@link CreateDNSZoneRequest}\n   * @returns A Promise of DNSZone\n   */\n  createDNSZone = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateDNSZoneRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/domain/v2beta1/dns-zones`\n    },\n    marshalling_gen.unmarshalDNSZone\n  );\n  /**\n   * Update a DNS zone. Update the name and/or the Organizations for a DNS zone.\n   *\n   * @param request - The request {@link UpdateDNSZoneRequest}\n   * @returns A Promise of DNSZone\n   */\n  updateDNSZone = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateDNSZoneRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/domain/v2beta1/dns-zones/${marshalling.validatePathParam(\"dnsZone\", request.dnsZone)}`\n    },\n    marshalling_gen.unmarshalDNSZone\n  );\n  /**\n   * Clone a DNS zone. Clone an existing DNS zone with all its records into a\n   * new DNS zone.\n   *\n   * @param request - The request {@link CloneDNSZoneRequest}\n   * @returns A Promise of DNSZone\n   */\n  cloneDNSZone = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCloneDNSZoneRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/domain/v2beta1/dns-zones/${marshalling.validatePathParam(\"dnsZone\", request.dnsZone)}/clone`\n    },\n    marshalling_gen.unmarshalDNSZone\n  );\n  /**\n   * Delete a DNS zone. Delete a DNS zone and all its records.\n   *\n   * @param request - The request {@link DeleteDNSZoneRequest}\n   * @returns A Promise of DeleteDNSZoneResponse\n   */\n  deleteDNSZone = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/domain/v2beta1/dns-zones/${marshalling.validatePathParam(\"dnsZone\", request.dnsZone)}`,\n      urlParams: marshalling.urlParams([\n        \"project_id\",\n        request.projectId ?? this.client.settings.defaultProjectId\n      ])\n    },\n    marshalling_gen.unmarshalDeleteDNSZoneResponse\n  );\n  pageOfListDNSZoneRecords = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/domain/v2beta1/dns-zones/${marshalling.validatePathParam(\"dnsZone\", request.dnsZone)}/records`,\n      urlParams: marshalling.urlParams(\n        [\"id\", request.id],\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId],\n        [\"type\", request.type]\n      )\n    },\n    marshalling_gen.unmarshalListDNSZoneRecordsResponse\n  );\n  /**\n   * List records within a DNS zone. Retrieve a list of DNS records within a DNS\n   * zone that has default name servers. You can filter records by type and\n   * name.\n   *\n   * @param request - The request {@link ListDNSZoneRecordsRequest}\n   * @returns A Promise of ListDNSZoneRecordsResponse\n   */\n  listDNSZoneRecords = (request) => resourcePaginator.enrichForPagination(\"records\", this.pageOfListDNSZoneRecords, request);\n  /**\n   * Update records within a DNS zone. Update records within a DNS zone that has\n   * default name servers and perform several actions on your records.\n   *\n   * Actions include:\n   *\n   * - Add: allows you to add a new record or add a new IP to an existing A\n   *   record, for example\n   * - Set: allows you to edit a record or edit an IP from an existing A record,\n   *   for example\n   * - Delete: allows you to delete a record or delete an IP from an existing A\n   *   record, for example\n   * - Clear: allows you to delete all records from a DNS zone\n   *\n   * All edits will be versioned.\n   *\n   * @param request - The request {@link UpdateDNSZoneRecordsRequest}\n   * @returns A Promise of UpdateDNSZoneRecordsResponse\n   */\n  updateDNSZoneRecords = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateDNSZoneRecordsRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/domain/v2beta1/dns-zones/${marshalling.validatePathParam(\"dnsZone\", request.dnsZone)}/records`\n    },\n    marshalling_gen.unmarshalUpdateDNSZoneRecordsResponse\n  );\n  /**\n   * List name servers within a DNS zone. Retrieve a list of name servers within\n   * a DNS zone and their optional glue records.\n   *\n   * @param request - The request {@link ListDNSZoneNameserversRequest}\n   * @returns A Promise of ListDNSZoneNameserversResponse\n   */\n  listDNSZoneNameservers = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/domain/v2beta1/dns-zones/${marshalling.validatePathParam(\"dnsZone\", request.dnsZone)}/nameservers`,\n      urlParams: marshalling.urlParams([\"project_id\", request.projectId])\n    },\n    marshalling_gen.unmarshalListDNSZoneNameserversResponse\n  );\n  /**\n   * Update name servers within a DNS zone. Update name servers within a DNS\n   * zone and set optional glue records.\n   *\n   * @param request - The request {@link UpdateDNSZoneNameserversRequest}\n   * @returns A Promise of UpdateDNSZoneNameserversResponse\n   */\n  updateDNSZoneNameservers = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateDNSZoneNameserversRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/domain/v2beta1/dns-zones/${marshalling.validatePathParam(\"dnsZone\", request.dnsZone)}/nameservers`\n    },\n    marshalling_gen.unmarshalUpdateDNSZoneNameserversResponse\n  );\n  /**\n   * Clear records within a DNS zone. Delete all records within a DNS zone that\n   * has default name servers.<br/> All edits will be versioned.\n   *\n   * @param request - The request {@link ClearDNSZoneRecordsRequest}\n   * @returns A Promise of ClearDNSZoneRecordsResponse\n   */\n  clearDNSZoneRecords = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/domain/v2beta1/dns-zones/${marshalling.validatePathParam(\"dnsZone\", request.dnsZone)}/records`\n    },\n    marshalling_gen.unmarshalClearDNSZoneRecordsResponse\n  );\n  /**\n   * Export a raw DNS zone. Export a DNS zone with default name servers, in a\n   * specific format.\n   *\n   * @param request - The request {@link ExportRawDNSZoneRequest}\n   * @returns A Promise of Blob\n   */\n  exportRawDNSZone = (request) => this.client.fetch({\n    method: \"GET\",\n    path: `/domain/v2beta1/dns-zones/${marshalling.validatePathParam(\"dnsZone\", request.dnsZone)}/raw`,\n    urlParams: marshalling.urlParams([\"dl\", 1], [\"format\", request.format]),\n    responseType: \"blob\"\n  });\n  /**\n   * Import a raw DNS zone. Import and replace the format of records from a\n   * given provider, with default name servers.\n   *\n   * @param request - The request {@link ImportRawDNSZoneRequest}\n   * @returns A Promise of ImportRawDNSZoneResponse\n   */\n  importRawDNSZone = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalImportRawDNSZoneRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/domain/v2beta1/dns-zones/${marshalling.validatePathParam(\"dnsZone\", request.dnsZone)}/raw`\n    },\n    marshalling_gen.unmarshalImportRawDNSZoneResponse\n  );\n  /**\n   * Import a DNS zone from another provider. Import and replace the format of\n   * records from a given provider, with default name servers.\n   *\n   * @param request - The request {@link ImportProviderDNSZoneRequest}\n   * @returns A Promise of ImportProviderDNSZoneResponse\n   */\n  importProviderDNSZone = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalImportProviderDNSZoneRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/domain/v2beta1/dns-zones/${marshalling.validatePathParam(\"dnsZone\", request.dnsZone)}/import-provider`\n    },\n    marshalling_gen.unmarshalImportProviderDNSZoneResponse\n  );\n  /**\n   * Refresh a DNS zone. Refresh an SOA DNS zone to reload the records in the\n   * DNS zone and update the SOA serial. You can recreate the given DNS zone and\n   * its sub DNS zone if needed.\n   *\n   * @param request - The request {@link RefreshDNSZoneRequest}\n   * @returns A Promise of RefreshDNSZoneResponse\n   */\n  refreshDNSZone = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalRefreshDNSZoneRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/domain/v2beta1/dns-zones/${marshalling.validatePathParam(\"dnsZone\", request.dnsZone)}/refresh`\n    },\n    marshalling_gen.unmarshalRefreshDNSZoneResponse\n  );\n  pageOfListDNSZoneVersions = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/domain/v2beta1/dns-zones/${marshalling.validatePathParam(\"dnsZone\", request.dnsZone)}/versions`,\n      urlParams: marshalling.urlParams(\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListDNSZoneVersionsResponse\n  );\n  /**\n   * List versions of a DNS zone. Retrieve a list of a DNS zone's versions.<br/>\n   * The maximum version count is 100. If the count reaches this limit, the\n   * oldest version will be deleted after each new modification.\n   *\n   * @param request - The request {@link ListDNSZoneVersionsRequest}\n   * @returns A Promise of ListDNSZoneVersionsResponse\n   */\n  listDNSZoneVersions = (request) => resourcePaginator.enrichForPagination(\"versions\", this.pageOfListDNSZoneVersions, request);\n  pageOfListDNSZoneVersionRecords = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/domain/v2beta1/dns-zones/version/${marshalling.validatePathParam(\"dnsZoneVersionId\", request.dnsZoneVersionId)}`,\n      urlParams: marshalling.urlParams(\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListDNSZoneVersionRecordsResponse\n  );\n  /**\n   * List records from a given version of a specific DNS zone. Retrieve a list\n   * of records from a specific DNS zone version.\n   *\n   * @param request - The request {@link ListDNSZoneVersionRecordsRequest}\n   * @returns A Promise of ListDNSZoneVersionRecordsResponse\n   */\n  listDNSZoneVersionRecords = (request) => resourcePaginator.enrichForPagination(\n    \"records\",\n    this.pageOfListDNSZoneVersionRecords,\n    request\n  );\n  /**\n   * Access differences from a specific DNS zone version. Access a previous DNS\n   * zone version to see the differences from another specific version.\n   *\n   * @param request - The request {@link GetDNSZoneVersionDiffRequest}\n   * @returns A Promise of GetDNSZoneVersionDiffResponse\n   */\n  getDNSZoneVersionDiff = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/domain/v2beta1/dns-zones/version/${marshalling.validatePathParam(\"dnsZoneVersionId\", request.dnsZoneVersionId)}/diff`\n    },\n    marshalling_gen.unmarshalGetDNSZoneVersionDiffResponse\n  );\n  /**\n   * Restore a DNS zone version. Restore and activate a version of a specific\n   * DNS zone.\n   *\n   * @param request - The request {@link RestoreDNSZoneVersionRequest}\n   * @returns A Promise of RestoreDNSZoneVersionResponse\n   */\n  restoreDNSZoneVersion = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/domain/v2beta1/dns-zones/version/${marshalling.validatePathParam(\"dnsZoneVersionId\", request.dnsZoneVersionId)}/restore`\n    },\n    marshalling_gen.unmarshalRestoreDNSZoneVersionResponse\n  );\n  /**\n   * Get a DNS zone's TLS certificate. Get the DNS zone's TLS certificate. If\n   * you do not have a certificate, the ouptut returns `no certificate found`.\n   *\n   * @param request - The request {@link GetSSLCertificateRequest}\n   * @returns A Promise of SSLCertificate\n   */\n  getSSLCertificate = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/domain/v2beta1/ssl-certificates/${marshalling.validatePathParam(\"dnsZone\", request.dnsZone)}`\n    },\n    marshalling_gen.unmarshalSSLCertificate\n  );\n  /**\n   * Waits for {@link SSLCertificate} to be in a final state.\n   *\n   * @param request - The request {@link GetSSLCertificateRequest}\n   * @param options - The waiting options\n   * @returns A Promise of SSLCertificate\n   */\n  waitForSSLCertificate = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(\n      !content_gen.SSL_CERTIFICATE_TRANSIENT_STATUSES.includes(res.status)\n    )),\n    this.getSSLCertificate,\n    request,\n    options\n  );\n  /**\n   * Create or get the DNS zone's TLS certificate. Create a new TLS certificate\n   * or retrieve information about an existing TLS certificate.\n   *\n   * @param request - The request {@link CreateSSLCertificateRequest}\n   * @returns A Promise of SSLCertificate\n   */\n  createSSLCertificate = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateSSLCertificateRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/domain/v2beta1/ssl-certificates`\n    },\n    marshalling_gen.unmarshalSSLCertificate\n  );\n  pageOfListSSLCertificates = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/domain/v2beta1/ssl-certificates`,\n      urlParams: marshalling.urlParams(\n        [\"dns_zone\", request.dnsZone],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListSSLCertificatesResponse\n  );\n  /**\n   * List a user's TLS certificates. List all the TLS certificates a user has\n   * created, specified by the user's Project ID and the DNS zone.\n   *\n   * @param request - The request {@link ListSSLCertificatesRequest}\n   * @returns A Promise of ListSSLCertificatesResponse\n   */\n  listSSLCertificates = (request) => resourcePaginator.enrichForPagination(\"certificates\", this.pageOfListSSLCertificates, request);\n  /**\n   * Delete a TLS certificate. Delete an existing TLS certificate specified by\n   * its DNS zone. Deleting a TLS certificate is permanent and cannot be\n   * undone.\n   *\n   * @param request - The request {@link DeleteSSLCertificateRequest}\n   * @returns A Promise of DeleteSSLCertificateResponse\n   */\n  deleteSSLCertificate = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/domain/v2beta1/ssl-certificates/${marshalling.validatePathParam(\"dnsZone\", request.dnsZone)}`\n    },\n    marshalling_gen.unmarshalDeleteSSLCertificateResponse\n  );\n  /**\n   * Get the DNS zone's TSIG key. Retrieve information about the TSIG key of a\n   * given DNS zone to allow AXFR requests.\n   *\n   * @param request - The request {@link GetDNSZoneTsigKeyRequest}\n   * @returns A Promise of GetDNSZoneTsigKeyResponse\n   */\n  getDNSZoneTsigKey = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/domain/v2beta1/dns-zones/${marshalling.validatePathParam(\"dnsZone\", request.dnsZone)}/tsig-key`\n    },\n    marshalling_gen.unmarshalGetDNSZoneTsigKeyResponse\n  );\n  /**\n   * Delete the DNS zone's TSIG key. Delete an existing TSIG key specified by\n   * its DNS zone. Deleting a TSIG key is permanent and cannot be undone.\n   *\n   * @param request - The request {@link DeleteDNSZoneTsigKeyRequest}\n   */\n  deleteDNSZoneTsigKey = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/domain/v2beta1/dns-zones/${marshalling.validatePathParam(\"dnsZone\", request.dnsZone)}/tsig-key`\n  });\n}\nclass RegistrarAPI extends api.API {\n  pageOfListTasks = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/domain/v2beta1/tasks`,\n      urlParams: marshalling.urlParams(\n        [\"domain\", request.domain],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId],\n        [\"statuses\", request.statuses],\n        [\"types\", request.types]\n      )\n    },\n    marshalling_gen.unmarshalListTasksResponse\n  );\n  /**\n   * List tasks. List all operations performed on the account. You can filter\n   * the list of tasks by domain name.\n   *\n   * @param request - The request {@link RegistrarApiListTasksRequest}\n   * @returns A Promise of ListTasksResponse\n   */\n  listTasks = (request = {}) => resourcePaginator.enrichForPagination(\"tasks\", this.pageOfListTasks, request);\n  /**\n   * Purchase domains. Request the registration of domain names. You can provide\n   * a domain's already existing contact or a new contact.\n   *\n   * @param request - The request {@link RegistrarApiBuyDomainsRequest}\n   * @returns A Promise of OrderResponse\n   */\n  buyDomains = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalRegistrarApiBuyDomainsRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/domain/v2beta1/buy-domains`\n    },\n    marshalling_gen.unmarshalOrderResponse\n  );\n  /**\n   * Renew domains. Request the renewal of one or more domain names.\n   *\n   * @param request - The request {@link RegistrarApiRenewDomainsRequest}\n   * @returns A Promise of OrderResponse\n   */\n  renewDomains = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalRegistrarApiRenewDomainsRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/domain/v2beta1/renew-domains`\n    },\n    marshalling_gen.unmarshalOrderResponse\n  );\n  /**\n   * Transfer a domain. Request the transfer of a domain from another registrar\n   * to Scaleway Domains and DNS.\n   *\n   * @param request - The request {@link RegistrarApiTransferInDomainRequest}\n   * @returns A Promise of OrderResponse\n   */\n  transferInDomain = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalRegistrarApiTransferInDomainRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/domain/v2beta1/domains/transfer-domains`\n    },\n    marshalling_gen.unmarshalOrderResponse\n  );\n  /**\n   * Trade a domain's contact. Request to change a domain's contact owner.<br/>\n   * If you specify the `organization_id` of the domain's new owner, the contact\n   * will change from the current owner's Scaleway account to the new owner's\n   * Scaleway account.<br/> If the new owner's current contact information is\n   * not available, the first ever contact they have created for previous\n   * domains is taken into account to operate the change.<br/> If the new owner\n   * has never created a contact to register domains before, an error message\n   * displays.\n   *\n   * @param request - The request {@link RegistrarApiTradeDomainRequest}\n   * @returns A Promise of OrderResponse\n   */\n  tradeDomain = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalRegistrarApiTradeDomainRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/domain/v2beta1/domains/${marshalling.validatePathParam(\"domain\", request.domain)}/trade`\n    },\n    marshalling_gen.unmarshalOrderResponse\n  );\n  /**\n   * Register an external domain. Request the registration of an external domain\n   * name.\n   *\n   * @param request - The request\n   *   {@link RegistrarApiRegisterExternalDomainRequest}\n   * @returns A Promise of RegisterExternalDomainResponse\n   */\n  registerExternalDomain = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalRegistrarApiRegisterExternalDomainRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/domain/v2beta1/external-domains`\n    },\n    marshalling_gen.unmarshalRegisterExternalDomainResponse\n  );\n  /**\n   * Delete an external domain. Delete an external domain name.\n   *\n   * @param request - The request {@link RegistrarApiDeleteExternalDomainRequest}\n   * @returns A Promise of DeleteExternalDomainResponse\n   */\n  deleteExternalDomain = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/domain/v2beta1/external-domains/${marshalling.validatePathParam(\"domain\", request.domain)}`\n    },\n    marshalling_gen.unmarshalDeleteExternalDomainResponse\n  );\n  /**\n   * Check if contacts are compatible with a domain or a TLD. Check whether\n   * contacts are compatible with a domain or a TLD. If contacts are not\n   * compatible with either the domain or the TLD, the information that needs to\n   * be corrected is returned.\n   *\n   * @param request - The request\n   *   {@link RegistrarApiCheckContactsCompatibilityRequest}\n   * @returns A Promise of CheckContactsCompatibilityResponse\n   */\n  checkContactsCompatibility = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalRegistrarApiCheckContactsCompatibilityRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/domain/v2beta1/check-contacts-compatibility`\n    },\n    marshalling_gen.unmarshalCheckContactsCompatibilityResponse\n  );\n  pageOfListContacts = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/domain/v2beta1/contacts`,\n      urlParams: marshalling.urlParams(\n        [\"domain\", request.domain],\n        [\"email_status\", request.emailStatus],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId],\n        [\"role\", request.role]\n      )\n    },\n    marshalling_gen.unmarshalListContactsResponse\n  );\n  /**\n   * List contacts. Retrieve the list of contacts and their associated domains\n   * and roles. You can filter the list by domain name.\n   *\n   * @param request - The request {@link RegistrarApiListContactsRequest}\n   * @returns A Promise of ListContactsResponse\n   */\n  listContacts = (request = {}) => resourcePaginator.enrichForPagination(\"contacts\", this.pageOfListContacts, request);\n  /**\n   * Get a contact. Retrieve a contact's details from the registrar using the\n   * given contact's ID.\n   *\n   * @param request - The request {@link RegistrarApiGetContactRequest}\n   * @returns A Promise of Contact\n   */\n  getContact = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/domain/v2beta1/contacts/${marshalling.validatePathParam(\"contactId\", request.contactId)}`\n    },\n    marshalling_gen.unmarshalContact\n  );\n  /**\n   * Update contact. Edit the contact's information.\n   *\n   * @param request - The request {@link RegistrarApiUpdateContactRequest}\n   * @returns A Promise of Contact\n   */\n  updateContact = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalRegistrarApiUpdateContactRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/domain/v2beta1/contacts/${marshalling.validatePathParam(\"contactId\", request.contactId)}`\n    },\n    marshalling_gen.unmarshalContact\n  );\n  pageOfListDomains = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/domain/v2beta1/domains`,\n      urlParams: marshalling.urlParams(\n        [\"domain\", request.domain],\n        [\"is_external\", request.isExternal],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId],\n        [\"registrar\", request.registrar],\n        [\"status\", request.status]\n      )\n    },\n    marshalling_gen.unmarshalListDomainsResponse\n  );\n  /**\n   * List domains. Retrieve the list of domains you own.\n   *\n   * @param request - The request {@link RegistrarApiListDomainsRequest}\n   * @returns A Promise of ListDomainsResponse\n   */\n  listDomains = (request = {}) => resourcePaginator.enrichForPagination(\"domains\", this.pageOfListDomains, request);\n  pageOfListRenewableDomains = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/domain/v2beta1/renewable-domains`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListRenewableDomainsResponse\n  );\n  /**\n   * List domains that can be renewed. Retrieve the list of domains you own that\n   * can be renewed. You can also see the maximum renewal duration in years for\n   * your domains that are renewable.\n   *\n   * @param request - The request {@link RegistrarApiListRenewableDomainsRequest}\n   * @returns A Promise of ListRenewableDomainsResponse\n   */\n  listRenewableDomains = (request = {}) => resourcePaginator.enrichForPagination(\"domains\", this.pageOfListRenewableDomains, request);\n  /**\n   * Get domain. Retrieve a specific domain and display the domain's\n   * information.\n   *\n   * @param request - The request {@link RegistrarApiGetDomainRequest}\n   * @returns A Promise of Domain\n   */\n  getDomain = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/domain/v2beta1/domains/${marshalling.validatePathParam(\"domain\", request.domain)}`\n    },\n    marshalling_gen.unmarshalDomain\n  );\n  /**\n   * Waits for {@link Domain} to be in a final state.\n   *\n   * @param request - The request {@link RegistrarApiGetDomainRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Domain\n   */\n  waitForDomain = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.DOMAIN_TRANSIENT_STATUSES.includes(res.status))),\n    this.getDomain,\n    request,\n    options\n  );\n  /**\n   * Update a domain's contacts. Update contacts for a specific domain or create\n   * a new contact.<br/> If you add the same contact for multiple roles (owner,\n   * administrative, technical), only one ID will be created and used for all of\n   * the roles.\n   *\n   * @param request - The request {@link RegistrarApiUpdateDomainRequest}\n   * @returns A Promise of Domain\n   */\n  updateDomain = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalRegistrarApiUpdateDomainRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/domain/v2beta1/domains/${marshalling.validatePathParam(\"domain\", request.domain)}`\n    },\n    marshalling_gen.unmarshalDomain\n  );\n  /**\n   * Lock the transfer of a domain. Lock the transfer of a domain. This means\n   * that the domain cannot be transferred and the authorization code cannot be\n   * requested to your current registrar.\n   *\n   * @param request - The request {@link RegistrarApiLockDomainTransferRequest}\n   * @returns A Promise of Domain\n   */\n  lockDomainTransfer = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/domain/v2beta1/domains/${marshalling.validatePathParam(\"domain\", request.domain)}/lock-transfer`\n    },\n    marshalling_gen.unmarshalDomain\n  );\n  /**\n   * Unlock the transfer of a domain. Unlock the transfer of a domain. This\n   * means that the domain can be transferred and the authorization code can be\n   * requested to your current registrar.\n   *\n   * @param request - The request {@link RegistrarApiUnlockDomainTransferRequest}\n   * @returns A Promise of Domain\n   */\n  unlockDomainTransfer = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/domain/v2beta1/domains/${marshalling.validatePathParam(\"domain\", request.domain)}/unlock-transfer`\n    },\n    marshalling_gen.unmarshalDomain\n  );\n  /**\n   * Enable auto renew. Enable the `auto renew` feature for a domain. This means\n   * the domain will be automatically renewed before its expiry date.\n   *\n   * @param request - The request\n   *   {@link RegistrarApiEnableDomainAutoRenewRequest}\n   * @returns A Promise of Domain\n   */\n  enableDomainAutoRenew = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/domain/v2beta1/domains/${marshalling.validatePathParam(\"domain\", request.domain)}/enable-auto-renew`\n    },\n    marshalling_gen.unmarshalDomain\n  );\n  /**\n   * Disable auto renew. Disable the `auto renew` feature for a domain. This\n   * means the domain will not be renewed before its expiry date.\n   *\n   * @param request - The request\n   *   {@link RegistrarApiDisableDomainAutoRenewRequest}\n   * @returns A Promise of Domain\n   */\n  disableDomainAutoRenew = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/domain/v2beta1/domains/${marshalling.validatePathParam(\"domain\", request.domain)}/disable-auto-renew`\n    },\n    marshalling_gen.unmarshalDomain\n  );\n  /**\n   * Get a domain's authorization code. Retrieve the authorization code to\n   * tranfer an unlocked domain. The output returns an error if the domain is\n   * locked. Some TLDs may have a different procedure to retrieve the\n   * authorization code. In that case, the information displays in the message\n   * field.\n   *\n   * @param request - The request {@link RegistrarApiGetDomainAuthCodeRequest}\n   * @returns A Promise of GetDomainAuthCodeResponse\n   */\n  getDomainAuthCode = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/domain/v2beta1/domains/${marshalling.validatePathParam(\"domain\", request.domain)}/auth-code`\n    },\n    marshalling_gen.unmarshalGetDomainAuthCodeResponse\n  );\n  /**\n   * Update domain DNSSEC. If your domain uses another registrar and has the\n   * default Scaleway NS, you have to **update the DS record at your\n   * registrar**.\n   *\n   * @param request - The request {@link RegistrarApiEnableDomainDNSSECRequest}\n   * @returns A Promise of Domain\n   */\n  enableDomainDNSSEC = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalRegistrarApiEnableDomainDNSSECRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/domain/v2beta1/domains/${marshalling.validatePathParam(\"domain\", request.domain)}/enable-dnssec`\n    },\n    marshalling_gen.unmarshalDomain\n  );\n  /**\n   * Disable a domain's DNSSEC. Disable DNSSEC for a domain.\n   *\n   * @param request - The request {@link RegistrarApiDisableDomainDNSSECRequest}\n   * @returns A Promise of Domain\n   */\n  disableDomainDNSSEC = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/domain/v2beta1/domains/${marshalling.validatePathParam(\"domain\", request.domain)}/disable-dnssec`\n    },\n    marshalling_gen.unmarshalDomain\n  );\n  /**\n   * Search available domains. Search a domain or a maximum of 10 domains that\n   * are available.\n   *\n   * If the TLD list is empty or not set, the search returns the results from\n   * the most popular TLDs.\n   *\n   * @param request - The request\n   *   {@link RegistrarApiSearchAvailableDomainsRequest}\n   * @returns A Promise of SearchAvailableDomainsResponse\n   */\n  searchAvailableDomains = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/domain/v2beta1/search-domains`,\n      urlParams: marshalling.urlParams(\n        [\"domains\", request.domains],\n        [\"strict_search\", request.strictSearch],\n        [\"tlds\", request.tlds]\n      )\n    },\n    marshalling_gen.unmarshalSearchAvailableDomainsResponse\n  );\n  pageOfListTlds = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/domain/v2beta1/tlds`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"tlds\", request.tlds]\n      )\n    },\n    marshalling_gen.unmarshalListTldsResponse\n  );\n  /**\n   * List TLD offers. Retrieve the list of TLDs and offers associated with them.\n   *\n   * @param request - The request {@link RegistrarApiListTldsRequest}\n   * @returns A Promise of ListTldsResponse\n   */\n  listTlds = (request = {}) => resourcePaginator.enrichForPagination(\"tlds\", this.pageOfListTlds, request);\n  /**\n   * Create a hostname for a domain. Create a hostname for a domain with glue\n   * IPs.\n   *\n   * @param request - The request {@link RegistrarApiCreateDomainHostRequest}\n   * @returns A Promise of Host\n   */\n  createDomainHost = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalRegistrarApiCreateDomainHostRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/domain/v2beta1/domains/${marshalling.validatePathParam(\"domain\", request.domain)}/hosts`\n    },\n    marshalling_gen.unmarshalHost\n  );\n  pageOfListDomainHosts = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/domain/v2beta1/domains/${marshalling.validatePathParam(\"domain\", request.domain)}/hosts`,\n      urlParams: marshalling.urlParams(\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListDomainHostsResponse\n  );\n  /**\n   * List a domain's hostnames. List a domain's hostnames using their glue IPs.\n   *\n   * @param request - The request {@link RegistrarApiListDomainHostsRequest}\n   * @returns A Promise of ListDomainHostsResponse\n   */\n  listDomainHosts = (request) => resourcePaginator.enrichForPagination(\"hosts\", this.pageOfListDomainHosts, request);\n  /**\n   * Update a domain's hostname. Update a domain's hostname with glue IPs.\n   *\n   * @param request - The request {@link RegistrarApiUpdateDomainHostRequest}\n   * @returns A Promise of Host\n   */\n  updateDomainHost = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalRegistrarApiUpdateDomainHostRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/domain/v2beta1/domains/${marshalling.validatePathParam(\"domain\", request.domain)}/hosts/${marshalling.validatePathParam(\"name\", request.name)}`\n    },\n    marshalling_gen.unmarshalHost\n  );\n  /**\n   * Delete a domain's hostname.\n   *\n   * @param request - The request {@link RegistrarApiDeleteDomainHostRequest}\n   * @returns A Promise of Host\n   */\n  deleteDomainHost = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/domain/v2beta1/domains/${marshalling.validatePathParam(\"domain\", request.domain)}/hosts/${marshalling.validatePathParam(\"name\", request.name)}`\n    },\n    marshalling_gen.unmarshalHost\n  );\n}\nexports.API = API;\nexports.RegistrarAPI = RegistrarAPI;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst DNS_ZONE_TRANSIENT_STATUSES = [\"pending\"];\nconst DOMAIN_FEATURE_TRANSIENT_STATUSES = [\n  \"enabling\",\n  \"disabling\"\n];\nconst DOMAIN_REGISTRATION_STATUS_TRANSFER_TRANSIENT_STATUSES = [\"pending\", \"processing\"];\nconst DOMAIN_TRANSIENT_STATUSES = [\n  \"creating\",\n  \"renewing\",\n  \"xfering\",\n  \"expiring\",\n  \"updating\",\n  \"checking\",\n  \"deleting\"\n];\nconst HOST_TRANSIENT_STATUSES = [\"updating\", \"deleting\"];\nconst SSL_CERTIFICATE_TRANSIENT_STATUSES = [\n  \"pending\"\n];\nconst TASK_TRANSIENT_STATUSES = [\"pending\"];\nexports.DNS_ZONE_TRANSIENT_STATUSES = DNS_ZONE_TRANSIENT_STATUSES;\nexports.DOMAIN_FEATURE_TRANSIENT_STATUSES = DOMAIN_FEATURE_TRANSIENT_STATUSES;\nexports.DOMAIN_REGISTRATION_STATUS_TRANSFER_TRANSIENT_STATUSES = DOMAIN_REGISTRATION_STATUS_TRANSFER_TRANSIENT_STATUSES;\nexports.DOMAIN_TRANSIENT_STATUSES = DOMAIN_TRANSIENT_STATUSES;\nexports.HOST_TRANSIENT_STATUSES = HOST_TRANSIENT_STATUSES;\nexports.SSL_CERTIFICATE_TRANSIENT_STATUSES = SSL_CERTIFICATE_TRANSIENT_STATUSES;\nexports.TASK_TRANSIENT_STATUSES = TASK_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nexports.API = api_gen.API;\nexports.RegistrarAPI = api_gen.RegistrarAPI;\nexports.DNS_ZONE_TRANSIENT_STATUSES = content_gen.DNS_ZONE_TRANSIENT_STATUSES;\nexports.DOMAIN_FEATURE_TRANSIENT_STATUSES = content_gen.DOMAIN_FEATURE_TRANSIENT_STATUSES;\nexports.DOMAIN_REGISTRATION_STATUS_TRANSFER_TRANSIENT_STATUSES = content_gen.DOMAIN_REGISTRATION_STATUS_TRANSFER_TRANSIENT_STATUSES;\nexports.DOMAIN_TRANSIENT_STATUSES = content_gen.DOMAIN_TRANSIENT_STATUSES;\nexports.HOST_TRANSIENT_STATUSES = content_gen.HOST_TRANSIENT_STATUSES;\nexports.SSL_CERTIFICATE_TRANSIENT_STATUSES = content_gen.SSL_CERTIFICATE_TRANSIENT_STATUSES;\nexports.TASK_TRANSIENT_STATUSES = content_gen.TASK_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst json = require(\"../../../helpers/json.cjs\");\nconst customMarshalling = require(\"../../../scw/custom-marshalling.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nconst unmarshalContactExtensionFRAssociationInfo = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ContactExtensionFRAssociationInfo' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    publicationJo: marshalling.unmarshalDate(data.publication_jo),\n    publicationJoPage: data.publication_jo_page\n  };\n};\nconst unmarshalContactExtensionFRCodeAuthAfnicInfo = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ContactExtensionFRCodeAuthAfnicInfo' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    codeAuthAfnic: data.code_auth_afnic\n  };\n};\nconst unmarshalContactExtensionFRDunsInfo = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ContactExtensionFRDunsInfo' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    dunsId: data.duns_id,\n    localId: data.local_id\n  };\n};\nconst unmarshalContactExtensionFRIndividualInfo = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ContactExtensionFRIndividualInfo' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    whoisOptIn: data.whois_opt_in\n  };\n};\nconst unmarshalContactExtensionFRTrademarkInfo = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ContactExtensionFRTrademarkInfo' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    trademarkInpi: data.trademark_inpi\n  };\n};\nconst unmarshalContactExtensionEU = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ContactExtensionEU' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    europeanCitizenship: data.european_citizenship\n  };\n};\nconst unmarshalContactExtensionFR = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ContactExtensionFR' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    associationInfo: data.association_info ? unmarshalContactExtensionFRAssociationInfo(data.association_info) : void 0,\n    codeAuthAfnicInfo: data.code_auth_afnic_info ? unmarshalContactExtensionFRCodeAuthAfnicInfo(data.code_auth_afnic_info) : void 0,\n    dunsInfo: data.duns_info ? unmarshalContactExtensionFRDunsInfo(data.duns_info) : void 0,\n    individualInfo: data.individual_info ? unmarshalContactExtensionFRIndividualInfo(data.individual_info) : void 0,\n    mode: data.mode,\n    trademarkInfo: data.trademark_info ? unmarshalContactExtensionFRTrademarkInfo(data.trademark_info) : void 0\n  };\n};\nconst unmarshalContactExtensionNL = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ContactExtensionNL' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    legalForm: data.legal_form,\n    legalFormRegistrationNumber: data.legal_form_registration_number\n  };\n};\nconst unmarshalContactQuestion = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ContactQuestion' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    answer: data.answer,\n    question: data.question\n  };\n};\nconst unmarshalContact = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Contact' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    addressLine1: data.address_line_1,\n    addressLine2: data.address_line_2,\n    city: data.city,\n    companyIdentificationCode: data.company_identification_code,\n    companyName: data.company_name,\n    country: data.country,\n    email: data.email,\n    emailAlt: data.email_alt,\n    emailStatus: data.email_status,\n    extensionEu: data.extension_eu ? unmarshalContactExtensionEU(data.extension_eu) : void 0,\n    extensionFr: data.extension_fr ? unmarshalContactExtensionFR(data.extension_fr) : void 0,\n    extensionNl: data.extension_nl ? unmarshalContactExtensionNL(data.extension_nl) : void 0,\n    faxNumber: data.fax_number,\n    firstname: data.firstname,\n    id: data.id,\n    lang: data.lang,\n    lastname: data.lastname,\n    legalForm: data.legal_form,\n    phoneNumber: data.phone_number,\n    questions: data.questions ? marshalling.unmarshalArrayOfObject(data.questions, unmarshalContactQuestion) : void 0,\n    resale: data.resale,\n    state: data.state,\n    status: data.status,\n    vatIdentificationCode: data.vat_identification_code,\n    whoisOptIn: data.whois_opt_in,\n    zip: data.zip\n  };\n};\nconst unmarshalDNSZone = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DNSZone' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    domain: data.domain,\n    linkedProducts: data.linked_products,\n    message: data.message,\n    ns: data.ns,\n    nsDefault: data.ns_default,\n    nsMaster: data.ns_master,\n    projectId: data.project_id,\n    status: data.status,\n    subdomain: data.subdomain,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalHost = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Host' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    domain: data.domain,\n    ips: data.ips,\n    name: data.name,\n    status: data.status\n  };\n};\nconst unmarshalSSLCertificate = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SSLCertificate' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    alternativeDnsZones: data.alternative_dns_zones,\n    certificateChain: data.certificate_chain,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    dnsZone: data.dns_zone,\n    expiredAt: marshalling.unmarshalDate(data.expired_at),\n    privateKey: data.private_key,\n    status: data.status\n  };\n};\nconst unmarshalCheckContactsCompatibilityResponseContactCheckResult = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'CheckContactsCompatibilityResponseContactCheckResult' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    compatible: data.compatible,\n    errorMessage: data.error_message\n  };\n};\nconst unmarshalCheckContactsCompatibilityResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'CheckContactsCompatibilityResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    administrativeCheckResult: data.administrative_check_result ? unmarshalCheckContactsCompatibilityResponseContactCheckResult(\n      data.administrative_check_result\n    ) : void 0,\n    compatible: data.compatible,\n    ownerCheckResult: data.owner_check_result ? unmarshalCheckContactsCompatibilityResponseContactCheckResult(\n      data.owner_check_result\n    ) : void 0,\n    technicalCheckResult: data.technical_check_result ? unmarshalCheckContactsCompatibilityResponseContactCheckResult(\n      data.technical_check_result\n    ) : void 0\n  };\n};\nconst unmarshalClearDNSZoneRecordsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ClearDNSZoneRecordsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {};\n};\nconst unmarshalDeleteDNSZoneResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DeleteDNSZoneResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {};\n};\nconst unmarshalDeleteExternalDomainResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DeleteExternalDomainResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {};\n};\nconst unmarshalDeleteSSLCertificateResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DeleteSSLCertificateResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {};\n};\nconst unmarshalDSRecordPublicKey = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DSRecordPublicKey' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    key: data.key\n  };\n};\nconst unmarshalDSRecordDigest = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DSRecordDigest' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    digest: data.digest,\n    publicKey: data.public_key ? unmarshalDSRecordPublicKey(data.public_key) : void 0,\n    type: data.type\n  };\n};\nconst unmarshalDSRecord = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DSRecord' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    algorithm: data.algorithm,\n    digest: data.digest ? unmarshalDSRecordDigest(data.digest) : void 0,\n    keyId: data.key_id,\n    publicKey: data.public_key ? unmarshalDSRecordPublicKey(data.public_key) : void 0\n  };\n};\nconst unmarshalTldOffer = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'TldOffer' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    action: data.action,\n    operationPath: data.operation_path,\n    price: data.price ? customMarshalling.unmarshalMoney(data.price) : void 0\n  };\n};\nconst unmarshalDomainDNSSEC = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DomainDNSSEC' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    dsRecords: marshalling.unmarshalArrayOfObject(data.ds_records, unmarshalDSRecord),\n    status: data.status\n  };\n};\nconst unmarshalDomainRegistrationStatusExternalDomain = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DomainRegistrationStatusExternalDomain' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    validationToken: data.validation_token\n  };\n};\nconst unmarshalDomainRegistrationStatusTransfer = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DomainRegistrationStatusTransfer' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    status: data.status,\n    voteCurrentOwner: data.vote_current_owner,\n    voteNewOwner: data.vote_new_owner\n  };\n};\nconst unmarshalTld = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Tld' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    dnssecSupport: data.dnssec_support,\n    durationInYearsMax: data.duration_in_years_max,\n    durationInYearsMin: data.duration_in_years_min,\n    idnSupport: data.idn_support,\n    name: data.name,\n    offers: marshalling.unmarshalMapOfObject(data.offers, unmarshalTldOffer),\n    specifications: data.specifications\n  };\n};\nconst unmarshalDomain = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Domain' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    administrativeContact: data.administrative_contact ? unmarshalContact(data.administrative_contact) : void 0,\n    autoRenewStatus: data.auto_renew_status,\n    dnsZones: marshalling.unmarshalArrayOfObject(data.dns_zones, unmarshalDNSZone),\n    dnssec: data.dnssec ? unmarshalDomainDNSSEC(data.dnssec) : void 0,\n    domain: data.domain,\n    eppCode: data.epp_code,\n    expiredAt: marshalling.unmarshalDate(data.expired_at),\n    externalDomainRegistrationStatus: data.external_domain_registration_status ? unmarshalDomainRegistrationStatusExternalDomain(\n      data.external_domain_registration_status\n    ) : void 0,\n    isExternal: data.is_external,\n    linkedProducts: data.linked_products,\n    organizationId: data.organization_id,\n    ownerContact: data.owner_contact ? unmarshalContact(data.owner_contact) : void 0,\n    pendingTrade: data.pending_trade,\n    projectId: data.project_id,\n    registrar: data.registrar,\n    status: data.status,\n    technicalContact: data.technical_contact ? unmarshalContact(data.technical_contact) : void 0,\n    tld: data.tld ? unmarshalTld(data.tld) : void 0,\n    transferRegistrationStatus: data.transfer_registration_status ? unmarshalDomainRegistrationStatusTransfer(\n      data.transfer_registration_status\n    ) : void 0,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalGetDNSZoneTsigKeyResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'GetDNSZoneTsigKeyResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    algorithm: data.algorithm,\n    key: data.key,\n    name: data.name\n  };\n};\nconst unmarshalDomainRecordGeoIPConfigMatch = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DomainRecordGeoIPConfigMatch' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    continents: data.continents,\n    countries: data.countries,\n    data: data.data\n  };\n};\nconst unmarshalDomainRecordViewConfigView = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DomainRecordViewConfigView' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    data: data.data,\n    subnet: data.subnet\n  };\n};\nconst unmarshalDomainRecordWeightedConfigWeightedIP = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DomainRecordWeightedConfigWeightedIP' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    ip: data.ip,\n    weight: data.weight\n  };\n};\nconst unmarshalDomainRecordGeoIPConfig = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DomainRecordGeoIPConfig' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    default: data.default,\n    matches: marshalling.unmarshalArrayOfObject(\n      data.matches,\n      unmarshalDomainRecordGeoIPConfigMatch\n    )\n  };\n};\nconst unmarshalDomainRecordHTTPServiceConfig = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DomainRecordHTTPServiceConfig' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    ips: data.ips,\n    mustContain: data.must_contain,\n    strategy: data.strategy,\n    url: data.url,\n    userAgent: data.user_agent\n  };\n};\nconst unmarshalDomainRecordViewConfig = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DomainRecordViewConfig' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    views: marshalling.unmarshalArrayOfObject(\n      data.views,\n      unmarshalDomainRecordViewConfigView\n    )\n  };\n};\nconst unmarshalDomainRecordWeightedConfig = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DomainRecordWeightedConfig' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    weightedIps: marshalling.unmarshalArrayOfObject(\n      data.weighted_ips,\n      unmarshalDomainRecordWeightedConfigWeightedIP\n    )\n  };\n};\nconst unmarshalDomainRecord = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DomainRecord' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    comment: data.comment,\n    data: data.data,\n    geoIpConfig: data.geo_ip_config ? unmarshalDomainRecordGeoIPConfig(data.geo_ip_config) : void 0,\n    httpServiceConfig: data.http_service_config ? unmarshalDomainRecordHTTPServiceConfig(data.http_service_config) : void 0,\n    id: data.id,\n    name: data.name,\n    priority: data.priority,\n    ttl: data.ttl,\n    type: data.type,\n    viewConfig: data.view_config ? unmarshalDomainRecordViewConfig(data.view_config) : void 0,\n    weightedConfig: data.weighted_config ? unmarshalDomainRecordWeightedConfig(data.weighted_config) : void 0\n  };\n};\nconst unmarshalRecordIdentifier = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'RecordIdentifier' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    data: data.data,\n    name: data.name,\n    ttl: data.ttl,\n    type: data.type\n  };\n};\nconst unmarshalRecordChangeAdd = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'RecordChangeAdd' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    records: marshalling.unmarshalArrayOfObject(data.records, unmarshalDomainRecord)\n  };\n};\nconst unmarshalRecordChangeClear = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'RecordChangeClear' failed as data isn't a dictionary.`\n    );\n  }\n  return {};\n};\nconst unmarshalRecordChangeDelete = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'RecordChangeDelete' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    id: data.id,\n    idFields: data.id_fields ? unmarshalRecordIdentifier(data.id_fields) : void 0\n  };\n};\nconst unmarshalRecordChangeSet = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'RecordChangeSet' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    id: data.id,\n    idFields: data.id_fields ? unmarshalRecordIdentifier(data.id_fields) : void 0,\n    records: marshalling.unmarshalArrayOfObject(data.records, unmarshalDomainRecord)\n  };\n};\nconst unmarshalRecordChange = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'RecordChange' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    add: data.add ? unmarshalRecordChangeAdd(data.add) : void 0,\n    clear: data.clear ? unmarshalRecordChangeClear(data.clear) : void 0,\n    delete: data.delete ? unmarshalRecordChangeDelete(data.delete) : void 0,\n    set: data.set ? unmarshalRecordChangeSet(data.set) : void 0\n  };\n};\nconst unmarshalGetDNSZoneVersionDiffResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'GetDNSZoneVersionDiffResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    changes: marshalling.unmarshalArrayOfObject(data.changes, unmarshalRecordChange)\n  };\n};\nconst unmarshalGetDomainAuthCodeResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'GetDomainAuthCodeResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    authCode: data.auth_code\n  };\n};\nconst unmarshalImportProviderDNSZoneResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ImportProviderDNSZoneResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    records: marshalling.unmarshalArrayOfObject(data.records, unmarshalDomainRecord)\n  };\n};\nconst unmarshalImportRawDNSZoneResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ImportRawDNSZoneResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    records: marshalling.unmarshalArrayOfObject(data.records, unmarshalDomainRecord)\n  };\n};\nconst unmarshalContactRolesRoles = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ContactRolesRoles' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    isAdministrative: data.is_administrative,\n    isOwner: data.is_owner,\n    isTechnical: data.is_technical\n  };\n};\nconst unmarshalContactRoles = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ContactRoles' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    contact: data.contact ? unmarshalContact(data.contact) : void 0,\n    roles: marshalling.unmarshalMapOfObject(data.roles, unmarshalContactRolesRoles)\n  };\n};\nconst unmarshalListContactsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListContactsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    contacts: marshalling.unmarshalArrayOfObject(data.contacts, unmarshalContactRoles),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalNameserver = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Nameserver' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    ip: data.ip,\n    name: data.name\n  };\n};\nconst unmarshalListDNSZoneNameserversResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListDNSZoneNameserversResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    ns: marshalling.unmarshalArrayOfObject(data.ns, unmarshalNameserver)\n  };\n};\nconst unmarshalListDNSZoneRecordsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListDNSZoneRecordsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    records: marshalling.unmarshalArrayOfObject(data.records, unmarshalDomainRecord),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListDNSZoneVersionRecordsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListDNSZoneVersionRecordsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    records: marshalling.unmarshalArrayOfObject(data.records, unmarshalDomainRecord),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalDNSZoneVersion = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DNSZoneVersion' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    id: data.id\n  };\n};\nconst unmarshalListDNSZoneVersionsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListDNSZoneVersionsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    totalCount: data.total_count,\n    versions: marshalling.unmarshalArrayOfObject(data.versions, unmarshalDNSZoneVersion)\n  };\n};\nconst unmarshalListDNSZonesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListDNSZonesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    dnsZones: marshalling.unmarshalArrayOfObject(data.dns_zones, unmarshalDNSZone),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListDomainHostsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListDomainHostsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    hosts: marshalling.unmarshalArrayOfObject(data.hosts, unmarshalHost),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalDomainSummary = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DomainSummary' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    autoRenewStatus: data.auto_renew_status,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    dnssecStatus: data.dnssec_status,\n    domain: data.domain,\n    eppCode: data.epp_code,\n    expiredAt: marshalling.unmarshalDate(data.expired_at),\n    externalDomainRegistrationStatus: data.external_domain_registration_status ? unmarshalDomainRegistrationStatusExternalDomain(\n      data.external_domain_registration_status\n    ) : void 0,\n    isExternal: data.is_external,\n    organizationId: data.organization_id,\n    pendingTrade: data.pending_trade,\n    projectId: data.project_id,\n    registrar: data.registrar,\n    status: data.status,\n    transferRegistrationStatus: data.transfer_registration_status ? unmarshalDomainRegistrationStatusTransfer(\n      data.transfer_registration_status\n    ) : void 0,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalListDomainsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListDomainsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    domains: marshalling.unmarshalArrayOfObject(data.domains, unmarshalDomainSummary),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalRenewableDomain = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'RenewableDomain' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    domain: data.domain,\n    estimatedDeleteAt: marshalling.unmarshalDate(data.estimated_delete_at),\n    expiredAt: marshalling.unmarshalDate(data.expired_at),\n    limitRedemptionAt: marshalling.unmarshalDate(data.limit_redemption_at),\n    limitRenewAt: marshalling.unmarshalDate(data.limit_renew_at),\n    organizationId: data.organization_id,\n    projectId: data.project_id,\n    renewableDurationInYears: data.renewable_duration_in_years,\n    status: data.status,\n    tld: data.tld ? unmarshalTld(data.tld) : void 0\n  };\n};\nconst unmarshalListRenewableDomainsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListRenewableDomainsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    domains: marshalling.unmarshalArrayOfObject(data.domains, unmarshalRenewableDomain),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListSSLCertificatesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListSSLCertificatesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    certificates: marshalling.unmarshalArrayOfObject(\n      data.certificates,\n      unmarshalSSLCertificate\n    ),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalTask = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Task' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    contactIdentifier: data.contact_identifier,\n    domain: data.domain,\n    id: data.id,\n    message: data.message,\n    organizationId: data.organization_id,\n    projectId: data.project_id,\n    startedAt: marshalling.unmarshalDate(data.started_at),\n    status: data.status,\n    type: data.type,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalListTasksResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListTasksResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    tasks: marshalling.unmarshalArrayOfObject(data.tasks, unmarshalTask),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListTldsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListTldsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    tlds: marshalling.unmarshalArrayOfObject(data.tlds, unmarshalTld),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalOrderResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'OrderResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    domains: data.domains,\n    organizationId: data.organization_id,\n    projectId: data.project_id,\n    taskId: data.task_id\n  };\n};\nconst unmarshalRefreshDNSZoneResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'RefreshDNSZoneResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    dnsZones: marshalling.unmarshalArrayOfObject(data.dns_zones, unmarshalDNSZone)\n  };\n};\nconst unmarshalRegisterExternalDomainResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'RegisterExternalDomainResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    domain: data.domain,\n    organizationId: data.organization_id,\n    projectId: data.project_id,\n    validationToken: data.validation_token\n  };\n};\nconst unmarshalRestoreDNSZoneVersionResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'RestoreDNSZoneVersionResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {};\n};\nconst unmarshalAvailableDomain = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'AvailableDomain' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    available: data.available,\n    domain: data.domain,\n    tld: data.tld ? unmarshalTld(data.tld) : void 0\n  };\n};\nconst unmarshalSearchAvailableDomainsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SearchAvailableDomainsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    availableDomains: marshalling.unmarshalArrayOfObject(\n      data.available_domains,\n      unmarshalAvailableDomain\n    )\n  };\n};\nconst unmarshalUpdateDNSZoneNameserversResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'UpdateDNSZoneNameserversResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    ns: marshalling.unmarshalArrayOfObject(data.ns, unmarshalNameserver)\n  };\n};\nconst unmarshalUpdateDNSZoneRecordsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'UpdateDNSZoneRecordsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    records: marshalling.unmarshalArrayOfObject(data.records, unmarshalDomainRecord)\n  };\n};\nconst marshalCloneDNSZoneRequest = (request, defaults) => ({\n  dest_dns_zone: request.destDnsZone,\n  overwrite: request.overwrite,\n  project_id: request.projectId ?? defaults.defaultProjectId\n});\nconst marshalCreateDNSZoneRequest = (request, defaults) => ({\n  domain: request.domain,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  subdomain: request.subdomain\n});\nconst marshalCreateSSLCertificateRequest = (request, defaults) => ({\n  alternative_dns_zones: request.alternativeDnsZones,\n  dns_zone: request.dnsZone\n});\nconst marshalImportProviderDNSZoneRequestOnlineV1 = (request, defaults) => ({\n  token: request.token\n});\nconst marshalImportProviderDNSZoneRequest = (request, defaults) => ({\n  ...marshalling.resolveOneOf([\n    {\n      param: \"online_v1\",\n      value: request.onlineV1 !== void 0 ? marshalImportProviderDNSZoneRequestOnlineV1(\n        request.onlineV1\n      ) : void 0\n    }\n  ])\n});\nconst marshalImportRawDNSZoneRequestTsigKey = (request, defaults) => ({\n  algorithm: request.algorithm,\n  key: request.key,\n  name: request.name\n});\nconst marshalImportRawDNSZoneRequestAXFRSource = (request, defaults) => ({\n  name_server: request.nameServer,\n  tsig_key: request.tsigKey !== void 0 ? marshalImportRawDNSZoneRequestTsigKey(request.tsigKey) : void 0\n});\nconst marshalImportRawDNSZoneRequestBindSource = (request, defaults) => ({\n  content: request.content\n});\nconst marshalImportRawDNSZoneRequest = (request, defaults) => ({\n  content: request.content,\n  format: request.format,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  ...marshalling.resolveOneOf([\n    {\n      param: \"bind_source\",\n      value: request.bindSource !== void 0 ? marshalImportRawDNSZoneRequestBindSource(\n        request.bindSource\n      ) : void 0\n    },\n    {\n      param: \"axfr_source\",\n      value: request.axfrSource !== void 0 ? marshalImportRawDNSZoneRequestAXFRSource(\n        request.axfrSource\n      ) : void 0\n    }\n  ])\n});\nconst marshalRefreshDNSZoneRequest = (request, defaults) => ({\n  recreate_dns_zone: request.recreateDnsZone,\n  recreate_sub_dns_zone: request.recreateSubDnsZone\n});\nconst marshalContactExtensionFRAssociationInfo = (request, defaults) => ({\n  publication_jo: request.publicationJo,\n  publication_jo_page: request.publicationJoPage\n});\nconst marshalContactExtensionFRCodeAuthAfnicInfo = (request, defaults) => ({\n  code_auth_afnic: request.codeAuthAfnic\n});\nconst marshalContactExtensionFRDunsInfo = (request, defaults) => ({\n  duns_id: request.dunsId,\n  local_id: request.localId\n});\nconst marshalContactExtensionFRIndividualInfo = (request, defaults) => ({\n  whois_opt_in: request.whoisOptIn\n});\nconst marshalContactExtensionFRTrademarkInfo = (request, defaults) => ({\n  trademark_inpi: request.trademarkInpi\n});\nconst marshalContactExtensionEU = (request, defaults) => ({\n  european_citizenship: request.europeanCitizenship\n});\nconst marshalContactExtensionFR = (request, defaults) => ({\n  mode: request.mode,\n  ...marshalling.resolveOneOf([\n    {\n      param: \"individual_info\",\n      value: request.individualInfo !== void 0 ? marshalContactExtensionFRIndividualInfo(\n        request.individualInfo\n      ) : void 0\n    },\n    {\n      param: \"duns_info\",\n      value: request.dunsInfo !== void 0 ? marshalContactExtensionFRDunsInfo(request.dunsInfo) : void 0\n    },\n    {\n      param: \"association_info\",\n      value: request.associationInfo !== void 0 ? marshalContactExtensionFRAssociationInfo(\n        request.associationInfo\n      ) : void 0\n    },\n    {\n      param: \"trademark_info\",\n      value: request.trademarkInfo !== void 0 ? marshalContactExtensionFRTrademarkInfo(\n        request.trademarkInfo\n      ) : void 0\n    },\n    {\n      param: \"code_auth_afnic_info\",\n      value: request.codeAuthAfnicInfo !== void 0 ? marshalContactExtensionFRCodeAuthAfnicInfo(\n        request.codeAuthAfnicInfo\n      ) : void 0\n    }\n  ])\n});\nconst marshalContactExtensionNL = (request, defaults) => ({\n  legal_form: request.legalForm,\n  legal_form_registration_number: request.legalFormRegistrationNumber\n});\nconst marshalContactQuestion = (request, defaults) => ({\n  answer: request.answer,\n  question: request.question\n});\nconst marshalNewContact = (request, defaults) => ({\n  address_line_1: request.addressLine1,\n  address_line_2: request.addressLine2,\n  city: request.city,\n  company_identification_code: request.companyIdentificationCode,\n  company_name: request.companyName,\n  country: request.country,\n  email: request.email,\n  email_alt: request.emailAlt,\n  extension_eu: request.extensionEu !== void 0 ? marshalContactExtensionEU(request.extensionEu) : void 0,\n  extension_fr: request.extensionFr !== void 0 ? marshalContactExtensionFR(request.extensionFr) : void 0,\n  extension_nl: request.extensionNl !== void 0 ? marshalContactExtensionNL(request.extensionNl) : void 0,\n  fax_number: request.faxNumber,\n  firstname: request.firstname,\n  lang: request.lang,\n  lastname: request.lastname,\n  legal_form: request.legalForm,\n  phone_number: request.phoneNumber,\n  questions: request.questions !== void 0 ? request.questions.map((elt) => marshalContactQuestion(elt)) : void 0,\n  resale: request.resale,\n  state: request.state,\n  vat_identification_code: request.vatIdentificationCode,\n  whois_opt_in: request.whoisOptIn,\n  zip: request.zip\n});\nconst marshalRegistrarApiBuyDomainsRequest = (request, defaults) => ({\n  domains: request.domains,\n  duration_in_years: request.durationInYears,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  ...marshalling.resolveOneOf([\n    { param: \"owner_contact_id\", value: request.ownerContactId },\n    {\n      param: \"owner_contact\",\n      value: request.ownerContact !== void 0 ? marshalNewContact(request.ownerContact) : void 0\n    }\n  ]),\n  ...marshalling.resolveOneOf([\n    {\n      param: \"administrative_contact_id\",\n      value: request.administrativeContactId\n    },\n    {\n      param: \"administrative_contact\",\n      value: request.administrativeContact !== void 0 ? marshalNewContact(request.administrativeContact) : void 0\n    }\n  ]),\n  ...marshalling.resolveOneOf([\n    { param: \"technical_contact_id\", value: request.technicalContactId },\n    {\n      param: \"technical_contact\",\n      value: request.technicalContact !== void 0 ? marshalNewContact(request.technicalContact) : void 0\n    }\n  ])\n});\nconst marshalRegistrarApiCheckContactsCompatibilityRequest = (request, defaults) => ({\n  domains: request.domains,\n  tlds: request.tlds,\n  ...marshalling.resolveOneOf([\n    { param: \"owner_contact_id\", value: request.ownerContactId },\n    {\n      param: \"owner_contact\",\n      value: request.ownerContact !== void 0 ? marshalNewContact(request.ownerContact) : void 0\n    }\n  ]),\n  ...marshalling.resolveOneOf([\n    {\n      param: \"administrative_contact_id\",\n      value: request.administrativeContactId\n    },\n    {\n      param: \"administrative_contact\",\n      value: request.administrativeContact !== void 0 ? marshalNewContact(request.administrativeContact) : void 0\n    }\n  ]),\n  ...marshalling.resolveOneOf([\n    { param: \"technical_contact_id\", value: request.technicalContactId },\n    {\n      param: \"technical_contact\",\n      value: request.technicalContact !== void 0 ? marshalNewContact(request.technicalContact) : void 0\n    }\n  ])\n});\nconst marshalRegistrarApiCreateDomainHostRequest = (request, defaults) => ({\n  ips: request.ips,\n  name: request.name\n});\nconst marshalDSRecordPublicKey = (request, defaults) => ({\n  key: request.key\n});\nconst marshalDSRecordDigest = (request, defaults) => ({\n  digest: request.digest,\n  public_key: request.publicKey !== void 0 ? marshalDSRecordPublicKey(request.publicKey) : void 0,\n  type: request.type\n});\nconst marshalDSRecord = (request, defaults) => ({\n  algorithm: request.algorithm,\n  key_id: request.keyId,\n  ...marshalling.resolveOneOf([\n    {\n      param: \"digest\",\n      value: request.digest !== void 0 ? marshalDSRecordDigest(request.digest) : void 0\n    },\n    {\n      param: \"public_key\",\n      value: request.publicKey !== void 0 ? marshalDSRecordPublicKey(request.publicKey) : void 0\n    }\n  ])\n});\nconst marshalRegistrarApiEnableDomainDNSSECRequest = (request, defaults) => ({\n  ds_record: request.dsRecord !== void 0 ? marshalDSRecord(request.dsRecord) : void 0\n});\nconst marshalRegistrarApiRegisterExternalDomainRequest = (request, defaults) => ({\n  domain: request.domain,\n  project_id: request.projectId ?? defaults.defaultProjectId\n});\nconst marshalRegistrarApiRenewDomainsRequest = (request, defaults) => ({\n  domains: request.domains,\n  duration_in_years: request.durationInYears,\n  force_late_renewal: request.forceLateRenewal\n});\nconst marshalRegistrarApiTradeDomainRequest = (request, defaults) => ({\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  ...marshalling.resolveOneOf([\n    { param: \"new_owner_contact_id\", value: request.newOwnerContactId },\n    {\n      param: \"new_owner_contact\",\n      value: request.newOwnerContact !== void 0 ? marshalNewContact(request.newOwnerContact) : void 0\n    }\n  ])\n});\nconst marshalTransferInDomainRequestTransferRequest = (request, defaults) => ({\n  auth_code: request.authCode,\n  domain: request.domain\n});\nconst marshalRegistrarApiTransferInDomainRequest = (request, defaults) => ({\n  domains: request.domains.map(\n    (elt) => marshalTransferInDomainRequestTransferRequest(elt)\n  ),\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  ...marshalling.resolveOneOf([\n    { param: \"owner_contact_id\", value: request.ownerContactId },\n    {\n      param: \"owner_contact\",\n      value: request.ownerContact !== void 0 ? marshalNewContact(request.ownerContact) : void 0\n    }\n  ]),\n  ...marshalling.resolveOneOf([\n    {\n      param: \"administrative_contact_id\",\n      value: request.administrativeContactId\n    },\n    {\n      param: \"administrative_contact\",\n      value: request.administrativeContact !== void 0 ? marshalNewContact(request.administrativeContact) : void 0\n    }\n  ]),\n  ...marshalling.resolveOneOf([\n    { param: \"technical_contact_id\", value: request.technicalContactId },\n    {\n      param: \"technical_contact\",\n      value: request.technicalContact !== void 0 ? marshalNewContact(request.technicalContact) : void 0\n    }\n  ])\n});\nconst marshalUpdateContactRequestQuestion = (request, defaults) => ({\n  answer: request.answer,\n  question: request.question\n});\nconst marshalRegistrarApiUpdateContactRequest = (request, defaults) => ({\n  address_line_1: request.addressLine1,\n  address_line_2: request.addressLine2,\n  city: request.city,\n  company_identification_code: request.companyIdentificationCode,\n  country: request.country,\n  email: request.email,\n  email_alt: request.emailAlt,\n  extension_eu: request.extensionEu !== void 0 ? marshalContactExtensionEU(request.extensionEu) : void 0,\n  extension_fr: request.extensionFr !== void 0 ? marshalContactExtensionFR(request.extensionFr) : void 0,\n  extension_nl: request.extensionNl !== void 0 ? marshalContactExtensionNL(request.extensionNl) : void 0,\n  fax_number: request.faxNumber,\n  lang: request.lang,\n  phone_number: request.phoneNumber,\n  questions: request.questions !== void 0 ? request.questions.map(\n    (elt) => marshalUpdateContactRequestQuestion(elt)\n  ) : void 0,\n  resale: request.resale,\n  state: request.state,\n  vat_identification_code: request.vatIdentificationCode,\n  whois_opt_in: request.whoisOptIn,\n  zip: request.zip\n});\nconst marshalRegistrarApiUpdateDomainHostRequest = (request, defaults) => ({\n  ips: request.ips\n});\nconst marshalRegistrarApiUpdateDomainRequest = (request, defaults) => ({\n  ...marshalling.resolveOneOf([\n    { param: \"technical_contact_id\", value: request.technicalContactId },\n    {\n      param: \"technical_contact\",\n      value: request.technicalContact !== void 0 ? marshalNewContact(request.technicalContact) : void 0\n    }\n  ]),\n  ...marshalling.resolveOneOf([\n    { param: \"owner_contact_id\", value: request.ownerContactId },\n    {\n      param: \"owner_contact\",\n      value: request.ownerContact !== void 0 ? marshalNewContact(request.ownerContact) : void 0\n    }\n  ]),\n  ...marshalling.resolveOneOf([\n    {\n      param: \"administrative_contact_id\",\n      value: request.administrativeContactId\n    },\n    {\n      param: \"administrative_contact\",\n      value: request.administrativeContact !== void 0 ? marshalNewContact(request.administrativeContact) : void 0\n    }\n  ])\n});\nconst marshalNameserver = (request, defaults) => ({\n  ip: request.ip,\n  name: request.name\n});\nconst marshalUpdateDNSZoneNameserversRequest = (request, defaults) => ({\n  ns: request.ns.map((elt) => marshalNameserver(elt))\n});\nconst marshalDomainRecordGeoIPConfigMatch = (request, defaults) => ({\n  continents: request.continents,\n  countries: request.countries,\n  data: request.data\n});\nconst marshalDomainRecordViewConfigView = (request, defaults) => ({\n  data: request.data,\n  subnet: request.subnet\n});\nconst marshalDomainRecordWeightedConfigWeightedIP = (request, defaults) => ({\n  ip: request.ip,\n  weight: request.weight\n});\nconst marshalDomainRecordGeoIPConfig = (request, defaults) => ({\n  default: request.default,\n  matches: request.matches.map(\n    (elt) => marshalDomainRecordGeoIPConfigMatch(elt)\n  )\n});\nconst marshalDomainRecordHTTPServiceConfig = (request, defaults) => ({\n  ips: request.ips,\n  must_contain: request.mustContain,\n  strategy: request.strategy,\n  url: request.url,\n  user_agent: request.userAgent\n});\nconst marshalDomainRecordViewConfig = (request, defaults) => ({\n  views: request.views.map(\n    (elt) => marshalDomainRecordViewConfigView(elt)\n  )\n});\nconst marshalDomainRecordWeightedConfig = (request, defaults) => ({\n  weighted_ips: request.weightedIps.map(\n    (elt) => marshalDomainRecordWeightedConfigWeightedIP(elt)\n  )\n});\nconst marshalDomainRecord = (request, defaults) => ({\n  comment: request.comment,\n  data: request.data,\n  id: request.id,\n  name: request.name,\n  priority: request.priority,\n  ttl: request.ttl,\n  type: request.type,\n  ...marshalling.resolveOneOf([\n    {\n      param: \"geo_ip_config\",\n      value: request.geoIpConfig !== void 0 ? marshalDomainRecordGeoIPConfig(request.geoIpConfig) : void 0\n    },\n    {\n      param: \"http_service_config\",\n      value: request.httpServiceConfig !== void 0 ? marshalDomainRecordHTTPServiceConfig(\n        request.httpServiceConfig\n      ) : void 0\n    },\n    {\n      param: \"weighted_config\",\n      value: request.weightedConfig !== void 0 ? marshalDomainRecordWeightedConfig(request.weightedConfig) : void 0\n    },\n    {\n      param: \"view_config\",\n      value: request.viewConfig !== void 0 ? marshalDomainRecordViewConfig(request.viewConfig) : void 0\n    }\n  ])\n});\nconst marshalRecordIdentifier = (request, defaults) => ({\n  data: request.data,\n  name: request.name,\n  ttl: request.ttl,\n  type: request.type\n});\nconst marshalRecordChangeAdd = (request, defaults) => ({\n  records: request.records.map((elt) => marshalDomainRecord(elt))\n});\nconst marshalRecordChangeClear = (request, defaults) => ({});\nconst marshalRecordChangeDelete = (request, defaults) => ({\n  ...marshalling.resolveOneOf([\n    { param: \"id\", value: request.id },\n    {\n      param: \"id_fields\",\n      value: request.idFields !== void 0 ? marshalRecordIdentifier(request.idFields) : void 0\n    }\n  ])\n});\nconst marshalRecordChangeSet = (request, defaults) => ({\n  records: request.records.map((elt) => marshalDomainRecord(elt)),\n  ...marshalling.resolveOneOf([\n    { param: \"id\", value: request.id },\n    {\n      param: \"id_fields\",\n      value: request.idFields !== void 0 ? marshalRecordIdentifier(request.idFields) : void 0\n    }\n  ])\n});\nconst marshalRecordChange = (request, defaults) => ({\n  ...marshalling.resolveOneOf([\n    {\n      param: \"add\",\n      value: request.add !== void 0 ? marshalRecordChangeAdd(request.add) : void 0\n    },\n    {\n      param: \"set\",\n      value: request.set !== void 0 ? marshalRecordChangeSet(request.set) : void 0\n    },\n    {\n      param: \"delete\",\n      value: request.delete !== void 0 ? marshalRecordChangeDelete(request.delete) : void 0\n    },\n    {\n      param: \"clear\",\n      value: request.clear !== void 0 ? marshalRecordChangeClear(request.clear) : void 0\n    }\n  ])\n});\nconst marshalUpdateDNSZoneRecordsRequest = (request, defaults) => ({\n  changes: request.changes.map((elt) => marshalRecordChange(elt)),\n  disallow_new_zone_creation: request.disallowNewZoneCreation,\n  return_all_records: request.returnAllRecords,\n  serial: request.serial\n});\nconst marshalUpdateDNSZoneRequest = (request, defaults) => ({\n  new_dns_zone: request.newDnsZone,\n  project_id: request.projectId ?? defaults.defaultProjectId\n});\nexports.marshalCloneDNSZoneRequest = marshalCloneDNSZoneRequest;\nexports.marshalCreateDNSZoneRequest = marshalCreateDNSZoneRequest;\nexports.marshalCreateSSLCertificateRequest = marshalCreateSSLCertificateRequest;\nexports.marshalDSRecord = marshalDSRecord;\nexports.marshalImportProviderDNSZoneRequest = marshalImportProviderDNSZoneRequest;\nexports.marshalImportRawDNSZoneRequest = marshalImportRawDNSZoneRequest;\nexports.marshalRefreshDNSZoneRequest = marshalRefreshDNSZoneRequest;\nexports.marshalRegistrarApiBuyDomainsRequest = marshalRegistrarApiBuyDomainsRequest;\nexports.marshalRegistrarApiCheckContactsCompatibilityRequest = marshalRegistrarApiCheckContactsCompatibilityRequest;\nexports.marshalRegistrarApiCreateDomainHostRequest = marshalRegistrarApiCreateDomainHostRequest;\nexports.marshalRegistrarApiEnableDomainDNSSECRequest = marshalRegistrarApiEnableDomainDNSSECRequest;\nexports.marshalRegistrarApiRegisterExternalDomainRequest = marshalRegistrarApiRegisterExternalDomainRequest;\nexports.marshalRegistrarApiRenewDomainsRequest = marshalRegistrarApiRenewDomainsRequest;\nexports.marshalRegistrarApiTradeDomainRequest = marshalRegistrarApiTradeDomainRequest;\nexports.marshalRegistrarApiTransferInDomainRequest = marshalRegistrarApiTransferInDomainRequest;\nexports.marshalRegistrarApiUpdateContactRequest = marshalRegistrarApiUpdateContactRequest;\nexports.marshalRegistrarApiUpdateDomainHostRequest = marshalRegistrarApiUpdateDomainHostRequest;\nexports.marshalRegistrarApiUpdateDomainRequest = marshalRegistrarApiUpdateDomainRequest;\nexports.marshalUpdateDNSZoneNameserversRequest = marshalUpdateDNSZoneNameserversRequest;\nexports.marshalUpdateDNSZoneRecordsRequest = marshalUpdateDNSZoneRecordsRequest;\nexports.marshalUpdateDNSZoneRequest = marshalUpdateDNSZoneRequest;\nexports.unmarshalCheckContactsCompatibilityResponse = unmarshalCheckContactsCompatibilityResponse;\nexports.unmarshalClearDNSZoneRecordsResponse = unmarshalClearDNSZoneRecordsResponse;\nexports.unmarshalContact = unmarshalContact;\nexports.unmarshalDNSZone = unmarshalDNSZone;\nexports.unmarshalDSRecord = unmarshalDSRecord;\nexports.unmarshalDeleteDNSZoneResponse = unmarshalDeleteDNSZoneResponse;\nexports.unmarshalDeleteExternalDomainResponse = unmarshalDeleteExternalDomainResponse;\nexports.unmarshalDeleteSSLCertificateResponse = unmarshalDeleteSSLCertificateResponse;\nexports.unmarshalDomain = unmarshalDomain;\nexports.unmarshalGetDNSZoneTsigKeyResponse = unmarshalGetDNSZoneTsigKeyResponse;\nexports.unmarshalGetDNSZoneVersionDiffResponse = unmarshalGetDNSZoneVersionDiffResponse;\nexports.unmarshalGetDomainAuthCodeResponse = unmarshalGetDomainAuthCodeResponse;\nexports.unmarshalHost = unmarshalHost;\nexports.unmarshalImportProviderDNSZoneResponse = unmarshalImportProviderDNSZoneResponse;\nexports.unmarshalImportRawDNSZoneResponse = unmarshalImportRawDNSZoneResponse;\nexports.unmarshalListContactsResponse = unmarshalListContactsResponse;\nexports.unmarshalListDNSZoneNameserversResponse = unmarshalListDNSZoneNameserversResponse;\nexports.unmarshalListDNSZoneRecordsResponse = unmarshalListDNSZoneRecordsResponse;\nexports.unmarshalListDNSZoneVersionRecordsResponse = unmarshalListDNSZoneVersionRecordsResponse;\nexports.unmarshalListDNSZoneVersionsResponse = unmarshalListDNSZoneVersionsResponse;\nexports.unmarshalListDNSZonesResponse = unmarshalListDNSZonesResponse;\nexports.unmarshalListDomainHostsResponse = unmarshalListDomainHostsResponse;\nexports.unmarshalListDomainsResponse = unmarshalListDomainsResponse;\nexports.unmarshalListRenewableDomainsResponse = unmarshalListRenewableDomainsResponse;\nexports.unmarshalListSSLCertificatesResponse = unmarshalListSSLCertificatesResponse;\nexports.unmarshalListTasksResponse = unmarshalListTasksResponse;\nexports.unmarshalListTldsResponse = unmarshalListTldsResponse;\nexports.unmarshalOrderResponse = unmarshalOrderResponse;\nexports.unmarshalRefreshDNSZoneResponse = unmarshalRefreshDNSZoneResponse;\nexports.unmarshalRegisterExternalDomainResponse = unmarshalRegisterExternalDomainResponse;\nexports.unmarshalRestoreDNSZoneVersionResponse = unmarshalRestoreDNSZoneVersionResponse;\nexports.unmarshalSSLCertificate = unmarshalSSLCertificate;\nexports.unmarshalSearchAvailableDomainsResponse = unmarshalSearchAvailableDomainsResponse;\nexports.unmarshalTask = unmarshalTask;\nexports.unmarshalUpdateDNSZoneNameserversResponse = unmarshalUpdateDNSZoneNameserversResponse;\nexports.unmarshalUpdateDNSZoneRecordsResponse = unmarshalUpdateDNSZoneRecordsResponse;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index_gen = require(\"./v1alpha1/index.gen.cjs\");\nexports.v1alpha1 = index_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst intervalRetrier = require(\"../../../internal/async/interval-retrier.cjs\");\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass API extends api.API {\n  pageOfListPipelines = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/edge-services/v1alpha1/pipelines`,\n      urlParams: marshalling.urlParams(\n        [\"has_backend_stage_lb\", request.hasBackendStageLb],\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListPipelinesResponse\n  );\n  /**\n   * List pipelines. List all pipelines, for a Scaleway Organization or Scaleway\n   * Project. By default, the pipelines returned in the list are ordered by\n   * creation date in ascending order, though this can be modified via the\n   * `order_by` field.\n   *\n   * @param request - The request {@link ListPipelinesRequest}\n   * @returns A Promise of ListPipelinesResponse\n   */\n  listPipelines = (request = {}) => resourcePaginator.enrichForPagination(\"pipelines\", this.pageOfListPipelines, request);\n  /**\n   * Create pipeline. Create a new pipeline. You must specify a `dns_stage_id`\n   * to form a stage-chain that goes all the way to the backend stage (origin),\n   * so the HTTP request will be processed according to the stages you created.\n   *\n   * @param request - The request {@link CreatePipelineRequest}\n   * @returns A Promise of Pipeline\n   */\n  createPipeline = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreatePipelineRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/edge-services/v1alpha1/pipelines`\n    },\n    marshalling_gen.unmarshalPipeline\n  );\n  /**\n   * Get pipeline. Retrieve information about an existing pipeline, specified by\n   * its `pipeline_id`. Its full details, including errors, are returned in the\n   * response object.\n   *\n   * @param request - The request {@link GetPipelineRequest}\n   * @returns A Promise of Pipeline\n   */\n  getPipeline = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/edge-services/v1alpha1/pipelines/${marshalling.validatePathParam(\"pipelineId\", request.pipelineId)}`\n    },\n    marshalling_gen.unmarshalPipeline\n  );\n  /**\n   * Waits for {@link Pipeline} to be in a final state.\n   *\n   * @param request - The request {@link GetPipelineRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Pipeline\n   */\n  waitForPipeline = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.PIPELINE_TRANSIENT_STATUSES.includes(res.status))),\n    this.getPipeline,\n    request,\n    options\n  );\n  /**\n   * Update pipeline. Update the parameters of an existing pipeline, specified\n   * by its `pipeline_id`. Parameters which can be updated include the `name`,\n   * `description` and `dns_stage_id`.\n   *\n   * @param request - The request {@link UpdatePipelineRequest}\n   * @returns A Promise of Pipeline\n   */\n  updatePipeline = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdatePipelineRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/edge-services/v1alpha1/pipelines/${marshalling.validatePathParam(\"pipelineId\", request.pipelineId)}`\n    },\n    marshalling_gen.unmarshalPipeline\n  );\n  /**\n   * Delete pipeline. Delete an existing pipeline, specified by its\n   * `pipeline_id`. Deleting a pipeline is permanent, and cannot be undone. Note\n   * that all stages linked to the pipeline are also deleted.\n   *\n   * @param request - The request {@link DeletePipelineRequest}\n   */\n  deletePipeline = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/edge-services/v1alpha1/pipelines/${marshalling.validatePathParam(\"pipelineId\", request.pipelineId)}`\n  });\n  pageOfListDNSStages = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/edge-services/v1alpha1/dns-stages`,\n      urlParams: marshalling.urlParams(\n        [\"fqdn\", request.fqdn],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"pipeline_id\", request.pipelineId],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListDNSStagesResponse\n  );\n  /**\n   * List DNS stages. List all DNS stages, for a Scaleway Organization or\n   * Scaleway Project. By default, the DNS stages returned in the list are\n   * ordered by creation date in ascending order, though this can be modified\n   * via the `order_by` field.\n   *\n   * @param request - The request {@link ListDNSStagesRequest}\n   * @returns A Promise of ListDNSStagesResponse\n   */\n  listDNSStages = (request = {}) => resourcePaginator.enrichForPagination(\"stages\", this.pageOfListDNSStages, request);\n  /**\n   * Create DNS stage. Create a new DNS stage. You must specify the `fqdns`\n   * field to customize the domain endpoint, using a domain you already own.\n   *\n   * @param request - The request {@link CreateDNSStageRequest}\n   * @returns A Promise of DNSStage\n   */\n  createDNSStage = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateDNSStageRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/edge-services/v1alpha1/dns-stages`\n    },\n    marshalling_gen.unmarshalDNSStage\n  );\n  /**\n   * Get DNS stage. Retrieve information about an existing DNS stage, specified\n   * by its `dns_stage_id`. Its full details, including FQDNs, are returned in\n   * the response object.\n   *\n   * @param request - The request {@link GetDNSStageRequest}\n   * @returns A Promise of DNSStage\n   */\n  getDNSStage = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/edge-services/v1alpha1/dns-stages/${marshalling.validatePathParam(\"dnsStageId\", request.dnsStageId)}`\n    },\n    marshalling_gen.unmarshalDNSStage\n  );\n  /**\n   * Update DNS stage. Update the parameters of an existing DNS stage, specified\n   * by its `dns_stage_id`.\n   *\n   * @param request - The request {@link UpdateDNSStageRequest}\n   * @returns A Promise of DNSStage\n   */\n  updateDNSStage = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateDNSStageRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/edge-services/v1alpha1/dns-stages/${marshalling.validatePathParam(\"dnsStageId\", request.dnsStageId)}`\n    },\n    marshalling_gen.unmarshalDNSStage\n  );\n  /**\n   * Delete DNS stage. Delete an existing DNS stage, specified by its\n   * `dns_stage_id`. Deleting a DNS stage is permanent, and cannot be undone.\n   *\n   * @param request - The request {@link DeleteDNSStageRequest}\n   */\n  deleteDNSStage = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/edge-services/v1alpha1/dns-stages/${marshalling.validatePathParam(\"dnsStageId\", request.dnsStageId)}`\n  });\n  pageOfListTLSStages = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/edge-services/v1alpha1/tls-stages`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"pipeline_id\", request.pipelineId],\n        [\"project_id\", request.projectId],\n        [\"secret_id\", request.secretId],\n        [\"secret_region\", request.secretRegion]\n      )\n    },\n    marshalling_gen.unmarshalListTLSStagesResponse\n  );\n  /**\n   * List TLS stages. List all TLS stages, for a Scaleway Organization or\n   * Scaleway Project. By default, the TLS stages returned in the list are\n   * ordered by creation date in ascending order, though this can be modified\n   * via the `order_by` field.\n   *\n   * @param request - The request {@link ListTLSStagesRequest}\n   * @returns A Promise of ListTLSStagesResponse\n   */\n  listTLSStages = (request = {}) => resourcePaginator.enrichForPagination(\"stages\", this.pageOfListTLSStages, request);\n  /**\n   * Create TLS stage. Create a new TLS stage. You must specify either the\n   * `secrets` or `managed_certificate` fields to customize the SSL/TLS\n   * certificate of your endpoint. Choose `secrets` if you are using a\n   * pre-existing certificate held in Scaleway Secret Manager, or\n   * `managed_certificate` to let Scaleway generate and manage a Let's Encrypt\n   * certificate for your customized endpoint.\n   *\n   * @param request - The request {@link CreateTLSStageRequest}\n   * @returns A Promise of TLSStage\n   */\n  createTLSStage = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateTLSStageRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/edge-services/v1alpha1/tls-stages`\n    },\n    marshalling_gen.unmarshalTLSStage\n  );\n  /**\n   * Get TLS stage. Retrieve information about an existing TLS stage, specified\n   * by its `tls_stage_id`. Its full details, including secrets and certificate\n   * expiration date are returned in the response object.\n   *\n   * @param request - The request {@link GetTLSStageRequest}\n   * @returns A Promise of TLSStage\n   */\n  getTLSStage = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/edge-services/v1alpha1/tls-stages/${marshalling.validatePathParam(\"tlsStageId\", request.tlsStageId)}`\n    },\n    marshalling_gen.unmarshalTLSStage\n  );\n  /**\n   * Update TLS stage. Update the parameters of an existing TLS stage, specified\n   * by its `tls_stage_id`. Both `tls_secrets_config` and `managed_certificate`\n   * parameters can be updated.\n   *\n   * @param request - The request {@link UpdateTLSStageRequest}\n   * @returns A Promise of TLSStage\n   */\n  updateTLSStage = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateTLSStageRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/edge-services/v1alpha1/tls-stages/${marshalling.validatePathParam(\"tlsStageId\", request.tlsStageId)}`\n    },\n    marshalling_gen.unmarshalTLSStage\n  );\n  /**\n   * Delete TLS stage. Delete an existing TLS stage, specified by its\n   * `tls_stage_id`. Deleting a TLS stage is permanent, and cannot be undone.\n   *\n   * @param request - The request {@link DeleteTLSStageRequest}\n   */\n  deleteTLSStage = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/edge-services/v1alpha1/tls-stages/${marshalling.validatePathParam(\"tlsStageId\", request.tlsStageId)}`\n  });\n  pageOfListCacheStages = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/edge-services/v1alpha1/cache-stages`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"pipeline_id\", request.pipelineId],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListCacheStagesResponse\n  );\n  /**\n   * List cache stages. List all cache stages, for a Scaleway Organization or\n   * Scaleway Project. By default, the cache stages returned in the list are\n   * ordered by creation date in ascending order, though this can be modified\n   * via the `order_by` field.\n   *\n   * @param request - The request {@link ListCacheStagesRequest}\n   * @returns A Promise of ListCacheStagesResponse\n   */\n  listCacheStages = (request = {}) => resourcePaginator.enrichForPagination(\"stages\", this.pageOfListCacheStages, request);\n  /**\n   * Create cache stage. Create a new cache stage. You must specify the\n   * `fallback_ttl` field to customize the TTL of the cache.\n   *\n   * @param request - The request {@link CreateCacheStageRequest}\n   * @returns A Promise of CacheStage\n   */\n  createCacheStage = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateCacheStageRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/edge-services/v1alpha1/cache-stages`\n    },\n    marshalling_gen.unmarshalCacheStage\n  );\n  /**\n   * Get cache stage. Retrieve information about an existing cache stage,\n   * specified by its `cache_stage_id`. Its full details, including Time To Live\n   * (TTL), are returned in the response object.\n   *\n   * @param request - The request {@link GetCacheStageRequest}\n   * @returns A Promise of CacheStage\n   */\n  getCacheStage = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/edge-services/v1alpha1/cache-stages/${marshalling.validatePathParam(\"cacheStageId\", request.cacheStageId)}`\n    },\n    marshalling_gen.unmarshalCacheStage\n  );\n  /**\n   * Update cache stage. Update the parameters of an existing cache stage,\n   * specified by its `cache_stage_id`. Parameters which can be updated include\n   * the `fallback_ttl` and `backend_stage_id`.\n   *\n   * @param request - The request {@link UpdateCacheStageRequest}\n   * @returns A Promise of CacheStage\n   */\n  updateCacheStage = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateCacheStageRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/edge-services/v1alpha1/cache-stages/${marshalling.validatePathParam(\"cacheStageId\", request.cacheStageId)}`\n    },\n    marshalling_gen.unmarshalCacheStage\n  );\n  /**\n   * Delete cache stage. Delete an existing cache stage, specified by its\n   * `cache_stage_id`. Deleting a cache stage is permanent, and cannot be\n   * undone.\n   *\n   * @param request - The request {@link DeleteCacheStageRequest}\n   */\n  deleteCacheStage = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/edge-services/v1alpha1/cache-stages/${marshalling.validatePathParam(\"cacheStageId\", request.cacheStageId)}`\n  });\n  pageOfListBackendStages = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/edge-services/v1alpha1/backend-stages`,\n      urlParams: marshalling.urlParams(\n        [\"bucket_name\", request.bucketName],\n        [\"bucket_region\", request.bucketRegion],\n        [\"lb_id\", request.lbId],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"pipeline_id\", request.pipelineId],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListBackendStagesResponse\n  );\n  /**\n   * List backend stages. List all backend stages, for a Scaleway Organization\n   * or Scaleway Project. By default, the backend stages returned in the list\n   * are ordered by creation date in ascending order, though this can be\n   * modified via the `order_by` field.\n   *\n   * @param request - The request {@link ListBackendStagesRequest}\n   * @returns A Promise of ListBackendStagesResponse\n   */\n  listBackendStages = (request = {}) => resourcePaginator.enrichForPagination(\"stages\", this.pageOfListBackendStages, request);\n  /**\n   * Create backend stage. Create a new backend stage. You must specify either a\n   * `scaleway_s3` (for a Scaleway Object Storage bucket) or `scaleway_lb` (for\n   * a Scaleway Load Balancer) field to configure the origin.\n   *\n   * @param request - The request {@link CreateBackendStageRequest}\n   * @returns A Promise of BackendStage\n   */\n  createBackendStage = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateBackendStageRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/edge-services/v1alpha1/backend-stages`\n    },\n    marshalling_gen.unmarshalBackendStage\n  );\n  /**\n   * Get backend stage. Retrieve information about an existing backend stage,\n   * specified by its `backend_stage_id`. Its full details, including\n   * `scaleway_s3` or `scaleway_lb`, are returned in the response object.\n   *\n   * @param request - The request {@link GetBackendStageRequest}\n   * @returns A Promise of BackendStage\n   */\n  getBackendStage = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/edge-services/v1alpha1/backend-stages/${marshalling.validatePathParam(\"backendStageId\", request.backendStageId)}`\n    },\n    marshalling_gen.unmarshalBackendStage\n  );\n  /**\n   * Update backend stage. Update the parameters of an existing backend stage,\n   * specified by its `backend_stage_id`.\n   *\n   * @param request - The request {@link UpdateBackendStageRequest}\n   * @returns A Promise of BackendStage\n   */\n  updateBackendStage = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateBackendStageRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/edge-services/v1alpha1/backend-stages/${marshalling.validatePathParam(\"backendStageId\", request.backendStageId)}`\n    },\n    marshalling_gen.unmarshalBackendStage\n  );\n  /**\n   * Delete backend stage. Delete an existing backend stage, specified by its\n   * `backend_stage_id`. Deleting a backend stage is permanent, and cannot be\n   * undone.\n   *\n   * @param request - The request {@link DeleteBackendStageRequest}\n   */\n  deleteBackendStage = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/edge-services/v1alpha1/backend-stages/${marshalling.validatePathParam(\"backendStageId\", request.backendStageId)}`\n  });\n  checkDomain = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCheckDomainRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/edge-services/v1alpha1/check-domain`\n    },\n    marshalling_gen.unmarshalCheckDomainResponse\n  );\n  checkPEMChain = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCheckPEMChainRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/edge-services/v1alpha1/check-pem-chain`\n    },\n    marshalling_gen.unmarshalCheckPEMChainResponse\n  );\n  pageOfListPurgeRequests = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/edge-services/v1alpha1/purge-requests`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"pipeline_id\", request.pipelineId],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListPurgeRequestsResponse\n  );\n  /**\n   * List purge requests. List all purge requests, for a Scaleway Organization\n   * or Scaleway Project. This enables you to retrieve a history of all\n   * previously-made purge requests. By default, the purge requests returned in\n   * the list are ordered by creation date in ascending order, though this can\n   * be modified via the `order_by` field.\n   *\n   * @param request - The request {@link ListPurgeRequestsRequest}\n   * @returns A Promise of ListPurgeRequestsResponse\n   */\n  listPurgeRequests = (request = {}) => resourcePaginator.enrichForPagination(\"purgeRequests\", this.pageOfListPurgeRequests, request);\n  /**\n   * Create purge request. Create a new purge request. You must specify either\n   * the `all` field (to purge all content) or a list of `assets` (to define the\n   * precise assets to purge).\n   *\n   * @param request - The request {@link CreatePurgeRequestRequest}\n   * @returns A Promise of PurgeRequest\n   */\n  createPurgeRequest = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreatePurgeRequestRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/edge-services/v1alpha1/purge-requests`\n    },\n    marshalling_gen.unmarshalPurgeRequest\n  );\n  /**\n   * Get purge request. Retrieve information about a purge request, specified by\n   * its `purge_request_id`. Its full details, including `status` and `target`,\n   * are returned in the response object.\n   *\n   * @param request - The request {@link GetPurgeRequestRequest}\n   * @returns A Promise of PurgeRequest\n   */\n  getPurgeRequest = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/edge-services/v1alpha1/purge-requests/${marshalling.validatePathParam(\"purgeRequestId\", request.purgeRequestId)}`\n    },\n    marshalling_gen.unmarshalPurgeRequest\n  );\n  /**\n   * Waits for {@link PurgeRequest} to be in a final state.\n   *\n   * @param request - The request {@link GetPurgeRequestRequest}\n   * @param options - The waiting options\n   * @returns A Promise of PurgeRequest\n   */\n  waitForPurgeRequest = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(\n      !content_gen.PURGE_REQUEST_TRANSIENT_STATUSES.includes(res.status)\n    )),\n    this.getPurgeRequest,\n    request,\n    options\n  );\n  checkLbOrigin = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCheckLbOriginRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/edge-services/v1alpha1/check-lb-origin`\n    },\n    marshalling_gen.unmarshalCheckLbOriginResponse\n  );\n  listPlans = () => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/edge-services/v1alpha1/plans`\n    },\n    marshalling_gen.unmarshalListPlansResponse\n  );\n  selectPlan = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSelectPlanRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/edge-services/v1alpha1/current-plan`\n    },\n    marshalling_gen.unmarshalPlan\n  );\n  getCurrentPlan = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/edge-services/v1alpha1/current-plan/${marshalling.validatePathParam(\"projectId\", request.projectId ?? this.client.settings.defaultProjectId)}`\n    },\n    marshalling_gen.unmarshalPlan\n  );\n  deleteCurrentPlan = (request = {}) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/edge-services/v1alpha1/current-plan/${marshalling.validatePathParam(\"projectId\", request.projectId ?? this.client.settings.defaultProjectId)}`\n  });\n}\nexports.API = API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst PIPELINE_TRANSIENT_STATUSES = [\"pending\"];\nconst PURGE_REQUEST_TRANSIENT_STATUSES = [\n  \"pending\"\n];\nexports.PIPELINE_TRANSIENT_STATUSES = PIPELINE_TRANSIENT_STATUSES;\nexports.PURGE_REQUEST_TRANSIENT_STATUSES = PURGE_REQUEST_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nexports.API = api_gen.API;\nexports.PIPELINE_TRANSIENT_STATUSES = content_gen.PIPELINE_TRANSIENT_STATUSES;\nexports.PURGE_REQUEST_TRANSIENT_STATUSES = content_gen.PURGE_REQUEST_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst json = require(\"../../../helpers/json.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst unmarshalScalewayLb = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ScalewayLb' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    domainName: data.domain_name,\n    frontendId: data.frontend_id,\n    id: data.id,\n    isSsl: data.is_ssl,\n    zone: data.zone\n  };\n};\nconst unmarshalScalewayLbBackendConfig = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ScalewayLbBackendConfig' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    lbs: marshalling.unmarshalArrayOfObject(data.lbs, unmarshalScalewayLb)\n  };\n};\nconst unmarshalScalewayS3BackendConfig = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ScalewayS3BackendConfig' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    bucketName: data.bucket_name,\n    bucketRegion: data.bucket_region,\n    isWebsite: data.is_website\n  };\n};\nconst unmarshalBackendStage = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'BackendStage' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    id: data.id,\n    pipelineId: data.pipeline_id,\n    projectId: data.project_id,\n    scalewayLb: data.scaleway_lb ? unmarshalScalewayLbBackendConfig(data.scaleway_lb) : void 0,\n    scalewayS3: data.scaleway_s3 ? unmarshalScalewayS3BackendConfig(data.scaleway_s3) : void 0,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalCacheStage = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'CacheStage' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    backendStageId: data.backend_stage_id,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    fallbackTtl: data.fallback_ttl,\n    id: data.id,\n    pipelineId: data.pipeline_id,\n    projectId: data.project_id,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalDNSStage = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DNSStage' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    backendStageId: data.backend_stage_id,\n    cacheStageId: data.cache_stage_id,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    fqdns: data.fqdns,\n    id: data.id,\n    pipelineId: data.pipeline_id,\n    projectId: data.project_id,\n    tlsStageId: data.tls_stage_id,\n    type: data.type,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalPipelineError = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'PipelineError' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    code: data.code,\n    message: data.message,\n    severity: data.severity,\n    stage: data.stage,\n    type: data.type\n  };\n};\nconst unmarshalPipeline = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Pipeline' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    description: data.description,\n    dnsStageId: data.dns_stage_id,\n    errors: marshalling.unmarshalArrayOfObject(data.errors, unmarshalPipelineError),\n    id: data.id,\n    name: data.name,\n    projectId: data.project_id,\n    status: data.status,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalTLSSecret = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'TLSSecret' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    region: data.region,\n    secretId: data.secret_id\n  };\n};\nconst unmarshalTLSStage = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'TLSStage' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    backendStageId: data.backend_stage_id,\n    cacheStageId: data.cache_stage_id,\n    certificateExpiresAt: marshalling.unmarshalDate(data.certificate_expires_at),\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    id: data.id,\n    managedCertificate: data.managed_certificate,\n    pipelineId: data.pipeline_id,\n    projectId: data.project_id,\n    secrets: marshalling.unmarshalArrayOfObject(data.secrets, unmarshalTLSSecret),\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalPurgeRequest = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'PurgeRequest' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    all: data.all,\n    assets: data.assets,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    id: data.id,\n    pipelineId: data.pipeline_id,\n    status: data.status,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalCheckDomainResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'CheckDomainResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    isValid: data.is_valid\n  };\n};\nconst unmarshalCheckLbOriginResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'CheckLbOriginResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    errorType: data.error_type,\n    isValid: data.is_valid\n  };\n};\nconst unmarshalCheckPEMChainResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'CheckPEMChainResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    isValid: data.is_valid\n  };\n};\nconst unmarshalListBackendStagesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListBackendStagesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    stages: marshalling.unmarshalArrayOfObject(data.stages, unmarshalBackendStage),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListCacheStagesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListCacheStagesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    stages: marshalling.unmarshalArrayOfObject(data.stages, unmarshalCacheStage),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListDNSStagesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListDNSStagesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    stages: marshalling.unmarshalArrayOfObject(data.stages, unmarshalDNSStage),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListPipelinesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListPipelinesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    pipelines: marshalling.unmarshalArrayOfObject(data.pipelines, unmarshalPipeline),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalPlanDetails = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'PlanDetails' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    packageGb: data.package_gb,\n    pipelineLimit: data.pipeline_limit,\n    planName: data.plan_name\n  };\n};\nconst unmarshalListPlansResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListPlansResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    plans: marshalling.unmarshalArrayOfObject(data.plans, unmarshalPlanDetails),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListPurgeRequestsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListPurgeRequestsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    purgeRequests: marshalling.unmarshalArrayOfObject(\n      data.purge_requests,\n      unmarshalPurgeRequest\n    ),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListTLSStagesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListTLSStagesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    stages: marshalling.unmarshalArrayOfObject(data.stages, unmarshalTLSStage),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalPlan = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Plan' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    planName: data.plan_name\n  };\n};\nconst marshalCheckDomainRequest = (request, defaults) => ({\n  cname: request.cname,\n  fqdn: request.fqdn,\n  project_id: request.projectId ?? defaults.defaultProjectId\n});\nconst marshalScalewayLb = (request, defaults) => ({\n  domain_name: request.domainName,\n  frontend_id: request.frontendId,\n  id: request.id,\n  is_ssl: request.isSsl,\n  zone: request.zone\n});\nconst marshalCheckLbOriginRequest = (request, defaults) => ({\n  lb: request.lb !== void 0 ? marshalScalewayLb(request.lb) : void 0\n});\nconst marshalCheckPEMChainRequestSecretChain = (request, defaults) => ({\n  secret_id: request.secretId,\n  secret_region: request.secretRegion\n});\nconst marshalCheckPEMChainRequest = (request, defaults) => ({\n  fqdn: request.fqdn,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  ...marshalling.resolveOneOf([\n    {\n      param: \"secret\",\n      value: request.secret !== void 0 ? marshalCheckPEMChainRequestSecretChain(request.secret) : void 0\n    },\n    { param: \"raw\", value: request.raw }\n  ])\n});\nconst marshalScalewayLbBackendConfig = (request, defaults) => ({\n  lbs: request.lbs.map((elt) => marshalScalewayLb(elt))\n});\nconst marshalScalewayS3BackendConfig = (request, defaults) => ({\n  bucket_name: request.bucketName,\n  bucket_region: request.bucketRegion,\n  is_website: request.isWebsite\n});\nconst marshalCreateBackendStageRequest = (request, defaults) => ({\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  ...marshalling.resolveOneOf([\n    {\n      param: \"scaleway_s3\",\n      value: request.scalewayS3 !== void 0 ? marshalScalewayS3BackendConfig(request.scalewayS3) : void 0\n    },\n    {\n      param: \"scaleway_lb\",\n      value: request.scalewayLb !== void 0 ? marshalScalewayLbBackendConfig(request.scalewayLb) : void 0\n    }\n  ])\n});\nconst marshalCreateCacheStageRequest = (request, defaults) => ({\n  fallback_ttl: request.fallbackTtl,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  ...marshalling.resolveOneOf([\n    { param: \"backend_stage_id\", value: request.backendStageId }\n  ])\n});\nconst marshalCreateDNSStageRequest = (request, defaults) => ({\n  fqdns: request.fqdns,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  ...marshalling.resolveOneOf([\n    { param: \"tls_stage_id\", value: request.tlsStageId },\n    { param: \"cache_stage_id\", value: request.cacheStageId },\n    { param: \"backend_stage_id\", value: request.backendStageId }\n  ])\n});\nconst marshalCreatePipelineRequest = (request, defaults) => ({\n  description: request.description,\n  name: request.name,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  ...marshalling.resolveOneOf([{ param: \"dns_stage_id\", value: request.dnsStageId }])\n});\nconst marshalCreatePurgeRequestRequest = (request, defaults) => ({\n  pipeline_id: request.pipelineId,\n  ...marshalling.resolveOneOf([\n    { param: \"assets\", value: request.assets },\n    { param: \"all\", value: request.all }\n  ])\n});\nconst marshalTLSSecret = (request, defaults) => ({\n  region: request.region,\n  secret_id: request.secretId\n});\nconst marshalCreateTLSStageRequest = (request, defaults) => ({\n  managed_certificate: request.managedCertificate,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  secrets: request.secrets !== void 0 ? request.secrets.map((elt) => marshalTLSSecret(elt)) : void 0,\n  ...marshalling.resolveOneOf([\n    { param: \"cache_stage_id\", value: request.cacheStageId },\n    { param: \"backend_stage_id\", value: request.backendStageId }\n  ])\n});\nconst marshalSelectPlanRequest = (request, defaults) => ({\n  plan_name: request.planName,\n  project_id: request.projectId ?? defaults.defaultProjectId\n});\nconst marshalUpdateBackendStageRequest = (request, defaults) => ({\n  ...marshalling.resolveOneOf([\n    {\n      param: \"scaleway_s3\",\n      value: request.scalewayS3 !== void 0 ? marshalScalewayS3BackendConfig(request.scalewayS3) : void 0\n    },\n    {\n      param: \"scaleway_lb\",\n      value: request.scalewayLb !== void 0 ? marshalScalewayLbBackendConfig(request.scalewayLb) : void 0\n    }\n  ])\n});\nconst marshalUpdateCacheStageRequest = (request, defaults) => ({\n  fallback_ttl: request.fallbackTtl,\n  ...marshalling.resolveOneOf([\n    { param: \"backend_stage_id\", value: request.backendStageId }\n  ])\n});\nconst marshalUpdateDNSStageRequest = (request, defaults) => ({\n  fqdns: request.fqdns,\n  ...marshalling.resolveOneOf([\n    { param: \"tls_stage_id\", value: request.tlsStageId },\n    { param: \"cache_stage_id\", value: request.cacheStageId },\n    { param: \"backend_stage_id\", value: request.backendStageId }\n  ])\n});\nconst marshalUpdatePipelineRequest = (request, defaults) => ({\n  description: request.description,\n  name: request.name,\n  ...marshalling.resolveOneOf([{ param: \"dns_stage_id\", value: request.dnsStageId }])\n});\nconst marshalTLSSecretsConfig = (request, defaults) => ({\n  tls_secrets: request.tlsSecrets.map((elt) => marshalTLSSecret(elt))\n});\nconst marshalUpdateTLSStageRequest = (request, defaults) => ({\n  managed_certificate: request.managedCertificate,\n  tls_secrets_config: request.tlsSecretsConfig !== void 0 ? marshalTLSSecretsConfig(request.tlsSecretsConfig) : void 0,\n  ...marshalling.resolveOneOf([\n    { param: \"cache_stage_id\", value: request.cacheStageId },\n    { param: \"backend_stage_id\", value: request.backendStageId }\n  ])\n});\nexports.marshalCheckDomainRequest = marshalCheckDomainRequest;\nexports.marshalCheckLbOriginRequest = marshalCheckLbOriginRequest;\nexports.marshalCheckPEMChainRequest = marshalCheckPEMChainRequest;\nexports.marshalCreateBackendStageRequest = marshalCreateBackendStageRequest;\nexports.marshalCreateCacheStageRequest = marshalCreateCacheStageRequest;\nexports.marshalCreateDNSStageRequest = marshalCreateDNSStageRequest;\nexports.marshalCreatePipelineRequest = marshalCreatePipelineRequest;\nexports.marshalCreatePurgeRequestRequest = marshalCreatePurgeRequestRequest;\nexports.marshalCreateTLSStageRequest = marshalCreateTLSStageRequest;\nexports.marshalSelectPlanRequest = marshalSelectPlanRequest;\nexports.marshalUpdateBackendStageRequest = marshalUpdateBackendStageRequest;\nexports.marshalUpdateCacheStageRequest = marshalUpdateCacheStageRequest;\nexports.marshalUpdateDNSStageRequest = marshalUpdateDNSStageRequest;\nexports.marshalUpdatePipelineRequest = marshalUpdatePipelineRequest;\nexports.marshalUpdateTLSStageRequest = marshalUpdateTLSStageRequest;\nexports.unmarshalBackendStage = unmarshalBackendStage;\nexports.unmarshalCacheStage = unmarshalCacheStage;\nexports.unmarshalCheckDomainResponse = unmarshalCheckDomainResponse;\nexports.unmarshalCheckLbOriginResponse = unmarshalCheckLbOriginResponse;\nexports.unmarshalCheckPEMChainResponse = unmarshalCheckPEMChainResponse;\nexports.unmarshalDNSStage = unmarshalDNSStage;\nexports.unmarshalListBackendStagesResponse = unmarshalListBackendStagesResponse;\nexports.unmarshalListCacheStagesResponse = unmarshalListCacheStagesResponse;\nexports.unmarshalListDNSStagesResponse = unmarshalListDNSStagesResponse;\nexports.unmarshalListPipelinesResponse = unmarshalListPipelinesResponse;\nexports.unmarshalListPlansResponse = unmarshalListPlansResponse;\nexports.unmarshalListPurgeRequestsResponse = unmarshalListPurgeRequestsResponse;\nexports.unmarshalListTLSStagesResponse = unmarshalListTLSStagesResponse;\nexports.unmarshalPipeline = unmarshalPipeline;\nexports.unmarshalPlan = unmarshalPlan;\nexports.unmarshalPurgeRequest = unmarshalPurgeRequest;\nexports.unmarshalTLSStage = unmarshalTLSStage;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index_gen = require(\"./v1alpha1/index.gen.cjs\");\nexports.v1alpha1 = index_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst intervalRetrier = require(\"../../../internal/async/interval-retrier.cjs\");\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass API extends api.API {\n  /** Lists the available zones of the API. */\n  static LOCALITIES = [\n    \"fr-par-1\",\n    \"fr-par-2\",\n    \"nl-ams-1\"\n  ];\n  /**\n   * Create a new flexible IP. Generate a new flexible IP within a given zone,\n   * specifying its configuration including Project ID and description.\n   *\n   * @param request - The request {@link CreateFlexibleIPRequest}\n   * @returns A Promise of FlexibleIP\n   */\n  createFlexibleIP = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateFlexibleIPRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/flexible-ip/v1alpha1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/fips`\n    },\n    marshalling_gen.unmarshalFlexibleIP\n  );\n  /**\n   * Get an existing flexible IP. Retrieve information about an existing\n   * flexible IP, specified by its ID and zone. Its full details, including\n   * Project ID, description and status, are returned in the response object.\n   *\n   * @param request - The request {@link GetFlexibleIPRequest}\n   * @returns A Promise of FlexibleIP\n   */\n  getFlexibleIP = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/flexible-ip/v1alpha1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/fips/${marshalling.validatePathParam(\"fipId\", request.fipId)}`\n    },\n    marshalling_gen.unmarshalFlexibleIP\n  );\n  /**\n   * Waits for {@link FlexibleIP} to be in a final state.\n   *\n   * @param request - The request {@link GetFlexibleIPRequest}\n   * @param options - The waiting options\n   * @returns A Promise of FlexibleIP\n   */\n  waitForFlexibleIP = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(\n      !content_gen.FLEXIBLE_IP_TRANSIENT_STATUSES.includes(res.status)\n    )),\n    this.getFlexibleIP,\n    request,\n    options\n  );\n  pageOfListFlexibleIPs = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/flexible-ip/v1alpha1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/fips`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId],\n        [\"server_ids\", request.serverIds],\n        [\"status\", request.status],\n        [\"tags\", request.tags]\n      )\n    },\n    marshalling_gen.unmarshalListFlexibleIPsResponse\n  );\n  /**\n   * List flexible IPs. List all flexible IPs within a given zone.\n   *\n   * @param request - The request {@link ListFlexibleIPsRequest}\n   * @returns A Promise of ListFlexibleIPsResponse\n   */\n  listFlexibleIPs = (request = {}) => resourcePaginator.enrichForPagination(\"flexibleIps\", this.pageOfListFlexibleIPs, request);\n  /**\n   * Update an existing flexible IP. Update the parameters of an existing\n   * flexible IP, specified by its ID and zone. These parameters include tags\n   * and description.\n   *\n   * @param request - The request {@link UpdateFlexibleIPRequest}\n   * @returns A Promise of FlexibleIP\n   */\n  updateFlexibleIP = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateFlexibleIPRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/flexible-ip/v1alpha1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/fips/${marshalling.validatePathParam(\"fipId\", request.fipId)}`\n    },\n    marshalling_gen.unmarshalFlexibleIP\n  );\n  /**\n   * Delete an existing flexible IP. Delete an existing flexible IP, specified\n   * by its ID and zone. Note that deleting a flexible IP is permanent and\n   * cannot be undone.\n   *\n   * @param request - The request {@link DeleteFlexibleIPRequest}\n   */\n  deleteFlexibleIP = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/flexible-ip/v1alpha1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/fips/${marshalling.validatePathParam(\"fipId\", request.fipId)}`\n  });\n  /**\n   * Attach an existing flexible IP to a server. Attach an existing flexible IP\n   * to a specified Elastic Metal server.\n   *\n   * @param request - The request {@link AttachFlexibleIPRequest}\n   * @returns A Promise of AttachFlexibleIPsResponse\n   */\n  attachFlexibleIP = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalAttachFlexibleIPRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/flexible-ip/v1alpha1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/fips/attach`\n    },\n    marshalling_gen.unmarshalAttachFlexibleIPsResponse\n  );\n  /**\n   * Detach an existing flexible IP from a server. Detach an existing flexible\n   * IP from a specified Elastic Metal server.\n   *\n   * @param request - The request {@link DetachFlexibleIPRequest}\n   * @returns A Promise of DetachFlexibleIPsResponse\n   */\n  detachFlexibleIP = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalDetachFlexibleIPRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/flexible-ip/v1alpha1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/fips/detach`\n    },\n    marshalling_gen.unmarshalDetachFlexibleIPsResponse\n  );\n  /**\n   * Generate a virtual MAC address on an existing flexible IP. Generate a\n   * virtual MAC (Media Access Control) address on an existing flexible IP.\n   *\n   * @param request - The request {@link GenerateMACAddrRequest}\n   * @returns A Promise of FlexibleIP\n   */\n  generateMACAddr = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalGenerateMACAddrRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/flexible-ip/v1alpha1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/fips/${marshalling.validatePathParam(\"fipId\", request.fipId)}/mac`\n    },\n    marshalling_gen.unmarshalFlexibleIP\n  );\n  /**\n   * Duplicate a virtual MAC address to another flexible IP. Duplicate a virtual\n   * MAC address from a given flexible IP to another flexible IP attached to the\n   * same server.\n   *\n   * @param request - The request {@link DuplicateMACAddrRequest}\n   * @returns A Promise of FlexibleIP\n   */\n  duplicateMACAddr = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalDuplicateMACAddrRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/flexible-ip/v1alpha1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/fips/${marshalling.validatePathParam(\"fipId\", request.fipId)}/mac/duplicate`\n    },\n    marshalling_gen.unmarshalFlexibleIP\n  );\n  /**\n   * Relocate an existing virtual MAC address to a different flexible IP.\n   * Relocate a virtual MAC (Media Access Control) address from an existing\n   * flexible IP to a different flexible IP.\n   *\n   * @param request - The request {@link MoveMACAddrRequest}\n   * @returns A Promise of FlexibleIP\n   */\n  moveMACAddr = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalMoveMACAddrRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/flexible-ip/v1alpha1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/fips/${marshalling.validatePathParam(\"fipId\", request.fipId)}/mac/move`\n    },\n    marshalling_gen.unmarshalFlexibleIP\n  );\n  /**\n   * Detach a given virtual MAC address from an existing flexible IP. Detach a\n   * given MAC (Media Access Control) address from an existing flexible IP.\n   *\n   * @param request - The request {@link DeleteMACAddrRequest}\n   */\n  deleteMACAddr = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/flexible-ip/v1alpha1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/fips/${marshalling.validatePathParam(\"fipId\", request.fipId)}/mac`\n  });\n}\nexports.API = API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst FLEXIBLE_IP_TRANSIENT_STATUSES = [\n  \"updating\",\n  \"detaching\"\n];\nconst MAC_ADDRESS_TRANSIENT_STATUSES = [\n  \"updating\",\n  \"deleting\"\n];\nexports.FLEXIBLE_IP_TRANSIENT_STATUSES = FLEXIBLE_IP_TRANSIENT_STATUSES;\nexports.MAC_ADDRESS_TRANSIENT_STATUSES = MAC_ADDRESS_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst validationRules_gen = require(\"./validation-rules.gen.cjs\");\nexports.API = api_gen.API;\nexports.FLEXIBLE_IP_TRANSIENT_STATUSES = content_gen.FLEXIBLE_IP_TRANSIENT_STATUSES;\nexports.MAC_ADDRESS_TRANSIENT_STATUSES = content_gen.MAC_ADDRESS_TRANSIENT_STATUSES;\nexports.ValidationRules = validationRules_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst json = require(\"../../../helpers/json.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst unmarshalMACAddress = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'MACAddress' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    id: data.id,\n    macAddress: data.mac_address,\n    macType: data.mac_type,\n    status: data.status,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    zone: data.zone\n  };\n};\nconst unmarshalFlexibleIP = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'FlexibleIP' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    description: data.description,\n    id: data.id,\n    ipAddress: data.ip_address,\n    macAddress: data.mac_address ? unmarshalMACAddress(data.mac_address) : void 0,\n    organizationId: data.organization_id,\n    projectId: data.project_id,\n    reverse: data.reverse,\n    serverId: data.server_id,\n    status: data.status,\n    tags: data.tags,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    zone: data.zone\n  };\n};\nconst unmarshalAttachFlexibleIPsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'AttachFlexibleIPsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    flexibleIps: marshalling.unmarshalArrayOfObject(data.flexible_ips, unmarshalFlexibleIP),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalDetachFlexibleIPsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DetachFlexibleIPsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    flexibleIps: marshalling.unmarshalArrayOfObject(data.flexible_ips, unmarshalFlexibleIP),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListFlexibleIPsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListFlexibleIPsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    flexibleIps: marshalling.unmarshalArrayOfObject(data.flexible_ips, unmarshalFlexibleIP),\n    totalCount: data.total_count\n  };\n};\nconst marshalAttachFlexibleIPRequest = (request, defaults) => ({\n  fips_ids: request.fipsIds,\n  server_id: request.serverId\n});\nconst marshalCreateFlexibleIPRequest = (request, defaults) => ({\n  description: request.description,\n  is_ipv6: request.isIpv6,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  reverse: request.reverse,\n  server_id: request.serverId,\n  tags: request.tags\n});\nconst marshalDetachFlexibleIPRequest = (request, defaults) => ({\n  fips_ids: request.fipsIds\n});\nconst marshalDuplicateMACAddrRequest = (request, defaults) => ({\n  duplicate_from_fip_id: request.duplicateFromFipId\n});\nconst marshalGenerateMACAddrRequest = (request, defaults) => ({\n  mac_type: request.macType\n});\nconst marshalMoveMACAddrRequest = (request, defaults) => ({\n  dst_fip_id: request.dstFipId\n});\nconst marshalUpdateFlexibleIPRequest = (request, defaults) => ({\n  description: request.description,\n  reverse: request.reverse,\n  tags: request.tags\n});\nexports.marshalAttachFlexibleIPRequest = marshalAttachFlexibleIPRequest;\nexports.marshalCreateFlexibleIPRequest = marshalCreateFlexibleIPRequest;\nexports.marshalDetachFlexibleIPRequest = marshalDetachFlexibleIPRequest;\nexports.marshalDuplicateMACAddrRequest = marshalDuplicateMACAddrRequest;\nexports.marshalGenerateMACAddrRequest = marshalGenerateMACAddrRequest;\nexports.marshalMoveMACAddrRequest = marshalMoveMACAddrRequest;\nexports.marshalUpdateFlexibleIPRequest = marshalUpdateFlexibleIPRequest;\nexports.unmarshalAttachFlexibleIPsResponse = unmarshalAttachFlexibleIPsResponse;\nexports.unmarshalDetachFlexibleIPsResponse = unmarshalDetachFlexibleIPsResponse;\nexports.unmarshalFlexibleIP = unmarshalFlexibleIP;\nexports.unmarshalListFlexibleIPsResponse = unmarshalListFlexibleIPsResponse;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst ListFlexibleIPsRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nexports.ListFlexibleIPsRequest = ListFlexibleIPsRequest;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index_gen = require(\"./v1beta1/index.gen.cjs\");\nexports.v1beta1 = index_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst intervalRetrier = require(\"../../../internal/async/interval-retrier.cjs\");\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass API extends api.API {\n  /** Lists the available regions of the API. */\n  static LOCALITIES = [\"fr-par\", \"nl-ams\", \"pl-waw\"];\n  pageOfListNamespaces = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/functions/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/namespaces`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListNamespacesResponse\n  );\n  /**\n   * List all your namespaces. List all existing namespaces in the specified\n   * region.\n   *\n   * @param request - The request {@link ListNamespacesRequest}\n   * @returns A Promise of ListNamespacesResponse\n   */\n  listNamespaces = (request = {}) => resourcePaginator.enrichForPagination(\"namespaces\", this.pageOfListNamespaces, request);\n  /**\n   * Get a namespace. Get the namespace associated with the specified ID.\n   *\n   * @param request - The request {@link GetNamespaceRequest}\n   * @returns A Promise of Namespace\n   */\n  getNamespace = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/functions/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/namespaces/${marshalling.validatePathParam(\"namespaceId\", request.namespaceId)}`\n    },\n    marshalling_gen.unmarshalNamespace\n  );\n  /**\n   * Waits for {@link Namespace} to be in a final state.\n   *\n   * @param request - The request {@link GetNamespaceRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Namespace\n   */\n  waitForNamespace = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.NAMESPACE_TRANSIENT_STATUSES.includes(res.status))),\n    this.getNamespace,\n    request,\n    options\n  );\n  /**\n   * Create a new namespace. Create a new namespace in a specified Organization\n   * or Project.\n   *\n   * @param request - The request {@link CreateNamespaceRequest}\n   * @returns A Promise of Namespace\n   */\n  createNamespace = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateNamespaceRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/functions/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/namespaces`\n    },\n    marshalling_gen.unmarshalNamespace\n  );\n  /**\n   * Update an existing namespace. Update the namespace associated with the\n   * specified ID.\n   *\n   * @param request - The request {@link UpdateNamespaceRequest}\n   * @returns A Promise of Namespace\n   */\n  updateNamespace = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateNamespaceRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/functions/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/namespaces/${marshalling.validatePathParam(\"namespaceId\", request.namespaceId)}`\n    },\n    marshalling_gen.unmarshalNamespace\n  );\n  /**\n   * Delete an existing namespace. Delete the namespace associated with the\n   * specified ID.\n   *\n   * @param request - The request {@link DeleteNamespaceRequest}\n   * @returns A Promise of Namespace\n   */\n  deleteNamespace = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/functions/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/namespaces/${marshalling.validatePathParam(\"namespaceId\", request.namespaceId)}`\n    },\n    marshalling_gen.unmarshalNamespace\n  );\n  pageOfListFunctions = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/functions/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/functions`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"namespace_id\", request.namespaceId],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListFunctionsResponse\n  );\n  /**\n   * List all your functions.\n   *\n   * @param request - The request {@link ListFunctionsRequest}\n   * @returns A Promise of ListFunctionsResponse\n   */\n  listFunctions = (request) => resourcePaginator.enrichForPagination(\"functions\", this.pageOfListFunctions, request);\n  /**\n   * Get a function. Get the function associated with the specified ID.\n   *\n   * @param request - The request {@link GetFunctionRequest}\n   * @returns A Promise of Function\n   */\n  getFunction = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/functions/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/functions/${marshalling.validatePathParam(\"functionId\", request.functionId)}`\n    },\n    marshalling_gen.unmarshalFunction\n  );\n  /**\n   * Waits for {@link Function} to be in a final state.\n   *\n   * @param request - The request {@link GetFunctionRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Function\n   */\n  waitForFunction = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.FUNCTION_TRANSIENT_STATUSES.includes(res.status))),\n    this.getFunction,\n    request,\n    options\n  );\n  /**\n   * Create a new function. Create a new function in the specified region for a\n   * specified Organization or Project.\n   *\n   * @param request - The request {@link CreateFunctionRequest}\n   * @returns A Promise of Function\n   */\n  createFunction = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateFunctionRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/functions/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/functions`\n    },\n    marshalling_gen.unmarshalFunction\n  );\n  /**\n   * Update an existing function. Update the function associated with the\n   * specified ID.\n   *\n   * @param request - The request {@link UpdateFunctionRequest}\n   * @returns A Promise of Function\n   */\n  updateFunction = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateFunctionRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/functions/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/functions/${marshalling.validatePathParam(\"functionId\", request.functionId)}`\n    },\n    marshalling_gen.unmarshalFunction\n  );\n  /**\n   * Delete a function. Delete the function associated with the specified ID.\n   *\n   * @param request - The request {@link DeleteFunctionRequest}\n   * @returns A Promise of Function\n   */\n  deleteFunction = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/functions/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/functions/${marshalling.validatePathParam(\"functionId\", request.functionId)}`\n    },\n    marshalling_gen.unmarshalFunction\n  );\n  /**\n   * Deploy a function. Deploy a function associated with the specified ID.\n   *\n   * @param request - The request {@link DeployFunctionRequest}\n   * @returns A Promise of Function\n   */\n  deployFunction = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/functions/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/functions/${marshalling.validatePathParam(\"functionId\", request.functionId)}/deploy`\n    },\n    marshalling_gen.unmarshalFunction\n  );\n  /**\n   * List function runtimes. List available function runtimes.\n   *\n   * @param request - The request {@link ListFunctionRuntimesRequest}\n   * @returns A Promise of ListFunctionRuntimesResponse\n   */\n  listFunctionRuntimes = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/functions/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/runtimes`\n    },\n    marshalling_gen.unmarshalListFunctionRuntimesResponse\n  );\n  /**\n   * Get an upload URL of a function. Get an upload URL of a function associated\n   * with the specified ID.\n   *\n   * @param request - The request {@link GetFunctionUploadURLRequest}\n   * @returns A Promise of UploadURL\n   */\n  getFunctionUploadURL = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/functions/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/functions/${marshalling.validatePathParam(\"functionId\", request.functionId)}/upload-url`,\n      urlParams: marshalling.urlParams([\"content_length\", request.contentLength])\n    },\n    marshalling_gen.unmarshalUploadURL\n  );\n  /**\n   * Get a download URL of a function. Get a download URL for a function\n   * associated with the specified ID.\n   *\n   * @param request - The request {@link GetFunctionDownloadURLRequest}\n   * @returns A Promise of DownloadURL\n   */\n  getFunctionDownloadURL = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/functions/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/functions/${marshalling.validatePathParam(\"functionId\", request.functionId)}/download-url`\n    },\n    marshalling_gen.unmarshalDownloadURL\n  );\n  pageOfListCrons = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/functions/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/crons`,\n      urlParams: marshalling.urlParams(\n        [\"function_id\", request.functionId],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListCronsResponse\n  );\n  /**\n   * List all crons. List all the cronjobs in a specified region.\n   *\n   * @param request - The request {@link ListCronsRequest}\n   * @returns A Promise of ListCronsResponse\n   */\n  listCrons = (request) => resourcePaginator.enrichForPagination(\"crons\", this.pageOfListCrons, request);\n  /**\n   * Get a cron. Get the cron associated with the specified ID.\n   *\n   * @param request - The request {@link GetCronRequest}\n   * @returns A Promise of Cron\n   */\n  getCron = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/functions/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/crons/${marshalling.validatePathParam(\"cronId\", request.cronId)}`\n    },\n    marshalling_gen.unmarshalCron\n  );\n  /**\n   * Waits for {@link Cron} to be in a final state.\n   *\n   * @param request - The request {@link GetCronRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Cron\n   */\n  waitForCron = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.CRON_TRANSIENT_STATUSES.includes(res.status))),\n    this.getCron,\n    request,\n    options\n  );\n  /**\n   * Create a new cron. Create a new cronjob for a function with the specified\n   * ID.\n   *\n   * @param request - The request {@link CreateCronRequest}\n   * @returns A Promise of Cron\n   */\n  createCron = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateCronRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/functions/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/crons`\n    },\n    marshalling_gen.unmarshalCron\n  );\n  /**\n   * Update an existing cron. Update the cron associated with the specified ID.\n   *\n   * @param request - The request {@link UpdateCronRequest}\n   * @returns A Promise of Cron\n   */\n  updateCron = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateCronRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/functions/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/crons/${marshalling.validatePathParam(\"cronId\", request.cronId)}`\n    },\n    marshalling_gen.unmarshalCron\n  );\n  /**\n   * Delete an existing cron. Delete the cron associated with the specified ID.\n   *\n   * @param request - The request {@link DeleteCronRequest}\n   * @returns A Promise of Cron\n   */\n  deleteCron = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/functions/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/crons/${marshalling.validatePathParam(\"cronId\", request.cronId)}`\n    },\n    marshalling_gen.unmarshalCron\n  );\n  pageOfListDomains = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/functions/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/domains`,\n      urlParams: marshalling.urlParams(\n        [\"function_id\", request.functionId],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListDomainsResponse\n  );\n  /**\n   * List all domain name bindings. List all domain name bindings in a specified\n   * region.\n   *\n   * @param request - The request {@link ListDomainsRequest}\n   * @returns A Promise of ListDomainsResponse\n   */\n  listDomains = (request) => resourcePaginator.enrichForPagination(\"domains\", this.pageOfListDomains, request);\n  /**\n   * Get a domain name binding. Get a domain name binding for the function with\n   * the specified ID.\n   *\n   * @param request - The request {@link GetDomainRequest}\n   * @returns A Promise of Domain\n   */\n  getDomain = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/functions/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/domains/${marshalling.validatePathParam(\"domainId\", request.domainId)}`\n    },\n    marshalling_gen.unmarshalDomain\n  );\n  /**\n   * Waits for {@link Domain} to be in a final state.\n   *\n   * @param request - The request {@link GetDomainRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Domain\n   */\n  waitForDomain = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.DOMAIN_TRANSIENT_STATUSES.includes(res.status))),\n    this.getDomain,\n    request,\n    options\n  );\n  /**\n   * Create a domain name binding. Create a domain name binding for the function\n   * with the specified ID.\n   *\n   * @param request - The request {@link CreateDomainRequest}\n   * @returns A Promise of Domain\n   */\n  createDomain = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateDomainRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/functions/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/domains`\n    },\n    marshalling_gen.unmarshalDomain\n  );\n  /**\n   * Delete a domain name binding. Delete a domain name binding for the function\n   * with the specified ID.\n   *\n   * @param request - The request {@link DeleteDomainRequest}\n   * @returns A Promise of Domain\n   */\n  deleteDomain = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/functions/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/domains/${marshalling.validatePathParam(\"domainId\", request.domainId)}`\n    },\n    marshalling_gen.unmarshalDomain\n  );\n  /**\n   * Create a new revocable token.\n   *\n   * @param request - The request {@link CreateTokenRequest}\n   * @returns A Promise of Token\n   */\n  createToken = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateTokenRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/functions/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/tokens`\n    },\n    marshalling_gen.unmarshalToken\n  );\n  /**\n   * Get a token.\n   *\n   * @param request - The request {@link GetTokenRequest}\n   * @returns A Promise of Token\n   */\n  getToken = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/functions/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/tokens/${marshalling.validatePathParam(\"tokenId\", request.tokenId)}`\n    },\n    marshalling_gen.unmarshalToken\n  );\n  /**\n   * Waits for {@link Token} to be in a final state.\n   *\n   * @param request - The request {@link GetTokenRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Token\n   */\n  waitForToken = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.TOKEN_TRANSIENT_STATUSES.includes(res.status))),\n    this.getToken,\n    request,\n    options\n  );\n  pageOfListTokens = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/functions/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/tokens`,\n      urlParams: marshalling.urlParams(\n        [\"function_id\", request.functionId],\n        [\"namespace_id\", request.namespaceId],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListTokensResponse\n  );\n  /**\n   * List all tokens.\n   *\n   * @param request - The request {@link ListTokensRequest}\n   * @returns A Promise of ListTokensResponse\n   */\n  listTokens = (request = {}) => resourcePaginator.enrichForPagination(\"tokens\", this.pageOfListTokens, request);\n  /**\n   * Delete a token.\n   *\n   * @param request - The request {@link DeleteTokenRequest}\n   * @returns A Promise of Token\n   */\n  deleteToken = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/functions/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/tokens/${marshalling.validatePathParam(\"tokenId\", request.tokenId)}`\n    },\n    marshalling_gen.unmarshalToken\n  );\n  /**\n   * Create a trigger. Create a new trigger for a specified function.\n   *\n   * @param request - The request {@link CreateTriggerRequest}\n   * @returns A Promise of Trigger\n   */\n  createTrigger = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateTriggerRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/functions/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/triggers`\n    },\n    marshalling_gen.unmarshalTrigger\n  );\n  /**\n   * Get a trigger. Get a trigger with a specified ID.\n   *\n   * @param request - The request {@link GetTriggerRequest}\n   * @returns A Promise of Trigger\n   */\n  getTrigger = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/functions/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/triggers/${marshalling.validatePathParam(\"triggerId\", request.triggerId)}`\n    },\n    marshalling_gen.unmarshalTrigger\n  );\n  /**\n   * Waits for {@link Trigger} to be in a final state.\n   *\n   * @param request - The request {@link GetTriggerRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Trigger\n   */\n  waitForTrigger = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.TRIGGER_TRANSIENT_STATUSES.includes(res.status))),\n    this.getTrigger,\n    request,\n    options\n  );\n  pageOfListTriggers = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/functions/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/triggers`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        ...Object.entries(\n          marshalling.resolveOneOf([\n            { param: \"function_id\", value: request.functionId },\n            { param: \"namespace_id\", value: request.namespaceId },\n            {\n              default: this.client.settings.defaultProjectId,\n              param: \"project_id\",\n              value: request.projectId\n            }\n          ])\n        )\n      )\n    },\n    marshalling_gen.unmarshalListTriggersResponse\n  );\n  /**\n   * List all triggers. List all triggers belonging to a specified Organization\n   * or Project.\n   *\n   * @param request - The request {@link ListTriggersRequest}\n   * @returns A Promise of ListTriggersResponse\n   */\n  listTriggers = (request = {}) => resourcePaginator.enrichForPagination(\"triggers\", this.pageOfListTriggers, request);\n  /**\n   * Update a trigger. Update a trigger with a specified ID.\n   *\n   * @param request - The request {@link UpdateTriggerRequest}\n   * @returns A Promise of Trigger\n   */\n  updateTrigger = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateTriggerRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/functions/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/triggers/${marshalling.validatePathParam(\"triggerId\", request.triggerId)}`\n    },\n    marshalling_gen.unmarshalTrigger\n  );\n  /**\n   * Delete a trigger. Delete a trigger with a specified ID.\n   *\n   * @param request - The request {@link DeleteTriggerRequest}\n   * @returns A Promise of Trigger\n   */\n  deleteTrigger = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/functions/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/triggers/${marshalling.validatePathParam(\"triggerId\", request.triggerId)}`\n    },\n    marshalling_gen.unmarshalTrigger\n  );\n}\nexports.API = API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst CRON_TRANSIENT_STATUSES = [\n  \"deleting\",\n  \"creating\",\n  \"pending\"\n];\nconst DOMAIN_TRANSIENT_STATUSES = [\n  \"deleting\",\n  \"creating\",\n  \"pending\"\n];\nconst FUNCTION_TRANSIENT_STATUSES = [\n  \"deleting\",\n  \"creating\",\n  \"pending\"\n];\nconst NAMESPACE_TRANSIENT_STATUSES = [\n  \"deleting\",\n  \"creating\",\n  \"pending\"\n];\nconst TOKEN_TRANSIENT_STATUSES = [\"deleting\", \"creating\"];\nconst TRIGGER_TRANSIENT_STATUSES = [\n  \"deleting\",\n  \"creating\",\n  \"pending\"\n];\nexports.CRON_TRANSIENT_STATUSES = CRON_TRANSIENT_STATUSES;\nexports.DOMAIN_TRANSIENT_STATUSES = DOMAIN_TRANSIENT_STATUSES;\nexports.FUNCTION_TRANSIENT_STATUSES = FUNCTION_TRANSIENT_STATUSES;\nexports.NAMESPACE_TRANSIENT_STATUSES = NAMESPACE_TRANSIENT_STATUSES;\nexports.TOKEN_TRANSIENT_STATUSES = TOKEN_TRANSIENT_STATUSES;\nexports.TRIGGER_TRANSIENT_STATUSES = TRIGGER_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst validationRules_gen = require(\"./validation-rules.gen.cjs\");\nexports.API = api_gen.API;\nexports.CRON_TRANSIENT_STATUSES = content_gen.CRON_TRANSIENT_STATUSES;\nexports.DOMAIN_TRANSIENT_STATUSES = content_gen.DOMAIN_TRANSIENT_STATUSES;\nexports.FUNCTION_TRANSIENT_STATUSES = content_gen.FUNCTION_TRANSIENT_STATUSES;\nexports.NAMESPACE_TRANSIENT_STATUSES = content_gen.NAMESPACE_TRANSIENT_STATUSES;\nexports.TOKEN_TRANSIENT_STATUSES = content_gen.TOKEN_TRANSIENT_STATUSES;\nexports.TRIGGER_TRANSIENT_STATUSES = content_gen.TRIGGER_TRANSIENT_STATUSES;\nexports.ValidationRules = validationRules_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst randomName = require(\"@scaleway/random-name\");\nconst json = require(\"../../../helpers/json.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst unmarshalCron = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Cron' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    args: data.args,\n    functionId: data.function_id,\n    id: data.id,\n    name: data.name,\n    schedule: data.schedule,\n    status: data.status\n  };\n};\nconst unmarshalDomain = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Domain' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    errorMessage: data.error_message,\n    functionId: data.function_id,\n    hostname: data.hostname,\n    id: data.id,\n    status: data.status,\n    url: data.url\n  };\n};\nconst unmarshalSecretHashedValue = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SecretHashedValue' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    hashedValue: data.hashed_value,\n    key: data.key\n  };\n};\nconst unmarshalFunction = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Function' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    buildMessage: data.build_message,\n    cpuLimit: data.cpu_limit,\n    description: data.description,\n    domainName: data.domain_name,\n    environmentVariables: data.environment_variables,\n    errorMessage: data.error_message,\n    handler: data.handler,\n    httpOption: data.http_option,\n    id: data.id,\n    maxScale: data.max_scale,\n    memoryLimit: data.memory_limit,\n    minScale: data.min_scale,\n    name: data.name,\n    namespaceId: data.namespace_id,\n    privacy: data.privacy,\n    region: data.region,\n    runtime: data.runtime,\n    runtimeMessage: data.runtime_message,\n    sandbox: data.sandbox,\n    secretEnvironmentVariables: marshalling.unmarshalArrayOfObject(\n      data.secret_environment_variables,\n      unmarshalSecretHashedValue\n    ),\n    status: data.status,\n    timeout: data.timeout\n  };\n};\nconst unmarshalNamespace = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Namespace' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    description: data.description,\n    environmentVariables: data.environment_variables,\n    errorMessage: data.error_message,\n    id: data.id,\n    name: data.name,\n    organizationId: data.organization_id,\n    projectId: data.project_id,\n    region: data.region,\n    registryEndpoint: data.registry_endpoint,\n    registryNamespaceId: data.registry_namespace_id,\n    secretEnvironmentVariables: marshalling.unmarshalArrayOfObject(\n      data.secret_environment_variables,\n      unmarshalSecretHashedValue\n    ),\n    status: data.status\n  };\n};\nconst unmarshalToken = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Token' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    description: data.description,\n    expiresAt: marshalling.unmarshalDate(data.expires_at),\n    functionId: data.function_id,\n    id: data.id,\n    namespaceId: data.namespace_id,\n    publicKey: data.public_key,\n    status: data.status,\n    token: data.token\n  };\n};\nconst unmarshalTriggerMnqNatsClientConfig = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'TriggerMnqNatsClientConfig' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    mnqCredentialId: data.mnq_credential_id,\n    mnqNatsAccountId: data.mnq_nats_account_id,\n    mnqProjectId: data.mnq_project_id,\n    mnqRegion: data.mnq_region,\n    subject: data.subject\n  };\n};\nconst unmarshalTriggerMnqSqsClientConfig = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'TriggerMnqSqsClientConfig' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    mnqCredentialId: data.mnq_credential_id,\n    mnqProjectId: data.mnq_project_id,\n    mnqRegion: data.mnq_region,\n    queue: data.queue\n  };\n};\nconst unmarshalTriggerSqsClientConfig = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'TriggerSqsClientConfig' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    accessKey: data.access_key,\n    endpoint: data.endpoint,\n    queueUrl: data.queue_url,\n    secretKey: data.secret_key\n  };\n};\nconst unmarshalTrigger = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Trigger' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    description: data.description,\n    errorMessage: data.error_message,\n    functionId: data.function_id,\n    id: data.id,\n    inputType: data.input_type,\n    name: data.name,\n    scwNatsConfig: data.scw_nats_config ? unmarshalTriggerMnqNatsClientConfig(data.scw_nats_config) : void 0,\n    scwSqsConfig: data.scw_sqs_config ? unmarshalTriggerMnqSqsClientConfig(data.scw_sqs_config) : void 0,\n    sqsConfig: data.sqs_config ? unmarshalTriggerSqsClientConfig(data.sqs_config) : void 0,\n    status: data.status\n  };\n};\nconst unmarshalDownloadURL = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DownloadURL' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    headers: data.headers,\n    url: data.url\n  };\n};\nconst unmarshalListCronsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListCronsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    crons: marshalling.unmarshalArrayOfObject(data.crons, unmarshalCron),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListDomainsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListDomainsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    domains: marshalling.unmarshalArrayOfObject(data.domains, unmarshalDomain),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalRuntime = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Runtime' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    codeSample: data.code_sample,\n    defaultHandler: data.default_handler,\n    extension: data.extension,\n    implementation: data.implementation,\n    language: data.language,\n    logoUrl: data.logo_url,\n    name: data.name,\n    status: data.status,\n    statusMessage: data.status_message,\n    version: data.version\n  };\n};\nconst unmarshalListFunctionRuntimesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListFunctionRuntimesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    runtimes: marshalling.unmarshalArrayOfObject(data.runtimes, unmarshalRuntime),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListFunctionsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListFunctionsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    functions: marshalling.unmarshalArrayOfObject(data.functions, unmarshalFunction),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListNamespacesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListNamespacesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    namespaces: marshalling.unmarshalArrayOfObject(data.namespaces, unmarshalNamespace),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListTokensResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListTokensResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    tokens: marshalling.unmarshalArrayOfObject(data.tokens, unmarshalToken),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListTriggersResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListTriggersResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    totalCount: data.total_count,\n    triggers: marshalling.unmarshalArrayOfObject(data.triggers, unmarshalTrigger)\n  };\n};\nconst unmarshalUploadURL = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'UploadURL' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    headers: data.headers,\n    url: data.url\n  };\n};\nconst marshalCreateCronRequest = (request, defaults) => ({\n  args: request.args,\n  function_id: request.functionId,\n  name: request.name,\n  schedule: request.schedule\n});\nconst marshalCreateDomainRequest = (request, defaults) => ({\n  function_id: request.functionId,\n  hostname: request.hostname\n});\nconst marshalSecret = (request, defaults) => ({\n  key: request.key,\n  value: request.value\n});\nconst marshalCreateFunctionRequest = (request, defaults) => ({\n  description: request.description,\n  environment_variables: request.environmentVariables,\n  handler: request.handler,\n  http_option: request.httpOption,\n  max_scale: request.maxScale,\n  memory_limit: request.memoryLimit,\n  min_scale: request.minScale,\n  name: request.name || randomName(\"fn\"),\n  namespace_id: request.namespaceId,\n  privacy: request.privacy,\n  runtime: request.runtime,\n  sandbox: request.sandbox,\n  secret_environment_variables: request.secretEnvironmentVariables !== void 0 ? request.secretEnvironmentVariables.map(\n    (elt) => marshalSecret(elt)\n  ) : void 0,\n  timeout: request.timeout\n});\nconst marshalCreateNamespaceRequest = (request, defaults) => ({\n  description: request.description,\n  environment_variables: request.environmentVariables,\n  name: request.name || randomName(\"ns\"),\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  secret_environment_variables: request.secretEnvironmentVariables !== void 0 ? request.secretEnvironmentVariables.map(\n    (elt) => marshalSecret(elt)\n  ) : void 0\n});\nconst marshalCreateTokenRequest = (request, defaults) => ({\n  description: request.description,\n  expires_at: request.expiresAt,\n  ...marshalling.resolveOneOf([\n    { param: \"function_id\", value: request.functionId },\n    { param: \"namespace_id\", value: request.namespaceId }\n  ])\n});\nconst marshalCreateTriggerRequestMnqNatsClientConfig = (request, defaults) => ({\n  mnq_nats_account_id: request.mnqNatsAccountId,\n  mnq_project_id: request.mnqProjectId,\n  mnq_region: request.mnqRegion,\n  subject: request.subject\n});\nconst marshalCreateTriggerRequestMnqSqsClientConfig = (request, defaults) => ({\n  mnq_project_id: request.mnqProjectId,\n  mnq_region: request.mnqRegion,\n  queue: request.queue\n});\nconst marshalCreateTriggerRequestSqsClientConfig = (request, defaults) => ({\n  access_key: request.accessKey,\n  endpoint: request.endpoint,\n  queue_url: request.queueUrl,\n  secret_key: request.secretKey\n});\nconst marshalCreateTriggerRequest = (request, defaults) => ({\n  description: request.description,\n  function_id: request.functionId,\n  name: request.name,\n  ...marshalling.resolveOneOf([\n    {\n      param: \"scw_sqs_config\",\n      value: request.scwSqsConfig !== void 0 ? marshalCreateTriggerRequestMnqSqsClientConfig(\n        request.scwSqsConfig\n      ) : void 0\n    },\n    {\n      param: \"scw_nats_config\",\n      value: request.scwNatsConfig !== void 0 ? marshalCreateTriggerRequestMnqNatsClientConfig(\n        request.scwNatsConfig\n      ) : void 0\n    },\n    {\n      param: \"sqs_config\",\n      value: request.sqsConfig !== void 0 ? marshalCreateTriggerRequestSqsClientConfig(\n        request.sqsConfig\n      ) : void 0\n    }\n  ])\n});\nconst marshalUpdateCronRequest = (request, defaults) => ({\n  args: request.args,\n  function_id: request.functionId,\n  name: request.name,\n  schedule: request.schedule\n});\nconst marshalUpdateFunctionRequest = (request, defaults) => ({\n  description: request.description,\n  environment_variables: request.environmentVariables,\n  handler: request.handler,\n  http_option: request.httpOption,\n  max_scale: request.maxScale,\n  memory_limit: request.memoryLimit,\n  min_scale: request.minScale,\n  privacy: request.privacy,\n  redeploy: request.redeploy,\n  runtime: request.runtime,\n  sandbox: request.sandbox,\n  secret_environment_variables: request.secretEnvironmentVariables !== void 0 ? request.secretEnvironmentVariables.map(\n    (elt) => marshalSecret(elt)\n  ) : void 0,\n  timeout: request.timeout\n});\nconst marshalUpdateNamespaceRequest = (request, defaults) => ({\n  description: request.description,\n  environment_variables: request.environmentVariables,\n  secret_environment_variables: request.secretEnvironmentVariables !== void 0 ? request.secretEnvironmentVariables.map(\n    (elt) => marshalSecret(elt)\n  ) : void 0\n});\nconst marshalUpdateTriggerRequestSqsClientConfig = (request, defaults) => ({\n  access_key: request.accessKey,\n  secret_key: request.secretKey\n});\nconst marshalUpdateTriggerRequest = (request, defaults) => ({\n  description: request.description,\n  name: request.name,\n  ...marshalling.resolveOneOf([\n    {\n      param: \"sqs_config\",\n      value: request.sqsConfig !== void 0 ? marshalUpdateTriggerRequestSqsClientConfig(\n        request.sqsConfig\n      ) : void 0\n    }\n  ])\n});\nexports.marshalCreateCronRequest = marshalCreateCronRequest;\nexports.marshalCreateDomainRequest = marshalCreateDomainRequest;\nexports.marshalCreateFunctionRequest = marshalCreateFunctionRequest;\nexports.marshalCreateNamespaceRequest = marshalCreateNamespaceRequest;\nexports.marshalCreateTokenRequest = marshalCreateTokenRequest;\nexports.marshalCreateTriggerRequest = marshalCreateTriggerRequest;\nexports.marshalUpdateCronRequest = marshalUpdateCronRequest;\nexports.marshalUpdateFunctionRequest = marshalUpdateFunctionRequest;\nexports.marshalUpdateNamespaceRequest = marshalUpdateNamespaceRequest;\nexports.marshalUpdateTriggerRequest = marshalUpdateTriggerRequest;\nexports.unmarshalCron = unmarshalCron;\nexports.unmarshalDomain = unmarshalDomain;\nexports.unmarshalDownloadURL = unmarshalDownloadURL;\nexports.unmarshalFunction = unmarshalFunction;\nexports.unmarshalListCronsResponse = unmarshalListCronsResponse;\nexports.unmarshalListDomainsResponse = unmarshalListDomainsResponse;\nexports.unmarshalListFunctionRuntimesResponse = unmarshalListFunctionRuntimesResponse;\nexports.unmarshalListFunctionsResponse = unmarshalListFunctionsResponse;\nexports.unmarshalListNamespacesResponse = unmarshalListNamespacesResponse;\nexports.unmarshalListTokensResponse = unmarshalListTokensResponse;\nexports.unmarshalListTriggersResponse = unmarshalListTriggersResponse;\nexports.unmarshalNamespace = unmarshalNamespace;\nexports.unmarshalToken = unmarshalToken;\nexports.unmarshalTrigger = unmarshalTrigger;\nexports.unmarshalUploadURL = unmarshalUploadURL;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst CreateTriggerRequest = {\n  description: {\n    maxLength: 255\n  },\n  name: {\n    maxLength: 50,\n    minLength: 1\n  }\n};\nconst CreateTriggerRequestMnqNatsClientConfig = {\n  mnqRegion: {\n    maxLength: 20,\n    minLength: 1\n  },\n  subject: {\n    maxLength: 100,\n    minLength: 1,\n    pattern: /^[^\\s]+$/\n  }\n};\nconst CreateTriggerRequestMnqSqsClientConfig = {\n  mnqRegion: {\n    maxLength: 20,\n    minLength: 1\n  },\n  queue: {\n    maxLength: 100,\n    minLength: 1\n  }\n};\nconst UpdateTriggerRequest = {\n  description: {\n    maxLength: 255\n  },\n  name: {\n    maxLength: 50,\n    minLength: 1\n  }\n};\nexports.CreateTriggerRequest = CreateTriggerRequest;\nexports.CreateTriggerRequestMnqNatsClientConfig = CreateTriggerRequestMnqNatsClientConfig;\nexports.CreateTriggerRequestMnqSqsClientConfig = CreateTriggerRequestMnqSqsClientConfig;\nexports.UpdateTriggerRequest = UpdateTriggerRequest;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index_gen = require(\"./v1alpha1/index.gen.cjs\");\nexports.v1alpha1 = index_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass API extends api.API {\n  pageOfListSSHKeys = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/iam/v1alpha1/ssh-keys`,\n      urlParams: marshalling.urlParams(\n        [\"disabled\", request.disabled],\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListSSHKeysResponse\n  );\n  /**\n   * List SSH keys. List SSH keys. By default, the SSH keys listed are ordered\n   * by creation date in ascending order. This can be modified via the\n   * `order_by` field. You can define additional parameters for your query such\n   * as `organization_id`, `name`, `project_id` and `disabled`.\n   *\n   * @param request - The request {@link ListSSHKeysRequest}\n   * @returns A Promise of ListSSHKeysResponse\n   */\n  listSSHKeys = (request = {}) => resourcePaginator.enrichForPagination(\"sshKeys\", this.pageOfListSSHKeys, request);\n  /**\n   * Create an SSH key. Add a new SSH key to a Scaleway Project. You must\n   * specify the `name`, `public_key` and `project_id`.\n   *\n   * @param request - The request {@link CreateSSHKeyRequest}\n   * @returns A Promise of SSHKey\n   */\n  createSSHKey = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateSSHKeyRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/iam/v1alpha1/ssh-keys`\n    },\n    marshalling_gen.unmarshalSSHKey\n  );\n  /**\n   * Get an SSH key. Retrieve information about a given SSH key, specified by\n   * the `ssh_key_id` parameter. The SSH key's full details, including `id`,\n   * `name`, `public_key`, and `project_id` are returned in the response.\n   *\n   * @param request - The request {@link GetSSHKeyRequest}\n   * @returns A Promise of SSHKey\n   */\n  getSSHKey = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/iam/v1alpha1/ssh-keys/${marshalling.validatePathParam(\"sshKeyId\", request.sshKeyId)}`\n    },\n    marshalling_gen.unmarshalSSHKey\n  );\n  /**\n   * Update an SSH key. Update the parameters of an SSH key, including `name`\n   * and `disable`.\n   *\n   * @param request - The request {@link UpdateSSHKeyRequest}\n   * @returns A Promise of SSHKey\n   */\n  updateSSHKey = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateSSHKeyRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/iam/v1alpha1/ssh-keys/${marshalling.validatePathParam(\"sshKeyId\", request.sshKeyId)}`\n    },\n    marshalling_gen.unmarshalSSHKey\n  );\n  /**\n   * Delete an SSH key. Delete a given SSH key, specified by the `ssh_key_id`.\n   * Deleting an SSH is permanent, and cannot be undone. Note that you might\n   * need to update any configurations that used the SSH key.\n   *\n   * @param request - The request {@link DeleteSSHKeyRequest}\n   */\n  deleteSSHKey = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/iam/v1alpha1/ssh-keys/${marshalling.validatePathParam(\"sshKeyId\", request.sshKeyId)}`\n  });\n  pageOfListUsers = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/iam/v1alpha1/users`,\n      urlParams: marshalling.urlParams(\n        [\"mfa\", request.mfa],\n        [\"order_by\", request.orderBy],\n        [\n          \"organization_id\",\n          request.organizationId ?? this.client.settings.defaultOrganizationId\n        ],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"tag\", request.tag],\n        [\"user_ids\", request.userIds]\n      )\n    },\n    marshalling_gen.unmarshalListUsersResponse\n  );\n  /**\n   * List users of an Organization. List the users of an Organization. By\n   * default, the users listed are ordered by creation date in ascending order.\n   * This can be modified via the `order_by` field. You must define the\n   * `organization_id` in the query path of your request. You can also define\n   * additional parameters for your query such as `user_ids`.\n   *\n   * @param request - The request {@link ListUsersRequest}\n   * @returns A Promise of ListUsersResponse\n   */\n  listUsers = (request = {}) => resourcePaginator.enrichForPagination(\"users\", this.pageOfListUsers, request);\n  /**\n   * Get a given user. Retrieve information about a user, specified by the\n   * `user_id` parameter. The user's full details, including `id`, `email`,\n   * `organization_id`, `status` and `mfa` are returned in the response.\n   *\n   * @param request - The request {@link GetUserRequest}\n   * @returns A Promise of User\n   */\n  getUser = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/iam/v1alpha1/users/${marshalling.validatePathParam(\"userId\", request.userId)}`\n    },\n    marshalling_gen.unmarshalUser\n  );\n  /**\n   * Update a user. Update the parameters of a user, including `tags`.\n   *\n   * @param request - The request {@link UpdateUserRequest}\n   * @returns A Promise of User\n   */\n  updateUser = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateUserRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/iam/v1alpha1/users/${marshalling.validatePathParam(\"userId\", request.userId)}`\n    },\n    marshalling_gen.unmarshalUser\n  );\n  /**\n   * Delete a guest user from an Organization. Remove a user from an\n   * Organization in which they are a guest. You must define the `user_id` in\n   * your request. Note that removing a user from an Organization automatically\n   * deletes their API keys, and any policies directly attached to them become\n   * orphaned.\n   *\n   * @param request - The request {@link DeleteUserRequest}\n   */\n  deleteUser = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/iam/v1alpha1/users/${marshalling.validatePathParam(\"userId\", request.userId)}`\n  });\n  /**\n   * Create a new user. Create a new user. You must define the `organization_id`\n   * and the `email` in your request.\n   *\n   * @param request - The request {@link CreateUserRequest}\n   * @returns A Promise of User\n   */\n  createUser = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateUserRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/iam/v1alpha1/users`\n    },\n    marshalling_gen.unmarshalUser\n  );\n  pageOfListApplications = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/iam/v1alpha1/applications`,\n      urlParams: marshalling.urlParams(\n        [\"application_ids\", request.applicationIds],\n        [\"editable\", request.editable],\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\n          \"organization_id\",\n          request.organizationId ?? this.client.settings.defaultOrganizationId\n        ],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"tag\", request.tag]\n      )\n    },\n    marshalling_gen.unmarshalListApplicationsResponse\n  );\n  /**\n   * List applications of an Organization. List the applications of an\n   * Organization. By default, the applications listed are ordered by creation\n   * date in ascending order. This can be modified via the `order_by` field. You\n   * must define the `organization_id` in the query path of your request. You\n   * can also define additional parameters for your query such as\n   * `application_ids`.\n   *\n   * @param request - The request {@link ListApplicationsRequest}\n   * @returns A Promise of ListApplicationsResponse\n   */\n  listApplications = (request = {}) => resourcePaginator.enrichForPagination(\"applications\", this.pageOfListApplications, request);\n  /**\n   * Create a new application. Create a new application. You must define the\n   * `name` parameter in the request.\n   *\n   * @param request - The request {@link CreateApplicationRequest}\n   * @returns A Promise of Application\n   */\n  createApplication = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateApplicationRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/iam/v1alpha1/applications`\n    },\n    marshalling_gen.unmarshalApplication\n  );\n  /**\n   * Get a given application. Retrieve information about an application,\n   * specified by the `application_id` parameter. The application's full\n   * details, including `id`, `email`, `organization_id`, `status` and\n   * `two_factor_enabled` are returned in the response.\n   *\n   * @param request - The request {@link GetApplicationRequest}\n   * @returns A Promise of Application\n   */\n  getApplication = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/iam/v1alpha1/applications/${marshalling.validatePathParam(\"applicationId\", request.applicationId)}`\n    },\n    marshalling_gen.unmarshalApplication\n  );\n  /**\n   * Update an application. Update the parameters of an application, including\n   * `name` and `description`.\n   *\n   * @param request - The request {@link UpdateApplicationRequest}\n   * @returns A Promise of Application\n   */\n  updateApplication = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateApplicationRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/iam/v1alpha1/applications/${marshalling.validatePathParam(\"applicationId\", request.applicationId)}`\n    },\n    marshalling_gen.unmarshalApplication\n  );\n  /**\n   * Delete an application. Delete an application. Note that this action is\n   * irreversible and will automatically delete the application's API keys.\n   * Policies attached to users and applications via this group will no longer\n   * apply.\n   *\n   * @param request - The request {@link DeleteApplicationRequest}\n   */\n  deleteApplication = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/iam/v1alpha1/applications/${marshalling.validatePathParam(\"applicationId\", request.applicationId)}`\n  });\n  pageOfListGroups = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/iam/v1alpha1/groups`,\n      urlParams: marshalling.urlParams(\n        [\"application_ids\", request.applicationIds],\n        [\"group_ids\", request.groupIds],\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\n          \"organization_id\",\n          request.organizationId ?? this.client.settings.defaultOrganizationId\n        ],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"tag\", request.tag],\n        [\"user_ids\", request.userIds]\n      )\n    },\n    marshalling_gen.unmarshalListGroupsResponse\n  );\n  /**\n   * List groups. List groups. By default, the groups listed are ordered by\n   * creation date in ascending order. This can be modified via the `order_by`\n   * field. You can define additional parameters to filter your query. Use\n   * `user_ids` or `application_ids` to list all groups certain users or\n   * applications belong to.\n   *\n   * @param request - The request {@link ListGroupsRequest}\n   * @returns A Promise of ListGroupsResponse\n   */\n  listGroups = (request = {}) => resourcePaginator.enrichForPagination(\"groups\", this.pageOfListGroups, request);\n  /**\n   * Create a group. Create a new group. You must define the `name` and\n   * `organization_id` parameters in the request.\n   *\n   * @param request - The request {@link CreateGroupRequest}\n   * @returns A Promise of Group\n   */\n  createGroup = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateGroupRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/iam/v1alpha1/groups`\n    },\n    marshalling_gen.unmarshalGroup\n  );\n  /**\n   * Get a group. Retrive information about a given group, specified by the\n   * `group_id` parameter. The group's full details, including `user_ids` and\n   * `application_ids` are returned in the response.\n   *\n   * @param request - The request {@link GetGroupRequest}\n   * @returns A Promise of Group\n   */\n  getGroup = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/iam/v1alpha1/groups/${marshalling.validatePathParam(\"groupId\", request.groupId)}`\n    },\n    marshalling_gen.unmarshalGroup\n  );\n  /**\n   * Update a group. Update the parameters of group, including `name` and\n   * `description`.\n   *\n   * @param request - The request {@link UpdateGroupRequest}\n   * @returns A Promise of Group\n   */\n  updateGroup = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateGroupRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/iam/v1alpha1/groups/${marshalling.validatePathParam(\"groupId\", request.groupId)}`\n    },\n    marshalling_gen.unmarshalGroup\n  );\n  /**\n   * Overwrite users and applications of a group. Overwrite users and\n   * applications configuration in a group. Any information that you add using\n   * this command will overwrite the previous configuration.\n   *\n   * @param request - The request {@link SetGroupMembersRequest}\n   * @returns A Promise of Group\n   */\n  setGroupMembers = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSetGroupMembersRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/iam/v1alpha1/groups/${marshalling.validatePathParam(\"groupId\", request.groupId)}/members`\n    },\n    marshalling_gen.unmarshalGroup\n  );\n  /**\n   * Add a user or an application to a group. Add a user or an application to a\n   * group. You can specify a `user_id` and and `application_id` in the body of\n   * your request. Note that you can only add one of each per request.\n   *\n   * @param request - The request {@link AddGroupMemberRequest}\n   * @returns A Promise of Group\n   */\n  addGroupMember = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalAddGroupMemberRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/iam/v1alpha1/groups/${marshalling.validatePathParam(\"groupId\", request.groupId)}/add-member`\n    },\n    marshalling_gen.unmarshalGroup\n  );\n  /**\n   * Add multiple users and applications to a group. Add multiple users and\n   * applications to a group in a single call. You can specify an array of\n   * `user_id`s and `application_id`s. Note that any existing users and\n   * applications in the group will remain. To add new users/applications and\n   * delete pre-existing ones, use the [Overwrite users and applications of a\n   * group](#path-groups-overwrite-users-and-applications-of-a-group) method.\n   *\n   * @param request - The request {@link AddGroupMembersRequest}\n   * @returns A Promise of Group\n   */\n  addGroupMembers = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalAddGroupMembersRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/iam/v1alpha1/groups/${marshalling.validatePathParam(\"groupId\", request.groupId)}/add-members`\n    },\n    marshalling_gen.unmarshalGroup\n  );\n  /**\n   * Remove a user or an application from a group. Remove a user or an\n   * application from a group. You can specify a `user_id` and and\n   * `application_id` in the body of your request. Note that you can only remove\n   * one of each per request. Removing a user from a group means that any\n   * permissions given to them via the group (i.e. from an attached policy) will\n   * no longer apply. Be sure you want to remove these permissions from the user\n   * before proceeding.\n   *\n   * @param request - The request {@link RemoveGroupMemberRequest}\n   * @returns A Promise of Group\n   */\n  removeGroupMember = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalRemoveGroupMemberRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/iam/v1alpha1/groups/${marshalling.validatePathParam(\"groupId\", request.groupId)}/remove-member`\n    },\n    marshalling_gen.unmarshalGroup\n  );\n  /**\n   * Delete a group. Delete a group. Note that this action is irreversible and\n   * could delete permissions for group members. Policies attached to users and\n   * applications via this group will no longer apply.\n   *\n   * @param request - The request {@link DeleteGroupRequest}\n   */\n  deleteGroup = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/iam/v1alpha1/groups/${marshalling.validatePathParam(\"groupId\", request.groupId)}`\n  });\n  pageOfListPolicies = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/iam/v1alpha1/policies`,\n      urlParams: marshalling.urlParams(\n        [\"application_ids\", request.applicationIds],\n        [\"editable\", request.editable],\n        [\"group_ids\", request.groupIds],\n        [\"no_principal\", request.noPrincipal],\n        [\"order_by\", request.orderBy],\n        [\n          \"organization_id\",\n          request.organizationId ?? this.client.settings.defaultOrganizationId\n        ],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"policy_ids\", request.policyIds],\n        [\"policy_name\", request.policyName],\n        [\"tag\", request.tag],\n        [\"user_ids\", request.userIds]\n      )\n    },\n    marshalling_gen.unmarshalListPoliciesResponse\n  );\n  /**\n   * List policies of an Organization. List the policies of an Organization. By\n   * default, the policies listed are ordered by creation date in ascending\n   * order. This can be modified via the `order_by` field. You must define the\n   * `organization_id` in the query path of your request. You can also define\n   * additional parameters to filter your query, such as `user_ids`,\n   * `groups_ids`, `application_ids`, and `policy_name`.\n   *\n   * @param request - The request {@link ListPoliciesRequest}\n   * @returns A Promise of ListPoliciesResponse\n   */\n  listPolicies = (request = {}) => resourcePaginator.enrichForPagination(\"policies\", this.pageOfListPolicies, request);\n  /**\n   * Create a new policy. Create a new application. You must define the `name`\n   * parameter in the request. You can specify parameters such as `user_id`,\n   * `groups_id`, `application_id`, `no_principal`, `rules` and its child\n   * attributes.\n   *\n   * @param request - The request {@link CreatePolicyRequest}\n   * @returns A Promise of Policy\n   */\n  createPolicy = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreatePolicyRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/iam/v1alpha1/policies`\n    },\n    marshalling_gen.unmarshalPolicy\n  );\n  /**\n   * Get an existing policy. Retrieve information about a policy, speficified by\n   * the `policy_id` parameter. The policy's full details, including `id`,\n   * `name`, `organization_id`, `nb_rules` and `nb_scopes`, `nb_permission_sets`\n   * are returned in the response.\n   *\n   * @param request - The request {@link GetPolicyRequest}\n   * @returns A Promise of Policy\n   */\n  getPolicy = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/iam/v1alpha1/policies/${marshalling.validatePathParam(\"policyId\", request.policyId)}`\n    },\n    marshalling_gen.unmarshalPolicy\n  );\n  /**\n   * Update an existing policy. Update the parameters of a policy, including\n   * `name`, `description`, `user_id`, `group_id`, `application_id` and\n   * `no_principal`.\n   *\n   * @param request - The request {@link UpdatePolicyRequest}\n   * @returns A Promise of Policy\n   */\n  updatePolicy = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdatePolicyRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/iam/v1alpha1/policies/${marshalling.validatePathParam(\"policyId\", request.policyId)}`\n    },\n    marshalling_gen.unmarshalPolicy\n  );\n  /**\n   * Delete a policy. Delete a policy. You must define specify the `policy_id`\n   * parameter in your request. Note that when deleting a policy, all\n   * permissions it gives to its principal (user, group or application) will be\n   * revoked.\n   *\n   * @param request - The request {@link DeletePolicyRequest}\n   */\n  deletePolicy = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/iam/v1alpha1/policies/${marshalling.validatePathParam(\"policyId\", request.policyId)}`\n  });\n  /**\n   * Clone a policy. Clone a policy. You must define specify the `policy_id`\n   * parameter in your request.\n   *\n   * @param request - The request {@link ClonePolicyRequest}\n   * @returns A Promise of Policy\n   */\n  clonePolicy = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/iam/v1alpha1/policies/${marshalling.validatePathParam(\"policyId\", request.policyId)}/clone`\n    },\n    marshalling_gen.unmarshalPolicy\n  );\n  /**\n   * Set rules of a given policy. Overwrite the rules of a given policy. Any\n   * information that you add using this command will overwrite the previous\n   * configuration. If you include some of the rules you already had in your\n   * previous configuration in your new one, but you change their order, the new\n   * order of display will apply. While policy rules are ordered, they have no\n   * impact on the access logic of IAM because rules are allow-only.\n   *\n   * @param request - The request {@link SetRulesRequest}\n   * @returns A Promise of SetRulesResponse\n   */\n  setRules = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSetRulesRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/iam/v1alpha1/rules`\n    },\n    marshalling_gen.unmarshalSetRulesResponse\n  );\n  pageOfListRules = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/iam/v1alpha1/rules`,\n      urlParams: marshalling.urlParams(\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"policy_id\", request.policyId]\n      )\n    },\n    marshalling_gen.unmarshalListRulesResponse\n  );\n  /**\n   * List rules of a given policy. List the rules of a given policy. By default,\n   * the rules listed are ordered by creation date in ascending order. This can\n   * be modified via the `order_by` field. You must define the `policy_id` in\n   * the query path of your request.\n   *\n   * @param request - The request {@link ListRulesRequest}\n   * @returns A Promise of ListRulesResponse\n   */\n  listRules = (request) => resourcePaginator.enrichForPagination(\"rules\", this.pageOfListRules, request);\n  pageOfListPermissionSets = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/iam/v1alpha1/permission-sets`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\n          \"organization_id\",\n          request.organizationId ?? this.client.settings.defaultOrganizationId\n        ],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListPermissionSetsResponse\n  );\n  /**\n   * List permission sets. List permission sets available for given\n   * Organization. You must define the `organization_id` in the query path of\n   * your request.\n   *\n   * @param request - The request {@link ListPermissionSetsRequest}\n   * @returns A Promise of ListPermissionSetsResponse\n   */\n  listPermissionSets = (request = {}) => resourcePaginator.enrichForPagination(\n    \"permissionSets\",\n    this.pageOfListPermissionSets,\n    request\n  );\n  pageOfListAPIKeys = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/iam/v1alpha1/api-keys`,\n      urlParams: marshalling.urlParams(\n        [\"access_key\", request.accessKey],\n        [\"access_keys\", request.accessKeys],\n        [\"bearer_id\", request.bearerId],\n        [\"bearer_type\", request.bearerType],\n        [\"description\", request.description],\n        [\"editable\", request.editable],\n        [\"expired\", request.expired],\n        [\"order_by\", request.orderBy],\n        [\n          \"organization_id\",\n          request.organizationId ?? this.client.settings.defaultOrganizationId\n        ],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        ...Object.entries(\n          marshalling.resolveOneOf([\n            { param: \"application_id\", value: request.applicationId },\n            { param: \"user_id\", value: request.userId }\n          ])\n        )\n      )\n    },\n    marshalling_gen.unmarshalListAPIKeysResponse\n  );\n  /**\n   * List API keys. List API keys. By default, the API keys listed are ordered\n   * by creation date in ascending order. This can be modified via the\n   * `order_by` field. You can define additional parameters for your query such\n   * as `editable`, `expired`, `access_key` and `bearer_id`.\n   *\n   * @param request - The request {@link ListAPIKeysRequest}\n   * @returns A Promise of ListAPIKeysResponse\n   */\n  listAPIKeys = (request = {}) => resourcePaginator.enrichForPagination(\"apiKeys\", this.pageOfListAPIKeys, request);\n  /**\n   * Create an API key. Create an API key. You must specify the `application_id`\n   * or the `user_id` and the description. You can also specify the\n   * `default_project_id` which is the Project ID of your preferred Project, to\n   * use with Object Storage. The `access_key` and `secret_key` values are\n   * returned in the response. Note that he secret key is only showed once. Make\n   * sure that you copy and store both keys somewhere safe.\n   *\n   * @param request - The request {@link CreateAPIKeyRequest}\n   * @returns A Promise of APIKey\n   */\n  createAPIKey = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateAPIKeyRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/iam/v1alpha1/api-keys`\n    },\n    marshalling_gen.unmarshalAPIKey\n  );\n  /**\n   * Get an API key. Retrive information about an API key, specified by the\n   * `access_key` parameter. The API key's details, including either the\n   * `user_id` or `application_id` of its bearer are returned in the response.\n   * Note that the string value for the `secret_key` is nullable, and therefore\n   * is not displayed in the response. The `secret_key` value is only displayed\n   * upon API key creation.\n   *\n   * @param request - The request {@link GetAPIKeyRequest}\n   * @returns A Promise of APIKey\n   */\n  getAPIKey = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/iam/v1alpha1/api-keys/${marshalling.validatePathParam(\"accessKey\", request.accessKey)}`\n    },\n    marshalling_gen.unmarshalAPIKey\n  );\n  /**\n   * Update an API key. Update the parameters of an API key, including\n   * `default_project_id` and `description`.\n   *\n   * @param request - The request {@link UpdateAPIKeyRequest}\n   * @returns A Promise of APIKey\n   */\n  updateAPIKey = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateAPIKeyRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/iam/v1alpha1/api-keys/${marshalling.validatePathParam(\"accessKey\", request.accessKey)}`\n    },\n    marshalling_gen.unmarshalAPIKey\n  );\n  /**\n   * Delete an API key. Delete an API key. Note that this action is irreversible\n   * and cannot be undone. Make sure you update any configurations using the API\n   * keys you delete.\n   *\n   * @param request - The request {@link DeleteAPIKeyRequest}\n   */\n  deleteAPIKey = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/iam/v1alpha1/api-keys/${marshalling.validatePathParam(\"accessKey\", request.accessKey)}`\n  });\n  pageOfListQuota = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/iam/v1alpha1/quota`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\n          \"organization_id\",\n          request.organizationId ?? this.client.settings.defaultOrganizationId\n        ],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"quotum_names\", request.quotumNames]\n      )\n    },\n    marshalling_gen.unmarshalListQuotaResponse\n  );\n  /**\n   * List all quotas in the Organization. List all product and features quota\n   * for an Organization, with their associated limits. By default, the quota\n   * listed are ordered by creation date in ascending order. This can be\n   * modified via the `order_by` field. You must define the `organization_id` in\n   * the query path of your request.\n   *\n   * @param request - The request {@link ListQuotaRequest}\n   * @returns A Promise of ListQuotaResponse\n   */\n  listQuota = (request = {}) => resourcePaginator.enrichForPagination(\"quota\", this.pageOfListQuota, request);\n  /**\n   * Get a quota in the Organization. Retrieve information about a resource\n   * quota, specified by the `quotum_name` parameter. The quota's `limit`, or\n   * whether it is unlimited, is returned in the response.\n   *\n   * @param request - The request {@link GetQuotumRequest}\n   * @returns A Promise of Quotum\n   */\n  getQuotum = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/iam/v1alpha1/quota/${marshalling.validatePathParam(\"quotumName\", request.quotumName)}`,\n      urlParams: marshalling.urlParams([\n        \"organization_id\",\n        request.organizationId ?? this.client.settings.defaultOrganizationId\n      ])\n    },\n    marshalling_gen.unmarshalQuotum\n  );\n  pageOfListJWTs = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/iam/v1alpha1/jwts`,\n      urlParams: marshalling.urlParams(\n        [\"audience_id\", request.audienceId],\n        [\"expired\", request.expired],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListJWTsResponse\n  );\n  /**\n   * List JWTs.\n   *\n   * @param request - The request {@link ListJWTsRequest}\n   * @returns A Promise of ListJWTsResponse\n   */\n  listJWTs = (request = {}) => resourcePaginator.enrichForPagination(\"jwts\", this.pageOfListJWTs, request);\n  /**\n   * Create a JWT.\n   *\n   * @param request - The request {@link CreateJWTRequest}\n   * @returns A Promise of EncodedJWT\n   */\n  createJWT = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateJWTRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/iam/v1alpha1/jwts`\n    },\n    marshalling_gen.unmarshalEncodedJWT\n  );\n  /**\n   * Get a JWT.\n   *\n   * @param request - The request {@link GetJWTRequest}\n   * @returns A Promise of JWT\n   */\n  getJWT = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/iam/v1alpha1/jwts/${marshalling.validatePathParam(\"jti\", request.jti)}`\n    },\n    marshalling_gen.unmarshalJWT\n  );\n  /**\n   * Delete a JWT.\n   *\n   * @param request - The request {@link DeleteJWTRequest}\n   */\n  deleteJWT = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/iam/v1alpha1/jwts/${marshalling.validatePathParam(\"jti\", request.jti)}`\n  });\n  pageOfListLogs = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/iam/v1alpha1/logs`,\n      urlParams: marshalling.urlParams(\n        [\"action\", request.action],\n        [\"created_after\", request.createdAfter],\n        [\"created_before\", request.createdBefore],\n        [\"order_by\", request.orderBy],\n        [\n          \"organization_id\",\n          request.organizationId ?? this.client.settings.defaultOrganizationId\n        ],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"resource_type\", request.resourceType],\n        [\"search\", request.search]\n      )\n    },\n    marshalling_gen.unmarshalListLogsResponse\n  );\n  /**\n   * List logs. List logs available for given Organization. You must define the\n   * `organization_id` in the query path of your request.\n   *\n   * @param request - The request {@link ListLogsRequest}\n   * @returns A Promise of ListLogsResponse\n   */\n  listLogs = (request = {}) => resourcePaginator.enrichForPagination(\"logs\", this.pageOfListLogs, request);\n  /**\n   * Get a log. Retrieve information about a log, specified by the `log_id`\n   * parameter. The log's full details, including `id`, `ip`, `user_agent`,\n   * `action`, `bearer_id`, `resource_type` and `resource_id` are returned in\n   * the response.\n   *\n   * @param request - The request {@link GetLogRequest}\n   * @returns A Promise of Log\n   */\n  getLog = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/iam/v1alpha1/logs/${marshalling.validatePathParam(\"logId\", request.logId)}`\n    },\n    marshalling_gen.unmarshalLog\n  );\n}\nexports.API = API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nconst validationRules_gen = require(\"./validation-rules.gen.cjs\");\nexports.API = api_gen.API;\nexports.ValidationRules = validationRules_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst randomName = require(\"@scaleway/random-name\");\nconst json = require(\"../../../helpers/json.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst unmarshalJWT = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'JWT' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    audienceId: data.audience_id,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    expiresAt: marshalling.unmarshalDate(data.expires_at),\n    ip: data.ip,\n    issuerId: data.issuer_id,\n    jti: data.jti,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    userAgent: data.user_agent\n  };\n};\nconst unmarshalAPIKey = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'APIKey' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    accessKey: data.access_key,\n    applicationId: data.application_id,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    creationIp: data.creation_ip,\n    defaultProjectId: data.default_project_id,\n    description: data.description,\n    editable: data.editable,\n    expiresAt: marshalling.unmarshalDate(data.expires_at),\n    secretKey: data.secret_key,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    userId: data.user_id\n  };\n};\nconst unmarshalApplication = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Application' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    description: data.description,\n    editable: data.editable,\n    id: data.id,\n    name: data.name,\n    nbApiKeys: data.nb_api_keys,\n    organizationId: data.organization_id,\n    tags: data.tags,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalGroup = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Group' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    applicationIds: data.application_ids,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    description: data.description,\n    id: data.id,\n    name: data.name,\n    organizationId: data.organization_id,\n    tags: data.tags,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    userIds: data.user_ids\n  };\n};\nconst unmarshalLog = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Log' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    action: data.action,\n    bearerId: data.bearer_id,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    id: data.id,\n    ip: data.ip,\n    organizationId: data.organization_id,\n    resourceId: data.resource_id,\n    resourceType: data.resource_type,\n    userAgent: data.user_agent\n  };\n};\nconst unmarshalPolicy = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Policy' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    applicationId: data.application_id,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    description: data.description,\n    editable: data.editable,\n    groupId: data.group_id,\n    id: data.id,\n    name: data.name,\n    nbPermissionSets: data.nb_permission_sets,\n    nbRules: data.nb_rules,\n    nbScopes: data.nb_scopes,\n    noPrincipal: data.no_principal,\n    organizationId: data.organization_id,\n    tags: data.tags,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    userId: data.user_id\n  };\n};\nconst unmarshalQuotum = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Quotum' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    description: data.description,\n    limit: data.limit,\n    name: data.name,\n    prettyName: data.pretty_name,\n    unit: data.unit,\n    unlimited: data.unlimited\n  };\n};\nconst unmarshalSSHKey = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SSHKey' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    disabled: data.disabled,\n    fingerprint: data.fingerprint,\n    id: data.id,\n    name: data.name,\n    organizationId: data.organization_id,\n    projectId: data.project_id,\n    publicKey: data.public_key,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalUser = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'User' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    accountRootUserId: data.account_root_user_id,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    deletable: data.deletable,\n    email: data.email,\n    id: data.id,\n    lastLoginAt: marshalling.unmarshalDate(data.last_login_at),\n    locked: data.locked,\n    mfa: data.mfa,\n    organizationId: data.organization_id,\n    status: data.status,\n    tags: data.tags,\n    twoFactorEnabled: data.two_factor_enabled,\n    type: data.type,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    username: data.username\n  };\n};\nconst unmarshalEncodedJWT = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'EncodedJWT' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    jwt: data.jwt ? unmarshalJWT(data.jwt) : void 0,\n    renewToken: data.renew_token,\n    token: data.token\n  };\n};\nconst unmarshalListAPIKeysResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListAPIKeysResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    apiKeys: marshalling.unmarshalArrayOfObject(data.api_keys, unmarshalAPIKey),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListApplicationsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListApplicationsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    applications: marshalling.unmarshalArrayOfObject(\n      data.applications,\n      unmarshalApplication\n    ),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListGroupsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListGroupsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    groups: marshalling.unmarshalArrayOfObject(data.groups, unmarshalGroup),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListJWTsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListJWTsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    jwts: marshalling.unmarshalArrayOfObject(data.jwts, unmarshalJWT),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListLogsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListLogsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    logs: marshalling.unmarshalArrayOfObject(data.logs, unmarshalLog),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalPermissionSet = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'PermissionSet' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    categories: data.categories,\n    description: data.description,\n    id: data.id,\n    name: data.name,\n    scopeType: data.scope_type\n  };\n};\nconst unmarshalListPermissionSetsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListPermissionSetsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    permissionSets: marshalling.unmarshalArrayOfObject(\n      data.permission_sets,\n      unmarshalPermissionSet\n    ),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListPoliciesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListPoliciesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    policies: marshalling.unmarshalArrayOfObject(data.policies, unmarshalPolicy),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListQuotaResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListQuotaResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    quota: marshalling.unmarshalArrayOfObject(data.quota, unmarshalQuotum),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalRule = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Rule' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    accountRootUserId: data.account_root_user_id,\n    condition: data.condition,\n    id: data.id,\n    organizationId: data.organization_id,\n    permissionSetNames: data.permission_set_names,\n    permissionSetsScopeType: data.permission_sets_scope_type,\n    projectIds: data.project_ids\n  };\n};\nconst unmarshalListRulesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListRulesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    rules: marshalling.unmarshalArrayOfObject(data.rules, unmarshalRule),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListSSHKeysResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListSSHKeysResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    sshKeys: marshalling.unmarshalArrayOfObject(data.ssh_keys, unmarshalSSHKey),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListUsersResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListUsersResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    totalCount: data.total_count,\n    users: marshalling.unmarshalArrayOfObject(data.users, unmarshalUser)\n  };\n};\nconst unmarshalSetRulesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SetRulesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    rules: marshalling.unmarshalArrayOfObject(data.rules, unmarshalRule)\n  };\n};\nconst marshalAddGroupMemberRequest = (request, defaults) => ({\n  ...marshalling.resolveOneOf([\n    { param: \"user_id\", value: request.userId },\n    { param: \"application_id\", value: request.applicationId }\n  ])\n});\nconst marshalAddGroupMembersRequest = (request, defaults) => ({\n  application_ids: request.applicationIds,\n  user_ids: request.userIds\n});\nconst marshalCreateAPIKeyRequest = (request, defaults) => ({\n  default_project_id: request.defaultProjectId,\n  description: request.description,\n  expires_at: request.expiresAt,\n  ...marshalling.resolveOneOf([\n    { param: \"application_id\", value: request.applicationId },\n    { param: \"user_id\", value: request.userId }\n  ])\n});\nconst marshalCreateApplicationRequest = (request, defaults) => ({\n  description: request.description,\n  name: request.name || randomName(\"app\"),\n  organization_id: request.organizationId ?? defaults.defaultOrganizationId,\n  tags: request.tags\n});\nconst marshalCreateGroupRequest = (request, defaults) => ({\n  description: request.description,\n  name: request.name || randomName(\"grp\"),\n  organization_id: request.organizationId ?? defaults.defaultOrganizationId,\n  tags: request.tags\n});\nconst marshalCreateJWTRequest = (request, defaults) => ({\n  referrer: request.referrer,\n  user_id: request.userId\n});\nconst marshalRuleSpecs = (request, defaults) => ({\n  condition: request.condition,\n  permission_set_names: request.permissionSetNames,\n  ...marshalling.resolveOneOf([\n    { param: \"project_ids\", value: request.projectIds },\n    { param: \"organization_id\", value: request.organizationId }\n  ])\n});\nconst marshalCreatePolicyRequest = (request, defaults) => ({\n  description: request.description,\n  name: request.name || randomName(\"pol\"),\n  organization_id: request.organizationId ?? defaults.defaultOrganizationId,\n  rules: request.rules !== void 0 ? request.rules.map((elt) => marshalRuleSpecs(elt)) : void 0,\n  tags: request.tags,\n  ...marshalling.resolveOneOf([\n    { param: \"user_id\", value: request.userId },\n    { param: \"group_id\", value: request.groupId },\n    { param: \"application_id\", value: request.applicationId },\n    { param: \"no_principal\", value: request.noPrincipal }\n  ])\n});\nconst marshalCreateSSHKeyRequest = (request, defaults) => ({\n  name: request.name || randomName(\"key\"),\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  public_key: request.publicKey\n});\nconst marshalCreateUserRequestMember = (request, defaults) => ({\n  email: request.email,\n  password: request.password,\n  send_password_email: request.sendPasswordEmail,\n  username: request.username\n});\nconst marshalCreateUserRequest = (request, defaults) => ({\n  organization_id: request.organizationId ?? defaults.defaultOrganizationId,\n  tags: request.tags,\n  ...marshalling.resolveOneOf([\n    { param: \"email\", value: request.email },\n    {\n      param: \"member\",\n      value: request.member !== void 0 ? marshalCreateUserRequestMember(request.member) : void 0\n    }\n  ])\n});\nconst marshalRemoveGroupMemberRequest = (request, defaults) => ({\n  ...marshalling.resolveOneOf([\n    { param: \"user_id\", value: request.userId },\n    { param: \"application_id\", value: request.applicationId }\n  ])\n});\nconst marshalSetGroupMembersRequest = (request, defaults) => ({\n  application_ids: request.applicationIds,\n  user_ids: request.userIds\n});\nconst marshalSetRulesRequest = (request, defaults) => ({\n  policy_id: request.policyId,\n  rules: request.rules.map((elt) => marshalRuleSpecs(elt))\n});\nconst marshalUpdateAPIKeyRequest = (request, defaults) => ({\n  default_project_id: request.defaultProjectId,\n  description: request.description\n});\nconst marshalUpdateApplicationRequest = (request, defaults) => ({\n  description: request.description,\n  name: request.name,\n  tags: request.tags\n});\nconst marshalUpdateGroupRequest = (request, defaults) => ({\n  description: request.description,\n  name: request.name,\n  tags: request.tags\n});\nconst marshalUpdatePolicyRequest = (request, defaults) => ({\n  description: request.description,\n  name: request.name,\n  tags: request.tags,\n  ...marshalling.resolveOneOf([\n    { param: \"user_id\", value: request.userId },\n    { param: \"group_id\", value: request.groupId },\n    { param: \"application_id\", value: request.applicationId },\n    { param: \"no_principal\", value: request.noPrincipal }\n  ])\n});\nconst marshalUpdateSSHKeyRequest = (request, defaults) => ({\n  disabled: request.disabled,\n  name: request.name\n});\nconst marshalUpdateUserRequest = (request, defaults) => ({\n  tags: request.tags\n});\nexports.marshalAddGroupMemberRequest = marshalAddGroupMemberRequest;\nexports.marshalAddGroupMembersRequest = marshalAddGroupMembersRequest;\nexports.marshalCreateAPIKeyRequest = marshalCreateAPIKeyRequest;\nexports.marshalCreateApplicationRequest = marshalCreateApplicationRequest;\nexports.marshalCreateGroupRequest = marshalCreateGroupRequest;\nexports.marshalCreateJWTRequest = marshalCreateJWTRequest;\nexports.marshalCreatePolicyRequest = marshalCreatePolicyRequest;\nexports.marshalCreateSSHKeyRequest = marshalCreateSSHKeyRequest;\nexports.marshalCreateUserRequest = marshalCreateUserRequest;\nexports.marshalRemoveGroupMemberRequest = marshalRemoveGroupMemberRequest;\nexports.marshalSetGroupMembersRequest = marshalSetGroupMembersRequest;\nexports.marshalSetRulesRequest = marshalSetRulesRequest;\nexports.marshalUpdateAPIKeyRequest = marshalUpdateAPIKeyRequest;\nexports.marshalUpdateApplicationRequest = marshalUpdateApplicationRequest;\nexports.marshalUpdateGroupRequest = marshalUpdateGroupRequest;\nexports.marshalUpdatePolicyRequest = marshalUpdatePolicyRequest;\nexports.marshalUpdateSSHKeyRequest = marshalUpdateSSHKeyRequest;\nexports.marshalUpdateUserRequest = marshalUpdateUserRequest;\nexports.unmarshalAPIKey = unmarshalAPIKey;\nexports.unmarshalApplication = unmarshalApplication;\nexports.unmarshalEncodedJWT = unmarshalEncodedJWT;\nexports.unmarshalGroup = unmarshalGroup;\nexports.unmarshalJWT = unmarshalJWT;\nexports.unmarshalListAPIKeysResponse = unmarshalListAPIKeysResponse;\nexports.unmarshalListApplicationsResponse = unmarshalListApplicationsResponse;\nexports.unmarshalListGroupsResponse = unmarshalListGroupsResponse;\nexports.unmarshalListJWTsResponse = unmarshalListJWTsResponse;\nexports.unmarshalListLogsResponse = unmarshalListLogsResponse;\nexports.unmarshalListPermissionSetsResponse = unmarshalListPermissionSetsResponse;\nexports.unmarshalListPoliciesResponse = unmarshalListPoliciesResponse;\nexports.unmarshalListQuotaResponse = unmarshalListQuotaResponse;\nexports.unmarshalListRulesResponse = unmarshalListRulesResponse;\nexports.unmarshalListSSHKeysResponse = unmarshalListSSHKeysResponse;\nexports.unmarshalListUsersResponse = unmarshalListUsersResponse;\nexports.unmarshalLog = unmarshalLog;\nexports.unmarshalPolicy = unmarshalPolicy;\nexports.unmarshalQuotum = unmarshalQuotum;\nexports.unmarshalSSHKey = unmarshalSSHKey;\nexports.unmarshalSetRulesResponse = unmarshalSetRulesResponse;\nexports.unmarshalUser = unmarshalUser;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst CreateAPIKeyRequest = {\n  description: {\n    ignoreEmpty: true,\n    maxLength: 200\n  }\n};\nconst CreateApplicationRequest = {\n  description: {\n    ignoreEmpty: true,\n    maxLength: 200\n  },\n  name: {\n    maxLength: 64,\n    minLength: 1,\n    pattern: /^[a-zA-Z0-9\\(\\)\\._\\- ]+$/\n  }\n};\nconst CreateGroupRequest = {\n  description: {\n    ignoreEmpty: true,\n    maxLength: 200\n  },\n  name: {\n    maxLength: 64,\n    minLength: 1,\n    pattern: /^[a-zA-Z0-9\\(\\)\\._\\- ]+$/\n  }\n};\nconst CreatePolicyRequest = {\n  description: {\n    ignoreEmpty: true,\n    maxLength: 200\n  },\n  name: {\n    maxLength: 64,\n    minLength: 1,\n    pattern: /^[a-zA-Z0-9\\(\\)\\._\\- ]+$/\n  }\n};\nconst CreateSSHKeyRequest = {\n  name: {\n    ignoreEmpty: true,\n    maxLength: 1e3\n  },\n  publicKey: {\n    maxLength: 65e3,\n    minLength: 1\n  }\n};\nconst CreateUserRequestMember = {\n  email: {\n    ignoreEmpty: true\n  },\n  password: {\n    ignoreEmpty: true,\n    maxLength: 72\n  },\n  username: {\n    maxLength: 64,\n    minLength: 2,\n    pattern: /^[a-zA-Z0-9._-]+$/\n  }\n};\nconst GetQuotumRequest = {\n  quotumName: {\n    minLength: 1\n  }\n};\nconst ListAPIKeysRequest = {\n  description: {\n    maxLength: 200\n  },\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThanOrEqual: 1,\n    lessThanOrEqual: 100\n  }\n};\nconst ListApplicationsRequest = {\n  name: {\n    maxLength: 64,\n    minLength: 1,\n    pattern: /^[a-zA-Z0-9\\(\\)\\._\\- ]+$/\n  },\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThanOrEqual: 1,\n    lessThanOrEqual: 100\n  }\n};\nconst ListGroupsRequest = {\n  name: {\n    minLength: 1\n  },\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThanOrEqual: 1,\n    lessThanOrEqual: 100\n  }\n};\nconst ListJWTsRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThanOrEqual: 1,\n    lessThanOrEqual: 100\n  }\n};\nconst ListLogsRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThanOrEqual: 1,\n    lessThanOrEqual: 100\n  }\n};\nconst ListPermissionSetsRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThanOrEqual: 1,\n    lessThanOrEqual: 100\n  }\n};\nconst ListPoliciesRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThanOrEqual: 1,\n    lessThanOrEqual: 100\n  },\n  policyName: {\n    minLength: 1\n  }\n};\nconst ListQuotaRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThanOrEqual: 1,\n    lessThanOrEqual: 100\n  }\n};\nconst ListRulesRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThanOrEqual: 1,\n    lessThanOrEqual: 100\n  }\n};\nconst ListSSHKeysRequest = {\n  name: {\n    maxLength: 1e3,\n    minLength: 1\n  },\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThanOrEqual: 1,\n    lessThanOrEqual: 100\n  }\n};\nconst ListUsersRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThanOrEqual: 1,\n    lessThanOrEqual: 100\n  }\n};\nconst RuleSpecs = {\n  condition: {\n    maxLength: 255\n  }\n};\nconst UpdateAPIKeyRequest = {\n  description: {\n    maxLength: 200\n  }\n};\nconst UpdateApplicationRequest = {\n  description: {\n    maxLength: 200\n  },\n  name: {\n    maxLength: 64,\n    minLength: 1,\n    pattern: /^[a-zA-Z0-9\\(\\)\\._\\- ]+$/\n  }\n};\nconst UpdateGroupRequest = {\n  description: {\n    maxLength: 200\n  },\n  name: {\n    maxLength: 64,\n    minLength: 1,\n    pattern: /^[a-zA-Z0-9\\(\\)\\._\\- ]+$/\n  }\n};\nconst UpdatePolicyRequest = {\n  description: {\n    maxLength: 200\n  },\n  name: {\n    maxLength: 64,\n    minLength: 1,\n    pattern: /^[a-zA-Z0-9\\(\\)\\._\\- ]+$/\n  }\n};\nconst UpdateSSHKeyRequest = {\n  name: {\n    maxLength: 1e3\n  }\n};\nexports.CreateAPIKeyRequest = CreateAPIKeyRequest;\nexports.CreateApplicationRequest = CreateApplicationRequest;\nexports.CreateGroupRequest = CreateGroupRequest;\nexports.CreatePolicyRequest = CreatePolicyRequest;\nexports.CreateSSHKeyRequest = CreateSSHKeyRequest;\nexports.CreateUserRequestMember = CreateUserRequestMember;\nexports.GetQuotumRequest = GetQuotumRequest;\nexports.ListAPIKeysRequest = ListAPIKeysRequest;\nexports.ListApplicationsRequest = ListApplicationsRequest;\nexports.ListGroupsRequest = ListGroupsRequest;\nexports.ListJWTsRequest = ListJWTsRequest;\nexports.ListLogsRequest = ListLogsRequest;\nexports.ListPermissionSetsRequest = ListPermissionSetsRequest;\nexports.ListPoliciesRequest = ListPoliciesRequest;\nexports.ListQuotaRequest = ListQuotaRequest;\nexports.ListRulesRequest = ListRulesRequest;\nexports.ListSSHKeysRequest = ListSSHKeysRequest;\nexports.ListUsersRequest = ListUsersRequest;\nexports.RuleSpecs = RuleSpecs;\nexports.UpdateAPIKeyRequest = UpdateAPIKeyRequest;\nexports.UpdateApplicationRequest = UpdateApplicationRequest;\nexports.UpdateGroupRequest = UpdateGroupRequest;\nexports.UpdatePolicyRequest = UpdatePolicyRequest;\nexports.UpdateSSHKeyRequest = UpdateSSHKeyRequest;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index_gen = require(\"./v1beta1/index.gen.cjs\");\nexports.v1beta1 = index_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst intervalRetrier = require(\"../../../internal/async/interval-retrier.cjs\");\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass API extends api.API {\n  /** Lists the available regions of the API. */\n  static LOCALITIES = [\"fr-par\"];\n  pageOfListDeployments = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/inference/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/deployments`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId],\n        [\"tags\", request.tags]\n      )\n    },\n    marshalling_gen.unmarshalListDeploymentsResponse\n  );\n  /**\n   * List inference deployments. List all your inference deployments.\n   *\n   * @param request - The request {@link ListDeploymentsRequest}\n   * @returns A Promise of ListDeploymentsResponse\n   */\n  listDeployments = (request = {}) => resourcePaginator.enrichForPagination(\"deployments\", this.pageOfListDeployments, request);\n  /**\n   * Get a deployment. Get the deployment for the given ID.\n   *\n   * @param request - The request {@link GetDeploymentRequest}\n   * @returns A Promise of Deployment\n   */\n  getDeployment = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/inference/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/deployments/${marshalling.validatePathParam(\"deploymentId\", request.deploymentId)}`\n    },\n    marshalling_gen.unmarshalDeployment\n  );\n  /**\n   * Waits for {@link Deployment} to be in a final state.\n   *\n   * @param request - The request {@link GetDeploymentRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Deployment\n   */\n  waitForDeployment = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.DEPLOYMENT_TRANSIENT_STATUSES.includes(res.status))),\n    this.getDeployment,\n    request,\n    options\n  );\n  /**\n   * Create a deployment. Create a new inference deployment related to a\n   * specific model.\n   *\n   * @param request - The request {@link CreateDeploymentRequest}\n   * @returns A Promise of Deployment\n   */\n  createDeployment = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateDeploymentRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/inference/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/deployments`\n    },\n    marshalling_gen.unmarshalDeployment\n  );\n  /**\n   * Update a deployment. Update an existing inference deployment.\n   *\n   * @param request - The request {@link UpdateDeploymentRequest}\n   * @returns A Promise of Deployment\n   */\n  updateDeployment = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateDeploymentRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/inference/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/deployments/${marshalling.validatePathParam(\"deploymentId\", request.deploymentId)}`\n    },\n    marshalling_gen.unmarshalDeployment\n  );\n  /**\n   * Delete a deployment. Delete an existing inference deployment.\n   *\n   * @param request - The request {@link DeleteDeploymentRequest}\n   * @returns A Promise of Deployment\n   */\n  deleteDeployment = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/inference/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/deployments/${marshalling.validatePathParam(\"deploymentId\", request.deploymentId)}`\n    },\n    marshalling_gen.unmarshalDeployment\n  );\n  /**\n   * Get the CA certificate. Get the CA certificate used for the deployment of\n   * private endpoints. The CA certificate will be returned as a PEM file.\n   *\n   * @param request - The request {@link GetDeploymentCertificateRequest}\n   * @returns A Promise of Blob\n   */\n  getDeploymentCertificate = (request) => this.client.fetch({\n    method: \"GET\",\n    path: `/inference/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/deployments/${marshalling.validatePathParam(\"deploymentId\", request.deploymentId)}/certificate`,\n    urlParams: marshalling.urlParams([\"dl\", 1]),\n    responseType: \"blob\"\n  });\n  /**\n   * Create an endpoint. Create a new Endpoint related to a specific deployment.\n   *\n   * @param request - The request {@link CreateEndpointRequest}\n   * @returns A Promise of Endpoint\n   */\n  createEndpoint = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateEndpointRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/inference/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/endpoints`\n    },\n    marshalling_gen.unmarshalEndpoint\n  );\n  /**\n   * Update an endpoint. Update an existing Endpoint.\n   *\n   * @param request - The request {@link UpdateEndpointRequest}\n   * @returns A Promise of Endpoint\n   */\n  updateEndpoint = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateEndpointRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/inference/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/endpoints/${marshalling.validatePathParam(\"endpointId\", request.endpointId)}`\n    },\n    marshalling_gen.unmarshalEndpoint\n  );\n  /**\n   * Delete an endpoint. Delete an existing Endpoint.\n   *\n   * @param request - The request {@link DeleteEndpointRequest}\n   */\n  deleteEndpoint = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/inference/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/endpoints/${marshalling.validatePathParam(\"endpointId\", request.endpointId)}`\n  });\n  pageOfListDeploymentACLRules = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/inference/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/deployments/${marshalling.validatePathParam(\"deploymentId\", request.deploymentId)}/acls`,\n      urlParams: marshalling.urlParams(\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListDeploymentACLRulesResponse\n  );\n  /**\n   * List your ACLs. List ACLs for a specific deployment.\n   *\n   * @param request - The request {@link ListDeploymentACLRulesRequest}\n   * @returns A Promise of ListDeploymentACLRulesResponse\n   */\n  listDeploymentACLRules = (request) => resourcePaginator.enrichForPagination(\"rules\", this.pageOfListDeploymentACLRules, request);\n  /**\n   * Add new ACLs. Add new ACL rules for a specific deployment.\n   *\n   * @param request - The request {@link AddDeploymentACLRulesRequest}\n   * @returns A Promise of AddDeploymentACLRulesResponse\n   */\n  addDeploymentACLRules = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalAddDeploymentACLRulesRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/inference/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/deployments/${marshalling.validatePathParam(\"deploymentId\", request.deploymentId)}/acls`\n    },\n    marshalling_gen.unmarshalAddDeploymentACLRulesResponse\n  );\n  /**\n   * Set new ACL. Set new ACL rules for a specific deployment.\n   *\n   * @param request - The request {@link SetDeploymentACLRulesRequest}\n   * @returns A Promise of SetDeploymentACLRulesResponse\n   */\n  setDeploymentACLRules = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSetDeploymentACLRulesRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/inference/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/deployments/${marshalling.validatePathParam(\"deploymentId\", request.deploymentId)}/acls`\n    },\n    marshalling_gen.unmarshalSetDeploymentACLRulesResponse\n  );\n  /**\n   * Delete an exising ACL.\n   *\n   * @param request - The request {@link DeleteDeploymentACLRuleRequest}\n   */\n  deleteDeploymentACLRule = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/inference/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/acls/${marshalling.validatePathParam(\"aclId\", request.aclId)}`\n  });\n  pageOfListModels = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/inference/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/models`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId],\n        [\"tags\", request.tags]\n      )\n    },\n    marshalling_gen.unmarshalListModelsResponse\n  );\n  /**\n   * List models. List all available models.\n   *\n   * @param request - The request {@link ListModelsRequest}\n   * @returns A Promise of ListModelsResponse\n   */\n  listModels = (request = {}) => resourcePaginator.enrichForPagination(\"models\", this.pageOfListModels, request);\n  /**\n   * Get a model. Get the model for the given ID.\n   *\n   * @param request - The request {@link GetModelRequest}\n   * @returns A Promise of Model\n   */\n  getModel = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/inference/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/models/${marshalling.validatePathParam(\"modelId\", request.modelId)}`\n    },\n    marshalling_gen.unmarshalModel\n  );\n  getModelEula = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/inference/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/models/${marshalling.validatePathParam(\"modelId\", request.modelId)}/eula`\n    },\n    marshalling_gen.unmarshalEula\n  );\n  pageOfListNodeTypes = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/inference/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/node-types`,\n      urlParams: marshalling.urlParams(\n        [\"include_disabled_types\", request.includeDisabledTypes],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListNodeTypesResponse\n  );\n  /**\n   * List available node types. List all available node types. By default, the\n   * node types returned in the list are ordered by creation date in ascending\n   * order, though this can be modified via the `order_by` field.\n   *\n   * @param request - The request {@link ListNodeTypesRequest}\n   * @returns A Promise of ListNodeTypesResponse\n   */\n  listNodeTypes = (request) => resourcePaginator.enrichForPagination(\"nodeTypes\", this.pageOfListNodeTypes, request);\n}\nexports.API = API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst DEPLOYMENT_TRANSIENT_STATUSES = [\n  \"creating\",\n  \"deploying\",\n  \"deleting\"\n];\nexports.DEPLOYMENT_TRANSIENT_STATUSES = DEPLOYMENT_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst validationRules_gen = require(\"./validation-rules.gen.cjs\");\nexports.API = api_gen.API;\nexports.DEPLOYMENT_TRANSIENT_STATUSES = content_gen.DEPLOYMENT_TRANSIENT_STATUSES;\nexports.ValidationRules = validationRules_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst randomName = require(\"@scaleway/random-name\");\nconst json = require(\"../../../helpers/json.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst unmarshalEndpointPrivateNetworkDetails = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'EndpointPrivateNetworkDetails' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    privateNetworkId: data.private_network_id\n  };\n};\nconst unmarshalEndpointPublicAccessDetails = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'EndpointPublicAccessDetails' failed as data isn't a dictionary.`\n    );\n  }\n  return {};\n};\nconst unmarshalEndpoint = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Endpoint' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    disableAuth: data.disable_auth,\n    id: data.id,\n    privateNetwork: data.private_network ? unmarshalEndpointPrivateNetworkDetails(data.private_network) : void 0,\n    publicAccess: data.public_access ? unmarshalEndpointPublicAccessDetails(data.public_access) : void 0,\n    url: data.url\n  };\n};\nconst unmarshalDeployment = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Deployment' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    endpoints: marshalling.unmarshalArrayOfObject(data.endpoints, unmarshalEndpoint),\n    errorMessage: data.error_message,\n    id: data.id,\n    maxSize: data.max_size,\n    minSize: data.min_size,\n    modelId: data.model_id,\n    modelName: data.model_name,\n    name: data.name,\n    nodeType: data.node_type,\n    projectId: data.project_id,\n    region: data.region,\n    size: data.size,\n    status: data.status,\n    tags: data.tags,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalModelS3Model = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ModelS3Model' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    nodeType: data.node_type,\n    pythonDependencies: data.python_dependencies,\n    s3Url: data.s3_url,\n    tritonServerVersion: data.triton_server_version\n  };\n};\nconst unmarshalModel = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Model' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    compatibleNodeTypes: data.compatible_node_types,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    description: data.description,\n    hasEula: data.has_eula,\n    id: data.id,\n    isPublic: data.is_public,\n    name: data.name,\n    projectId: data.project_id,\n    provider: data.provider,\n    quantizationLevel: data.quantization_level,\n    region: data.region,\n    s3Model: data.s3_model ? unmarshalModelS3Model(data.s3_model) : void 0,\n    tags: data.tags,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalACLRule = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ACLRule' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    description: data.description,\n    id: data.id,\n    ip: data.ip\n  };\n};\nconst unmarshalAddDeploymentACLRulesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'AddDeploymentACLRulesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    rules: marshalling.unmarshalArrayOfObject(data.rules, unmarshalACLRule)\n  };\n};\nconst unmarshalEula = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Eula' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    content: data.content\n  };\n};\nconst unmarshalListDeploymentACLRulesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListDeploymentACLRulesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    rules: marshalling.unmarshalArrayOfObject(data.rules, unmarshalACLRule),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListDeploymentsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListDeploymentsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    deployments: marshalling.unmarshalArrayOfObject(data.deployments, unmarshalDeployment),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListModelsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListModelsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    models: marshalling.unmarshalArrayOfObject(data.models, unmarshalModel),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalNodeType = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'NodeType' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    beta: data.beta,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    description: data.description,\n    disabled: data.disabled,\n    gpus: data.gpus,\n    memory: data.memory,\n    name: data.name,\n    region: data.region,\n    stockStatus: data.stock_status,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    vcpus: data.vcpus,\n    vram: data.vram\n  };\n};\nconst unmarshalListNodeTypesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListNodeTypesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    nodeTypes: marshalling.unmarshalArrayOfObject(data.node_types, unmarshalNodeType),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalSetDeploymentACLRulesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SetDeploymentACLRulesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    rules: marshalling.unmarshalArrayOfObject(data.rules, unmarshalACLRule)\n  };\n};\nconst marshalACLRuleRequest = (request, defaults) => ({\n  description: request.description,\n  ip: request.ip\n});\nconst marshalAddDeploymentACLRulesRequest = (request, defaults) => ({\n  acls: request.acls !== void 0 ? request.acls.map((elt) => marshalACLRuleRequest(elt)) : void 0\n});\nconst marshalEndpointSpecPrivateNetwork = (request, defaults) => ({\n  private_network_id: request.privateNetworkId\n});\nconst marshalEndpointSpecPublic = (request, defaults) => ({});\nconst marshalEndpointSpec = (request, defaults) => ({\n  disable_auth: request.disableAuth,\n  ...marshalling.resolveOneOf([\n    {\n      param: \"public\",\n      value: request.public !== void 0 ? marshalEndpointSpecPublic(request.public) : void 0\n    },\n    {\n      param: \"private_network\",\n      value: request.privateNetwork !== void 0 ? marshalEndpointSpecPrivateNetwork(request.privateNetwork) : void 0\n    }\n  ])\n});\nconst marshalCreateDeploymentRequest = (request, defaults) => ({\n  accept_eula: request.acceptEula,\n  endpoints: request.endpoints.map((elt) => marshalEndpointSpec(elt)),\n  max_size: request.maxSize,\n  min_size: request.minSize,\n  model_name: request.modelName,\n  name: request.name || randomName(\"inference\"),\n  node_type: request.nodeType,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  tags: request.tags\n});\nconst marshalCreateEndpointRequest = (request, defaults) => ({\n  deployment_id: request.deploymentId,\n  endpoint: marshalEndpointSpec(request.endpoint)\n});\nconst marshalSetDeploymentACLRulesRequest = (request, defaults) => ({\n  acls: request.acls !== void 0 ? request.acls.map((elt) => marshalACLRuleRequest(elt)) : void 0\n});\nconst marshalUpdateDeploymentRequest = (request, defaults) => ({\n  max_size: request.maxSize,\n  min_size: request.minSize,\n  name: request.name,\n  tags: request.tags\n});\nconst marshalUpdateEndpointRequest = (request, defaults) => ({\n  disable_auth: request.disableAuth\n});\nexports.marshalAddDeploymentACLRulesRequest = marshalAddDeploymentACLRulesRequest;\nexports.marshalCreateDeploymentRequest = marshalCreateDeploymentRequest;\nexports.marshalCreateEndpointRequest = marshalCreateEndpointRequest;\nexports.marshalSetDeploymentACLRulesRequest = marshalSetDeploymentACLRulesRequest;\nexports.marshalUpdateDeploymentRequest = marshalUpdateDeploymentRequest;\nexports.marshalUpdateEndpointRequest = marshalUpdateEndpointRequest;\nexports.unmarshalAddDeploymentACLRulesResponse = unmarshalAddDeploymentACLRulesResponse;\nexports.unmarshalDeployment = unmarshalDeployment;\nexports.unmarshalEndpoint = unmarshalEndpoint;\nexports.unmarshalEula = unmarshalEula;\nexports.unmarshalListDeploymentACLRulesResponse = unmarshalListDeploymentACLRulesResponse;\nexports.unmarshalListDeploymentsResponse = unmarshalListDeploymentsResponse;\nexports.unmarshalListModelsResponse = unmarshalListModelsResponse;\nexports.unmarshalListNodeTypesResponse = unmarshalListNodeTypesResponse;\nexports.unmarshalModel = unmarshalModel;\nexports.unmarshalSetDeploymentACLRulesResponse = unmarshalSetDeploymentACLRulesResponse;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst CreateDeploymentRequest = {\n  maxSize: {\n    greaterThanOrEqual: 1,\n    lessThanOrEqual: 50\n  },\n  minSize: {\n    greaterThanOrEqual: 1,\n    lessThanOrEqual: 50\n  },\n  modelName: {\n    maxLength: 255,\n    minLength: 0,\n    pattern: /^[\\w-_]+\\/[\\w-_.]+(:[\\w]+)?$/\n  },\n  name: {\n    maxLength: 255,\n    minLength: 1,\n    pattern: /^[A-Za-z0-9-_]+$/\n  },\n  nodeType: {\n    maxLength: 64,\n    minLength: 1\n  }\n};\nconst ListDeploymentsRequest = {\n  name: {\n    maxLength: 255,\n    minLength: 1\n  }\n};\nconst ListModelsRequest = {\n  name: {\n    maxLength: 255,\n    minLength: 1\n  }\n};\nconst UpdateDeploymentRequest = {\n  maxSize: {\n    greaterThanOrEqual: 1,\n    lessThanOrEqual: 50\n  },\n  minSize: {\n    greaterThanOrEqual: 1,\n    lessThanOrEqual: 50\n  },\n  name: {\n    maxLength: 255,\n    minLength: 1\n  }\n};\nexports.CreateDeploymentRequest = CreateDeploymentRequest;\nexports.ListDeploymentsRequest = ListDeploymentsRequest;\nexports.ListModelsRequest = ListModelsRequest;\nexports.UpdateDeploymentRequest = UpdateDeploymentRequest;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index = require(\"./v1/index.cjs\");\nexports.v1 = index;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass API extends api.API {\n  /** Lists the available zones of the API. */\n  static LOCALITIES = [\n    \"fr-par-1\",\n    \"fr-par-2\",\n    \"fr-par-3\",\n    \"nl-ams-1\",\n    \"nl-ams-2\",\n    \"nl-ams-3\",\n    \"pl-waw-1\",\n    \"pl-waw-2\",\n    \"pl-waw-3\"\n  ];\n  /**\n   * Get availability. Get availability for all Instance types.\n   *\n   * @param request - The request {@link GetServerTypesAvailabilityRequest}\n   * @returns A Promise of GetServerTypesAvailabilityResponse\n   */\n  getServerTypesAvailability = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/products/servers/availability`,\n      urlParams: marshalling.urlParams(\n        [\"page\", request.page],\n        [\"per_page\", request.perPage ?? this.client.settings.defaultPageSize]\n      )\n    },\n    marshalling_gen.unmarshalGetServerTypesAvailabilityResponse\n  );\n  /**\n   * List Instance types. List available Instance types and their technical\n   * details.\n   *\n   * @param request - The request {@link ListServersTypesRequest}\n   * @returns A Promise of ListServersTypesResponse\n   */\n  listServersTypes = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/products/servers`,\n      urlParams: marshalling.urlParams(\n        [\"page\", request.page],\n        [\"per_page\", request.perPage ?? this.client.settings.defaultPageSize]\n      )\n    },\n    marshalling_gen.unmarshalListServersTypesResponse\n  );\n  /**\n   * List volume types. List all volume types and their technical details.\n   *\n   * @param request - The request {@link ListVolumesTypesRequest}\n   * @returns A Promise of ListVolumesTypesResponse\n   */\n  listVolumesTypes = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/products/volumes`,\n      urlParams: marshalling.urlParams(\n        [\"page\", request.page],\n        [\"per_page\", request.perPage ?? this.client.settings.defaultPageSize]\n      )\n    },\n    marshalling_gen.unmarshalListVolumesTypesResponse\n  );\n  pageOfListServers = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers`,\n      urlParams: marshalling.urlParams(\n        [\"commercial_type\", request.commercialType],\n        [\"name\", request.name],\n        [\"order\", request.order],\n        [\"organization\", request.organization],\n        [\"page\", request.page],\n        [\"per_page\", request.perPage ?? this.client.settings.defaultPageSize],\n        [\"private_ip\", request.privateIp],\n        [\"private_network\", request.privateNetwork],\n        [\n          \"private_networks\",\n          request.privateNetworks && request.privateNetworks.length > 0 ? request.privateNetworks.join(\",\") : void 0\n        ],\n        [\"private_nic_mac_address\", request.privateNicMacAddress],\n        [\"project\", request.project],\n        [\n          \"servers\",\n          request.servers && request.servers.length > 0 ? request.servers.join(\",\") : void 0\n        ],\n        [\"state\", request.state],\n        [\n          \"tags\",\n          request.tags && request.tags.length > 0 ? request.tags.join(\",\") : void 0\n        ],\n        [\"with_ip\", request.withIp],\n        [\"without_ip\", request.withoutIp]\n      )\n    },\n    marshalling_gen.unmarshalListServersResponse\n  );\n  /**\n   * List all Instances. List all Instances in a specified Availability Zone,\n   * e.g. `fr-par-1`.\n   *\n   * @param request - The request {@link ListServersRequest}\n   * @returns A Promise of ListServersResponse\n   */\n  listServers = (request = {}) => resourcePaginator.enrichForPagination(\"servers\", this.pageOfListServers, request);\n  _createServer = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateServerRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers`\n    },\n    marshalling_gen.unmarshalCreateServerResponse\n  );\n  /**\n   * Delete an Instance. Delete the Instance with the specified ID.\n   *\n   * @param request - The request {@link DeleteServerRequest}\n   */\n  deleteServer = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}`\n  });\n  /**\n   * Get an Instance. Get the details of a specified Instance.\n   *\n   * @param request - The request {@link GetServerRequest}\n   * @returns A Promise of GetServerResponse\n   */\n  getServer = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}`\n    },\n    marshalling_gen.unmarshalGetServerResponse\n  );\n  _setServer = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSetServerRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"id\", request.id)}`\n    },\n    marshalling_gen.unmarshalSetServerResponse\n  );\n  _updateServer = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateServerRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}`\n    },\n    marshalling_gen.unmarshalUpdateServerResponse\n  );\n  /**\n   * List Instance actions. List all actions (e.g. power on, power off, reboot)\n   * that can currently be performed on an Instance.\n   *\n   * @param request - The request {@link ListServerActionsRequest}\n   * @returns A Promise of ListServerActionsResponse\n   */\n  listServerActions = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/action`\n    },\n    marshalling_gen.unmarshalListServerActionsResponse\n  );\n  /**\n   * Perform action. Perform an action on an Instance. Available actions are:\n   * `poweron`: Start a stopped Instance. `poweroff`: Fully stop the Instance\n   * and release the hypervisor slot. `stop_in_place`: Stop the Instance, but\n   * keep the slot on the hypervisor. `reboot`: Stop the instance and restart\n   * it. `backup`: Create an image with all the volumes of an Instance.\n   * `terminate`: Delete the Instance along with its attached volumes, except\n   * for SBS volumes. `enable_routed_ip`: Migrate the Instance to the new\n   * network stack.\n   *\n   * Keep in mind that `terminate` an Instance will result in the deletion of\n   * `l_ssd`, `b_ssd` and `scratch` volumes types, `sbs_volume` volumes type\n   * will only be detached. If you want to preserve your volumes, you should\n   * detach them before the Instance deletion or `terminate` action.\n   *\n   * @param request - The request {@link ServerActionRequest}\n   * @returns A Promise of ServerActionResponse\n   */\n  serverAction = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalServerActionRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/action`\n    },\n    marshalling_gen.unmarshalServerActionResponse\n  );\n  /**\n   * List user data. List all user data keys registered on a specified Instance.\n   *\n   * @param request - The request {@link ListServerUserDataRequest}\n   * @returns A Promise of ListServerUserDataResponse\n   */\n  listServerUserData = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/user_data`\n    },\n    marshalling_gen.unmarshalListServerUserDataResponse\n  );\n  /**\n   * Delete user data. Delete the specified key from an Instance's user data.\n   *\n   * @param request - The request {@link DeleteServerUserDataRequest}\n   */\n  deleteServerUserData = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/user_data/${marshalling.validatePathParam(\"key\", request.key)}`\n  });\n  attachServerVolume = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalAttachServerVolumeRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/attach-volume`\n    },\n    marshalling_gen.unmarshalAttachServerVolumeResponse\n  );\n  detachServerVolume = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalDetachServerVolumeRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/detach-volume`\n    },\n    marshalling_gen.unmarshalDetachServerVolumeResponse\n  );\n  pageOfListImages = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/images`,\n      urlParams: marshalling.urlParams(\n        [\"arch\", request.arch],\n        [\"name\", request.name],\n        [\"organization\", request.organization],\n        [\"page\", request.page],\n        [\"per_page\", request.perPage ?? this.client.settings.defaultPageSize],\n        [\"project\", request.project],\n        [\"public\", request.public],\n        [\"tags\", request.tags]\n      )\n    },\n    marshalling_gen.unmarshalListImagesResponse\n  );\n  /**\n   * List Instance images. List all existing Instance images.\n   *\n   * @param request - The request {@link ListImagesRequest}\n   * @returns A Promise of ListImagesResponse\n   */\n  listImages = (request = {}) => resourcePaginator.enrichForPagination(\"images\", this.pageOfListImages, request);\n  /**\n   * Get an Instance image. Get details of an image with the specified ID.\n   *\n   * @param request - The request {@link GetImageRequest}\n   * @returns A Promise of GetImageResponse\n   */\n  getImage = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/images/${marshalling.validatePathParam(\"imageId\", request.imageId)}`\n    },\n    marshalling_gen.unmarshalGetImageResponse\n  );\n  /**\n   * Create an Instance image. Create an Instance image from the specified\n   * snapshot ID.\n   *\n   * @param request - The request {@link CreateImageRequest}\n   * @returns A Promise of CreateImageResponse\n   */\n  createImage = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateImageRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/images`\n    },\n    marshalling_gen.unmarshalCreateImageResponse\n  );\n  _setImage = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSetImageRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/images/${marshalling.validatePathParam(\"id\", request.id)}`\n    },\n    marshalling_gen.unmarshalSetImageResponse\n  );\n  /**\n   * Update image. Update the properties of an image.\n   *\n   * @param request - The request {@link UpdateImageRequest}\n   * @returns A Promise of UpdateImageResponse\n   */\n  updateImage = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateImageRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/images/${marshalling.validatePathParam(\"imageId\", request.imageId)}`\n    },\n    marshalling_gen.unmarshalUpdateImageResponse\n  );\n  /**\n   * Delete an Instance image. Delete the image with the specified ID.\n   *\n   * @param request - The request {@link DeleteImageRequest}\n   */\n  deleteImage = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/images/${marshalling.validatePathParam(\"imageId\", request.imageId)}`\n  });\n  pageOfListSnapshots = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/snapshots`,\n      urlParams: marshalling.urlParams(\n        [\"base_volume_id\", request.baseVolumeId],\n        [\"name\", request.name],\n        [\"organization\", request.organization],\n        [\"page\", request.page],\n        [\"per_page\", request.perPage ?? this.client.settings.defaultPageSize],\n        [\"project\", request.project],\n        [\"tags\", request.tags]\n      )\n    },\n    marshalling_gen.unmarshalListSnapshotsResponse\n  );\n  /**\n   * List snapshots. List all snapshots of an Organization in a specified\n   * Availability Zone.\n   *\n   * @param request - The request {@link ListSnapshotsRequest}\n   * @returns A Promise of ListSnapshotsResponse\n   */\n  listSnapshots = (request = {}) => resourcePaginator.enrichForPagination(\"snapshots\", this.pageOfListSnapshots, request);\n  /**\n   * Create a snapshot from a specified volume or from a QCOW2 file. Create a\n   * snapshot from a specified volume or from a QCOW2 file in a specified\n   * Availability Zone.\n   *\n   * @param request - The request {@link CreateSnapshotRequest}\n   * @returns A Promise of CreateSnapshotResponse\n   */\n  createSnapshot = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateSnapshotRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/snapshots`\n    },\n    marshalling_gen.unmarshalCreateSnapshotResponse\n  );\n  /**\n   * Get a snapshot. Get details of a snapshot with the specified ID.\n   *\n   * @param request - The request {@link GetSnapshotRequest}\n   * @returns A Promise of GetSnapshotResponse\n   */\n  getSnapshot = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/snapshots/${marshalling.validatePathParam(\"snapshotId\", request.snapshotId)}`\n    },\n    marshalling_gen.unmarshalGetSnapshotResponse\n  );\n  _setSnapshot = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSetSnapshotRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/snapshots/${marshalling.validatePathParam(\"snapshotId\", request.snapshotId)}`\n    },\n    marshalling_gen.unmarshalSetSnapshotResponse\n  );\n  /**\n   * Update a snapshot. Update the properties of a snapshot.\n   *\n   * @param request - The request {@link UpdateSnapshotRequest}\n   * @returns A Promise of UpdateSnapshotResponse\n   */\n  updateSnapshot = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateSnapshotRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/snapshots/${marshalling.validatePathParam(\"snapshotId\", request.snapshotId)}`\n    },\n    marshalling_gen.unmarshalUpdateSnapshotResponse\n  );\n  /**\n   * Delete a snapshot. Delete the snapshot with the specified ID.\n   *\n   * @param request - The request {@link DeleteSnapshotRequest}\n   */\n  deleteSnapshot = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/snapshots/${marshalling.validatePathParam(\"snapshotId\", request.snapshotId)}`\n  });\n  /**\n   * Export a snapshot. Export a snapshot to a specified S3 bucket in the same\n   * region.\n   *\n   * @param request - The request {@link ExportSnapshotRequest}\n   * @returns A Promise of ExportSnapshotResponse\n   */\n  exportSnapshot = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalExportSnapshotRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/snapshots/${marshalling.validatePathParam(\"snapshotId\", request.snapshotId)}/export`\n    },\n    marshalling_gen.unmarshalExportSnapshotResponse\n  );\n  pageOfListVolumes = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/volumes`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"organization\", request.organization],\n        [\"page\", request.page],\n        [\"per_page\", request.perPage ?? this.client.settings.defaultPageSize],\n        [\"project\", request.project],\n        [\n          \"tags\",\n          request.tags && request.tags.length > 0 ? request.tags.join(\",\") : void 0\n        ],\n        [\"volume_type\", request.volumeType]\n      )\n    },\n    marshalling_gen.unmarshalListVolumesResponse\n  );\n  /**\n   * List volumes. List volumes in the specified Availability Zone. You can\n   * filter the output by volume type.\n   *\n   * @param request - The request {@link ListVolumesRequest}\n   * @returns A Promise of ListVolumesResponse\n   */\n  listVolumes = (request = {}) => resourcePaginator.enrichForPagination(\"volumes\", this.pageOfListVolumes, request);\n  /**\n   * Create a volume. Create a volume of a specified type in an Availability\n   * Zone.\n   *\n   * @param request - The request {@link CreateVolumeRequest}\n   * @returns A Promise of CreateVolumeResponse\n   */\n  createVolume = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateVolumeRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/volumes`\n    },\n    marshalling_gen.unmarshalCreateVolumeResponse\n  );\n  /**\n   * Get a volume. Get details of a volume with the specified ID.\n   *\n   * @param request - The request {@link GetVolumeRequest}\n   * @returns A Promise of GetVolumeResponse\n   */\n  getVolume = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/volumes/${marshalling.validatePathParam(\"volumeId\", request.volumeId)}`\n    },\n    marshalling_gen.unmarshalGetVolumeResponse\n  );\n  /**\n   * Update a volume. Replace the name and/or size properties of a volume\n   * specified by its ID, with the specified value(s). Any volume name can be\n   * changed, however only `b_ssd` volumes can currently be increased in size.\n   *\n   * @param request - The request {@link UpdateVolumeRequest}\n   * @returns A Promise of UpdateVolumeResponse\n   */\n  updateVolume = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateVolumeRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/volumes/${marshalling.validatePathParam(\"volumeId\", request.volumeId)}`\n    },\n    marshalling_gen.unmarshalUpdateVolumeResponse\n  );\n  /**\n   * Delete a volume. Delete the volume with the specified ID.\n   *\n   * @param request - The request {@link DeleteVolumeRequest}\n   */\n  deleteVolume = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/volumes/${marshalling.validatePathParam(\"volumeId\", request.volumeId)}`\n  });\n  pageOfListSecurityGroups = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/security_groups`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"organization\", request.organization],\n        [\"page\", request.page],\n        [\"per_page\", request.perPage ?? this.client.settings.defaultPageSize],\n        [\"project\", request.project],\n        [\"project_default\", request.projectDefault],\n        [\n          \"tags\",\n          request.tags && request.tags.length > 0 ? request.tags.join(\",\") : void 0\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListSecurityGroupsResponse\n  );\n  /**\n   * List security groups. List all existing security groups.\n   *\n   * @param request - The request {@link ListSecurityGroupsRequest}\n   * @returns A Promise of ListSecurityGroupsResponse\n   */\n  listSecurityGroups = (request = {}) => resourcePaginator.enrichForPagination(\n    \"securityGroups\",\n    this.pageOfListSecurityGroups,\n    request\n  );\n  /**\n   * Create a security group. Create a security group with a specified name and\n   * description.\n   *\n   * @param request - The request {@link CreateSecurityGroupRequest}\n   * @returns A Promise of CreateSecurityGroupResponse\n   */\n  createSecurityGroup = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateSecurityGroupRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/security_groups`\n    },\n    marshalling_gen.unmarshalCreateSecurityGroupResponse\n  );\n  /**\n   * Get a security group. Get the details of a security group with the\n   * specified ID.\n   *\n   * @param request - The request {@link GetSecurityGroupRequest}\n   * @returns A Promise of GetSecurityGroupResponse\n   */\n  getSecurityGroup = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/security_groups/${marshalling.validatePathParam(\"securityGroupId\", request.securityGroupId)}`\n    },\n    marshalling_gen.unmarshalGetSecurityGroupResponse\n  );\n  /**\n   * Delete a security group. Delete a security group with the specified ID.\n   *\n   * @param request - The request {@link DeleteSecurityGroupRequest}\n   */\n  deleteSecurityGroup = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/security_groups/${marshalling.validatePathParam(\"securityGroupId\", request.securityGroupId)}`\n  });\n  _setSecurityGroup = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSetSecurityGroupRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/security_groups/${marshalling.validatePathParam(\"id\", request.id)}`\n    },\n    marshalling_gen.unmarshalSetSecurityGroupResponse\n  );\n  /**\n   * Update a security group. Update the properties of security group.\n   *\n   * @param request - The request {@link UpdateSecurityGroupRequest}\n   * @returns A Promise of UpdateSecurityGroupResponse\n   */\n  updateSecurityGroup = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateSecurityGroupRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/security_groups/${marshalling.validatePathParam(\"securityGroupId\", request.securityGroupId)}`\n    },\n    marshalling_gen.unmarshalUpdateSecurityGroupResponse\n  );\n  /**\n   * Get default rules. Lists the default rules applied to all the security\n   * groups.\n   *\n   * @param request - The request {@link ListDefaultSecurityGroupRulesRequest}\n   * @returns A Promise of ListSecurityGroupRulesResponse\n   */\n  listDefaultSecurityGroupRules = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/security_groups/default/rules`\n    },\n    marshalling_gen.unmarshalListSecurityGroupRulesResponse\n  );\n  pageOfListSecurityGroupRules = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/security_groups/${marshalling.validatePathParam(\"securityGroupId\", request.securityGroupId)}/rules`,\n      urlParams: marshalling.urlParams(\n        [\"page\", request.page],\n        [\"per_page\", request.perPage ?? this.client.settings.defaultPageSize]\n      )\n    },\n    marshalling_gen.unmarshalListSecurityGroupRulesResponse\n  );\n  /**\n   * List rules. List the rules of the a specified security group ID.\n   *\n   * @param request - The request {@link ListSecurityGroupRulesRequest}\n   * @returns A Promise of ListSecurityGroupRulesResponse\n   */\n  listSecurityGroupRules = (request) => resourcePaginator.enrichForPagination(\"rules\", this.pageOfListSecurityGroupRules, request);\n  /**\n   * Create rule. Create a rule in the specified security group ID.\n   *\n   * @param request - The request {@link CreateSecurityGroupRuleRequest}\n   * @returns A Promise of CreateSecurityGroupRuleResponse\n   */\n  createSecurityGroupRule = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateSecurityGroupRuleRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/security_groups/${marshalling.validatePathParam(\"securityGroupId\", request.securityGroupId)}/rules`\n    },\n    marshalling_gen.unmarshalCreateSecurityGroupRuleResponse\n  );\n  /**\n   * Update all the rules of a security group. Replaces the existing rules of\n   * the security group with the rules provided. This endpoint supports the\n   * update of existing rules, creation of new rules and deletion of existing\n   * rules when they are not passed in the request.\n   *\n   * @param request - The request {@link SetSecurityGroupRulesRequest}\n   * @returns A Promise of SetSecurityGroupRulesResponse\n   */\n  setSecurityGroupRules = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSetSecurityGroupRulesRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/security_groups/${marshalling.validatePathParam(\"securityGroupId\", request.securityGroupId)}/rules`\n    },\n    marshalling_gen.unmarshalSetSecurityGroupRulesResponse\n  );\n  /**\n   * Delete rule. Delete a security group rule with the specified ID.\n   *\n   * @param request - The request {@link DeleteSecurityGroupRuleRequest}\n   */\n  deleteSecurityGroupRule = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/security_groups/${marshalling.validatePathParam(\"securityGroupId\", request.securityGroupId)}/rules/${marshalling.validatePathParam(\"securityGroupRuleId\", request.securityGroupRuleId)}`\n  });\n  /**\n   * Get rule. Get details of a security group rule with the specified ID.\n   *\n   * @param request - The request {@link GetSecurityGroupRuleRequest}\n   * @returns A Promise of GetSecurityGroupRuleResponse\n   */\n  getSecurityGroupRule = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/security_groups/${marshalling.validatePathParam(\"securityGroupId\", request.securityGroupId)}/rules/${marshalling.validatePathParam(\"securityGroupRuleId\", request.securityGroupRuleId)}`\n    },\n    marshalling_gen.unmarshalGetSecurityGroupRuleResponse\n  );\n  _setSecurityGroupRule = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSetSecurityGroupRuleRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/security_groups/${marshalling.validatePathParam(\"securityGroupId\", request.securityGroupId)}/rules/${marshalling.validatePathParam(\"securityGroupRuleId\", request.securityGroupRuleId)}`\n    },\n    marshalling_gen.unmarshalSetSecurityGroupRuleResponse\n  );\n  /**\n   * Update security group rule. Update the properties of a rule from a\n   * specified security group.\n   *\n   * @param request - The request {@link UpdateSecurityGroupRuleRequest}\n   * @returns A Promise of UpdateSecurityGroupRuleResponse\n   */\n  updateSecurityGroupRule = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateSecurityGroupRuleRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/security_groups/${marshalling.validatePathParam(\"securityGroupId\", request.securityGroupId)}/rules/${marshalling.validatePathParam(\"securityGroupRuleId\", request.securityGroupRuleId)}`\n    },\n    marshalling_gen.unmarshalUpdateSecurityGroupRuleResponse\n  );\n  pageOfListPlacementGroups = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/placement_groups`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"organization\", request.organization],\n        [\"page\", request.page],\n        [\"per_page\", request.perPage ?? this.client.settings.defaultPageSize],\n        [\"project\", request.project],\n        [\n          \"tags\",\n          request.tags && request.tags.length > 0 ? request.tags.join(\",\") : void 0\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListPlacementGroupsResponse\n  );\n  /**\n   * List placement groups. List all placement groups in a specified\n   * Availability Zone.\n   *\n   * @param request - The request {@link ListPlacementGroupsRequest}\n   * @returns A Promise of ListPlacementGroupsResponse\n   */\n  listPlacementGroups = (request = {}) => resourcePaginator.enrichForPagination(\n    \"placementGroups\",\n    this.pageOfListPlacementGroups,\n    request\n  );\n  /**\n   * Create a placement group. Create a new placement group in a specified\n   * Availability Zone.\n   *\n   * @param request - The request {@link CreatePlacementGroupRequest}\n   * @returns A Promise of CreatePlacementGroupResponse\n   */\n  createPlacementGroup = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreatePlacementGroupRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/placement_groups`\n    },\n    marshalling_gen.unmarshalCreatePlacementGroupResponse\n  );\n  /**\n   * Get a placement group. Get the specified placement group.\n   *\n   * @param request - The request {@link GetPlacementGroupRequest}\n   * @returns A Promise of GetPlacementGroupResponse\n   */\n  getPlacementGroup = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/placement_groups/${marshalling.validatePathParam(\"placementGroupId\", request.placementGroupId)}`\n    },\n    marshalling_gen.unmarshalGetPlacementGroupResponse\n  );\n  /**\n   * Set placement group. Set all parameters of the specified placement group.\n   *\n   * @param request - The request {@link SetPlacementGroupRequest}\n   * @returns A Promise of SetPlacementGroupResponse\n   */\n  setPlacementGroup = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSetPlacementGroupRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/placement_groups/${marshalling.validatePathParam(\"placementGroupId\", request.placementGroupId)}`\n    },\n    marshalling_gen.unmarshalSetPlacementGroupResponse\n  );\n  /**\n   * Update a placement group. Update one or more parameter of the specified\n   * placement group.\n   *\n   * @param request - The request {@link UpdatePlacementGroupRequest}\n   * @returns A Promise of UpdatePlacementGroupResponse\n   */\n  updatePlacementGroup = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdatePlacementGroupRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/placement_groups/${marshalling.validatePathParam(\"placementGroupId\", request.placementGroupId)}`\n    },\n    marshalling_gen.unmarshalUpdatePlacementGroupResponse\n  );\n  /**\n   * Delete the specified placement group.\n   *\n   * @param request - The request {@link DeletePlacementGroupRequest}\n   */\n  deletePlacementGroup = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/placement_groups/${marshalling.validatePathParam(\"placementGroupId\", request.placementGroupId)}`\n  });\n  /**\n   * Get placement group servers. Get all Instances belonging to the specified\n   * placement group.\n   *\n   * @param request - The request {@link GetPlacementGroupServersRequest}\n   * @returns A Promise of GetPlacementGroupServersResponse\n   */\n  getPlacementGroupServers = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/placement_groups/${marshalling.validatePathParam(\"placementGroupId\", request.placementGroupId)}/servers`\n    },\n    marshalling_gen.unmarshalGetPlacementGroupServersResponse\n  );\n  /**\n   * Set placement group servers. Set all Instances belonging to the specified\n   * placement group.\n   *\n   * @param request - The request {@link SetPlacementGroupServersRequest}\n   * @returns A Promise of SetPlacementGroupServersResponse\n   */\n  setPlacementGroupServers = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSetPlacementGroupServersRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/placement_groups/${marshalling.validatePathParam(\"placementGroupId\", request.placementGroupId)}/servers`\n    },\n    marshalling_gen.unmarshalSetPlacementGroupServersResponse\n  );\n  /**\n   * Update placement group servers. Update all Instances belonging to the\n   * specified placement group.\n   *\n   * @param request - The request {@link UpdatePlacementGroupServersRequest}\n   * @returns A Promise of UpdatePlacementGroupServersResponse\n   */\n  updatePlacementGroupServers = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdatePlacementGroupServersRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/placement_groups/${marshalling.validatePathParam(\"placementGroupId\", request.placementGroupId)}/servers`\n    },\n    marshalling_gen.unmarshalUpdatePlacementGroupServersResponse\n  );\n  pageOfListIps = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/ips`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"organization\", request.organization],\n        [\"page\", request.page],\n        [\"per_page\", request.perPage ?? this.client.settings.defaultPageSize],\n        [\"project\", request.project],\n        [\n          \"tags\",\n          request.tags && request.tags.length > 0 ? request.tags.join(\",\") : void 0\n        ],\n        [\"type\", request.type]\n      )\n    },\n    marshalling_gen.unmarshalListIpsResponse\n  );\n  /**\n   * List all flexible IPs. List all flexible IPs in a specified zone.\n   *\n   * @param request - The request {@link ListIpsRequest}\n   * @returns A Promise of ListIpsResponse\n   */\n  listIps = (request = {}) => resourcePaginator.enrichForPagination(\"ips\", this.pageOfListIps, request);\n  /**\n   * Reserve a flexible IP. Reserve a flexible IP and attach it to the specified\n   * Instance.\n   *\n   * @param request - The request {@link CreateIpRequest}\n   * @returns A Promise of CreateIpResponse\n   */\n  createIp = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateIpRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/ips`\n    },\n    marshalling_gen.unmarshalCreateIpResponse\n  );\n  /**\n   * Get a flexible IP. Get details of an IP with the specified ID or address.\n   *\n   * @param request - The request {@link GetIpRequest}\n   * @returns A Promise of GetIpResponse\n   */\n  getIp = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/ips/${marshalling.validatePathParam(\"ip\", request.ip)}`\n    },\n    marshalling_gen.unmarshalGetIpResponse\n  );\n  /**\n   * Update a flexible IP. Update a flexible IP in the specified zone with the\n   * specified ID.\n   *\n   * @param request - The request {@link UpdateIpRequest}\n   * @returns A Promise of UpdateIpResponse\n   */\n  updateIp = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateIpRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/ips/${marshalling.validatePathParam(\"ip\", request.ip)}`\n    },\n    marshalling_gen.unmarshalUpdateIpResponse\n  );\n  /**\n   * Delete a flexible IP. Delete the IP with the specified ID.\n   *\n   * @param request - The request {@link DeleteIpRequest}\n   */\n  deleteIp = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/ips/${marshalling.validatePathParam(\"ip\", request.ip)}`\n  });\n  pageOfListPrivateNICs = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/private_nics`,\n      urlParams: marshalling.urlParams(\n        [\"page\", request.page],\n        [\"per_page\", request.perPage ?? this.client.settings.defaultPageSize],\n        [\n          \"tags\",\n          request.tags && request.tags.length > 0 ? request.tags.join(\",\") : void 0\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListPrivateNICsResponse\n  );\n  /**\n   * List all private NICs. List all private NICs of a specified Instance.\n   *\n   * @param request - The request {@link ListPrivateNICsRequest}\n   * @returns A Promise of ListPrivateNICsResponse\n   */\n  listPrivateNICs = (request) => resourcePaginator.enrichForPagination(\"privateNics\", this.pageOfListPrivateNICs, request);\n  /**\n   * Create a private NIC connecting an Instance to a Private Network.\n   *\n   * @param request - The request {@link CreatePrivateNICRequest}\n   * @returns A Promise of CreatePrivateNICResponse\n   */\n  createPrivateNIC = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreatePrivateNICRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/private_nics`\n    },\n    marshalling_gen.unmarshalCreatePrivateNICResponse\n  );\n  /**\n   * Get a private NIC. Get private NIC properties.\n   *\n   * @param request - The request {@link GetPrivateNICRequest}\n   * @returns A Promise of GetPrivateNICResponse\n   */\n  getPrivateNIC = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/private_nics/${marshalling.validatePathParam(\"privateNicId\", request.privateNicId)}`\n    },\n    marshalling_gen.unmarshalGetPrivateNICResponse\n  );\n  /**\n   * Update a private NIC. Update one or more parameter(s) of a specified\n   * private NIC.\n   *\n   * @param request - The request {@link UpdatePrivateNICRequest}\n   * @returns A Promise of PrivateNIC\n   */\n  updatePrivateNIC = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdatePrivateNICRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/private_nics/${marshalling.validatePathParam(\"privateNicId\", request.privateNicId)}`\n    },\n    marshalling_gen.unmarshalPrivateNIC\n  );\n  /**\n   * Delete a private NIC.\n   *\n   * @param request - The request {@link DeletePrivateNICRequest}\n   */\n  deletePrivateNIC = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/servers/${marshalling.validatePathParam(\"serverId\", request.serverId)}/private_nics/${marshalling.validatePathParam(\"privateNicId\", request.privateNicId)}`\n  });\n  pageOfListBootscripts = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/bootscripts`,\n      urlParams: marshalling.urlParams(\n        [\"arch\", request.arch],\n        [\"default\", request.default],\n        [\"page\", request.page],\n        [\"per_page\", request.perPage ?? this.client.settings.defaultPageSize],\n        [\"public\", request.public],\n        [\"title\", request.title]\n      )\n    },\n    marshalling_gen.unmarshalListBootscriptsResponse\n  );\n  /**\n   * List bootscripts.\n   *\n   * @deprecated\n   * @param request - The request {@link ListBootscriptsRequest}\n   * @returns A Promise of ListBootscriptsResponse\n   */\n  listBootscripts = (request = {}) => resourcePaginator.enrichForPagination(\"bootscripts\", this.pageOfListBootscripts, request);\n  /**\n   * Get bootscripts. Get details of a bootscript with the specified ID.\n   *\n   * @deprecated\n   * @param request - The request {@link GetBootscriptRequest}\n   * @returns A Promise of GetBootscriptResponse\n   */\n  getBootscript = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/bootscripts/${marshalling.validatePathParam(\"bootscriptId\", request.bootscriptId)}`\n    },\n    marshalling_gen.unmarshalGetBootscriptResponse\n  );\n  getDashboard = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/dashboard`,\n      urlParams: marshalling.urlParams(\n        [\"organization\", request.organization],\n        [\"project\", request.project]\n      )\n    },\n    marshalling_gen.unmarshalGetDashboardResponse\n  );\n  /**\n   * Get a volume or snapshot's migration plan. Given a volume or snapshot,\n   * returns the migration plan for a call to the \"Apply a migration plan\"\n   * endpoint. This plan will include zero or one volume, and zero or more\n   * snapshots, which will need to be migrated together. This endpoint does not\n   * perform the actual migration itself, the \"Apply a migration plan\" endpoint\n   * must be used. The validation_key value returned by this endpoint must be\n   * provided to the call to the \"Apply a migration plan\" endpoint to confirm\n   * that all resources listed in the plan should be migrated.\n   *\n   * @param request - The request {@link PlanBlockMigrationRequest}\n   * @returns A Promise of MigrationPlan\n   */\n  planBlockMigration = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalPlanBlockMigrationRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/block-migration/plan`\n    },\n    marshalling_gen.unmarshalMigrationPlan\n  );\n  /**\n   * Migrate a volume and/or snapshots to SBS (Scaleway Block Storage). To be\n   * used, the call to this endpoint must be preceded by a call to the \"Plan a\n   * migration\" endpoint. To migrate all resources mentioned in the migration\n   * plan, the validation_key returned in the plan must be provided.\n   *\n   * @param request - The request {@link ApplyBlockMigrationRequest}\n   */\n  applyBlockMigration = (request) => this.client.fetch({\n    body: JSON.stringify(\n      marshalling_gen.marshalApplyBlockMigrationRequest(request, this.client.settings)\n    ),\n    headers: jsonContentHeaders,\n    method: \"POST\",\n    path: `/instance/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/block-migration/apply`\n  });\n}\nexports.API = API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst intervalRetrier = require(\"../../../internal/async/interval-retrier.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst api_gen = require(\"./api.gen.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst validateNotUndefined = (obj) => {\n  if (obj === void 0) throw new TypeError(`object was found undefined`);\n  return obj;\n};\nclass InstanceV1UtilsAPI extends api_gen.API {\n  /**\n   * Waits for {@link Image} to be in a final state.\n   *\n   * @param request - The request {@link GetImageRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Image\n   */\n  waitForImage = (request, options) => intervalRetrier.tryAtIntervals(\n    async () => {\n      const value = await this.getImage(request).then(\n        (res) => res.image\n      );\n      return {\n        done: !content_gen.IMAGE_TRANSIENT_STATUSES.includes(value.state),\n        value\n      };\n    },\n    intervalRetrier.createExponentialBackoffStrategy(\n      options?.minDelay ?? 1,\n      options?.maxDelay ?? 30\n    ),\n    options?.timeout\n  );\n  /**\n   * Waits for {@link PrivateNIC} to be in a final state.\n   *\n   * @param request - The request {@link GetPrivateNICRequest}\n   * @param options - The waiting options\n   * @returns A Promise of PrivateNIC\n   */\n  waitForPrivateNIC = (request, options) => intervalRetrier.tryAtIntervals(\n    async () => {\n      const value = await this.getPrivateNIC(request).then(\n        (res) => res.privateNic\n      );\n      return {\n        done: !content_gen.PRIVATE_NIC_TRANSIENT_STATUSES.includes(value.state),\n        value\n      };\n    },\n    intervalRetrier.createExponentialBackoffStrategy(\n      options?.minDelay ?? 1,\n      options?.maxDelay ?? 30\n    ),\n    options?.timeout\n  );\n  /**\n   * Waits for {@link Server} to be in a final state.\n   *\n   * @param request - The request {@link GetServerRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Server\n   */\n  waitForServer = (request, options) => intervalRetrier.tryAtIntervals(\n    async () => {\n      const value = await this.getServer(request).then(\n        (res) => res.server\n      );\n      return {\n        done: !content_gen.SERVER_TRANSIENT_STATUSES.includes(value.state),\n        value\n      };\n    },\n    intervalRetrier.createExponentialBackoffStrategy(\n      options?.minDelay ?? 1,\n      options?.maxDelay ?? 30\n    ),\n    options?.timeout\n  );\n  /**\n   * Waits for {@link Server} to be in a final state.\n   *\n   * @param request - The request {@link GetServerRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Server\n   */\n  waitForSnapshot = (request, options) => intervalRetrier.tryAtIntervals(\n    async () => {\n      const value = await this.getSnapshot(request).then(\n        (res) => res.snapshot\n      );\n      return {\n        done: !content_gen.SNAPSHOT_TRANSIENT_STATUSES.includes(value.state),\n        value\n      };\n    },\n    intervalRetrier.createExponentialBackoffStrategy(\n      options?.minDelay ?? 1,\n      options?.maxDelay ?? 30\n    ),\n    options?.timeout\n  );\n  /**\n   * Waits for {@link Volume} to be in a final state.\n   *\n   * @param request - The request {@link GetVolumeRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Volume\n   */\n  waitForVolume = (request, options) => intervalRetrier.tryAtIntervals(\n    async () => {\n      const value = await this.getVolume(request).then(\n        (res) => res.volume\n      );\n      return {\n        done: !content_gen.VOLUME_TRANSIENT_STATUSES.includes(value.state),\n        value\n      };\n    },\n    intervalRetrier.createExponentialBackoffStrategy(\n      options?.minDelay ?? 1,\n      options?.maxDelay ?? 30\n    ),\n    options?.timeout\n  );\n  /**\n   * Updates a server.\n   *\n   * @param request - The request {@link UpdateServerRequest}\n   * @returns A Promise of UpdateServerResponse\n   */\n  updateServer = (request) => this._updateServer(request);\n  /**\n   * Creates a server.\n   *\n   * @param request - The request {@link CreateServerRequest}\n   * @returns A Promise of CreateServerResponse\n   */\n  createServer = (request) => this._createServer(request);\n  /**\n   * Starts an action and wait for the server to be in the correct \"terminal\n   * state\" expected by this action.\n   *\n   * @param request - The request {@link ServerActionRequest}\n   * @returns A Promise of Server\n   */\n  serverActionAndWait = async (request, options) => {\n    const finalServer = await this.serverAction(request).then(\n      () => this.waitForServer(\n        {\n          serverId: request.serverId,\n          zone: request.zone\n        },\n        options\n      )\n    );\n    let expectedState;\n    switch (request.action) {\n      case \"poweron\":\n      case \"reboot\":\n        expectedState = \"running\";\n        break;\n      case \"poweroff\":\n        expectedState = \"stopped\";\n        break;\n      case \"stop_in_place\":\n        expectedState = \"stopped in place\";\n        break;\n    }\n    if (expectedState && finalServer.state !== expectedState) {\n      throw new Error(\n        `expected state ${expectedState} but found ${finalServer.state}: ${finalServer.stateDetail}`\n      );\n    }\n    return finalServer;\n  };\n  /**\n   * Attaches a volume to a server.\n   *\n   * @param request - The request {@link AttachVolumeRequest}\n   * @returns A Promise of AttachVolumeResponse\n   */\n  attachVolume = async (request) => {\n    const volumes = await this.getServer({\n      serverId: request.serverId,\n      zone: request.zone\n    }).then((res) => validateNotUndefined(res.server?.volumes));\n    const newVolumes = {};\n    for (const [key, server] of Object.entries(volumes)) {\n      newVolumes[key] = { id: server.id, name: server.name };\n    }\n    let found = false;\n    const volumesLength = Object.keys(volumes).length;\n    for (let index = 0; index <= volumesLength; index += 1) {\n      const key = index.toString();\n      if (!(key in newVolumes)) {\n        newVolumes[key] = {\n          id: request.volumeId,\n          name: request.volumeId\n          // name is ignored on this PATCH\n        };\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      throw new Error(`could not find key to attach volume ${request.volumeId}`);\n    }\n    return this.updateServer({\n      serverId: request.serverId,\n      volumes: newVolumes,\n      zone: request.zone\n    }).then((obj) => obj);\n  };\n  /**\n   * Detaches a volume from a server.\n   *\n   * @param request - The request {@link DetachVolumeRequest}\n   * @returns A Promise of DetachVolumeResponse\n   */\n  detachVolume = async (request) => {\n    const server = await this.getVolume({\n      volumeId: request.volumeId,\n      zone: request.zone\n    }).then((res) => validateNotUndefined(res.volume?.server?.id)).then(\n      (serverId) => this.getServer({\n        serverId,\n        zone: request.zone\n      })\n    ).then((res) => validateNotUndefined(res.server));\n    const newVolumes = {};\n    for (const [key, volume] of Object.entries(server.volumes)) {\n      if (volume.id !== request.volumeId) {\n        newVolumes[key] = { id: volume.id, name: volume.name };\n      }\n    }\n    return this.updateServer({\n      serverId: server.id,\n      volumes: newVolumes,\n      zone: request.zone\n    }).then((obj) => obj);\n  };\n  /**\n   * Get the content of a user data on a server for the given key.\n   *\n   * @param request - The request {@link GetServerUserDataRequest}\n   * @returns The content of the key\n   */\n  getServerUserData = (request) => this.client.fetch({\n    method: \"GET\",\n    path: `/instance/v1/zones/${marshalling.validatePathParam(\n      \"zone\",\n      request.zone ?? this.client.settings.defaultZone\n    )}/servers/${marshalling.validatePathParam(\n      \"serverId\",\n      request.serverId\n    )}/user_data/${marshalling.validatePathParam(\"key\", request.key)}`\n  });\n  /**\n   * Sets the content of a user data on a server for the given key.\n   *\n   * @param request - The request {@link SetServerUserDataRequest}\n   */\n  setServerUserData = (request) => this.client.fetch({\n    body: request.content,\n    headers: { \"Content-Type\": \"text/plain\" },\n    method: \"PATCH\",\n    path: `/instance/v1/zones/${marshalling.validatePathParam(\n      \"zone\",\n      request.zone ?? this.client.settings.defaultZone\n    )}/servers/${marshalling.validatePathParam(\n      \"serverId\",\n      request.serverId\n    )}/user_data/${marshalling.validatePathParam(\"key\", request.key)}`\n  });\n}\nexports.InstanceV1UtilsAPI = InstanceV1UtilsAPI;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst IMAGE_TRANSIENT_STATUSES = [\"creating\"];\nconst IP_TRANSIENT_STATUSES = [\"pending\"];\nconst PRIVATE_NIC_TRANSIENT_STATUSES = [\"syncing\"];\nconst SECURITY_GROUP_TRANSIENT_STATUSES = [\n  \"syncing\"\n];\nconst SERVER_IP_TRANSIENT_STATUSES = [\"pending\"];\nconst SERVER_TRANSIENT_STATUSES = [\"starting\", \"stopping\"];\nconst SNAPSHOT_TRANSIENT_STATUSES = [\n  \"snapshotting\",\n  \"importing\",\n  \"exporting\"\n];\nconst TASK_TRANSIENT_STATUSES = [\n  \"pending\",\n  \"started\",\n  \"retry\"\n];\nconst VOLUME_SERVER_TRANSIENT_STATUSES = [\n  \"snapshotting\",\n  \"fetching\",\n  \"resizing\",\n  \"saving\",\n  \"hotsyncing\"\n];\nconst VOLUME_TRANSIENT_STATUSES = [\n  \"snapshotting\",\n  \"fetching\",\n  \"resizing\",\n  \"saving\",\n  \"hotsyncing\"\n];\nexports.IMAGE_TRANSIENT_STATUSES = IMAGE_TRANSIENT_STATUSES;\nexports.IP_TRANSIENT_STATUSES = IP_TRANSIENT_STATUSES;\nexports.PRIVATE_NIC_TRANSIENT_STATUSES = PRIVATE_NIC_TRANSIENT_STATUSES;\nexports.SECURITY_GROUP_TRANSIENT_STATUSES = SECURITY_GROUP_TRANSIENT_STATUSES;\nexports.SERVER_IP_TRANSIENT_STATUSES = SERVER_IP_TRANSIENT_STATUSES;\nexports.SERVER_TRANSIENT_STATUSES = SERVER_TRANSIENT_STATUSES;\nexports.SNAPSHOT_TRANSIENT_STATUSES = SNAPSHOT_TRANSIENT_STATUSES;\nexports.TASK_TRANSIENT_STATUSES = TASK_TRANSIENT_STATUSES;\nexports.VOLUME_SERVER_TRANSIENT_STATUSES = VOLUME_SERVER_TRANSIENT_STATUSES;\nexports.VOLUME_TRANSIENT_STATUSES = VOLUME_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_utils = require(\"./api.utils.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nexports.API = api_utils.InstanceV1UtilsAPI;\nexports.IMAGE_TRANSIENT_STATUSES = content_gen.IMAGE_TRANSIENT_STATUSES;\nexports.IP_TRANSIENT_STATUSES = content_gen.IP_TRANSIENT_STATUSES;\nexports.PRIVATE_NIC_TRANSIENT_STATUSES = content_gen.PRIVATE_NIC_TRANSIENT_STATUSES;\nexports.SECURITY_GROUP_TRANSIENT_STATUSES = content_gen.SECURITY_GROUP_TRANSIENT_STATUSES;\nexports.SERVER_IP_TRANSIENT_STATUSES = content_gen.SERVER_IP_TRANSIENT_STATUSES;\nexports.SERVER_TRANSIENT_STATUSES = content_gen.SERVER_TRANSIENT_STATUSES;\nexports.SNAPSHOT_TRANSIENT_STATUSES = content_gen.SNAPSHOT_TRANSIENT_STATUSES;\nexports.TASK_TRANSIENT_STATUSES = content_gen.TASK_TRANSIENT_STATUSES;\nexports.VOLUME_SERVER_TRANSIENT_STATUSES = content_gen.VOLUME_SERVER_TRANSIENT_STATUSES;\nexports.VOLUME_TRANSIENT_STATUSES = content_gen.VOLUME_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst randomName = require(\"@scaleway/random-name\");\nconst json = require(\"../../../helpers/json.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst unmarshalPrivateNIC = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'PrivateNIC' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    id: data.id,\n    macAddress: data.mac_address,\n    privateNetworkId: data.private_network_id,\n    serverId: data.server_id,\n    state: data.state,\n    tags: data.tags\n  };\n};\nconst unmarshalServerSummary = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ServerSummary' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    id: data.id,\n    name: data.name\n  };\n};\nconst unmarshalBootscript = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Bootscript' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    architecture: data.architecture,\n    bootcmdargs: data.bootcmdargs,\n    default: data.default,\n    dtb: data.dtb,\n    id: data.id,\n    initrd: data.initrd,\n    kernel: data.kernel,\n    organization: data.organization,\n    project: data.project,\n    public: data.public,\n    title: data.title,\n    zone: data.zone\n  };\n};\nconst unmarshalVolume = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Volume' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    creationDate: marshalling.unmarshalDate(data.creation_date),\n    exportUri: data.export_uri,\n    id: data.id,\n    modificationDate: marshalling.unmarshalDate(data.modification_date),\n    name: data.name,\n    organization: data.organization,\n    project: data.project,\n    server: data.server ? unmarshalServerSummary(data.server) : void 0,\n    size: data.size,\n    state: data.state,\n    tags: data.tags,\n    volumeType: data.volume_type,\n    zone: data.zone\n  };\n};\nconst unmarshalVolumeSummary = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'VolumeSummary' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    id: data.id,\n    name: data.name,\n    size: data.size,\n    volumeType: data.volume_type\n  };\n};\nconst unmarshalImage = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Image' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    arch: data.arch,\n    creationDate: marshalling.unmarshalDate(data.creation_date),\n    defaultBootscript: data.default_bootscript ? unmarshalBootscript(data.default_bootscript) : void 0,\n    extraVolumes: marshalling.unmarshalMapOfObject(data.extra_volumes, unmarshalVolume),\n    fromServer: data.from_server,\n    id: data.id,\n    modificationDate: marshalling.unmarshalDate(data.modification_date),\n    name: data.name,\n    organization: data.organization,\n    project: data.project,\n    public: data.public,\n    rootVolume: data.root_volume ? unmarshalVolumeSummary(data.root_volume) : void 0,\n    state: data.state,\n    tags: data.tags,\n    zone: data.zone\n  };\n};\nconst unmarshalPlacementGroup = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'PlacementGroup' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    id: data.id,\n    name: data.name,\n    organization: data.organization,\n    policyMode: data.policy_mode,\n    policyRespected: data.policy_respected,\n    policyType: data.policy_type,\n    project: data.project,\n    tags: data.tags,\n    zone: data.zone\n  };\n};\nconst unmarshalSecurityGroupSummary = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SecurityGroupSummary' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    id: data.id,\n    name: data.name\n  };\n};\nconst unmarshalServerIp = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ServerIp' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    address: data.address,\n    dynamic: data.dynamic,\n    family: data.family,\n    gateway: data.gateway,\n    id: data.id,\n    ipamId: data.ipam_id,\n    netmask: data.netmask,\n    provisioningMode: data.provisioning_mode,\n    state: data.state,\n    tags: data.tags\n  };\n};\nconst unmarshalServerIpv6 = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ServerIpv6' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    address: data.address,\n    gateway: data.gateway,\n    netmask: data.netmask\n  };\n};\nconst unmarshalServerLocation = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ServerLocation' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    clusterId: data.cluster_id,\n    hypervisorId: data.hypervisor_id,\n    nodeId: data.node_id,\n    platformId: data.platform_id,\n    zoneId: data.zone_id\n  };\n};\nconst unmarshalServerMaintenance = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ServerMaintenance' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    reason: data.reason,\n    startDate: marshalling.unmarshalDate(data.start_date)\n  };\n};\nconst unmarshalVolumeServer = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'VolumeServer' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    boot: data.boot,\n    creationDate: marshalling.unmarshalDate(data.creation_date),\n    exportUri: data.export_uri,\n    id: data.id,\n    modificationDate: marshalling.unmarshalDate(data.modification_date),\n    name: data.name,\n    organization: data.organization,\n    project: data.project,\n    server: data.server ? unmarshalServerSummary(data.server) : void 0,\n    size: data.size,\n    state: data.state,\n    volumeType: data.volume_type,\n    zone: data.zone\n  };\n};\nconst unmarshalServer = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Server' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    adminPasswordEncryptedValue: data.admin_password_encrypted_value,\n    adminPasswordEncryptionSshKeyId: data.admin_password_encryption_ssh_key_id,\n    allowedActions: data.allowed_actions,\n    arch: data.arch,\n    bootType: data.boot_type,\n    bootscript: data.bootscript ? unmarshalBootscript(data.bootscript) : void 0,\n    commercialType: data.commercial_type,\n    creationDate: marshalling.unmarshalDate(data.creation_date),\n    dynamicIpRequired: data.dynamic_ip_required,\n    enableIpv6: data.enable_ipv6,\n    hostname: data.hostname,\n    id: data.id,\n    image: data.image ? unmarshalImage(data.image) : void 0,\n    ipv6: data.ipv6 ? unmarshalServerIpv6(data.ipv6) : void 0,\n    location: data.location ? unmarshalServerLocation(data.location) : void 0,\n    macAddress: data.mac_address,\n    maintenances: marshalling.unmarshalArrayOfObject(\n      data.maintenances,\n      unmarshalServerMaintenance\n    ),\n    modificationDate: marshalling.unmarshalDate(data.modification_date),\n    name: data.name,\n    organization: data.organization,\n    placementGroup: data.placement_group ? unmarshalPlacementGroup(data.placement_group) : void 0,\n    privateIp: data.private_ip,\n    privateNics: marshalling.unmarshalArrayOfObject(data.private_nics, unmarshalPrivateNIC),\n    project: data.project,\n    protected: data.protected,\n    publicIp: data.public_ip ? unmarshalServerIp(data.public_ip) : void 0,\n    publicIps: marshalling.unmarshalArrayOfObject(data.public_ips, unmarshalServerIp),\n    routedIpEnabled: data.routed_ip_enabled,\n    securityGroup: data.security_group ? unmarshalSecurityGroupSummary(data.security_group) : void 0,\n    state: data.state,\n    stateDetail: data.state_detail,\n    tags: data.tags,\n    volumes: marshalling.unmarshalMapOfObject(data.volumes, unmarshalVolumeServer),\n    zone: data.zone\n  };\n};\nconst unmarshalAttachServerVolumeResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'AttachServerVolumeResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    server: data.server ? unmarshalServer(data.server) : void 0\n  };\n};\nconst unmarshalCreateImageResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'CreateImageResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    image: data.image ? unmarshalImage(data.image) : void 0\n  };\n};\nconst unmarshalIp = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Ip' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    address: data.address,\n    id: data.id,\n    ipamId: data.ipam_id,\n    organization: data.organization,\n    prefix: data.prefix,\n    project: data.project,\n    reverse: data.reverse,\n    server: data.server ? unmarshalServerSummary(data.server) : void 0,\n    state: data.state,\n    tags: data.tags,\n    type: data.type,\n    zone: data.zone\n  };\n};\nconst unmarshalCreateIpResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'CreateIpResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    ip: data.ip ? unmarshalIp(data.ip) : void 0\n  };\n};\nconst unmarshalCreatePlacementGroupResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'CreatePlacementGroupResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    placementGroup: data.placement_group ? unmarshalPlacementGroup(data.placement_group) : void 0\n  };\n};\nconst unmarshalCreatePrivateNICResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'CreatePrivateNICResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    privateNic: data.private_nic ? unmarshalPrivateNIC(data.private_nic) : void 0\n  };\n};\nconst unmarshalSecurityGroup = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SecurityGroup' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    creationDate: marshalling.unmarshalDate(data.creation_date),\n    description: data.description,\n    enableDefaultSecurity: data.enable_default_security,\n    id: data.id,\n    inboundDefaultPolicy: data.inbound_default_policy,\n    modificationDate: marshalling.unmarshalDate(data.modification_date),\n    name: data.name,\n    organization: data.organization,\n    organizationDefault: data.organization_default,\n    outboundDefaultPolicy: data.outbound_default_policy,\n    project: data.project,\n    projectDefault: data.project_default,\n    servers: marshalling.unmarshalArrayOfObject(data.servers, unmarshalServerSummary),\n    state: data.state,\n    stateful: data.stateful,\n    tags: data.tags,\n    zone: data.zone\n  };\n};\nconst unmarshalCreateSecurityGroupResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'CreateSecurityGroupResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    securityGroup: data.security_group ? unmarshalSecurityGroup(data.security_group) : void 0\n  };\n};\nconst unmarshalSecurityGroupRule = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SecurityGroupRule' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    action: data.action,\n    destPortFrom: data.dest_port_from,\n    destPortTo: data.dest_port_to,\n    direction: data.direction,\n    editable: data.editable,\n    id: data.id,\n    ipRange: data.ip_range,\n    position: data.position,\n    protocol: data.protocol,\n    zone: data.zone\n  };\n};\nconst unmarshalCreateSecurityGroupRuleResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'CreateSecurityGroupRuleResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    rule: data.rule ? unmarshalSecurityGroupRule(data.rule) : void 0\n  };\n};\nconst unmarshalCreateServerResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'CreateServerResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    server: data.server ? unmarshalServer(data.server) : void 0\n  };\n};\nconst unmarshalSnapshotBaseVolume = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SnapshotBaseVolume' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    id: data.id,\n    name: data.name\n  };\n};\nconst unmarshalSnapshot = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Snapshot' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    baseVolume: data.base_volume ? unmarshalSnapshotBaseVolume(data.base_volume) : void 0,\n    creationDate: marshalling.unmarshalDate(data.creation_date),\n    errorReason: data.error_reason,\n    id: data.id,\n    modificationDate: marshalling.unmarshalDate(data.modification_date),\n    name: data.name,\n    organization: data.organization,\n    project: data.project,\n    size: data.size,\n    state: data.state,\n    tags: data.tags,\n    volumeType: data.volume_type,\n    zone: data.zone\n  };\n};\nconst unmarshalTask = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Task' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    description: data.description,\n    hrefFrom: data.href_from,\n    hrefResult: data.href_result,\n    id: data.id,\n    progress: data.progress,\n    startedAt: marshalling.unmarshalDate(data.started_at),\n    status: data.status,\n    terminatedAt: marshalling.unmarshalDate(data.terminated_at),\n    zone: data.zone\n  };\n};\nconst unmarshalCreateSnapshotResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'CreateSnapshotResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    snapshot: data.snapshot ? unmarshalSnapshot(data.snapshot) : void 0,\n    task: data.task ? unmarshalTask(data.task) : void 0\n  };\n};\nconst unmarshalCreateVolumeResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'CreateVolumeResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    volume: data.volume ? unmarshalVolume(data.volume) : void 0\n  };\n};\nconst unmarshalDetachServerVolumeResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DetachServerVolumeResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    server: data.server ? unmarshalServer(data.server) : void 0\n  };\n};\nconst unmarshalExportSnapshotResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ExportSnapshotResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    task: data.task ? unmarshalTask(data.task) : void 0\n  };\n};\nconst unmarshalGetBootscriptResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'GetBootscriptResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    bootscript: data.bootscript ? unmarshalBootscript(data.bootscript) : void 0\n  };\n};\nconst unmarshalDashboard = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Dashboard' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    imagesCount: data.images_count,\n    ipsCount: data.ips_count,\n    ipsUnused: data.ips_unused,\n    placementGroupsCount: data.placement_groups_count,\n    privateNicsCount: data.private_nics_count,\n    runningServersCount: data.running_servers_count,\n    securityGroupsCount: data.security_groups_count,\n    serversByTypes: data.servers_by_types,\n    serversCount: data.servers_count,\n    snapshotsCount: data.snapshots_count,\n    volumesBSsdCount: data.volumes_b_ssd_count,\n    volumesBSsdTotalSize: data.volumes_b_ssd_total_size,\n    volumesCount: data.volumes_count,\n    volumesLSsdCount: data.volumes_l_ssd_count,\n    volumesLSsdTotalSize: data.volumes_l_ssd_total_size\n  };\n};\nconst unmarshalGetDashboardResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'GetDashboardResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    dashboard: data.dashboard ? unmarshalDashboard(data.dashboard) : void 0\n  };\n};\nconst unmarshalGetImageResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'GetImageResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    image: data.image ? unmarshalImage(data.image) : void 0\n  };\n};\nconst unmarshalGetIpResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'GetIpResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    ip: data.ip ? unmarshalIp(data.ip) : void 0\n  };\n};\nconst unmarshalGetPlacementGroupResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'GetPlacementGroupResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    placementGroup: data.placement_group ? unmarshalPlacementGroup(data.placement_group) : void 0\n  };\n};\nconst unmarshalPlacementGroupServer = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'PlacementGroupServer' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    id: data.id,\n    name: data.name,\n    policyRespected: data.policy_respected\n  };\n};\nconst unmarshalGetPlacementGroupServersResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'GetPlacementGroupServersResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    servers: marshalling.unmarshalArrayOfObject(\n      data.servers,\n      unmarshalPlacementGroupServer\n    )\n  };\n};\nconst unmarshalGetPrivateNICResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'GetPrivateNICResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    privateNic: data.private_nic ? unmarshalPrivateNIC(data.private_nic) : void 0\n  };\n};\nconst unmarshalGetSecurityGroupResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'GetSecurityGroupResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    securityGroup: data.security_group ? unmarshalSecurityGroup(data.security_group) : void 0\n  };\n};\nconst unmarshalGetSecurityGroupRuleResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'GetSecurityGroupRuleResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    rule: data.rule ? unmarshalSecurityGroupRule(data.rule) : void 0\n  };\n};\nconst unmarshalGetServerResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'GetServerResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    server: data.server ? unmarshalServer(data.server) : void 0\n  };\n};\nconst unmarshalGetServerTypesAvailabilityResponseAvailability = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'GetServerTypesAvailabilityResponseAvailability' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    availability: data.availability\n  };\n};\nconst unmarshalGetServerTypesAvailabilityResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'GetServerTypesAvailabilityResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    servers: marshalling.unmarshalMapOfObject(\n      data.servers,\n      unmarshalGetServerTypesAvailabilityResponseAvailability\n    ),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalGetSnapshotResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'GetSnapshotResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    snapshot: data.snapshot ? unmarshalSnapshot(data.snapshot) : void 0\n  };\n};\nconst unmarshalGetVolumeResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'GetVolumeResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    volume: data.volume ? unmarshalVolume(data.volume) : void 0\n  };\n};\nconst unmarshalListBootscriptsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListBootscriptsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    bootscripts: marshalling.unmarshalArrayOfObject(data.bootscripts, unmarshalBootscript),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListImagesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListImagesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    images: marshalling.unmarshalArrayOfObject(data.images, unmarshalImage),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListIpsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListIpsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    ips: marshalling.unmarshalArrayOfObject(data.ips, unmarshalIp),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListPlacementGroupsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListPlacementGroupsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    placementGroups: marshalling.unmarshalArrayOfObject(\n      data.placement_groups,\n      unmarshalPlacementGroup\n    ),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListPrivateNICsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListPrivateNICsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    privateNics: marshalling.unmarshalArrayOfObject(data.private_nics, unmarshalPrivateNIC),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListSecurityGroupRulesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListSecurityGroupRulesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    rules: marshalling.unmarshalArrayOfObject(data.rules, unmarshalSecurityGroupRule),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListSecurityGroupsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListSecurityGroupsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    securityGroups: marshalling.unmarshalArrayOfObject(\n      data.security_groups,\n      unmarshalSecurityGroup\n    ),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListServerActionsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListServerActionsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    actions: data.actions\n  };\n};\nconst unmarshalListServerUserDataResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListServerUserDataResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    userData: data.user_data\n  };\n};\nconst unmarshalListServersResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListServersResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    servers: marshalling.unmarshalArrayOfObject(data.servers, unmarshalServer),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalServerTypeNetworkInterface = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ServerTypeNetworkInterface' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    internalBandwidth: data.internal_bandwidth,\n    internetBandwidth: data.internet_bandwidth\n  };\n};\nconst unmarshalServerTypeVolumeConstraintSizes = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ServerTypeVolumeConstraintSizes' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    maxSize: data.max_size,\n    minSize: data.min_size\n  };\n};\nconst unmarshalServerTypeCapabilities = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ServerTypeCapabilities' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    blockStorage: data.block_storage,\n    bootTypes: data.boot_types\n  };\n};\nconst unmarshalServerTypeNetwork = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ServerTypeNetwork' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    interfaces: marshalling.unmarshalArrayOfObject(\n      data.interfaces,\n      unmarshalServerTypeNetworkInterface\n    ),\n    ipv6Support: data.ipv6_support,\n    sumInternalBandwidth: data.sum_internal_bandwidth,\n    sumInternetBandwidth: data.sum_internet_bandwidth\n  };\n};\nconst unmarshalServerTypeVolumeConstraintsByType = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ServerTypeVolumeConstraintsByType' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    lSsd: data.l_ssd ? unmarshalServerTypeVolumeConstraintSizes(data.l_ssd) : void 0\n  };\n};\nconst unmarshalServerType = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ServerType' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    altNames: data.alt_names,\n    arch: data.arch,\n    baremetal: data.baremetal,\n    blockBandwidth: data.block_bandwidth,\n    capabilities: data.capabilities ? unmarshalServerTypeCapabilities(data.capabilities) : void 0,\n    gpu: data.gpu,\n    hourlyPrice: data.hourly_price,\n    monthlyPrice: data.monthly_price,\n    ncpus: data.ncpus,\n    network: data.network ? unmarshalServerTypeNetwork(data.network) : void 0,\n    perVolumeConstraint: data.per_volume_constraint ? unmarshalServerTypeVolumeConstraintsByType(data.per_volume_constraint) : void 0,\n    ram: data.ram,\n    scratchStorageMaxSize: data.scratch_storage_max_size,\n    volumesConstraint: data.volumes_constraint ? unmarshalServerTypeVolumeConstraintSizes(data.volumes_constraint) : void 0\n  };\n};\nconst unmarshalListServersTypesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListServersTypesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    servers: marshalling.unmarshalMapOfObject(data.servers, unmarshalServerType),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListSnapshotsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListSnapshotsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    snapshots: marshalling.unmarshalArrayOfObject(data.snapshots, unmarshalSnapshot),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListVolumesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListVolumesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    totalCount: data.total_count,\n    volumes: marshalling.unmarshalArrayOfObject(data.volumes, unmarshalVolume)\n  };\n};\nconst unmarshalVolumeTypeCapabilities = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'VolumeTypeCapabilities' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    snapshot: data.snapshot\n  };\n};\nconst unmarshalVolumeTypeConstraints = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'VolumeTypeConstraints' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    max: data.max,\n    min: data.min\n  };\n};\nconst unmarshalVolumeType = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'VolumeType' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    capabilities: data.capabilities ? unmarshalVolumeTypeCapabilities(data.capabilities) : void 0,\n    constraints: data.constraints ? unmarshalVolumeTypeConstraints(data.constraints) : void 0,\n    displayName: data.display_name\n  };\n};\nconst unmarshalListVolumesTypesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListVolumesTypesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    totalCount: data.total_count,\n    volumes: marshalling.unmarshalMapOfObject(data.volumes, unmarshalVolumeType)\n  };\n};\nconst unmarshalMigrationPlan = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'MigrationPlan' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    snapshots: marshalling.unmarshalArrayOfObject(data.snapshots, unmarshalSnapshot),\n    validationKey: data.validation_key,\n    volume: data.volume ? unmarshalVolume(data.volume) : void 0\n  };\n};\nconst unmarshalServerActionResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ServerActionResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    task: data.task ? unmarshalTask(data.task) : void 0\n  };\n};\nconst unmarshalSetImageResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SetImageResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    image: data.image ? unmarshalImage(data.image) : void 0\n  };\n};\nconst unmarshalSetPlacementGroupResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SetPlacementGroupResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    placementGroup: data.placement_group ? unmarshalPlacementGroup(data.placement_group) : void 0\n  };\n};\nconst unmarshalSetPlacementGroupServersResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SetPlacementGroupServersResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    servers: marshalling.unmarshalArrayOfObject(\n      data.servers,\n      unmarshalPlacementGroupServer\n    )\n  };\n};\nconst unmarshalSetSecurityGroupResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SetSecurityGroupResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    securityGroup: data.security_group ? unmarshalSecurityGroup(data.security_group) : void 0\n  };\n};\nconst unmarshalSetSecurityGroupRuleResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SetSecurityGroupRuleResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    rule: data.rule ? unmarshalSecurityGroupRule(data.rule) : void 0\n  };\n};\nconst unmarshalSetSecurityGroupRulesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SetSecurityGroupRulesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    rules: marshalling.unmarshalArrayOfObject(data.rules, unmarshalSecurityGroupRule)\n  };\n};\nconst unmarshalSetServerResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SetServerResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    server: data.server ? unmarshalServer(data.server) : void 0\n  };\n};\nconst unmarshalSetSnapshotResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SetSnapshotResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    snapshot: data.snapshot ? unmarshalSnapshot(data.snapshot) : void 0\n  };\n};\nconst unmarshalUpdateImageResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'UpdateImageResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    image: data.image ? unmarshalImage(data.image) : void 0\n  };\n};\nconst unmarshalUpdateIpResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'UpdateIpResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    ip: data.ip ? unmarshalIp(data.ip) : void 0\n  };\n};\nconst unmarshalUpdatePlacementGroupResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'UpdatePlacementGroupResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    placementGroup: data.placement_group ? unmarshalPlacementGroup(data.placement_group) : void 0\n  };\n};\nconst unmarshalUpdatePlacementGroupServersResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'UpdatePlacementGroupServersResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    servers: marshalling.unmarshalArrayOfObject(\n      data.servers,\n      unmarshalPlacementGroupServer\n    )\n  };\n};\nconst unmarshalUpdateSecurityGroupResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'UpdateSecurityGroupResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    securityGroup: data.security_group ? unmarshalSecurityGroup(data.security_group) : void 0\n  };\n};\nconst unmarshalUpdateSecurityGroupRuleResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'UpdateSecurityGroupRuleResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    rule: data.rule ? unmarshalSecurityGroupRule(data.rule) : void 0\n  };\n};\nconst unmarshalUpdateServerResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'UpdateServerResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    server: data.server ? unmarshalServer(data.server) : void 0\n  };\n};\nconst unmarshalUpdateSnapshotResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'UpdateSnapshotResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    snapshot: data.snapshot ? unmarshalSnapshot(data.snapshot) : void 0\n  };\n};\nconst unmarshalUpdateVolumeResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'UpdateVolumeResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    volume: data.volume ? unmarshalVolume(data.volume) : void 0\n  };\n};\nconst marshalApplyBlockMigrationRequest = (request, defaults) => ({\n  validation_key: request.validationKey,\n  ...marshalling.resolveOneOf([\n    { param: \"volume_id\", value: request.volumeId },\n    { param: \"snapshot_id\", value: request.snapshotId }\n  ])\n});\nconst marshalAttachServerVolumeRequest = (request, defaults) => ({\n  boot: request.boot,\n  volume_id: request.volumeId,\n  volume_type: request.volumeType\n});\nconst marshalVolumeTemplate = (request, defaults) => ({\n  id: request.id,\n  name: request.name,\n  size: request.size,\n  volume_type: request.volumeType,\n  ...marshalling.resolveOneOf([\n    { param: \"project\", value: request.project },\n    { param: \"organization\", value: request.organization }\n  ])\n});\nconst marshalCreateImageRequest = (request, defaults) => ({\n  arch: request.arch,\n  default_bootscript: request.defaultBootscript,\n  extra_volumes: request.extraVolumes !== void 0 ? Object.entries(request.extraVolumes).reduce(\n    (acc, [key, value]) => ({\n      ...acc,\n      [key]: marshalVolumeTemplate(value)\n    }),\n    {}\n  ) : void 0,\n  name: request.name || randomName(\"img\"),\n  public: request.public,\n  root_volume: request.rootVolume,\n  tags: request.tags,\n  ...marshalling.resolveOneOf([\n    {\n      default: defaults.defaultProjectId,\n      param: \"project\",\n      value: request.project\n    },\n    {\n      default: defaults.defaultOrganizationId,\n      param: \"organization\",\n      value: request.organization\n    }\n  ])\n});\nconst marshalCreateIpRequest = (request, defaults) => ({\n  server: request.server,\n  tags: request.tags,\n  type: request.type,\n  ...marshalling.resolveOneOf([\n    {\n      default: defaults.defaultProjectId,\n      param: \"project\",\n      value: request.project\n    },\n    {\n      default: defaults.defaultOrganizationId,\n      param: \"organization\",\n      value: request.organization\n    }\n  ])\n});\nconst marshalCreatePlacementGroupRequest = (request, defaults) => ({\n  name: request.name || randomName(\"pg\"),\n  policy_mode: request.policyMode,\n  policy_type: request.policyType,\n  tags: request.tags,\n  ...marshalling.resolveOneOf([\n    {\n      default: defaults.defaultProjectId,\n      param: \"project\",\n      value: request.project\n    },\n    {\n      default: defaults.defaultOrganizationId,\n      param: \"organization\",\n      value: request.organization\n    }\n  ])\n});\nconst marshalCreatePrivateNICRequest = (request, defaults) => ({\n  ip_ids: request.ipIds,\n  ipam_ip_ids: request.ipamIpIds,\n  private_network_id: request.privateNetworkId,\n  tags: request.tags\n});\nconst marshalCreateSecurityGroupRequest = (request, defaults) => ({\n  description: request.description,\n  enable_default_security: request.enableDefaultSecurity,\n  inbound_default_policy: request.inboundDefaultPolicy,\n  name: request.name || randomName(\"sg\"),\n  outbound_default_policy: request.outboundDefaultPolicy,\n  stateful: request.stateful,\n  tags: request.tags,\n  ...marshalling.resolveOneOf([\n    {\n      default: defaults.defaultProjectId,\n      param: \"project\",\n      value: request.project\n    },\n    {\n      default: defaults.defaultOrganizationId,\n      param: \"organization\",\n      value: request.organization\n    }\n  ]),\n  ...marshalling.resolveOneOf([\n    { param: \"organization_default\", value: request.organizationDefault },\n    { param: \"project_default\", value: request.projectDefault }\n  ])\n});\nconst marshalCreateSecurityGroupRuleRequest = (request, defaults) => ({\n  action: request.action,\n  dest_port_from: request.destPortFrom,\n  dest_port_to: request.destPortTo,\n  direction: request.direction,\n  editable: request.editable,\n  ip_range: request.ipRange,\n  position: request.position,\n  protocol: request.protocol\n});\nconst marshalVolumeServerTemplate = (request, defaults) => ({\n  base_snapshot: request.baseSnapshot,\n  boot: request.boot,\n  id: request.id,\n  name: request.name,\n  organization: request.organization,\n  project: request.project,\n  size: request.size,\n  volume_type: request.volumeType\n});\nconst marshalCreateServerRequest = (request, defaults) => ({\n  admin_password_encryption_ssh_key_id: request.adminPasswordEncryptionSshKeyId,\n  boot_type: request.bootType,\n  bootscript: request.bootscript,\n  commercial_type: request.commercialType,\n  dynamic_ip_required: request.dynamicIpRequired,\n  enable_ipv6: request.enableIpv6,\n  image: request.image,\n  name: request.name || randomName(\"srv\"),\n  placement_group: request.placementGroup,\n  public_ip: request.publicIp,\n  public_ips: request.publicIps,\n  routed_ip_enabled: request.routedIpEnabled,\n  security_group: request.securityGroup,\n  tags: request.tags,\n  volumes: request.volumes !== void 0 ? Object.entries(request.volumes).reduce(\n    (acc, [key, value]) => ({\n      ...acc,\n      [key]: marshalVolumeServerTemplate(value)\n    }),\n    {}\n  ) : void 0,\n  ...marshalling.resolveOneOf([\n    {\n      default: defaults.defaultProjectId,\n      param: \"project\",\n      value: request.project\n    },\n    {\n      default: defaults.defaultOrganizationId,\n      param: \"organization\",\n      value: request.organization\n    }\n  ])\n});\nconst marshalCreateSnapshotRequest = (request, defaults) => ({\n  bucket: request.bucket,\n  key: request.key,\n  name: request.name || randomName(\"snp\"),\n  size: request.size,\n  tags: request.tags,\n  volume_id: request.volumeId,\n  volume_type: request.volumeType,\n  ...marshalling.resolveOneOf([\n    {\n      default: defaults.defaultProjectId,\n      param: \"project\",\n      value: request.project\n    },\n    {\n      default: defaults.defaultOrganizationId,\n      param: \"organization\",\n      value: request.organization\n    }\n  ])\n});\nconst marshalCreateVolumeRequest = (request, defaults) => ({\n  name: request.name || randomName(\"vol\"),\n  tags: request.tags,\n  volume_type: request.volumeType,\n  ...marshalling.resolveOneOf([\n    {\n      default: defaults.defaultProjectId,\n      param: \"project\",\n      value: request.project\n    },\n    {\n      default: defaults.defaultOrganizationId,\n      param: \"organization\",\n      value: request.organization\n    }\n  ]),\n  ...marshalling.resolveOneOf([\n    { param: \"size\", value: request.size },\n    { param: \"base_snapshot\", value: request.baseSnapshot }\n  ])\n});\nconst marshalDetachServerVolumeRequest = (request, defaults) => ({\n  volume_id: request.volumeId\n});\nconst marshalExportSnapshotRequest = (request, defaults) => ({\n  bucket: request.bucket,\n  key: request.key\n});\nconst marshalPlanBlockMigrationRequest = (request, defaults) => ({\n  ...marshalling.resolveOneOf([\n    { param: \"volume_id\", value: request.volumeId },\n    { param: \"snapshot_id\", value: request.snapshotId }\n  ])\n});\nconst marshalServerActionRequestVolumeBackupTemplate = (request, defaults) => ({\n  volume_type: request.volumeType\n});\nconst marshalServerActionRequest = (request, defaults) => ({\n  action: request.action,\n  name: request.name,\n  volumes: request.volumes !== void 0 ? Object.entries(request.volumes).reduce(\n    (acc, [key, value]) => ({\n      ...acc,\n      [key]: marshalServerActionRequestVolumeBackupTemplate(\n        value\n      )\n    }),\n    {}\n  ) : void 0\n});\nconst marshalServerSummary = (request, defaults) => ({\n  id: request.id,\n  name: request.name\n});\nconst marshalBootscript = (request, defaults) => ({\n  architecture: request.architecture,\n  bootcmdargs: request.bootcmdargs,\n  default: request.default,\n  dtb: request.dtb,\n  id: request.id,\n  initrd: request.initrd,\n  kernel: request.kernel,\n  organization: request.organization,\n  project: request.project,\n  public: request.public,\n  title: request.title,\n  zone: request.zone\n});\nconst marshalVolume = (request, defaults) => ({\n  creation_date: request.creationDate,\n  export_uri: request.exportUri,\n  id: request.id,\n  modification_date: request.modificationDate,\n  name: request.name,\n  organization: request.organization,\n  project: request.project,\n  server: request.server !== void 0 ? marshalServerSummary(request.server) : void 0,\n  size: request.size,\n  state: request.state,\n  tags: request.tags,\n  volume_type: request.volumeType,\n  zone: request.zone\n});\nconst marshalVolumeSummary = (request, defaults) => ({\n  id: request.id,\n  name: request.name,\n  size: request.size,\n  volume_type: request.volumeType\n});\nconst marshalSetImageRequest = (request, defaults) => ({\n  arch: request.arch,\n  creation_date: request.creationDate,\n  default_bootscript: request.defaultBootscript !== void 0 ? marshalBootscript(request.defaultBootscript) : void 0,\n  extra_volumes: request.extraVolumes !== void 0 ? Object.entries(request.extraVolumes).reduce(\n    (acc, [key, value]) => ({\n      ...acc,\n      [key]: marshalVolume(value)\n    }),\n    {}\n  ) : void 0,\n  from_server: request.fromServer,\n  modification_date: request.modificationDate,\n  name: request.name,\n  organization: request.organization ?? defaults.defaultOrganizationId,\n  project: request.project ?? defaults.defaultProjectId,\n  public: request.public,\n  root_volume: request.rootVolume !== void 0 ? marshalVolumeSummary(request.rootVolume) : void 0,\n  state: request.state,\n  tags: request.tags\n});\nconst marshalSetPlacementGroupRequest = (request, defaults) => ({\n  name: request.name,\n  organization: request.organization ?? defaults.defaultOrganizationId,\n  policy_mode: request.policyMode,\n  policy_type: request.policyType,\n  project: request.project ?? defaults.defaultProjectId,\n  tags: request.tags\n});\nconst marshalSetPlacementGroupServersRequest = (request, defaults) => ({\n  servers: request.servers\n});\nconst marshalSetSecurityGroupRequest = (request, defaults) => ({\n  creation_date: request.creationDate,\n  description: request.description,\n  enable_default_security: request.enableDefaultSecurity,\n  inbound_default_policy: request.inboundDefaultPolicy,\n  modification_date: request.modificationDate,\n  name: request.name,\n  organization: request.organization ?? defaults.defaultOrganizationId,\n  organization_default: request.organizationDefault,\n  outbound_default_policy: request.outboundDefaultPolicy,\n  project: request.project ?? defaults.defaultProjectId,\n  project_default: request.projectDefault,\n  servers: request.servers !== void 0 ? request.servers.map((elt) => marshalServerSummary(elt)) : void 0,\n  stateful: request.stateful,\n  tags: request.tags\n});\nconst marshalSetSecurityGroupRuleRequest = (request, defaults) => ({\n  action: request.action,\n  dest_port_from: request.destPortFrom,\n  dest_port_to: request.destPortTo,\n  direction: request.direction,\n  editable: request.editable,\n  id: request.id,\n  ip_range: request.ipRange,\n  position: request.position,\n  protocol: request.protocol\n});\nconst marshalSetSecurityGroupRulesRequestRule = (request, defaults) => ({\n  action: request.action,\n  dest_port_from: request.destPortFrom,\n  dest_port_to: request.destPortTo,\n  direction: request.direction,\n  editable: request.editable,\n  id: request.id,\n  ip_range: request.ipRange,\n  position: request.position,\n  protocol: request.protocol,\n  zone: request.zone\n});\nconst marshalSetSecurityGroupRulesRequest = (request, defaults) => ({\n  rules: request.rules !== void 0 ? request.rules.map(\n    (elt) => marshalSetSecurityGroupRulesRequestRule(elt)\n  ) : void 0\n});\nconst marshalImage = (request, defaults) => ({\n  arch: request.arch,\n  creation_date: request.creationDate,\n  default_bootscript: request.defaultBootscript !== void 0 ? marshalBootscript(request.defaultBootscript) : void 0,\n  extra_volumes: Object.entries(request.extraVolumes).reduce(\n    (acc, [key, value]) => ({ ...acc, [key]: marshalVolume(value) }),\n    {}\n  ),\n  from_server: request.fromServer,\n  id: request.id,\n  modification_date: request.modificationDate,\n  name: request.name,\n  organization: request.organization,\n  project: request.project,\n  public: request.public,\n  root_volume: request.rootVolume !== void 0 ? marshalVolumeSummary(request.rootVolume) : void 0,\n  state: request.state,\n  tags: request.tags,\n  zone: request.zone\n});\nconst marshalPlacementGroup = (request, defaults) => ({\n  id: request.id,\n  name: request.name,\n  organization: request.organization,\n  policy_mode: request.policyMode,\n  policy_respected: request.policyRespected,\n  policy_type: request.policyType,\n  project: request.project,\n  tags: request.tags,\n  zone: request.zone\n});\nconst marshalPrivateNIC = (request, defaults) => ({\n  id: request.id,\n  mac_address: request.macAddress,\n  private_network_id: request.privateNetworkId,\n  server_id: request.serverId,\n  state: request.state,\n  tags: request.tags\n});\nconst marshalSecurityGroupSummary = (request, defaults) => ({\n  id: request.id,\n  name: request.name\n});\nconst marshalServerIp = (request, defaults) => ({\n  address: request.address,\n  dynamic: request.dynamic,\n  family: request.family,\n  gateway: request.gateway,\n  id: request.id,\n  ipam_id: request.ipamId,\n  netmask: request.netmask,\n  provisioning_mode: request.provisioningMode,\n  state: request.state,\n  tags: request.tags\n});\nconst marshalServerIpv6 = (request, defaults) => ({\n  address: request.address,\n  gateway: request.gateway,\n  netmask: request.netmask\n});\nconst marshalServerLocation = (request, defaults) => ({\n  cluster_id: request.clusterId,\n  hypervisor_id: request.hypervisorId,\n  node_id: request.nodeId,\n  platform_id: request.platformId,\n  zone_id: request.zoneId\n});\nconst marshalServerMaintenance = (request, defaults) => ({\n  reason: request.reason,\n  start_date: request.startDate\n});\nconst marshalSetServerRequest = (request, defaults) => ({\n  admin_password_encryption_ssh_key_id: request.adminPasswordEncryptionSshKeyId,\n  allowed_actions: request.allowedActions !== void 0 ? request.allowedActions : void 0,\n  arch: request.arch,\n  boot_type: request.bootType,\n  bootscript: request.bootscript !== void 0 ? marshalBootscript(request.bootscript) : void 0,\n  commercial_type: request.commercialType,\n  creation_date: request.creationDate,\n  dynamic_ip_required: request.dynamicIpRequired,\n  enable_ipv6: request.enableIpv6,\n  hostname: request.hostname,\n  image: request.image !== void 0 ? marshalImage(request.image) : void 0,\n  ipv6: request.ipv6 !== void 0 ? marshalServerIpv6(request.ipv6) : void 0,\n  location: request.location !== void 0 ? marshalServerLocation(request.location) : void 0,\n  maintenances: request.maintenances !== void 0 ? request.maintenances.map((elt) => marshalServerMaintenance(elt)) : void 0,\n  modification_date: request.modificationDate,\n  name: request.name,\n  organization: request.organization ?? defaults.defaultOrganizationId,\n  placement_group: request.placementGroup !== void 0 ? marshalPlacementGroup(request.placementGroup) : void 0,\n  private_ip: request.privateIp,\n  private_nics: request.privateNics !== void 0 ? request.privateNics.map((elt) => marshalPrivateNIC(elt)) : void 0,\n  project: request.project ?? defaults.defaultProjectId,\n  protected: request.protected,\n  public_ip: request.publicIp !== void 0 ? marshalServerIp(request.publicIp) : void 0,\n  public_ips: request.publicIps !== void 0 ? request.publicIps.map((elt) => marshalServerIp(elt)) : void 0,\n  routed_ip_enabled: request.routedIpEnabled,\n  security_group: request.securityGroup !== void 0 ? marshalSecurityGroupSummary(request.securityGroup) : void 0,\n  state: request.state,\n  state_detail: request.stateDetail,\n  tags: request.tags,\n  volumes: request.volumes !== void 0 ? Object.entries(request.volumes).reduce(\n    (acc, [key, value]) => ({\n      ...acc,\n      [key]: marshalVolume(value)\n    }),\n    {}\n  ) : void 0\n});\nconst marshalSnapshotBaseVolume = (request, defaults) => ({\n  id: request.id,\n  name: request.name\n});\nconst marshalSetSnapshotRequest = (request, defaults) => ({\n  base_volume: request.baseVolume !== void 0 ? marshalSnapshotBaseVolume(request.baseVolume) : void 0,\n  creation_date: request.creationDate,\n  id: request.id,\n  modification_date: request.modificationDate,\n  name: request.name,\n  organization: request.organization ?? defaults.defaultOrganizationId,\n  project: request.project ?? defaults.defaultProjectId,\n  size: request.size,\n  state: request.state,\n  tags: request.tags,\n  volume_type: request.volumeType\n});\nconst marshalVolumeImageUpdateTemplate = (request, defaults) => ({\n  id: request.id\n});\nconst marshalUpdateImageRequest = (request, defaults) => ({\n  arch: request.arch,\n  extra_volumes: request.extraVolumes !== void 0 ? Object.entries(request.extraVolumes).reduce(\n    (acc, [key, value]) => ({\n      ...acc,\n      [key]: marshalVolumeImageUpdateTemplate(value)\n    }),\n    {}\n  ) : void 0,\n  name: request.name,\n  public: request.public,\n  tags: request.tags\n});\nconst marshalUpdateIpRequest = (request, defaults) => ({\n  reverse: request.reverse,\n  server: request.server,\n  tags: request.tags,\n  type: request.type\n});\nconst marshalUpdatePlacementGroupRequest = (request, defaults) => ({\n  name: request.name,\n  policy_mode: request.policyMode,\n  policy_type: request.policyType,\n  tags: request.tags\n});\nconst marshalUpdatePlacementGroupServersRequest = (request, defaults) => ({\n  servers: request.servers\n});\nconst marshalUpdatePrivateNICRequest = (request, defaults) => ({\n  tags: request.tags\n});\nconst marshalUpdateSecurityGroupRequest = (request, defaults) => ({\n  description: request.description,\n  enable_default_security: request.enableDefaultSecurity,\n  inbound_default_policy: request.inboundDefaultPolicy,\n  name: request.name,\n  organization_default: request.organizationDefault,\n  outbound_default_policy: request.outboundDefaultPolicy,\n  project_default: request.projectDefault,\n  stateful: request.stateful,\n  tags: request.tags\n});\nconst marshalUpdateSecurityGroupRuleRequest = (request, defaults) => ({\n  action: request.action,\n  dest_port_from: request.destPortFrom,\n  dest_port_to: request.destPortTo,\n  direction: request.direction,\n  ip_range: request.ipRange,\n  position: request.position,\n  protocol: request.protocol\n});\nconst marshalSecurityGroupTemplate = (request, defaults) => ({\n  id: request.id,\n  name: request.name\n});\nconst marshalUpdateServerRequest = (request, defaults) => ({\n  admin_password_encryption_ssh_key_id: request.adminPasswordEncryptionSshKeyId,\n  boot_type: request.bootType,\n  bootscript: request.bootscript,\n  commercial_type: request.commercialType,\n  dynamic_ip_required: request.dynamicIpRequired,\n  enable_ipv6: request.enableIpv6,\n  name: request.name,\n  placement_group: request.placementGroup,\n  private_nics: request.privateNics,\n  protected: request.protected,\n  public_ips: request.publicIps,\n  routed_ip_enabled: request.routedIpEnabled,\n  security_group: request.securityGroup !== void 0 ? marshalSecurityGroupTemplate(request.securityGroup) : void 0,\n  tags: request.tags,\n  volumes: request.volumes !== void 0 ? Object.entries(request.volumes).reduce(\n    (acc, [key, value]) => ({\n      ...acc,\n      [key]: marshalVolumeServerTemplate(value)\n    }),\n    {}\n  ) : void 0\n});\nconst marshalUpdateSnapshotRequest = (request, defaults) => ({\n  name: request.name,\n  tags: request.tags\n});\nconst marshalUpdateVolumeRequest = (request, defaults) => ({\n  name: request.name,\n  size: request.size,\n  tags: request.tags\n});\nexports.marshalApplyBlockMigrationRequest = marshalApplyBlockMigrationRequest;\nexports.marshalAttachServerVolumeRequest = marshalAttachServerVolumeRequest;\nexports.marshalCreateImageRequest = marshalCreateImageRequest;\nexports.marshalCreateIpRequest = marshalCreateIpRequest;\nexports.marshalCreatePlacementGroupRequest = marshalCreatePlacementGroupRequest;\nexports.marshalCreatePrivateNICRequest = marshalCreatePrivateNICRequest;\nexports.marshalCreateSecurityGroupRequest = marshalCreateSecurityGroupRequest;\nexports.marshalCreateSecurityGroupRuleRequest = marshalCreateSecurityGroupRuleRequest;\nexports.marshalCreateServerRequest = marshalCreateServerRequest;\nexports.marshalCreateSnapshotRequest = marshalCreateSnapshotRequest;\nexports.marshalCreateVolumeRequest = marshalCreateVolumeRequest;\nexports.marshalDetachServerVolumeRequest = marshalDetachServerVolumeRequest;\nexports.marshalExportSnapshotRequest = marshalExportSnapshotRequest;\nexports.marshalPlanBlockMigrationRequest = marshalPlanBlockMigrationRequest;\nexports.marshalServerActionRequest = marshalServerActionRequest;\nexports.marshalSetImageRequest = marshalSetImageRequest;\nexports.marshalSetPlacementGroupRequest = marshalSetPlacementGroupRequest;\nexports.marshalSetPlacementGroupServersRequest = marshalSetPlacementGroupServersRequest;\nexports.marshalSetSecurityGroupRequest = marshalSetSecurityGroupRequest;\nexports.marshalSetSecurityGroupRuleRequest = marshalSetSecurityGroupRuleRequest;\nexports.marshalSetSecurityGroupRulesRequest = marshalSetSecurityGroupRulesRequest;\nexports.marshalSetServerRequest = marshalSetServerRequest;\nexports.marshalSetSnapshotRequest = marshalSetSnapshotRequest;\nexports.marshalUpdateImageRequest = marshalUpdateImageRequest;\nexports.marshalUpdateIpRequest = marshalUpdateIpRequest;\nexports.marshalUpdatePlacementGroupRequest = marshalUpdatePlacementGroupRequest;\nexports.marshalUpdatePlacementGroupServersRequest = marshalUpdatePlacementGroupServersRequest;\nexports.marshalUpdatePrivateNICRequest = marshalUpdatePrivateNICRequest;\nexports.marshalUpdateSecurityGroupRequest = marshalUpdateSecurityGroupRequest;\nexports.marshalUpdateSecurityGroupRuleRequest = marshalUpdateSecurityGroupRuleRequest;\nexports.marshalUpdateServerRequest = marshalUpdateServerRequest;\nexports.marshalUpdateSnapshotRequest = marshalUpdateSnapshotRequest;\nexports.marshalUpdateVolumeRequest = marshalUpdateVolumeRequest;\nexports.unmarshalAttachServerVolumeResponse = unmarshalAttachServerVolumeResponse;\nexports.unmarshalCreateImageResponse = unmarshalCreateImageResponse;\nexports.unmarshalCreateIpResponse = unmarshalCreateIpResponse;\nexports.unmarshalCreatePlacementGroupResponse = unmarshalCreatePlacementGroupResponse;\nexports.unmarshalCreatePrivateNICResponse = unmarshalCreatePrivateNICResponse;\nexports.unmarshalCreateSecurityGroupResponse = unmarshalCreateSecurityGroupResponse;\nexports.unmarshalCreateSecurityGroupRuleResponse = unmarshalCreateSecurityGroupRuleResponse;\nexports.unmarshalCreateServerResponse = unmarshalCreateServerResponse;\nexports.unmarshalCreateSnapshotResponse = unmarshalCreateSnapshotResponse;\nexports.unmarshalCreateVolumeResponse = unmarshalCreateVolumeResponse;\nexports.unmarshalDetachServerVolumeResponse = unmarshalDetachServerVolumeResponse;\nexports.unmarshalExportSnapshotResponse = unmarshalExportSnapshotResponse;\nexports.unmarshalGetBootscriptResponse = unmarshalGetBootscriptResponse;\nexports.unmarshalGetDashboardResponse = unmarshalGetDashboardResponse;\nexports.unmarshalGetImageResponse = unmarshalGetImageResponse;\nexports.unmarshalGetIpResponse = unmarshalGetIpResponse;\nexports.unmarshalGetPlacementGroupResponse = unmarshalGetPlacementGroupResponse;\nexports.unmarshalGetPlacementGroupServersResponse = unmarshalGetPlacementGroupServersResponse;\nexports.unmarshalGetPrivateNICResponse = unmarshalGetPrivateNICResponse;\nexports.unmarshalGetSecurityGroupResponse = unmarshalGetSecurityGroupResponse;\nexports.unmarshalGetSecurityGroupRuleResponse = unmarshalGetSecurityGroupRuleResponse;\nexports.unmarshalGetServerResponse = unmarshalGetServerResponse;\nexports.unmarshalGetServerTypesAvailabilityResponse = unmarshalGetServerTypesAvailabilityResponse;\nexports.unmarshalGetSnapshotResponse = unmarshalGetSnapshotResponse;\nexports.unmarshalGetVolumeResponse = unmarshalGetVolumeResponse;\nexports.unmarshalListBootscriptsResponse = unmarshalListBootscriptsResponse;\nexports.unmarshalListImagesResponse = unmarshalListImagesResponse;\nexports.unmarshalListIpsResponse = unmarshalListIpsResponse;\nexports.unmarshalListPlacementGroupsResponse = unmarshalListPlacementGroupsResponse;\nexports.unmarshalListPrivateNICsResponse = unmarshalListPrivateNICsResponse;\nexports.unmarshalListSecurityGroupRulesResponse = unmarshalListSecurityGroupRulesResponse;\nexports.unmarshalListSecurityGroupsResponse = unmarshalListSecurityGroupsResponse;\nexports.unmarshalListServerActionsResponse = unmarshalListServerActionsResponse;\nexports.unmarshalListServerUserDataResponse = unmarshalListServerUserDataResponse;\nexports.unmarshalListServersResponse = unmarshalListServersResponse;\nexports.unmarshalListServersTypesResponse = unmarshalListServersTypesResponse;\nexports.unmarshalListSnapshotsResponse = unmarshalListSnapshotsResponse;\nexports.unmarshalListVolumesResponse = unmarshalListVolumesResponse;\nexports.unmarshalListVolumesTypesResponse = unmarshalListVolumesTypesResponse;\nexports.unmarshalMigrationPlan = unmarshalMigrationPlan;\nexports.unmarshalPrivateNIC = unmarshalPrivateNIC;\nexports.unmarshalServerActionResponse = unmarshalServerActionResponse;\nexports.unmarshalSetImageResponse = unmarshalSetImageResponse;\nexports.unmarshalSetPlacementGroupResponse = unmarshalSetPlacementGroupResponse;\nexports.unmarshalSetPlacementGroupServersResponse = unmarshalSetPlacementGroupServersResponse;\nexports.unmarshalSetSecurityGroupResponse = unmarshalSetSecurityGroupResponse;\nexports.unmarshalSetSecurityGroupRuleResponse = unmarshalSetSecurityGroupRuleResponse;\nexports.unmarshalSetSecurityGroupRulesResponse = unmarshalSetSecurityGroupRulesResponse;\nexports.unmarshalSetServerResponse = unmarshalSetServerResponse;\nexports.unmarshalSetSnapshotResponse = unmarshalSetSnapshotResponse;\nexports.unmarshalUpdateImageResponse = unmarshalUpdateImageResponse;\nexports.unmarshalUpdateIpResponse = unmarshalUpdateIpResponse;\nexports.unmarshalUpdatePlacementGroupResponse = unmarshalUpdatePlacementGroupResponse;\nexports.unmarshalUpdatePlacementGroupServersResponse = unmarshalUpdatePlacementGroupServersResponse;\nexports.unmarshalUpdateSecurityGroupResponse = unmarshalUpdateSecurityGroupResponse;\nexports.unmarshalUpdateSecurityGroupRuleResponse = unmarshalUpdateSecurityGroupRuleResponse;\nexports.unmarshalUpdateServerResponse = unmarshalUpdateServerResponse;\nexports.unmarshalUpdateSnapshotResponse = unmarshalUpdateSnapshotResponse;\nexports.unmarshalUpdateVolumeResponse = unmarshalUpdateVolumeResponse;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index_gen = require(\"./v1/index.gen.cjs\");\nexports.v1 = index_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst intervalRetrier = require(\"../../../internal/async/interval-retrier.cjs\");\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass API extends api.API {\n  /** Lists the available regions of the API. */\n  static LOCALITIES = [\"fr-par\"];\n  pageOfListHubs = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/iot/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hubs`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListHubsResponse\n  );\n  /**\n   * List hubs. List all Hubs in the specified zone. By default, returned Hubs\n   * are ordered by creation date in ascending order, though this can be\n   * modified via the `order_by` field.\n   *\n   * @param request - The request {@link ListHubsRequest}\n   * @returns A Promise of ListHubsResponse\n   */\n  listHubs = (request = {}) => resourcePaginator.enrichForPagination(\"hubs\", this.pageOfListHubs, request);\n  /**\n   * Create a hub. Create a new Hub in the targeted region, specifying its\n   * configuration including name and product plan.\n   *\n   * @param request - The request {@link CreateHubRequest}\n   * @returns A Promise of Hub\n   */\n  createHub = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateHubRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/iot/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hubs`\n    },\n    marshalling_gen.unmarshalHub\n  );\n  /**\n   * Get a hub. Retrieve information about an existing IoT Hub, specified by its\n   * Hub ID. Its full details, including name, status and endpoint, are returned\n   * in the response object.\n   *\n   * @param request - The request {@link GetHubRequest}\n   * @returns A Promise of Hub\n   */\n  getHub = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/iot/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hubs/${marshalling.validatePathParam(\"hubId\", request.hubId)}`\n    },\n    marshalling_gen.unmarshalHub\n  );\n  /**\n   * Waits for {@link Hub} to be in a final state.\n   *\n   * @param request - The request {@link GetHubRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Hub\n   */\n  waitForHub = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.HUB_TRANSIENT_STATUSES.includes(res.status))),\n    this.getHub,\n    request,\n    options\n  );\n  /**\n   * Update a hub. Update the parameters of an existing IoT Hub, specified by\n   * its Hub ID.\n   *\n   * @param request - The request {@link UpdateHubRequest}\n   * @returns A Promise of Hub\n   */\n  updateHub = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateHubRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/iot/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hubs/${marshalling.validatePathParam(\"hubId\", request.hubId)}`\n    },\n    marshalling_gen.unmarshalHub\n  );\n  /**\n   * Enable a hub. Enable an existing IoT Hub, specified by its Hub ID.\n   *\n   * @param request - The request {@link EnableHubRequest}\n   * @returns A Promise of Hub\n   */\n  enableHub = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/iot/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hubs/${marshalling.validatePathParam(\"hubId\", request.hubId)}/enable`\n    },\n    marshalling_gen.unmarshalHub\n  );\n  /**\n   * Disable a hub. Disable an existing IoT Hub, specified by its Hub ID.\n   *\n   * @param request - The request {@link DisableHubRequest}\n   * @returns A Promise of Hub\n   */\n  disableHub = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/iot/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hubs/${marshalling.validatePathParam(\"hubId\", request.hubId)}/disable`\n    },\n    marshalling_gen.unmarshalHub\n  );\n  /**\n   * Delete a hub. Delete an existing IoT Hub, specified by its Hub ID. Deleting\n   * a Hub is permanent, and cannot be undone.\n   *\n   * @param request - The request {@link DeleteHubRequest}\n   */\n  deleteHub = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/iot/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hubs/${marshalling.validatePathParam(\"hubId\", request.hubId)}`,\n    urlParams: marshalling.urlParams([\"delete_devices\", request.deleteDevices])\n  });\n  /**\n   * Get a hub's metrics. Get the metrics of an existing IoT Hub, specified by\n   * its Hub ID.\n   *\n   * @deprecated\n   * @param request - The request {@link GetHubMetricsRequest}\n   * @returns A Promise of GetHubMetricsResponse\n   */\n  getHubMetrics = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/iot/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hubs/${marshalling.validatePathParam(\"hubId\", request.hubId)}/metrics`,\n      urlParams: marshalling.urlParams([\"start_date\", request.startDate])\n    },\n    marshalling_gen.unmarshalGetHubMetricsResponse\n  );\n  /**\n   * Set the certificate authority of a hub. Set a particular PEM-encoded\n   * certificate, specified by the Hub ID.\n   *\n   * @param request - The request {@link SetHubCARequest}\n   * @returns A Promise of Hub\n   */\n  setHubCA = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSetHubCARequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/iot/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hubs/${marshalling.validatePathParam(\"hubId\", request.hubId)}/ca`\n    },\n    marshalling_gen.unmarshalHub\n  );\n  /**\n   * Get the certificate authority of a hub. Get information for a particular\n   * PEM-encoded certificate, specified by the Hub ID.\n   *\n   * @param request - The request {@link GetHubCARequest}\n   * @returns A Promise of GetHubCAResponse\n   */\n  getHubCA = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/iot/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hubs/${marshalling.validatePathParam(\"hubId\", request.hubId)}/ca`\n    },\n    marshalling_gen.unmarshalGetHubCAResponse\n  );\n  pageOfListDevices = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/iot/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/devices`,\n      urlParams: marshalling.urlParams(\n        [\"allow_insecure\", request.allowInsecure],\n        [\"hub_id\", request.hubId],\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"status\", request.status]\n      )\n    },\n    marshalling_gen.unmarshalListDevicesResponse\n  );\n  /**\n   * List devices. List all devices in the specified region. By default,\n   * returned devices are ordered by creation date in ascending order, though\n   * this can be modified via the `order_by` field.\n   *\n   * @param request - The request {@link ListDevicesRequest}\n   * @returns A Promise of ListDevicesResponse\n   */\n  listDevices = (request = {}) => resourcePaginator.enrichForPagination(\"devices\", this.pageOfListDevices, request);\n  /**\n   * Add a device. Attach a device to a given Hub.\n   *\n   * @param request - The request {@link CreateDeviceRequest}\n   * @returns A Promise of CreateDeviceResponse\n   */\n  createDevice = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateDeviceRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/iot/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/devices`\n    },\n    marshalling_gen.unmarshalCreateDeviceResponse\n  );\n  /**\n   * Get a device. Retrieve information about an existing device, specified by\n   * its device ID. Its full details, including name, status and ID, are\n   * returned in the response object.\n   *\n   * @param request - The request {@link GetDeviceRequest}\n   * @returns A Promise of Device\n   */\n  getDevice = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/iot/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/devices/${marshalling.validatePathParam(\"deviceId\", request.deviceId)}`\n    },\n    marshalling_gen.unmarshalDevice\n  );\n  /**\n   * Update a device. Update the parameters of an existing device, specified by\n   * its device ID.\n   *\n   * @param request - The request {@link UpdateDeviceRequest}\n   * @returns A Promise of Device\n   */\n  updateDevice = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateDeviceRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/iot/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/devices/${marshalling.validatePathParam(\"deviceId\", request.deviceId)}`\n    },\n    marshalling_gen.unmarshalDevice\n  );\n  /**\n   * Enable a device. Enable a specific device, specified by its device ID.\n   *\n   * @param request - The request {@link EnableDeviceRequest}\n   * @returns A Promise of Device\n   */\n  enableDevice = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/iot/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/devices/${marshalling.validatePathParam(\"deviceId\", request.deviceId)}/enable`\n    },\n    marshalling_gen.unmarshalDevice\n  );\n  /**\n   * Disable a device. Disable an existing device, specified by its device ID.\n   *\n   * @param request - The request {@link DisableDeviceRequest}\n   * @returns A Promise of Device\n   */\n  disableDevice = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/iot/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/devices/${marshalling.validatePathParam(\"deviceId\", request.deviceId)}/disable`\n    },\n    marshalling_gen.unmarshalDevice\n  );\n  /**\n   * Renew a device certificate. Renew the certificate of an existing device,\n   * specified by its device ID.\n   *\n   * @param request - The request {@link RenewDeviceCertificateRequest}\n   * @returns A Promise of RenewDeviceCertificateResponse\n   */\n  renewDeviceCertificate = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/iot/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/devices/${marshalling.validatePathParam(\"deviceId\", request.deviceId)}/renew-certificate`\n    },\n    marshalling_gen.unmarshalRenewDeviceCertificateResponse\n  );\n  /**\n   * Set a custom certificate on a device. Switch the existing certificate of a\n   * given device with an EM-encoded custom certificate.\n   *\n   * @param request - The request {@link SetDeviceCertificateRequest}\n   * @returns A Promise of SetDeviceCertificateResponse\n   */\n  setDeviceCertificate = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSetDeviceCertificateRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/iot/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/devices/${marshalling.validatePathParam(\"deviceId\", request.deviceId)}/certificate`\n    },\n    marshalling_gen.unmarshalSetDeviceCertificateResponse\n  );\n  /**\n   * Get a device's certificate. Get information for a particular PEM-encoded\n   * certificate, specified by the device ID. The response returns full details\n   * of the device, including its type of certificate.\n   *\n   * @param request - The request {@link GetDeviceCertificateRequest}\n   * @returns A Promise of GetDeviceCertificateResponse\n   */\n  getDeviceCertificate = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/iot/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/devices/${marshalling.validatePathParam(\"deviceId\", request.deviceId)}/certificate`\n    },\n    marshalling_gen.unmarshalGetDeviceCertificateResponse\n  );\n  /**\n   * Remove a device. Remove a specific device from the specific Hub it is\n   * attached to.\n   *\n   * @param request - The request {@link DeleteDeviceRequest}\n   */\n  deleteDevice = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/iot/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/devices/${marshalling.validatePathParam(\"deviceId\", request.deviceId)}`\n  });\n  /**\n   * Get a device's metrics. Get the metrics of an existing device, specified by\n   * its device ID.\n   *\n   * @deprecated\n   * @param request - The request {@link GetDeviceMetricsRequest}\n   * @returns A Promise of GetDeviceMetricsResponse\n   */\n  getDeviceMetrics = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/iot/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/devices/${marshalling.validatePathParam(\"deviceId\", request.deviceId)}/metrics`,\n      urlParams: marshalling.urlParams([\"start_date\", request.startDate])\n    },\n    marshalling_gen.unmarshalGetDeviceMetricsResponse\n  );\n  pageOfListRoutes = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/iot/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/routes`,\n      urlParams: marshalling.urlParams(\n        [\"hub_id\", request.hubId],\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListRoutesResponse\n  );\n  /**\n   * List routes. List all routes in the specified region. By default, returned\n   * routes are ordered by creation date in ascending order, though this can be\n   * modified via the `order_by` field.\n   *\n   * @param request - The request {@link ListRoutesRequest}\n   * @returns A Promise of ListRoutesResponse\n   */\n  listRoutes = (request = {}) => resourcePaginator.enrichForPagination(\"routes\", this.pageOfListRoutes, request);\n  /**\n   * Create a route. Multiple kinds of routes can be created, such as:\n   *\n   * - Database Route Create a route that will record subscribed MQTT messages\n   *   into your database. <b>You need to manage the database by yourself</b>.\n   * - REST Route. Create a route that will call a REST API on received subscribed\n   *   MQTT messages.\n   * - S3 Routes. Create a route that will put subscribed MQTT messages into an S3\n   *   bucket. You need to create the bucket yourself and grant write access.\n   *   Granting can be done with s3cmd (`s3cmd setacl s3://<my-bucket>\n   *   --acl-grant=write:555c69c3-87d0-4bf8-80f1-99a2f757d031:555c69c3-87d0-4bf8-80f1-99a2f757d031`).\n   *\n   * @param request - The request {@link CreateRouteRequest}\n   * @returns A Promise of Route\n   */\n  createRoute = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateRouteRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/iot/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/routes`\n    },\n    marshalling_gen.unmarshalRoute\n  );\n  /**\n   * Update a route. Update the parameters of an existing route, specified by\n   * its route ID.\n   *\n   * @param request - The request {@link UpdateRouteRequest}\n   * @returns A Promise of Route\n   */\n  updateRoute = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateRouteRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/iot/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/routes/${marshalling.validatePathParam(\"routeId\", request.routeId)}`\n    },\n    marshalling_gen.unmarshalRoute\n  );\n  /**\n   * Get a route. Get information for a particular route, specified by the route\n   * ID. The response returns full details of the route, including its type, the\n   * topic it subscribes to and its configuration.\n   *\n   * @param request - The request {@link GetRouteRequest}\n   * @returns A Promise of Route\n   */\n  getRoute = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/iot/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/routes/${marshalling.validatePathParam(\"routeId\", request.routeId)}`\n    },\n    marshalling_gen.unmarshalRoute\n  );\n  /**\n   * Delete a route. Delete an existing route, specified by its route ID.\n   * Deleting a route is permanent, and cannot be undone.\n   *\n   * @param request - The request {@link DeleteRouteRequest}\n   */\n  deleteRoute = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/iot/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/routes/${marshalling.validatePathParam(\"routeId\", request.routeId)}`\n  });\n  pageOfListNetworks = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/iot/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/networks`,\n      urlParams: marshalling.urlParams(\n        [\"hub_id\", request.hubId],\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"topic_prefix\", request.topicPrefix]\n      )\n    },\n    marshalling_gen.unmarshalListNetworksResponse\n  );\n  /**\n   * List the networks.\n   *\n   * @param request - The request {@link ListNetworksRequest}\n   * @returns A Promise of ListNetworksResponse\n   */\n  listNetworks = (request = {}) => resourcePaginator.enrichForPagination(\"networks\", this.pageOfListNetworks, request);\n  /**\n   * Create a new network. Create a new network for an existing hub. Beside the\n   * default network, you can add networks for different data providers.\n   * Possible network types are Sigfox and REST.\n   *\n   * @param request - The request {@link CreateNetworkRequest}\n   * @returns A Promise of CreateNetworkResponse\n   */\n  createNetwork = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateNetworkRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/iot/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/networks`\n    },\n    marshalling_gen.unmarshalCreateNetworkResponse\n  );\n  /**\n   * Retrieve a specific network. Retrieve an existing network, specified by its\n   * network ID. The response returns full details of the network, including its\n   * type, the topic prefix and its endpoint.\n   *\n   * @param request - The request {@link GetNetworkRequest}\n   * @returns A Promise of Network\n   */\n  getNetwork = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/iot/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/networks/${marshalling.validatePathParam(\"networkId\", request.networkId)}`\n    },\n    marshalling_gen.unmarshalNetwork\n  );\n  /**\n   * Delete a Network. Delete an existing network, specified by its network ID.\n   * Deleting a network is permanent, and cannot be undone.\n   *\n   * @param request - The request {@link DeleteNetworkRequest}\n   */\n  deleteNetwork = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/iot/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/networks/${marshalling.validatePathParam(\"networkId\", request.networkId)}`\n  });\n  /**\n   * BETA - Get a Cloud Twin Document.\n   *\n   * @param request - The request {@link GetTwinDocumentRequest}\n   * @returns A Promise of TwinDocument\n   */\n  getTwinDocument = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/iot/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/twins/${marshalling.validatePathParam(\"twinId\", request.twinId)}/documents/${marshalling.validatePathParam(\"documentName\", request.documentName)}`\n    },\n    marshalling_gen.unmarshalTwinDocument\n  );\n  /**\n   * BETA - Update a Cloud Twin Document.\n   *\n   * @param request - The request {@link PutTwinDocumentRequest}\n   * @returns A Promise of TwinDocument\n   */\n  putTwinDocument = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalPutTwinDocumentRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/iot/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/twins/${marshalling.validatePathParam(\"twinId\", request.twinId)}/documents/${marshalling.validatePathParam(\"documentName\", request.documentName)}`\n    },\n    marshalling_gen.unmarshalTwinDocument\n  );\n  /**\n   * BETA - Patch a Cloud Twin Document.\n   *\n   * @param request - The request {@link PatchTwinDocumentRequest}\n   * @returns A Promise of TwinDocument\n   */\n  patchTwinDocument = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalPatchTwinDocumentRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/iot/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/twins/${marshalling.validatePathParam(\"twinId\", request.twinId)}/documents/${marshalling.validatePathParam(\"documentName\", request.documentName)}`\n    },\n    marshalling_gen.unmarshalTwinDocument\n  );\n  /**\n   * BETA - Delete a Cloud Twin Document.\n   *\n   * @param request - The request {@link DeleteTwinDocumentRequest}\n   */\n  deleteTwinDocument = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/iot/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/twins/${marshalling.validatePathParam(\"twinId\", request.twinId)}/documents/${marshalling.validatePathParam(\"documentName\", request.documentName)}`\n  });\n  /**\n   * BETA - List the documents of a Cloud Twin.\n   *\n   * @param request - The request {@link ListTwinDocumentsRequest}\n   * @returns A Promise of ListTwinDocumentsResponse\n   */\n  listTwinDocuments = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/iot/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/twins/${marshalling.validatePathParam(\"twinId\", request.twinId)}`\n    },\n    marshalling_gen.unmarshalListTwinDocumentsResponse\n  );\n  /**\n   * BETA - Delete all the documents of a Cloud Twin.\n   *\n   * @param request - The request {@link DeleteTwinDocumentsRequest}\n   */\n  deleteTwinDocuments = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/iot/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/twins/${marshalling.validatePathParam(\"twinId\", request.twinId)}`\n  });\n}\nexports.API = API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst HUB_TRANSIENT_STATUSES = [\"enabling\", \"disabling\"];\nexports.HUB_TRANSIENT_STATUSES = HUB_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nexports.API = api_gen.API;\nexports.HUB_TRANSIENT_STATUSES = content_gen.HUB_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst randomName = require(\"@scaleway/random-name\");\nconst json = require(\"../../../helpers/json.cjs\");\nconst customMarshalling = require(\"../../../scw/custom-marshalling.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nconst unmarshalDeviceMessageFiltersRule = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DeviceMessageFiltersRule' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    policy: data.policy,\n    topics: data.topics\n  };\n};\nconst unmarshalDeviceMessageFilters = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DeviceMessageFilters' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    publish: data.publish ? unmarshalDeviceMessageFiltersRule(data.publish) : void 0,\n    subscribe: data.subscribe ? unmarshalDeviceMessageFiltersRule(data.subscribe) : void 0\n  };\n};\nconst unmarshalDevice = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Device' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    allowInsecure: data.allow_insecure,\n    allowMultipleConnections: data.allow_multiple_connections,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    description: data.description,\n    hasCustomCertificate: data.has_custom_certificate,\n    hubId: data.hub_id,\n    id: data.id,\n    isConnected: data.is_connected,\n    lastActivityAt: marshalling.unmarshalDate(data.last_activity_at),\n    messageFilters: data.message_filters ? unmarshalDeviceMessageFilters(data.message_filters) : void 0,\n    name: data.name,\n    status: data.status,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalNetwork = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Network' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    endpoint: data.endpoint,\n    hubId: data.hub_id,\n    id: data.id,\n    name: data.name,\n    topicPrefix: data.topic_prefix,\n    type: data.type\n  };\n};\nconst unmarshalHubTwinsGraphiteConfig = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'HubTwinsGraphiteConfig' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    pushUri: data.push_uri\n  };\n};\nconst unmarshalHub = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Hub' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    connectedDeviceCount: data.connected_device_count,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    deviceCount: data.device_count,\n    disableEvents: data.disable_events,\n    enableDeviceAutoProvisioning: data.enable_device_auto_provisioning,\n    enabled: data.enabled,\n    endpoint: data.endpoint,\n    eventsTopicPrefix: data.events_topic_prefix,\n    hasCustomCa: data.has_custom_ca,\n    id: data.id,\n    name: data.name,\n    organizationId: data.organization_id,\n    productPlan: data.product_plan,\n    projectId: data.project_id,\n    region: data.region,\n    status: data.status,\n    twinsGraphiteConfig: data.twins_graphite_config ? unmarshalHubTwinsGraphiteConfig(data.twins_graphite_config) : void 0,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalCertificate = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Certificate' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    crt: data.crt,\n    key: data.key\n  };\n};\nconst unmarshalCreateDeviceResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'CreateDeviceResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    certificate: data.certificate ? unmarshalCertificate(data.certificate) : void 0,\n    device: data.device ? unmarshalDevice(data.device) : void 0\n  };\n};\nconst unmarshalCreateNetworkResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'CreateNetworkResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    network: data.network ? unmarshalNetwork(data.network) : void 0,\n    secret: data.secret\n  };\n};\nconst unmarshalGetDeviceCertificateResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'GetDeviceCertificateResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    certificatePem: data.certificate_pem,\n    device: data.device ? unmarshalDevice(data.device) : void 0\n  };\n};\nconst unmarshalGetDeviceMetricsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'GetDeviceMetricsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    metrics: marshalling.unmarshalArrayOfObject(data.metrics, customMarshalling.unmarshalTimeSeries)\n  };\n};\nconst unmarshalGetHubCAResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'GetHubCAResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    caCertPem: data.ca_cert_pem\n  };\n};\nconst unmarshalGetHubMetricsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'GetHubMetricsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    metrics: marshalling.unmarshalArrayOfObject(data.metrics, customMarshalling.unmarshalTimeSeries)\n  };\n};\nconst unmarshalListDevicesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListDevicesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    devices: marshalling.unmarshalArrayOfObject(data.devices, unmarshalDevice),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListHubsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListHubsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    hubs: marshalling.unmarshalArrayOfObject(data.hubs, unmarshalHub),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListNetworksResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListNetworksResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    networks: marshalling.unmarshalArrayOfObject(data.networks, unmarshalNetwork),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalRouteSummary = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'RouteSummary' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    hubId: data.hub_id,\n    id: data.id,\n    name: data.name,\n    topic: data.topic,\n    type: data.type,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalListRoutesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListRoutesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    routes: marshalling.unmarshalArrayOfObject(data.routes, unmarshalRouteSummary),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListTwinDocumentsResponseDocumentSummary = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListTwinDocumentsResponseDocumentSummary' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    documentName: data.document_name\n  };\n};\nconst unmarshalListTwinDocumentsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListTwinDocumentsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    documents: marshalling.unmarshalArrayOfObject(\n      data.documents,\n      unmarshalListTwinDocumentsResponseDocumentSummary\n    )\n  };\n};\nconst unmarshalRenewDeviceCertificateResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'RenewDeviceCertificateResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    certificate: data.certificate ? unmarshalCertificate(data.certificate) : void 0,\n    device: data.device ? unmarshalDevice(data.device) : void 0\n  };\n};\nconst unmarshalRouteDatabaseConfig = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'RouteDatabaseConfig' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    dbname: data.dbname,\n    engine: data.engine,\n    host: data.host,\n    password: data.password,\n    port: data.port,\n    query: data.query,\n    username: data.username\n  };\n};\nconst unmarshalRouteRestConfig = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'RouteRestConfig' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    headers: data.headers,\n    uri: data.uri,\n    verb: data.verb\n  };\n};\nconst unmarshalRouteS3Config = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'RouteS3Config' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    bucketName: data.bucket_name,\n    bucketRegion: data.bucket_region,\n    objectPrefix: data.object_prefix,\n    strategy: data.strategy\n  };\n};\nconst unmarshalRoute = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Route' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    dbConfig: data.db_config ? unmarshalRouteDatabaseConfig(data.db_config) : void 0,\n    hubId: data.hub_id,\n    id: data.id,\n    name: data.name,\n    restConfig: data.rest_config ? unmarshalRouteRestConfig(data.rest_config) : void 0,\n    s3Config: data.s3_config ? unmarshalRouteS3Config(data.s3_config) : void 0,\n    topic: data.topic,\n    type: data.type,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalSetDeviceCertificateResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SetDeviceCertificateResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    certificatePem: data.certificate_pem,\n    device: data.device ? unmarshalDevice(data.device) : void 0\n  };\n};\nconst unmarshalTwinDocument = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'TwinDocument' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    data: data.data,\n    documentName: data.document_name,\n    twinId: data.twin_id,\n    version: data.version\n  };\n};\nconst marshalDeviceMessageFiltersRule = (request, defaults) => ({\n  policy: request.policy,\n  topics: request.topics\n});\nconst marshalDeviceMessageFilters = (request, defaults) => ({\n  publish: request.publish !== void 0 ? marshalDeviceMessageFiltersRule(request.publish) : void 0,\n  subscribe: request.subscribe !== void 0 ? marshalDeviceMessageFiltersRule(request.subscribe) : void 0\n});\nconst marshalCreateDeviceRequest = (request, defaults) => ({\n  allow_insecure: request.allowInsecure,\n  allow_multiple_connections: request.allowMultipleConnections,\n  description: request.description,\n  hub_id: request.hubId,\n  message_filters: request.messageFilters !== void 0 ? marshalDeviceMessageFilters(request.messageFilters) : void 0,\n  name: request.name || randomName(\"device\")\n});\nconst marshalHubTwinsGraphiteConfig = (request, defaults) => ({\n  push_uri: request.pushUri\n});\nconst marshalCreateHubRequest = (request, defaults) => ({\n  disable_events: request.disableEvents,\n  events_topic_prefix: request.eventsTopicPrefix,\n  name: request.name || randomName(\"hub\"),\n  product_plan: request.productPlan,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  ...marshalling.resolveOneOf([\n    {\n      param: \"twins_graphite_config\",\n      value: request.twinsGraphiteConfig !== void 0 ? marshalHubTwinsGraphiteConfig(request.twinsGraphiteConfig) : void 0\n    }\n  ])\n});\nconst marshalCreateNetworkRequest = (request, defaults) => ({\n  hub_id: request.hubId,\n  name: request.name || randomName(\"network\"),\n  topic_prefix: request.topicPrefix,\n  type: request.type\n});\nconst marshalCreateRouteRequestDatabaseConfig = (request, defaults) => ({\n  dbname: request.dbname,\n  engine: request.engine,\n  host: request.host,\n  password: request.password,\n  port: request.port,\n  query: request.query,\n  username: request.username\n});\nconst marshalCreateRouteRequestRestConfig = (request, defaults) => ({\n  headers: request.headers,\n  uri: request.uri,\n  verb: request.verb\n});\nconst marshalCreateRouteRequestS3Config = (request, defaults) => ({\n  bucket_name: request.bucketName,\n  bucket_region: request.bucketRegion,\n  object_prefix: request.objectPrefix,\n  strategy: request.strategy\n});\nconst marshalCreateRouteRequest = (request, defaults) => ({\n  hub_id: request.hubId,\n  name: request.name || randomName(\"route\"),\n  topic: request.topic,\n  ...marshalling.resolveOneOf([\n    {\n      param: \"s3_config\",\n      value: request.s3Config !== void 0 ? marshalCreateRouteRequestS3Config(request.s3Config) : void 0\n    },\n    {\n      param: \"db_config\",\n      value: request.dbConfig !== void 0 ? marshalCreateRouteRequestDatabaseConfig(request.dbConfig) : void 0\n    },\n    {\n      param: \"rest_config\",\n      value: request.restConfig !== void 0 ? marshalCreateRouteRequestRestConfig(request.restConfig) : void 0\n    }\n  ])\n});\nconst marshalPatchTwinDocumentRequest = (request, defaults) => ({\n  data: request.data,\n  version: request.version\n});\nconst marshalPutTwinDocumentRequest = (request, defaults) => ({\n  data: request.data,\n  version: request.version\n});\nconst marshalSetDeviceCertificateRequest = (request, defaults) => ({\n  certificate_pem: request.certificatePem\n});\nconst marshalSetHubCARequest = (request, defaults) => ({\n  ca_cert_pem: request.caCertPem,\n  challenge_cert_pem: request.challengeCertPem\n});\nconst marshalUpdateDeviceRequest = (request, defaults) => ({\n  allow_insecure: request.allowInsecure,\n  allow_multiple_connections: request.allowMultipleConnections,\n  description: request.description,\n  hub_id: request.hubId,\n  message_filters: request.messageFilters !== void 0 ? marshalDeviceMessageFilters(request.messageFilters) : void 0\n});\nconst marshalUpdateHubRequest = (request, defaults) => ({\n  disable_events: request.disableEvents,\n  enable_device_auto_provisioning: request.enableDeviceAutoProvisioning,\n  events_topic_prefix: request.eventsTopicPrefix,\n  name: request.name,\n  product_plan: request.productPlan,\n  ...marshalling.resolveOneOf([\n    {\n      param: \"twins_graphite_config\",\n      value: request.twinsGraphiteConfig !== void 0 ? marshalHubTwinsGraphiteConfig(request.twinsGraphiteConfig) : void 0\n    }\n  ])\n});\nconst marshalUpdateRouteRequestDatabaseConfig = (request, defaults) => ({\n  dbname: request.dbname,\n  engine: request.engine,\n  host: request.host,\n  password: request.password,\n  port: request.port,\n  query: request.query,\n  username: request.username\n});\nconst marshalUpdateRouteRequestRestConfig = (request, defaults) => ({\n  headers: request.headers,\n  uri: request.uri,\n  verb: request.verb\n});\nconst marshalUpdateRouteRequestS3Config = (request, defaults) => ({\n  bucket_name: request.bucketName,\n  bucket_region: request.bucketRegion,\n  object_prefix: request.objectPrefix,\n  strategy: request.strategy\n});\nconst marshalUpdateRouteRequest = (request, defaults) => ({\n  name: request.name,\n  topic: request.topic,\n  ...marshalling.resolveOneOf([\n    {\n      param: \"s3_config\",\n      value: request.s3Config !== void 0 ? marshalUpdateRouteRequestS3Config(request.s3Config) : void 0\n    },\n    {\n      param: \"db_config\",\n      value: request.dbConfig !== void 0 ? marshalUpdateRouteRequestDatabaseConfig(request.dbConfig) : void 0\n    },\n    {\n      param: \"rest_config\",\n      value: request.restConfig !== void 0 ? marshalUpdateRouteRequestRestConfig(request.restConfig) : void 0\n    }\n  ])\n});\nexports.marshalCreateDeviceRequest = marshalCreateDeviceRequest;\nexports.marshalCreateHubRequest = marshalCreateHubRequest;\nexports.marshalCreateNetworkRequest = marshalCreateNetworkRequest;\nexports.marshalCreateRouteRequest = marshalCreateRouteRequest;\nexports.marshalPatchTwinDocumentRequest = marshalPatchTwinDocumentRequest;\nexports.marshalPutTwinDocumentRequest = marshalPutTwinDocumentRequest;\nexports.marshalSetDeviceCertificateRequest = marshalSetDeviceCertificateRequest;\nexports.marshalSetHubCARequest = marshalSetHubCARequest;\nexports.marshalUpdateDeviceRequest = marshalUpdateDeviceRequest;\nexports.marshalUpdateHubRequest = marshalUpdateHubRequest;\nexports.marshalUpdateRouteRequest = marshalUpdateRouteRequest;\nexports.unmarshalCreateDeviceResponse = unmarshalCreateDeviceResponse;\nexports.unmarshalCreateNetworkResponse = unmarshalCreateNetworkResponse;\nexports.unmarshalDevice = unmarshalDevice;\nexports.unmarshalGetDeviceCertificateResponse = unmarshalGetDeviceCertificateResponse;\nexports.unmarshalGetDeviceMetricsResponse = unmarshalGetDeviceMetricsResponse;\nexports.unmarshalGetHubCAResponse = unmarshalGetHubCAResponse;\nexports.unmarshalGetHubMetricsResponse = unmarshalGetHubMetricsResponse;\nexports.unmarshalHub = unmarshalHub;\nexports.unmarshalListDevicesResponse = unmarshalListDevicesResponse;\nexports.unmarshalListHubsResponse = unmarshalListHubsResponse;\nexports.unmarshalListNetworksResponse = unmarshalListNetworksResponse;\nexports.unmarshalListRoutesResponse = unmarshalListRoutesResponse;\nexports.unmarshalListTwinDocumentsResponse = unmarshalListTwinDocumentsResponse;\nexports.unmarshalNetwork = unmarshalNetwork;\nexports.unmarshalRenewDeviceCertificateResponse = unmarshalRenewDeviceCertificateResponse;\nexports.unmarshalRoute = unmarshalRoute;\nexports.unmarshalSetDeviceCertificateResponse = unmarshalSetDeviceCertificateResponse;\nexports.unmarshalTwinDocument = unmarshalTwinDocument;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index_gen = require(\"./v1/index.gen.cjs\");\nexports.v1 = index_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass API extends api.API {\n  /** Lists the available regions of the API. */\n  static LOCALITIES = [\"fr-par\", \"nl-ams\", \"pl-waw\"];\n  /**\n   * Reserve a new IP. Reserve a new IP from the specified source. Currently IPs\n   * can only be reserved from a Private Network.\n   *\n   * @param request - The request {@link BookIPRequest}\n   * @returns A Promise of IP\n   */\n  bookIP = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalBookIPRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/ipam/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/ips`\n    },\n    marshalling_gen.unmarshalIP\n  );\n  /**\n   * Release an IP. Release an IP not currently attached to a resource, and\n   * returns it to the available IP pool.\n   *\n   * @param request - The request {@link ReleaseIPRequest}\n   */\n  releaseIP = (request) => this.client.fetch({\n    body: \"{}\",\n    headers: jsonContentHeaders,\n    method: \"DELETE\",\n    path: `/ipam/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/ips/${marshalling.validatePathParam(\"ipId\", request.ipId)}`\n  });\n  releaseIPSet = (request = {}) => this.client.fetch({\n    body: JSON.stringify(\n      marshalling_gen.marshalReleaseIPSetRequest(request, this.client.settings)\n    ),\n    headers: jsonContentHeaders,\n    method: \"POST\",\n    path: `/ipam/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/ip-sets/release`\n  });\n  /**\n   * Get an IP. Retrieve details of an existing IP, specified by its IP ID.\n   *\n   * @param request - The request {@link GetIPRequest}\n   * @returns A Promise of IP\n   */\n  getIP = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/ipam/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/ips/${marshalling.validatePathParam(\"ipId\", request.ipId)}`\n    },\n    marshalling_gen.unmarshalIP\n  );\n  /**\n   * Update an IP. Update parameters including tags of the specified IP.\n   *\n   * @param request - The request {@link UpdateIPRequest}\n   * @returns A Promise of IP\n   */\n  updateIP = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateIPRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/ipam/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/ips/${marshalling.validatePathParam(\"ipId\", request.ipId)}`\n    },\n    marshalling_gen.unmarshalIP\n  );\n  pageOfListIPs = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/ipam/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/ips`,\n      urlParams: marshalling.urlParams(\n        [\"attached\", request.attached],\n        [\"is_ipv6\", request.isIpv6],\n        [\"mac_address\", request.macAddress],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId],\n        [\"resource_id\", request.resourceId],\n        [\"resource_name\", request.resourceName],\n        [\"resource_type\", request.resourceType],\n        [\"resource_types\", request.resourceTypes],\n        [\"tags\", request.tags],\n        [\"vpc_id\", request.vpcId],\n        ...Object.entries(\n          marshalling.resolveOneOf([\n            { param: \"zonal\", value: request.zonal },\n            { param: \"private_network_id\", value: request.privateNetworkId },\n            { param: \"subnet_id\", value: request.subnetId }\n          ])\n        )\n      )\n    },\n    marshalling_gen.unmarshalListIPsResponse\n  );\n  /**\n   * List existing IPs. List existing IPs in the specified region using various\n   * filters. For example, you can filter for IPs within a specified Private\n   * Network, or for public IPs within a specified Project. By default, the IPs\n   * returned in the list are ordered by creation date in ascending order,\n   * though this can be modified via the order_by field.\n   *\n   * @param request - The request {@link ListIPsRequest}\n   * @returns A Promise of ListIPsResponse\n   */\n  listIPs = (request = {}) => resourcePaginator.enrichForPagination(\"ips\", this.pageOfListIPs, request);\n  /**\n   * Attach IP to custom resource. Attach an existing reserved IP from a Private\n   * Network subnet to a custom, named resource via its MAC address. An example\n   * of a custom resource is a virtual machine hosted on an Elastic Metal\n   * server. Do not use this method for attaching IP addresses to standard\n   * Scaleway resources as it will fail - see the relevant product API for an\n   * equivalent method.\n   *\n   * @param request - The request {@link AttachIPRequest}\n   * @returns A Promise of IP\n   */\n  attachIP = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalAttachIPRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/ipam/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/ips/${marshalling.validatePathParam(\"ipId\", request.ipId)}/attach`\n    },\n    marshalling_gen.unmarshalIP\n  );\n  /**\n   * Detach IP from a custom resource. Detach a private IP from a custom\n   * resource. An example of a custom resource is a virtual machine hosted on an\n   * Elastic Metal server. Do not use this method for detaching IP addresses\n   * from standard Scaleway resources (e.g. Instances, Load Balancers) as it\n   * will fail - see the relevant product API for an equivalent method.\n   *\n   * @param request - The request {@link DetachIPRequest}\n   * @returns A Promise of IP\n   */\n  detachIP = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalDetachIPRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/ipam/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/ips/${marshalling.validatePathParam(\"ipId\", request.ipId)}/detach`\n    },\n    marshalling_gen.unmarshalIP\n  );\n  /**\n   * Move IP to a custom resource. Move an existing reserved private IP from one\n   * custom resource (e.g. a virtual machine hosted on an Elastic Metal server)\n   * to another custom resource. This will detach it from the first resource,\n   * and attach it to the second. Do not use this method for moving IP addresses\n   * between standard Scaleway resources (e.g. Instances, Load Balancers) as it\n   * will fail - see the relevant product API for an equivalent method.\n   *\n   * @param request - The request {@link MoveIPRequest}\n   * @returns A Promise of IP\n   */\n  moveIP = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalMoveIPRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/ipam/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/ips/${marshalling.validatePathParam(\"ipId\", request.ipId)}/move`\n    },\n    marshalling_gen.unmarshalIP\n  );\n}\nexports.API = API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nconst validationRules_gen = require(\"./validation-rules.gen.cjs\");\nexports.API = api_gen.API;\nexports.ValidationRules = validationRules_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst json = require(\"../../../helpers/json.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst unmarshalResource = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Resource' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    id: data.id,\n    macAddress: data.mac_address,\n    name: data.name,\n    type: data.type\n  };\n};\nconst unmarshalReverse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Reverse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    address: data.address,\n    hostname: data.hostname\n  };\n};\nconst unmarshalSource = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Source' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    privateNetworkId: data.private_network_id,\n    subnetId: data.subnet_id,\n    zonal: data.zonal\n  };\n};\nconst unmarshalIP = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'IP' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    address: data.address,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    id: data.id,\n    isIpv6: data.is_ipv6,\n    projectId: data.project_id,\n    region: data.region,\n    resource: data.resource ? unmarshalResource(data.resource) : void 0,\n    reverses: marshalling.unmarshalArrayOfObject(data.reverses, unmarshalReverse),\n    source: data.source ? unmarshalSource(data.source) : void 0,\n    tags: data.tags,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    zone: data.zone\n  };\n};\nconst unmarshalListIPsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListIPsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    ips: marshalling.unmarshalArrayOfObject(data.ips, unmarshalIP),\n    totalCount: data.total_count\n  };\n};\nconst marshalCustomResource = (request, defaults) => ({\n  mac_address: request.macAddress,\n  name: request.name\n});\nconst marshalAttachIPRequest = (request, defaults) => ({\n  resource: marshalCustomResource(request.resource)\n});\nconst marshalSource = (request, defaults) => ({\n  ...marshalling.resolveOneOf([\n    { param: \"zonal\", value: request.zonal },\n    { param: \"private_network_id\", value: request.privateNetworkId },\n    { param: \"subnet_id\", value: request.subnetId }\n  ])\n});\nconst marshalBookIPRequest = (request, defaults) => ({\n  address: request.address,\n  is_ipv6: request.isIpv6,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  resource: request.resource !== void 0 ? marshalCustomResource(request.resource) : void 0,\n  source: marshalSource(request.source),\n  tags: request.tags\n});\nconst marshalDetachIPRequest = (request, defaults) => ({\n  resource: marshalCustomResource(request.resource)\n});\nconst marshalMoveIPRequest = (request, defaults) => ({\n  from_resource: marshalCustomResource(request.fromResource),\n  to_resource: request.toResource !== void 0 ? marshalCustomResource(request.toResource) : void 0\n});\nconst marshalReleaseIPSetRequest = (request, defaults) => ({\n  ip_ids: request.ipIds\n});\nconst marshalReverse = (request, defaults) => ({\n  address: request.address,\n  hostname: request.hostname\n});\nconst marshalUpdateIPRequest = (request, defaults) => ({\n  reverses: request.reverses !== void 0 ? request.reverses.map((elt) => marshalReverse(elt)) : void 0,\n  tags: request.tags\n});\nexports.marshalAttachIPRequest = marshalAttachIPRequest;\nexports.marshalBookIPRequest = marshalBookIPRequest;\nexports.marshalDetachIPRequest = marshalDetachIPRequest;\nexports.marshalMoveIPRequest = marshalMoveIPRequest;\nexports.marshalReleaseIPSetRequest = marshalReleaseIPSetRequest;\nexports.marshalUpdateIPRequest = marshalUpdateIPRequest;\nexports.unmarshalIP = unmarshalIP;\nexports.unmarshalListIPsResponse = unmarshalListIPsResponse;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst ListIPsRequest = {\n  resourceName: {\n    maxLength: 63,\n    minLength: 2\n  }\n};\nexports.ListIPsRequest = ListIPsRequest;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index_gen = require(\"./v1alpha1/index.gen.cjs\");\nexports.v1alpha1 = index_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst intervalRetrier = require(\"../../../internal/async/interval-retrier.cjs\");\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass API extends api.API {\n  /** Lists the available regions of the API. */\n  static LOCALITIES = [\"fr-par\", \"nl-ams\", \"pl-waw\"];\n  /**\n   * Create a new volume. Create a new volume from a Project ID. Volume is\n   * identified by an ID and used to host pin references. Volume is personal (at\n   * least to your organization) even if IPFS blocks and CID are available to\n   * anyone. Should be the first command you made because every pin must be\n   * attached to a volume.\n   *\n   * @param request - The request {@link CreateVolumeRequest}\n   * @returns A Promise of Volume\n   */\n  createVolume = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateVolumeRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/ipfs/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/volumes`\n    },\n    marshalling_gen.unmarshalVolume\n  );\n  /**\n   * Get information about a volume. Retrieve information about a specific\n   * volume.\n   *\n   * @param request - The request {@link GetVolumeRequest}\n   * @returns A Promise of Volume\n   */\n  getVolume = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/ipfs/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/volumes/${marshalling.validatePathParam(\"volumeId\", request.volumeId)}`\n    },\n    marshalling_gen.unmarshalVolume\n  );\n  pageOfListVolumes = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/ipfs/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/volumes`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\n          \"project_id\",\n          request.projectId ?? this.client.settings.defaultProjectId\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListVolumesResponse\n  );\n  /**\n   * List all volumes by a Project ID. Retrieve information about all volumes\n   * from a Project ID.\n   *\n   * @param request - The request {@link ListVolumesRequest}\n   * @returns A Promise of ListVolumesResponse\n   */\n  listVolumes = (request = {}) => resourcePaginator.enrichForPagination(\"volumes\", this.pageOfListVolumes, request);\n  /**\n   * Update volume information. Update volume information (tag, name...).\n   *\n   * @param request - The request {@link UpdateVolumeRequest}\n   * @returns A Promise of Volume\n   */\n  updateVolume = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateVolumeRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/ipfs/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/volumes/${marshalling.validatePathParam(\"volumeId\", request.volumeId)}`\n    },\n    marshalling_gen.unmarshalVolume\n  );\n  /**\n   * Delete an existing volume. Delete a volume by its ID and every pin attached\n   * to this volume. This process can take a while to conclude, depending on the\n   * size of your pinned content.\n   *\n   * @param request - The request {@link DeleteVolumeRequest}\n   */\n  deleteVolume = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/ipfs/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/volumes/${marshalling.validatePathParam(\"volumeId\", request.volumeId)}`\n  });\n  /**\n   * Create a pin by URL. Will fetch and store the content pointed by the\n   * provided URL. The content must be available on the public IPFS network. The\n   * content (IPFS blocks) will be host by the pinning service until pin\n   * deletion. From that point, any other IPFS peer can fetch and host your\n   * content: Make sure to pin public or encrypted content. Many pin requests\n   * (from different users) can target the same CID. A pin is defined by its ID\n   * (UUID), its status (queued, pinning, pinned or failed) and target CID.\n   *\n   * @param request - The request {@link CreatePinByURLRequest}\n   * @returns A Promise of Pin\n   */\n  createPinByURL = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreatePinByURLRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/ipfs/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/pins/create-by-url`\n    },\n    marshalling_gen.unmarshalPin\n  );\n  /**\n   * Create a pin by CID. Will fetch and store the content pointed by the\n   * provided CID. The content must be available on the public IPFS network. The\n   * content (IPFS blocks) will be host by the pinning service until pin\n   * deletion. From that point, any other IPFS peer can fetch and host your\n   * content: Make sure to pin public or encrypted content. Many pin requests\n   * (from different users) can target the same CID. A pin is defined by its ID\n   * (UUID), its status (queued, pinning, pinned or failed) and target CID.\n   *\n   * @param request - The request {@link CreatePinByCIDRequest}\n   * @returns A Promise of Pin\n   */\n  createPinByCID = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreatePinByCIDRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/ipfs/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/pins/create-by-cid`\n    },\n    marshalling_gen.unmarshalPin\n  );\n  /**\n   * Replace pin by CID. Deletes the given resource ID and pins the new CID in\n   * its place. Will fetch and store the content pointed by the provided CID.\n   * The content must be available on the public IPFS network. The content (IPFS\n   * blocks) is hosted by the pinning service until the pin is deleted. While\n   * the content is available any other IPFS peer can fetch and host your\n   * content. For this reason, we recommend that you pin either public or\n   * encrypted content. Several different pin requests can target the same CID.\n   * A pin is defined by its ID (UUID), its status (queued, pinning, pinned or\n   * failed) and target CID.\n   *\n   * @param request - The request {@link ReplacePinRequest}\n   * @returns A Promise of ReplacePinResponse\n   */\n  replacePin = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalReplacePinRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/ipfs/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/pins/${marshalling.validatePathParam(\"pinId\", request.pinId)}/replace`\n    },\n    marshalling_gen.unmarshalReplacePinResponse\n  );\n  /**\n   * Get pin information. Retrieve information about the provided **pin ID**,\n   * such as status, last modification, and CID.\n   *\n   * @param request - The request {@link GetPinRequest}\n   * @returns A Promise of Pin\n   */\n  getPin = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/ipfs/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/pins/${marshalling.validatePathParam(\"pinId\", request.pinId)}`,\n      urlParams: marshalling.urlParams([\"volume_id\", request.volumeId])\n    },\n    marshalling_gen.unmarshalPin\n  );\n  /**\n   * Waits for {@link Pin} to be in a final state.\n   *\n   * @param request - The request {@link GetPinRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Pin\n   */\n  waitForPin = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.PIN_TRANSIENT_STATUSES.includes(res.status))),\n    this.getPin,\n    request,\n    options\n  );\n  pageOfListPins = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/ipfs/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/pins`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId],\n        [\"status\", request.status],\n        [\"volume_id\", request.volumeId]\n      )\n    },\n    marshalling_gen.unmarshalListPinsResponse\n  );\n  /**\n   * List all pins within a volume. Retrieve information about all pins within a\n   * volume.\n   *\n   * @param request - The request {@link ListPinsRequest}\n   * @returns A Promise of ListPinsResponse\n   */\n  listPins = (request) => resourcePaginator.enrichForPagination(\"pins\", this.pageOfListPins, request);\n  /**\n   * Create an unpin request. An unpin request means that you no longer own the\n   * content. This content can therefore be removed and no longer provided on\n   * the IPFS network.\n   *\n   * @param request - The request {@link DeletePinRequest}\n   */\n  deletePin = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/ipfs/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/pins/${marshalling.validatePathParam(\"pinId\", request.pinId)}`,\n    urlParams: marshalling.urlParams([\"volume_id\", request.volumeId])\n  });\n}\nclass IpnsAPI extends api.API {\n  /** Lists the available regions of the API. */\n  static LOCALITIES = [\"fr-par\", \"nl-ams\", \"pl-waw\"];\n  /**\n   * Create a new name. You can use the `ipns key` command to list and generate\n   * more names and their respective keys.\n   *\n   * @param request - The request {@link IpnsApiCreateNameRequest}\n   * @returns A Promise of Name\n   */\n  createName = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalIpnsApiCreateNameRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/ipfs/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/names`\n    },\n    marshalling_gen.unmarshalName\n  );\n  /**\n   * Get information about a name. Retrieve information about a specific name.\n   *\n   * @param request - The request {@link IpnsApiGetNameRequest}\n   * @returns A Promise of Name\n   */\n  getName = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/ipfs/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/names/${marshalling.validatePathParam(\"nameId\", request.nameId)}`\n    },\n    marshalling_gen.unmarshalName\n  );\n  /**\n   * Waits for {@link Name} to be in a final state.\n   *\n   * @param request - The request {@link IpnsApiGetNameRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Name\n   */\n  waitForName = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.NAME_TRANSIENT_STATUSES.includes(res.status))),\n    this.getName,\n    request,\n    options\n  );\n  /**\n   * Delete an existing name. Delete a name by its ID.\n   *\n   * @param request - The request {@link IpnsApiDeleteNameRequest}\n   */\n  deleteName = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/ipfs/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/names/${marshalling.validatePathParam(\"nameId\", request.nameId)}`\n  });\n  pageOfListNames = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/ipfs/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/names`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListNamesResponse\n  );\n  /**\n   * List all names by a Project ID. Retrieve information about all names from a\n   * Project ID.\n   *\n   * @param request - The request {@link IpnsApiListNamesRequest}\n   * @returns A Promise of ListNamesResponse\n   */\n  listNames = (request = {}) => resourcePaginator.enrichForPagination(\"names\", this.pageOfListNames, request);\n  /**\n   * Update name information. Update name information (CID, tag, name...).\n   *\n   * @param request - The request {@link IpnsApiUpdateNameRequest}\n   * @returns A Promise of Name\n   */\n  updateName = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalIpnsApiUpdateNameRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/ipfs/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/names/${marshalling.validatePathParam(\"nameId\", request.nameId)}`\n    },\n    marshalling_gen.unmarshalName\n  );\n  /**\n   * Export your private key. Export a private key by its ID.\n   *\n   * @param request - The request {@link IpnsApiExportKeyNameRequest}\n   * @returns A Promise of ExportKeyNameResponse\n   */\n  exportKeyName = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/ipfs/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/names/${marshalling.validatePathParam(\"nameId\", request.nameId)}/export-key`\n    },\n    marshalling_gen.unmarshalExportKeyNameResponse\n  );\n  /**\n   * Import your private key. Import a private key.\n   *\n   * @param request - The request {@link IpnsApiImportKeyNameRequest}\n   * @returns A Promise of Name\n   */\n  importKeyName = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalIpnsApiImportKeyNameRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/ipfs/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/names/import-key`\n    },\n    marshalling_gen.unmarshalName\n  );\n}\nexports.API = API;\nexports.IpnsAPI = IpnsAPI;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst NAME_TRANSIENT_STATUSES = [\"queued\", \"publishing\"];\nconst PIN_TRANSIENT_STATUSES = [\"queued\", \"pinning\"];\nexports.NAME_TRANSIENT_STATUSES = NAME_TRANSIENT_STATUSES;\nexports.PIN_TRANSIENT_STATUSES = PIN_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nexports.API = api_gen.API;\nexports.IpnsAPI = api_gen.IpnsAPI;\nexports.NAME_TRANSIENT_STATUSES = content_gen.NAME_TRANSIENT_STATUSES;\nexports.PIN_TRANSIENT_STATUSES = content_gen.PIN_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst json = require(\"../../../helpers/json.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst unmarshalName = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Name' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    key: data.key,\n    name: data.name,\n    nameId: data.name_id,\n    projectId: data.project_id,\n    region: data.region,\n    status: data.status,\n    tags: data.tags,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    value: data.value\n  };\n};\nconst unmarshalPinCIDMeta = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'PinCIDMeta' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    id: data.id\n  };\n};\nconst unmarshalPinCID = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'PinCID' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    cid: data.cid,\n    meta: data.meta ? unmarshalPinCIDMeta(data.meta) : void 0,\n    name: data.name,\n    origins: data.origins\n  };\n};\nconst unmarshalPinInfo = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'PinInfo' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    id: data.id,\n    progress: data.progress,\n    size: data.size,\n    statusDetails: data.status_details,\n    url: data.url\n  };\n};\nconst unmarshalPin = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Pin' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    cid: data.cid ? unmarshalPinCID(data.cid) : void 0,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    delegates: data.delegates,\n    info: data.info ? unmarshalPinInfo(data.info) : void 0,\n    pinId: data.pin_id,\n    status: data.status\n  };\n};\nconst unmarshalVolume = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Volume' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    countPin: data.count_pin,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    id: data.id,\n    name: data.name,\n    projectId: data.project_id,\n    region: data.region,\n    size: data.size,\n    tags: data.tags,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalExportKeyNameResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ExportKeyNameResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    nameId: data.name_id,\n    privateKey: data.private_key,\n    projectId: data.project_id,\n    publicKey: data.public_key,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalListNamesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListNamesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    names: marshalling.unmarshalArrayOfObject(data.names, unmarshalName),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListPinsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListPinsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    pins: marshalling.unmarshalArrayOfObject(data.pins, unmarshalPin),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListVolumesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListVolumesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    totalCount: data.total_count,\n    volumes: marshalling.unmarshalArrayOfObject(data.volumes, unmarshalVolume)\n  };\n};\nconst unmarshalReplacePinResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ReplacePinResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    pin: data.pin ? unmarshalPin(data.pin) : void 0\n  };\n};\nconst marshalCreatePinByCIDRequest = (request, defaults) => ({\n  cid: request.cid,\n  name: request.name,\n  origins: request.origins,\n  volume_id: request.volumeId\n});\nconst marshalCreatePinByURLRequest = (request, defaults) => ({\n  name: request.name,\n  url: request.url,\n  volume_id: request.volumeId\n});\nconst marshalCreateVolumeRequest = (request, defaults) => ({\n  name: request.name,\n  project_id: request.projectId ?? defaults.defaultProjectId\n});\nconst marshalIpnsApiCreateNameRequest = (request, defaults) => ({\n  name: request.name,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  value: request.value\n});\nconst marshalIpnsApiImportKeyNameRequest = (request, defaults) => ({\n  name: request.name,\n  private_key: request.privateKey,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  value: request.value\n});\nconst marshalIpnsApiUpdateNameRequest = (request, defaults) => ({\n  name: request.name,\n  tags: request.tags,\n  value: request.value\n});\nconst marshalReplacePinRequest = (request, defaults) => ({\n  cid: request.cid,\n  name: request.name,\n  origins: request.origins,\n  volume_id: request.volumeId\n});\nconst marshalUpdateVolumeRequest = (request, defaults) => ({\n  name: request.name,\n  tags: request.tags\n});\nexports.marshalCreatePinByCIDRequest = marshalCreatePinByCIDRequest;\nexports.marshalCreatePinByURLRequest = marshalCreatePinByURLRequest;\nexports.marshalCreateVolumeRequest = marshalCreateVolumeRequest;\nexports.marshalIpnsApiCreateNameRequest = marshalIpnsApiCreateNameRequest;\nexports.marshalIpnsApiImportKeyNameRequest = marshalIpnsApiImportKeyNameRequest;\nexports.marshalIpnsApiUpdateNameRequest = marshalIpnsApiUpdateNameRequest;\nexports.marshalReplacePinRequest = marshalReplacePinRequest;\nexports.marshalUpdateVolumeRequest = marshalUpdateVolumeRequest;\nexports.unmarshalExportKeyNameResponse = unmarshalExportKeyNameResponse;\nexports.unmarshalListNamesResponse = unmarshalListNamesResponse;\nexports.unmarshalListPinsResponse = unmarshalListPinsResponse;\nexports.unmarshalListVolumesResponse = unmarshalListVolumesResponse;\nexports.unmarshalName = unmarshalName;\nexports.unmarshalPin = unmarshalPin;\nexports.unmarshalReplacePinResponse = unmarshalReplacePinResponse;\nexports.unmarshalVolume = unmarshalVolume;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index_gen = require(\"./v1alpha1/index.gen.cjs\");\nexports.v1alpha1 = index_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass API extends api.API {\n  /** Lists the available regions of the API. */\n  static LOCALITIES = [\"fr-par\", \"nl-ams\", \"pl-waw\"];\n  /**\n   * Create a new job definition in a specified Project.\n   *\n   * @param request - The request {@link CreateJobDefinitionRequest}\n   * @returns A Promise of JobDefinition\n   */\n  createJobDefinition = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateJobDefinitionRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/serverless-jobs/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/job-definitions`\n    },\n    marshalling_gen.unmarshalJobDefinition\n  );\n  /**\n   * Get a job definition by its unique identifier.\n   *\n   * @param request - The request {@link GetJobDefinitionRequest}\n   * @returns A Promise of JobDefinition\n   */\n  getJobDefinition = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/serverless-jobs/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/job-definitions/${marshalling.validatePathParam(\"jobDefinitionId\", request.jobDefinitionId)}`\n    },\n    marshalling_gen.unmarshalJobDefinition\n  );\n  pageOfListJobDefinitions = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/serverless-jobs/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/job-definitions`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListJobDefinitionsResponse\n  );\n  /**\n   * List all your job definitions with filters.\n   *\n   * @param request - The request {@link ListJobDefinitionsRequest}\n   * @returns A Promise of ListJobDefinitionsResponse\n   */\n  listJobDefinitions = (request = {}) => resourcePaginator.enrichForPagination(\n    \"jobDefinitions\",\n    this.pageOfListJobDefinitions,\n    request\n  );\n  /**\n   * Update an existing job definition associated with the specified unique\n   * identifier.\n   *\n   * @param request - The request {@link UpdateJobDefinitionRequest}\n   * @returns A Promise of JobDefinition\n   */\n  updateJobDefinition = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateJobDefinitionRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/serverless-jobs/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/job-definitions/${marshalling.validatePathParam(\"jobDefinitionId\", request.jobDefinitionId)}`\n    },\n    marshalling_gen.unmarshalJobDefinition\n  );\n  /**\n   * Delete an exsisting job definition by its unique identifier.\n   *\n   * @param request - The request {@link DeleteJobDefinitionRequest}\n   */\n  deleteJobDefinition = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/serverless-jobs/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/job-definitions/${marshalling.validatePathParam(\"jobDefinitionId\", request.jobDefinitionId)}`\n  });\n  /**\n   * Run an existing job definition by its unique identifier. This will create a\n   * new job run.\n   *\n   * @param request - The request {@link StartJobDefinitionRequest}\n   * @returns A Promise of StartJobDefinitionResponse\n   */\n  startJobDefinition = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalStartJobDefinitionRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/serverless-jobs/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/job-definitions/${marshalling.validatePathParam(\"jobDefinitionId\", request.jobDefinitionId)}/start`\n    },\n    marshalling_gen.unmarshalStartJobDefinitionResponse\n  );\n  /**\n   * Get a job run by its unique identifier.\n   *\n   * @param request - The request {@link GetJobRunRequest}\n   * @returns A Promise of JobRun\n   */\n  getJobRun = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/serverless-jobs/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/job-runs/${marshalling.validatePathParam(\"jobRunId\", request.jobRunId)}`\n    },\n    marshalling_gen.unmarshalJobRun\n  );\n  /**\n   * Stop a job run by its unique identifier.\n   *\n   * @param request - The request {@link StopJobRunRequest}\n   * @returns A Promise of JobRun\n   */\n  stopJobRun = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/serverless-jobs/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/job-runs/${marshalling.validatePathParam(\"jobRunId\", request.jobRunId)}/stop`\n    },\n    marshalling_gen.unmarshalJobRun\n  );\n  pageOfListJobRuns = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/serverless-jobs/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/job-runs`,\n      urlParams: marshalling.urlParams(\n        [\"job_definition_id\", request.jobDefinitionId],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListJobRunsResponse\n  );\n  /**\n   * List all job runs with filters.\n   *\n   * @param request - The request {@link ListJobRunsRequest}\n   * @returns A Promise of ListJobRunsResponse\n   */\n  listJobRuns = (request = {}) => resourcePaginator.enrichForPagination(\"jobRuns\", this.pageOfListJobRuns, request);\n  /**\n   * List jobs resources for the console.\n   *\n   * @param request - The request {@link ListJobsResourcesRequest}\n   * @returns A Promise of ListJobsResourcesResponse\n   */\n  listJobsResources = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/serverless-jobs/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/jobs-resources`\n    },\n    marshalling_gen.unmarshalListJobsResourcesResponse\n  );\n}\nexports.API = API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst JOB_RUN_TRANSIENT_STATUSES = [\n  \"queued\",\n  \"scheduled\",\n  \"running\"\n];\nexports.JOB_RUN_TRANSIENT_STATUSES = JOB_RUN_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst validationRules_gen = require(\"./validation-rules.gen.cjs\");\nexports.API = api_gen.API;\nexports.JOB_RUN_TRANSIENT_STATUSES = content_gen.JOB_RUN_TRANSIENT_STATUSES;\nexports.ValidationRules = validationRules_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst randomName = require(\"@scaleway/random-name\");\nconst json = require(\"../../../helpers/json.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst unmarshalCronSchedule = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'CronSchedule' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    schedule: data.schedule,\n    timezone: data.timezone\n  };\n};\nconst unmarshalJobDefinition = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'JobDefinition' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    command: data.command,\n    cpuLimit: data.cpu_limit,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    cronSchedule: data.cron_schedule ? unmarshalCronSchedule(data.cron_schedule) : void 0,\n    description: data.description,\n    environmentVariables: data.environment_variables,\n    id: data.id,\n    imageUri: data.image_uri,\n    jobTimeout: data.job_timeout,\n    localStorageCapacity: data.local_storage_capacity,\n    memoryLimit: data.memory_limit,\n    name: data.name,\n    projectId: data.project_id,\n    region: data.region,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalJobRun = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'JobRun' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    command: data.command,\n    cpuLimit: data.cpu_limit,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    environmentVariables: data.environment_variables,\n    errorMessage: data.error_message,\n    exitCode: data.exit_code,\n    id: data.id,\n    jobDefinitionId: data.job_definition_id,\n    localStorageCapacity: data.local_storage_capacity,\n    memoryLimit: data.memory_limit,\n    region: data.region,\n    runDuration: data.run_duration,\n    startedAt: marshalling.unmarshalDate(data.started_at),\n    state: data.state,\n    terminatedAt: marshalling.unmarshalDate(data.terminated_at),\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalListJobDefinitionsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListJobDefinitionsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    jobDefinitions: marshalling.unmarshalArrayOfObject(\n      data.job_definitions,\n      unmarshalJobDefinition\n    ),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListJobRunsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListJobRunsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    jobRuns: marshalling.unmarshalArrayOfObject(data.job_runs, unmarshalJobRun),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalResource = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Resource' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    cpuLimit: data.cpu_limit,\n    memoryLimit: data.memory_limit\n  };\n};\nconst unmarshalListJobsResourcesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListJobsResourcesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    resources: marshalling.unmarshalArrayOfObject(data.resources, unmarshalResource)\n  };\n};\nconst unmarshalStartJobDefinitionResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'StartJobDefinitionResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    jobRuns: marshalling.unmarshalArrayOfObject(data.job_runs, unmarshalJobRun)\n  };\n};\nconst marshalCreateJobDefinitionRequestCronScheduleConfig = (request, defaults) => ({\n  schedule: request.schedule,\n  timezone: request.timezone\n});\nconst marshalCreateJobDefinitionRequest = (request, defaults) => ({\n  command: request.command,\n  cpu_limit: request.cpuLimit,\n  cron_schedule: request.cronSchedule !== void 0 ? marshalCreateJobDefinitionRequestCronScheduleConfig(\n    request.cronSchedule\n  ) : void 0,\n  description: request.description,\n  environment_variables: request.environmentVariables !== void 0 ? request.environmentVariables : void 0,\n  image_uri: request.imageUri,\n  job_timeout: request.jobTimeout,\n  local_storage_capacity: request.localStorageCapacity,\n  memory_limit: request.memoryLimit,\n  name: request.name || randomName(\"job\"),\n  project_id: request.projectId ?? defaults.defaultProjectId\n});\nconst marshalStartJobDefinitionRequest = (request, defaults) => ({\n  command: request.command,\n  environment_variables: request.environmentVariables,\n  replicas: request.replicas\n});\nconst marshalUpdateJobDefinitionRequestCronScheduleConfig = (request, defaults) => ({\n  schedule: request.schedule,\n  timezone: request.timezone\n});\nconst marshalUpdateJobDefinitionRequest = (request, defaults) => ({\n  command: request.command,\n  cpu_limit: request.cpuLimit,\n  cron_schedule: request.cronSchedule !== void 0 ? marshalUpdateJobDefinitionRequestCronScheduleConfig(\n    request.cronSchedule\n  ) : void 0,\n  description: request.description,\n  environment_variables: request.environmentVariables,\n  image_uri: request.imageUri,\n  job_timeout: request.jobTimeout,\n  local_storage_capacity: request.localStorageCapacity,\n  memory_limit: request.memoryLimit,\n  name: request.name\n});\nexports.marshalCreateJobDefinitionRequest = marshalCreateJobDefinitionRequest;\nexports.marshalStartJobDefinitionRequest = marshalStartJobDefinitionRequest;\nexports.marshalUpdateJobDefinitionRequest = marshalUpdateJobDefinitionRequest;\nexports.unmarshalJobDefinition = unmarshalJobDefinition;\nexports.unmarshalJobRun = unmarshalJobRun;\nexports.unmarshalListJobDefinitionsResponse = unmarshalListJobDefinitionsResponse;\nexports.unmarshalListJobRunsResponse = unmarshalListJobRunsResponse;\nexports.unmarshalListJobsResourcesResponse = unmarshalListJobsResourcesResponse;\nexports.unmarshalStartJobDefinitionResponse = unmarshalStartJobDefinitionResponse;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst CreateJobDefinitionRequest = {\n  cpuLimit: {\n    greaterThan: 0\n  },\n  imageUri: {\n    pattern: /^((?:(?:(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])(?:\\.(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]))*|\\[(?:[a-fA-F0-9:]+)\\])(?::[0-9]+)?\\/)?[a-z0-9]+(?:(?:[._]|__|[-]+)[a-z0-9]+)*(?:\\/[a-z0-9]+(?:(?:[._]|__|[-]+)[a-z0-9]+)*)*)(?::([\\w][\\w.-]{0,127}))?(?:@([A-Za-z][A-Za-z0-9]*(?:[-_+.][A-Za-z][A-Za-z0-9]*)*[:][[:xdigit:]]{32,}))?$/\n  },\n  localStorageCapacity: {\n    greaterThan: 0\n  },\n  memoryLimit: {\n    greaterThan: 0\n  },\n  name: {\n    pattern: /^[A-Za-z0-9-_]{3,50}$/\n  }\n};\nconst CreateJobDefinitionRequestCronScheduleConfig = {\n  schedule: {\n    maxLength: 255,\n    minLength: 1\n  },\n  timezone: {\n    maxLength: 255,\n    minLength: 1\n  }\n};\nconst CronSchedule = {\n  schedule: {\n    maxLength: 255,\n    minLength: 1\n  },\n  timezone: {\n    maxLength: 255,\n    minLength: 1\n  }\n};\nconst ListJobDefinitionsRequest = {\n  page: {\n    greaterThanOrEqual: 1\n  },\n  pageSize: {\n    greaterThanOrEqual: 1,\n    lessThanOrEqual: 1e3\n  }\n};\nconst ListJobRunsRequest = {\n  page: {\n    greaterThanOrEqual: 1\n  },\n  pageSize: {\n    greaterThanOrEqual: 1,\n    lessThanOrEqual: 1e3\n  }\n};\nconst StartJobDefinitionRequest = {\n  replicas: {\n    greaterThan: 0\n  }\n};\nconst UpdateJobDefinitionRequest = {\n  cpuLimit: {\n    greaterThan: 0\n  },\n  imageUri: {\n    pattern: /^((?:(?:(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])(?:\\.(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]))*|\\[(?:[a-fA-F0-9:]+)\\])(?::[0-9]+)?\\/)?[a-z0-9]+(?:(?:[._]|__|[-]+)[a-z0-9]+)*(?:\\/[a-z0-9]+(?:(?:[._]|__|[-]+)[a-z0-9]+)*)*)(?::([\\w][\\w.-]{0,127}))?(?:@([A-Za-z][A-Za-z0-9]*(?:[-_+.][A-Za-z][A-Za-z0-9]*)*[:][[:xdigit:]]{32,}))?$/\n  },\n  localStorageCapacity: {\n    greaterThan: 0\n  },\n  memoryLimit: {\n    greaterThan: 0\n  },\n  name: {\n    pattern: /^[A-Za-z0-9-_]{3,50}$/\n  }\n};\nconst UpdateJobDefinitionRequestCronScheduleConfig = {\n  schedule: {\n    maxLength: 255,\n    minLength: 1\n  },\n  timezone: {\n    maxLength: 255,\n    minLength: 1\n  }\n};\nexports.CreateJobDefinitionRequest = CreateJobDefinitionRequest;\nexports.CreateJobDefinitionRequestCronScheduleConfig = CreateJobDefinitionRequestCronScheduleConfig;\nexports.CronSchedule = CronSchedule;\nexports.ListJobDefinitionsRequest = ListJobDefinitionsRequest;\nexports.ListJobRunsRequest = ListJobRunsRequest;\nexports.StartJobDefinitionRequest = StartJobDefinitionRequest;\nexports.UpdateJobDefinitionRequest = UpdateJobDefinitionRequest;\nexports.UpdateJobDefinitionRequestCronScheduleConfig = UpdateJobDefinitionRequestCronScheduleConfig;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index = require(\"./v1/index.cjs\");\nexports.v1 = index;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst intervalRetrier = require(\"../../../internal/async/interval-retrier.cjs\");\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass API extends api.API {\n  /** Lists the available regions of the API. */\n  static LOCALITIES = [\"fr-par\", \"nl-ams\", \"pl-waw\"];\n  pageOfListClusters = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/k8s/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/clusters`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"private_network_id\", request.privateNetworkId],\n        [\"project_id\", request.projectId],\n        [\"status\", request.status],\n        [\"type\", request.type]\n      )\n    },\n    marshalling_gen.unmarshalListClustersResponse\n  );\n  /**\n   * List Clusters. List all existing Kubernetes clusters in a specific region.\n   *\n   * @param request - The request {@link ListClustersRequest}\n   * @returns A Promise of ListClustersResponse\n   */\n  listClusters = (request = {}) => resourcePaginator.enrichForPagination(\"clusters\", this.pageOfListClusters, request);\n  /**\n   * Create a new Cluster. Create a new Kubernetes cluster in a Scaleway region.\n   *\n   * @param request - The request {@link CreateClusterRequest}\n   * @returns A Promise of Cluster\n   */\n  createCluster = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateClusterRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/k8s/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/clusters`\n    },\n    marshalling_gen.unmarshalCluster\n  );\n  /**\n   * Get a Cluster. Retrieve information about a specific Kubernetes cluster.\n   *\n   * @param request - The request {@link GetClusterRequest}\n   * @returns A Promise of Cluster\n   */\n  getCluster = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/k8s/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/clusters/${marshalling.validatePathParam(\"clusterId\", request.clusterId)}`\n    },\n    marshalling_gen.unmarshalCluster\n  );\n  /**\n   * Waits for {@link Cluster} to be in a final state.\n   *\n   * @param request - The request {@link GetClusterRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Cluster\n   */\n  waitForCluster = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.CLUSTER_TRANSIENT_STATUSES.includes(res.status))),\n    this.getCluster,\n    request,\n    options\n  );\n  /**\n   * Update a Cluster. Update information on a specific Kubernetes cluster. You\n   * can update details such as its name, description, tags and configuration.\n   * To upgrade a cluster, you will need to use the dedicated endpoint.\n   *\n   * @param request - The request {@link UpdateClusterRequest}\n   * @returns A Promise of Cluster\n   */\n  updateCluster = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateClusterRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/k8s/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/clusters/${marshalling.validatePathParam(\"clusterId\", request.clusterId)}`\n    },\n    marshalling_gen.unmarshalCluster\n  );\n  /**\n   * Delete a Cluster. Delete a specific Kubernetes cluster and all its\n   * associated pools and nodes. Note that this method will not delete any Load\n   * Balancer or Block Volume that are associated with the cluster.\n   *\n   * @param request - The request {@link DeleteClusterRequest}\n   * @returns A Promise of Cluster\n   */\n  deleteCluster = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/k8s/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/clusters/${marshalling.validatePathParam(\"clusterId\", request.clusterId)}`,\n      urlParams: marshalling.urlParams([\n        \"with_additional_resources\",\n        request.withAdditionalResources\n      ])\n    },\n    marshalling_gen.unmarshalCluster\n  );\n  /**\n   * Upgrade a Cluster. Upgrade a specific Kubernetes cluster and possibly its\n   * associated pools to a specific and supported Kubernetes version.\n   *\n   * @param request - The request {@link UpgradeClusterRequest}\n   * @returns A Promise of Cluster\n   */\n  upgradeCluster = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpgradeClusterRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/k8s/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/clusters/${marshalling.validatePathParam(\"clusterId\", request.clusterId)}/upgrade`\n    },\n    marshalling_gen.unmarshalCluster\n  );\n  /**\n   * Change the Cluster type. Change the type of a specific Kubernetes cluster.\n   * To see the possible values you can enter for the `type` field, [list\n   * available cluster\n   * types](#path-clusters-list-available-cluster-types-for-a-cluster).\n   *\n   * @param request - The request {@link SetClusterTypeRequest}\n   * @returns A Promise of Cluster\n   */\n  setClusterType = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSetClusterTypeRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/k8s/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/clusters/${marshalling.validatePathParam(\"clusterId\", request.clusterId)}/set-type`\n    },\n    marshalling_gen.unmarshalCluster\n  );\n  /**\n   * List available versions for a Cluster. List the versions that a specific\n   * Kubernetes cluster is allowed to upgrade to. Results will include every\n   * patch version greater than the current patch, as well as one minor version\n   * ahead of the current version. Any upgrade skipping a minor version will not\n   * work.\n   *\n   * @param request - The request {@link ListClusterAvailableVersionsRequest}\n   * @returns A Promise of ListClusterAvailableVersionsResponse\n   */\n  listClusterAvailableVersions = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/k8s/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/clusters/${marshalling.validatePathParam(\"clusterId\", request.clusterId)}/available-versions`\n    },\n    marshalling_gen.unmarshalListClusterAvailableVersionsResponse\n  );\n  /**\n   * List available cluster types for a cluster. List the cluster types that a\n   * specific Kubernetes cluster is allowed to switch to.\n   *\n   * @param request - The request {@link ListClusterAvailableTypesRequest}\n   * @returns A Promise of ListClusterAvailableTypesResponse\n   */\n  listClusterAvailableTypes = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/k8s/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/clusters/${marshalling.validatePathParam(\"clusterId\", request.clusterId)}/available-types`\n    },\n    marshalling_gen.unmarshalListClusterAvailableTypesResponse\n  );\n  _getClusterKubeConfig = (request) => this.client.fetch({\n    method: \"GET\",\n    path: `/k8s/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/clusters/${marshalling.validatePathParam(\"clusterId\", request.clusterId)}/kubeconfig`,\n    urlParams: marshalling.urlParams([\"dl\", 1], [\"redacted\", request.redacted]),\n    responseType: \"blob\"\n  });\n  /**\n   * Reset the admin token of a Cluster. Reset the admin token for a specific\n   * Kubernetes cluster. This will revoke the old admin token (which will not be\n   * usable afterwards) and create a new one. Note that you will need to\n   * download kubeconfig again to keep interacting with the cluster.\n   *\n   * @param request - The request {@link ResetClusterAdminTokenRequest}\n   */\n  resetClusterAdminToken = (request) => this.client.fetch({\n    body: \"{}\",\n    headers: jsonContentHeaders,\n    method: \"POST\",\n    path: `/k8s/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/clusters/${marshalling.validatePathParam(\"clusterId\", request.clusterId)}/reset-admin-token`\n  });\n  /**\n   * Migrate a cluster to Routed IPs. Migrate the nodes of an existing cluster\n   * to Routed IPs and enable Routed IPs for all future nodes.\n   *\n   * @param request - The request {@link MigrateClusterToRoutedIPsRequest}\n   * @returns A Promise of Cluster\n   */\n  migrateClusterToRoutedIPs = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/k8s/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/clusters/${marshalling.validatePathParam(\"clusterId\", request.clusterId)}/migrate-to-routed-ips`\n    },\n    marshalling_gen.unmarshalCluster\n  );\n  /**\n   * Migrate a cluster to SBS CSI. Enable the latest CSI compatible with\n   * Scaleway Block Storage (SBS) and migrate all existing\n   * PersistentVolumes/VolumeSnapshotContents to SBS.\n   *\n   * @param request - The request {@link MigrateClusterToSBSCSIRequest}\n   * @returns A Promise of Cluster\n   */\n  migrateClusterToSBSCSI = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/k8s/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/clusters/${marshalling.validatePathParam(\"clusterId\", request.clusterId)}/migrate-to-sbs-csi`\n    },\n    marshalling_gen.unmarshalCluster\n  );\n  pageOfListPools = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/k8s/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/clusters/${marshalling.validatePathParam(\"clusterId\", request.clusterId)}/pools`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"status\", request.status]\n      )\n    },\n    marshalling_gen.unmarshalListPoolsResponse\n  );\n  /**\n   * List Pools in a Cluster. List all the existing pools for a specific\n   * Kubernetes cluster.\n   *\n   * @param request - The request {@link ListPoolsRequest}\n   * @returns A Promise of ListPoolsResponse\n   */\n  listPools = (request) => resourcePaginator.enrichForPagination(\"pools\", this.pageOfListPools, request);\n  /**\n   * Create a new Pool in a Cluster. Create a new pool in a specific Kubernetes\n   * cluster.\n   *\n   * @param request - The request {@link CreatePoolRequest}\n   * @returns A Promise of Pool\n   */\n  createPool = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreatePoolRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/k8s/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/clusters/${marshalling.validatePathParam(\"clusterId\", request.clusterId)}/pools`\n    },\n    marshalling_gen.unmarshalPool\n  );\n  /**\n   * Get a Pool in a Cluster. Retrieve details about a specific pool in a\n   * Kubernetes cluster.\n   *\n   * @param request - The request {@link GetPoolRequest}\n   * @returns A Promise of Pool\n   */\n  getPool = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/k8s/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/pools/${marshalling.validatePathParam(\"poolId\", request.poolId)}`\n    },\n    marshalling_gen.unmarshalPool\n  );\n  /**\n   * Waits for {@link Pool} to be in a final state.\n   *\n   * @param request - The request {@link GetPoolRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Pool\n   */\n  waitForPool = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.POOL_TRANSIENT_STATUSES.includes(res.status))),\n    this.getPool,\n    request,\n    options\n  );\n  /**\n   * Upgrade a Pool in a Cluster. Upgrade the Kubernetes version of a specific\n   * pool. Note that it only works if the targeted version matches the cluster's\n   * version.\n   *\n   * @param request - The request {@link UpgradePoolRequest}\n   * @returns A Promise of Pool\n   */\n  upgradePool = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpgradePoolRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/k8s/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/pools/${marshalling.validatePathParam(\"poolId\", request.poolId)}/upgrade`\n    },\n    marshalling_gen.unmarshalPool\n  );\n  /**\n   * Update a Pool in a Cluster. Update the attributes of a specific pool, such\n   * as its desired size, autoscaling settings, and tags.\n   *\n   * @param request - The request {@link UpdatePoolRequest}\n   * @returns A Promise of Pool\n   */\n  updatePool = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdatePoolRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/k8s/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/pools/${marshalling.validatePathParam(\"poolId\", request.poolId)}`\n    },\n    marshalling_gen.unmarshalPool\n  );\n  /**\n   * Delete a Pool in a Cluster. Delete a specific pool from a cluster. Note\n   * that all the pool's nodes will also be deleted.\n   *\n   * @param request - The request {@link DeletePoolRequest}\n   * @returns A Promise of Pool\n   */\n  deletePool = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/k8s/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/pools/${marshalling.validatePathParam(\"poolId\", request.poolId)}`\n    },\n    marshalling_gen.unmarshalPool\n  );\n  /**\n   * Fetch node metadata. Rerieve metadata to instantiate a Kapsule/Kosmos node.\n   * This method is not intended to be called by end users but rather\n   * programmatically by the node-installer.\n   *\n   * @param request - The request {@link GetNodeMetadataRequest}\n   * @returns A Promise of NodeMetadata\n   */\n  getNodeMetadata = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/k8s/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/nodes/metadata`\n    },\n    marshalling_gen.unmarshalNodeMetadata\n  );\n  /**\n   * Authenticate Kosmos external node. Creates a newer Kosmos node and returns\n   * its token. This method is not intended to be called by end users but rather\n   * programmatically by the node-installer.\n   *\n   * @param request - The request {@link AuthExternalNodeRequest}\n   * @returns A Promise of ExternalNodeAuth\n   */\n  authExternalNode = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/k8s/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/pools/${marshalling.validatePathParam(\"poolId\", request.poolId)}/external-nodes/auth`\n    },\n    marshalling_gen.unmarshalExternalNodeAuth\n  );\n  /**\n   * Create a Kosmos node. Retrieve metadata for a Kosmos node. This method is\n   * not intended to be called by end users but rather programmatically by the\n   * kapsule-node-agent.\n   *\n   * @param request - The request {@link CreateExternalNodeRequest}\n   * @returns A Promise of ExternalNode\n   */\n  createExternalNode = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/k8s/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/pools/${marshalling.validatePathParam(\"poolId\", request.poolId)}/external-nodes`\n    },\n    marshalling_gen.unmarshalExternalNode\n  );\n  pageOfListNodes = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/k8s/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/clusters/${marshalling.validatePathParam(\"clusterId\", request.clusterId)}/nodes`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"pool_id\", request.poolId],\n        [\"status\", request.status]\n      )\n    },\n    marshalling_gen.unmarshalListNodesResponse\n  );\n  /**\n   * List Nodes in a Cluster. List all the existing nodes for a specific\n   * Kubernetes cluster.\n   *\n   * @param request - The request {@link ListNodesRequest}\n   * @returns A Promise of ListNodesResponse\n   */\n  listNodes = (request) => resourcePaginator.enrichForPagination(\"nodes\", this.pageOfListNodes, request);\n  /**\n   * Get a Node in a Cluster. Retrieve details about a specific Kubernetes Node.\n   *\n   * @param request - The request {@link GetNodeRequest}\n   * @returns A Promise of Node\n   */\n  getNode = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/k8s/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/nodes/${marshalling.validatePathParam(\"nodeId\", request.nodeId)}`\n    },\n    marshalling_gen.unmarshalNode\n  );\n  /**\n   * Waits for {@link Node} to be in a final state.\n   *\n   * @param request - The request {@link GetNodeRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Node\n   */\n  waitForNode = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.NODE_TRANSIENT_STATUSES.includes(res.status))),\n    this.getNode,\n    request,\n    options\n  );\n  /**\n   * Replace a Node in a Cluster. Replace a specific Node. The node will first\n   * be cordoned (scheduling will be disabled on it). The existing pods on the\n   * node will then be drained and rescheduled onto another schedulable node.\n   * Note that when there is not enough space to reschedule all the pods (such\n   * as in a one-node cluster), disruption of your applications can be\n   * expected.\n   *\n   * @deprecated\n   * @param request - The request {@link ReplaceNodeRequest}\n   * @returns A Promise of Node\n   */\n  replaceNode = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/k8s/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/nodes/${marshalling.validatePathParam(\"nodeId\", request.nodeId)}/replace`\n    },\n    marshalling_gen.unmarshalNode\n  );\n  /**\n   * Reboot a Node in a Cluster. Reboot a specific Node. The node will first be\n   * cordoned (scheduling will be disabled on it). The existing pods on the node\n   * will then be drained and rescheduled onto another schedulable node. Note\n   * that when there is not enough space to reschedule all the pods (such as in\n   * a one-node cluster), disruption of your applications can be expected.\n   *\n   * @param request - The request {@link RebootNodeRequest}\n   * @returns A Promise of Node\n   */\n  rebootNode = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/k8s/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/nodes/${marshalling.validatePathParam(\"nodeId\", request.nodeId)}/reboot`\n    },\n    marshalling_gen.unmarshalNode\n  );\n  /**\n   * Delete a Node in a Cluster. Delete a specific Node. Note that when there is\n   * not enough space to reschedule all the pods (such as in a one-node\n   * cluster), disruption of your applications can be expected.\n   *\n   * @param request - The request {@link DeleteNodeRequest}\n   * @returns A Promise of Node\n   */\n  deleteNode = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/k8s/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/nodes/${marshalling.validatePathParam(\"nodeId\", request.nodeId)}`,\n      urlParams: marshalling.urlParams(\n        [\"replace\", request.replace],\n        [\"skip_drain\", request.skipDrain]\n      )\n    },\n    marshalling_gen.unmarshalNode\n  );\n  /**\n   * List all available Versions. List all available versions for the creation\n   * of a new Kubernetes cluster.\n   *\n   * @param request - The request {@link ListVersionsRequest}\n   * @returns A Promise of ListVersionsResponse\n   */\n  listVersions = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/k8s/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/versions`\n    },\n    marshalling_gen.unmarshalListVersionsResponse\n  );\n  /**\n   * Get a Version. Retrieve a specific Kubernetes version and its details.\n   *\n   * @param request - The request {@link GetVersionRequest}\n   * @returns A Promise of Version\n   */\n  getVersion = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/k8s/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/versions/${marshalling.validatePathParam(\"versionName\", request.versionName)}`\n    },\n    marshalling_gen.unmarshalVersion\n  );\n  pageOfListClusterTypes = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/k8s/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/cluster-types`,\n      urlParams: marshalling.urlParams(\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListClusterTypesResponse\n  );\n  /**\n   * List cluster types. List available cluster types and their technical\n   * details.\n   *\n   * @param request - The request {@link ListClusterTypesRequest}\n   * @returns A Promise of ListClusterTypesResponse\n   */\n  listClusterTypes = (request = {}) => resourcePaginator.enrichForPagination(\"clusterTypes\", this.pageOfListClusterTypes, request);\n}\nexports.API = API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nclass K8SUtilsAPI extends api_gen.API {\n  /**\n   * Get configuration of a kube cluster.\n   *\n   * @param request - The request {@link GetClusterKubeConfigRequest}\n   * @returns A Promise of Blob\n   */\n  getClusterKubeConfig = (request) => this._getClusterKubeConfig(request);\n}\nexports.K8SUtilsAPI = K8SUtilsAPI;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst CLUSTER_TRANSIENT_STATUSES = [\n  \"creating\",\n  \"deleting\",\n  \"updating\"\n];\nconst NODE_TRANSIENT_STATUSES = [\n  \"creating\",\n  \"deleting\",\n  \"rebooting\",\n  \"upgrading\",\n  \"starting\",\n  \"registering\"\n];\nconst POOL_TRANSIENT_STATUSES = [\n  \"deleting\",\n  \"scaling\",\n  \"upgrading\"\n];\nexports.CLUSTER_TRANSIENT_STATUSES = CLUSTER_TRANSIENT_STATUSES;\nexports.NODE_TRANSIENT_STATUSES = NODE_TRANSIENT_STATUSES;\nexports.POOL_TRANSIENT_STATUSES = POOL_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_utils = require(\"./api.utils.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst validationRules_gen = require(\"./validation-rules.gen.cjs\");\nexports.API = api_utils.K8SUtilsAPI;\nexports.CLUSTER_TRANSIENT_STATUSES = content_gen.CLUSTER_TRANSIENT_STATUSES;\nexports.NODE_TRANSIENT_STATUSES = content_gen.NODE_TRANSIENT_STATUSES;\nexports.POOL_TRANSIENT_STATUSES = content_gen.POOL_TRANSIENT_STATUSES;\nexports.ValidationRules = validationRules_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst randomName = require(\"@scaleway/random-name\");\nconst json = require(\"../../../helpers/json.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst unmarshalPoolUpgradePolicy = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'PoolUpgradePolicy' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    maxSurge: data.max_surge,\n    maxUnavailable: data.max_unavailable\n  };\n};\nconst unmarshalPool = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Pool' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    autohealing: data.autohealing,\n    autoscaling: data.autoscaling,\n    clusterId: data.cluster_id,\n    containerRuntime: data.container_runtime,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    id: data.id,\n    kubeletArgs: data.kubelet_args,\n    maxSize: data.max_size,\n    minSize: data.min_size,\n    name: data.name,\n    nodeType: data.node_type,\n    placementGroupId: data.placement_group_id,\n    publicIpDisabled: data.public_ip_disabled,\n    region: data.region,\n    rootVolumeSize: data.root_volume_size,\n    rootVolumeType: data.root_volume_type,\n    size: data.size,\n    status: data.status,\n    tags: data.tags,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    upgradePolicy: data.upgrade_policy ? unmarshalPoolUpgradePolicy(data.upgrade_policy) : void 0,\n    version: data.version,\n    zone: data.zone\n  };\n};\nconst unmarshalVersion = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Version' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    availableAdmissionPlugins: data.available_admission_plugins,\n    availableCnis: data.available_cnis,\n    availableContainerRuntimes: data.available_container_runtimes,\n    availableFeatureGates: data.available_feature_gates,\n    availableKubeletArgs: data.available_kubelet_args,\n    label: data.label,\n    name: data.name,\n    region: data.region\n  };\n};\nconst unmarshalMaintenanceWindow = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'MaintenanceWindow' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    day: data.day,\n    startHour: data.start_hour\n  };\n};\nconst unmarshalClusterAutoUpgrade = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ClusterAutoUpgrade' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    enabled: data.enabled,\n    maintenanceWindow: data.maintenance_window ? unmarshalMaintenanceWindow(data.maintenance_window) : void 0\n  };\n};\nconst unmarshalClusterAutoscalerConfig = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ClusterAutoscalerConfig' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    balanceSimilarNodeGroups: data.balance_similar_node_groups,\n    estimator: data.estimator,\n    expander: data.expander,\n    expendablePodsPriorityCutoff: data.expendable_pods_priority_cutoff,\n    ignoreDaemonsetsUtilization: data.ignore_daemonsets_utilization,\n    maxGracefulTerminationSec: data.max_graceful_termination_sec,\n    scaleDownDelayAfterAdd: data.scale_down_delay_after_add,\n    scaleDownDisabled: data.scale_down_disabled,\n    scaleDownUnneededTime: data.scale_down_unneeded_time,\n    scaleDownUtilizationThreshold: data.scale_down_utilization_threshold\n  };\n};\nconst unmarshalClusterOpenIDConnectConfig = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ClusterOpenIDConnectConfig' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    clientId: data.client_id,\n    groupsClaim: data.groups_claim,\n    groupsPrefix: data.groups_prefix,\n    issuerUrl: data.issuer_url,\n    requiredClaim: data.required_claim,\n    usernameClaim: data.username_claim,\n    usernamePrefix: data.username_prefix\n  };\n};\nconst unmarshalCluster = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Cluster' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    admissionPlugins: data.admission_plugins,\n    apiserverCertSans: data.apiserver_cert_sans,\n    autoUpgrade: data.auto_upgrade ? unmarshalClusterAutoUpgrade(data.auto_upgrade) : void 0,\n    autoscalerConfig: data.autoscaler_config ? unmarshalClusterAutoscalerConfig(data.autoscaler_config) : void 0,\n    clusterUrl: data.cluster_url,\n    cni: data.cni,\n    commitmentEndsAt: marshalling.unmarshalDate(data.commitment_ends_at),\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    description: data.description,\n    dnsWildcard: data.dns_wildcard,\n    featureGates: data.feature_gates,\n    fullVpcIntegratonEnabled: data.full_vpc_integraton_enabled,\n    id: data.id,\n    name: data.name,\n    openIdConnectConfig: data.open_id_connect_config ? unmarshalClusterOpenIDConnectConfig(data.open_id_connect_config) : void 0,\n    organizationId: data.organization_id,\n    privateNetworkId: data.private_network_id,\n    projectId: data.project_id,\n    region: data.region,\n    routedIpEnabled: data.routed_ip_enabled,\n    sbsCsiEnabled: data.sbs_csi_enabled,\n    status: data.status,\n    tags: data.tags,\n    type: data.type,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    upgradeAvailable: data.upgrade_available,\n    version: data.version\n  };\n};\nconst unmarshalNode = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Node' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    clusterId: data.cluster_id,\n    conditions: data.conditions ? data.conditions : void 0,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    errorMessage: data.error_message,\n    id: data.id,\n    name: data.name,\n    poolId: data.pool_id,\n    providerId: data.provider_id,\n    publicIpV4: data.public_ip_v4,\n    publicIpV6: data.public_ip_v6,\n    region: data.region,\n    status: data.status,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalExternalNodeCoreV1Taint = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ExternalNodeCoreV1Taint' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    effect: data.effect,\n    key: data.key,\n    value: data.value\n  };\n};\nconst unmarshalExternalNode = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ExternalNode' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    clusterCa: data.cluster_ca,\n    clusterUrl: data.cluster_url,\n    cniPluginsVersion: data.cni_plugins_version,\n    containerdVersion: data.containerd_version,\n    externalIp: data.external_ip,\n    id: data.id,\n    kubeToken: data.kube_token,\n    kubeletConfig: data.kubelet_config,\n    name: data.name,\n    nodeLabels: data.node_labels,\n    nodeTaints: marshalling.unmarshalArrayOfObject(\n      data.node_taints,\n      unmarshalExternalNodeCoreV1Taint\n    ),\n    poolVersion: data.pool_version,\n    runcVersion: data.runc_version\n  };\n};\nconst unmarshalExternalNodeAuth = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ExternalNodeAuth' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    apiUrl: data.api_url,\n    nodeToken: data.node_token\n  };\n};\nconst unmarshalClusterType = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ClusterType' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    auditLogsSupported: data.audit_logs_supported,\n    availability: data.availability,\n    commitmentDelay: data.commitment_delay,\n    dedicated: data.dedicated,\n    maxEtcdSize: data.max_etcd_size,\n    maxNodes: data.max_nodes,\n    memory: data.memory,\n    name: data.name,\n    resiliency: data.resiliency,\n    sla: data.sla\n  };\n};\nconst unmarshalListClusterAvailableTypesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListClusterAvailableTypesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    clusterTypes: marshalling.unmarshalArrayOfObject(\n      data.cluster_types,\n      unmarshalClusterType\n    ),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListClusterAvailableVersionsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListClusterAvailableVersionsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    versions: marshalling.unmarshalArrayOfObject(data.versions, unmarshalVersion)\n  };\n};\nconst unmarshalListClusterTypesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListClusterTypesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    clusterTypes: marshalling.unmarshalArrayOfObject(\n      data.cluster_types,\n      unmarshalClusterType\n    ),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListClustersResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListClustersResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    clusters: marshalling.unmarshalArrayOfObject(data.clusters, unmarshalCluster),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListNodesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListNodesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    nodes: marshalling.unmarshalArrayOfObject(data.nodes, unmarshalNode),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListPoolsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListPoolsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    pools: marshalling.unmarshalArrayOfObject(data.pools, unmarshalPool),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListVersionsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListVersionsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    versions: marshalling.unmarshalArrayOfObject(data.versions, unmarshalVersion)\n  };\n};\nconst unmarshalNodeMetadataCoreV1Taint = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'NodeMetadataCoreV1Taint' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    effect: data.effect,\n    key: data.key,\n    value: data.value\n  };\n};\nconst unmarshalNodeMetadata = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'NodeMetadata' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    clusterCa: data.cluster_ca,\n    clusterUrl: data.cluster_url,\n    credentialProviderConfig: data.credential_provider_config,\n    externalIp: data.external_ip,\n    fullIsolation: data.full_isolation,\n    hasGpu: data.has_gpu,\n    id: data.id,\n    kapsuleIfaceMac: data.kapsule_iface_mac,\n    kubeletConfig: data.kubelet_config,\n    name: data.name,\n    nodeLabels: data.node_labels,\n    nodeTaints: marshalling.unmarshalArrayOfObject(\n      data.node_taints,\n      unmarshalNodeMetadataCoreV1Taint\n    ),\n    poolVersion: data.pool_version,\n    privateNetworkMode: data.private_network_mode\n  };\n};\nconst marshalMaintenanceWindow = (request, defaults) => ({\n  day: request.day,\n  start_hour: request.startHour\n});\nconst marshalCreateClusterRequestPoolConfigUpgradePolicy = (request, defaults) => ({\n  max_surge: request.maxSurge,\n  max_unavailable: request.maxUnavailable\n});\nconst marshalCreateClusterRequestAutoUpgrade = (request, defaults) => ({\n  enable: request.enable,\n  maintenance_window: request.maintenanceWindow !== void 0 ? marshalMaintenanceWindow(request.maintenanceWindow) : void 0\n});\nconst marshalCreateClusterRequestAutoscalerConfig = (request, defaults) => ({\n  balance_similar_node_groups: request.balanceSimilarNodeGroups,\n  estimator: request.estimator,\n  expander: request.expander,\n  expendable_pods_priority_cutoff: request.expendablePodsPriorityCutoff,\n  ignore_daemonsets_utilization: request.ignoreDaemonsetsUtilization,\n  max_graceful_termination_sec: request.maxGracefulTerminationSec,\n  scale_down_delay_after_add: request.scaleDownDelayAfterAdd,\n  scale_down_disabled: request.scaleDownDisabled,\n  scale_down_unneeded_time: request.scaleDownUnneededTime,\n  scale_down_utilization_threshold: request.scaleDownUtilizationThreshold\n});\nconst marshalCreateClusterRequestOpenIDConnectConfig = (request, defaults) => ({\n  client_id: request.clientId,\n  groups_claim: request.groupsClaim,\n  groups_prefix: request.groupsPrefix,\n  issuer_url: request.issuerUrl,\n  required_claim: request.requiredClaim,\n  username_claim: request.usernameClaim,\n  username_prefix: request.usernamePrefix\n});\nconst marshalCreateClusterRequestPoolConfig = (request, defaults) => ({\n  autohealing: request.autohealing,\n  autoscaling: request.autoscaling,\n  container_runtime: request.containerRuntime,\n  kubelet_args: request.kubeletArgs,\n  max_size: request.maxSize,\n  min_size: request.minSize,\n  name: request.name,\n  node_type: request.nodeType,\n  placement_group_id: request.placementGroupId,\n  public_ip_disabled: request.publicIpDisabled,\n  root_volume_size: request.rootVolumeSize,\n  root_volume_type: request.rootVolumeType,\n  size: request.size,\n  tags: request.tags,\n  upgrade_policy: request.upgradePolicy !== void 0 ? marshalCreateClusterRequestPoolConfigUpgradePolicy(\n    request.upgradePolicy\n  ) : void 0,\n  zone: request.zone\n});\nconst marshalCreateClusterRequest = (request, defaults) => ({\n  admission_plugins: request.admissionPlugins,\n  apiserver_cert_sans: request.apiserverCertSans,\n  auto_upgrade: request.autoUpgrade !== void 0 ? marshalCreateClusterRequestAutoUpgrade(request.autoUpgrade) : void 0,\n  autoscaler_config: request.autoscalerConfig !== void 0 ? marshalCreateClusterRequestAutoscalerConfig(\n    request.autoscalerConfig\n  ) : void 0,\n  cni: request.cni,\n  description: request.description,\n  feature_gates: request.featureGates,\n  name: request.name || randomName(\"k8s\"),\n  open_id_connect_config: request.openIdConnectConfig !== void 0 ? marshalCreateClusterRequestOpenIDConnectConfig(\n    request.openIdConnectConfig\n  ) : void 0,\n  pools: request.pools !== void 0 ? request.pools.map(\n    (elt) => marshalCreateClusterRequestPoolConfig(elt)\n  ) : void 0,\n  private_network_id: request.privateNetworkId,\n  tags: request.tags,\n  type: request.type,\n  version: request.version,\n  ...marshalling.resolveOneOf([\n    {\n      default: defaults.defaultProjectId,\n      param: \"project_id\",\n      value: request.projectId\n    },\n    {\n      default: defaults.defaultOrganizationId,\n      param: \"organization_id\",\n      value: request.organizationId\n    }\n  ])\n});\nconst marshalCreatePoolRequestUpgradePolicy = (request, defaults) => ({\n  max_surge: request.maxSurge,\n  max_unavailable: request.maxUnavailable\n});\nconst marshalCreatePoolRequest = (request, defaults) => ({\n  autohealing: request.autohealing,\n  autoscaling: request.autoscaling,\n  container_runtime: request.containerRuntime,\n  kubelet_args: request.kubeletArgs !== void 0 ? request.kubeletArgs : void 0,\n  max_size: request.maxSize,\n  min_size: request.minSize,\n  name: request.name || randomName(\"pool\"),\n  node_type: request.nodeType,\n  placement_group_id: request.placementGroupId,\n  public_ip_disabled: request.publicIpDisabled,\n  root_volume_size: request.rootVolumeSize,\n  root_volume_type: request.rootVolumeType,\n  size: request.size,\n  tags: request.tags,\n  upgrade_policy: request.upgradePolicy !== void 0 ? marshalCreatePoolRequestUpgradePolicy(request.upgradePolicy) : void 0,\n  zone: request.zone ?? defaults.defaultZone\n});\nconst marshalSetClusterTypeRequest = (request, defaults) => ({\n  type: request.type\n});\nconst marshalUpdateClusterRequestAutoUpgrade = (request, defaults) => ({\n  enable: request.enable,\n  maintenance_window: request.maintenanceWindow !== void 0 ? marshalMaintenanceWindow(request.maintenanceWindow) : void 0\n});\nconst marshalUpdateClusterRequestAutoscalerConfig = (request, defaults) => ({\n  balance_similar_node_groups: request.balanceSimilarNodeGroups,\n  estimator: request.estimator,\n  expander: request.expander,\n  expendable_pods_priority_cutoff: request.expendablePodsPriorityCutoff,\n  ignore_daemonsets_utilization: request.ignoreDaemonsetsUtilization,\n  max_graceful_termination_sec: request.maxGracefulTerminationSec,\n  scale_down_delay_after_add: request.scaleDownDelayAfterAdd,\n  scale_down_disabled: request.scaleDownDisabled,\n  scale_down_unneeded_time: request.scaleDownUnneededTime,\n  scale_down_utilization_threshold: request.scaleDownUtilizationThreshold\n});\nconst marshalUpdateClusterRequestOpenIDConnectConfig = (request, defaults) => ({\n  client_id: request.clientId,\n  groups_claim: request.groupsClaim,\n  groups_prefix: request.groupsPrefix,\n  issuer_url: request.issuerUrl,\n  required_claim: request.requiredClaim,\n  username_claim: request.usernameClaim,\n  username_prefix: request.usernamePrefix\n});\nconst marshalUpdateClusterRequest = (request, defaults) => ({\n  admission_plugins: request.admissionPlugins,\n  apiserver_cert_sans: request.apiserverCertSans,\n  auto_upgrade: request.autoUpgrade !== void 0 ? marshalUpdateClusterRequestAutoUpgrade(request.autoUpgrade) : void 0,\n  autoscaler_config: request.autoscalerConfig !== void 0 ? marshalUpdateClusterRequestAutoscalerConfig(\n    request.autoscalerConfig\n  ) : void 0,\n  description: request.description,\n  feature_gates: request.featureGates,\n  name: request.name,\n  open_id_connect_config: request.openIdConnectConfig !== void 0 ? marshalUpdateClusterRequestOpenIDConnectConfig(\n    request.openIdConnectConfig\n  ) : void 0,\n  tags: request.tags\n});\nconst marshalUpdatePoolRequestUpgradePolicy = (request, defaults) => ({\n  max_surge: request.maxSurge,\n  max_unavailable: request.maxUnavailable\n});\nconst marshalUpdatePoolRequest = (request, defaults) => ({\n  autohealing: request.autohealing,\n  autoscaling: request.autoscaling,\n  kubelet_args: request.kubeletArgs,\n  max_size: request.maxSize,\n  min_size: request.minSize,\n  size: request.size,\n  tags: request.tags,\n  upgrade_policy: request.upgradePolicy !== void 0 ? marshalUpdatePoolRequestUpgradePolicy(request.upgradePolicy) : void 0\n});\nconst marshalUpgradeClusterRequest = (request, defaults) => ({\n  upgrade_pools: request.upgradePools,\n  version: request.version\n});\nconst marshalUpgradePoolRequest = (request, defaults) => ({\n  version: request.version\n});\nexports.marshalCreateClusterRequest = marshalCreateClusterRequest;\nexports.marshalCreatePoolRequest = marshalCreatePoolRequest;\nexports.marshalSetClusterTypeRequest = marshalSetClusterTypeRequest;\nexports.marshalUpdateClusterRequest = marshalUpdateClusterRequest;\nexports.marshalUpdatePoolRequest = marshalUpdatePoolRequest;\nexports.marshalUpgradeClusterRequest = marshalUpgradeClusterRequest;\nexports.marshalUpgradePoolRequest = marshalUpgradePoolRequest;\nexports.unmarshalCluster = unmarshalCluster;\nexports.unmarshalExternalNode = unmarshalExternalNode;\nexports.unmarshalExternalNodeAuth = unmarshalExternalNodeAuth;\nexports.unmarshalListClusterAvailableTypesResponse = unmarshalListClusterAvailableTypesResponse;\nexports.unmarshalListClusterAvailableVersionsResponse = unmarshalListClusterAvailableVersionsResponse;\nexports.unmarshalListClusterTypesResponse = unmarshalListClusterTypesResponse;\nexports.unmarshalListClustersResponse = unmarshalListClustersResponse;\nexports.unmarshalListNodesResponse = unmarshalListNodesResponse;\nexports.unmarshalListPoolsResponse = unmarshalListPoolsResponse;\nexports.unmarshalListVersionsResponse = unmarshalListVersionsResponse;\nexports.unmarshalNode = unmarshalNode;\nexports.unmarshalNodeMetadata = unmarshalNodeMetadata;\nexports.unmarshalPool = unmarshalPool;\nexports.unmarshalVersion = unmarshalVersion;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst CreateClusterRequest = {\n  description: {\n    maxLength: 4096\n  },\n  name: {\n    maxLength: 100,\n    minLength: 1\n  },\n  type: {\n    maxLength: 100\n  },\n  version: {\n    maxLength: 10\n  }\n};\nconst CreateClusterRequestAutoscalerConfig = {\n  scaleDownDelayAfterAdd: {\n    maxLength: 100\n  },\n  scaleDownUtilizationThreshold: {\n    greaterThan: 0,\n    lessThan: 1\n  }\n};\nconst CreateClusterRequestOpenIDConnectConfig = {\n  clientId: {\n    maxLength: 255,\n    minLength: 1\n  },\n  groupsPrefix: {\n    maxLength: 100,\n    minLength: 1\n  },\n  issuerUrl: {\n    maxLength: 255\n  },\n  usernameClaim: {\n    maxLength: 100,\n    minLength: 1\n  },\n  usernamePrefix: {\n    maxLength: 100,\n    minLength: 1\n  }\n};\nconst CreateClusterRequestPoolConfig = {\n  name: {\n    maxLength: 100,\n    minLength: 1\n  }\n};\nconst CreatePoolRequest = {\n  name: {\n    maxLength: 100,\n    minLength: 1\n  }\n};\nconst ListClusterTypesRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nconst ListClustersRequest = {\n  name: {\n    minLength: 1\n  },\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nconst ListNodesRequest = {\n  name: {\n    minLength: 1\n  },\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nconst ListPoolsRequest = {\n  name: {\n    minLength: 1\n  },\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nconst MaintenanceWindow = {\n  startHour: {\n    lessThanOrEqual: 23\n  }\n};\nconst SetClusterTypeRequest = {\n  type: {\n    maxLength: 100\n  }\n};\nconst UpdateClusterRequest = {\n  description: {\n    maxLength: 4096\n  },\n  name: {\n    maxLength: 100,\n    minLength: 1\n  }\n};\nconst UpdateClusterRequestAutoscalerConfig = {\n  scaleDownDelayAfterAdd: {\n    maxLength: 100\n  },\n  scaleDownUtilizationThreshold: {\n    greaterThan: 0,\n    lessThan: 1\n  }\n};\nconst UpdateClusterRequestOpenIDConnectConfig = {\n  clientId: {\n    maxLength: 255,\n    minLength: 1\n  },\n  groupsPrefix: {\n    maxLength: 100,\n    minLength: 1\n  },\n  issuerUrl: {\n    maxLength: 255\n  },\n  usernameClaim: {\n    maxLength: 100,\n    minLength: 1\n  },\n  usernamePrefix: {\n    maxLength: 100,\n    minLength: 1\n  }\n};\nconst UpgradeClusterRequest = {\n  version: {\n    maxLength: 10\n  }\n};\nexports.CreateClusterRequest = CreateClusterRequest;\nexports.CreateClusterRequestAutoscalerConfig = CreateClusterRequestAutoscalerConfig;\nexports.CreateClusterRequestOpenIDConnectConfig = CreateClusterRequestOpenIDConnectConfig;\nexports.CreateClusterRequestPoolConfig = CreateClusterRequestPoolConfig;\nexports.CreatePoolRequest = CreatePoolRequest;\nexports.ListClusterTypesRequest = ListClusterTypesRequest;\nexports.ListClustersRequest = ListClustersRequest;\nexports.ListNodesRequest = ListNodesRequest;\nexports.ListPoolsRequest = ListPoolsRequest;\nexports.MaintenanceWindow = MaintenanceWindow;\nexports.SetClusterTypeRequest = SetClusterTypeRequest;\nexports.UpdateClusterRequest = UpdateClusterRequest;\nexports.UpdateClusterRequestAutoscalerConfig = UpdateClusterRequestAutoscalerConfig;\nexports.UpdateClusterRequestOpenIDConnectConfig = UpdateClusterRequestOpenIDConnectConfig;\nexports.UpgradeClusterRequest = UpgradeClusterRequest;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index_gen = require(\"./v1alpha1/index.gen.cjs\");\nexports.v1alpha1 = index_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass API extends api.API {\n  /** Lists the available regions of the API. */\n  static LOCALITIES = [\"fr-par\", \"nl-ams\", \"pl-waw\"];\n  /**\n   * Create a key. Create a key in a given region specified by the `region`\n   * parameter. Keys only support symmetric encryption. You can use keys to\n   * encrypt or decrypt arbitrary payloads, or to generate data encryption keys\n   * that can be used without being stored in Key Manager.\n   *\n   * @param request - The request {@link CreateKeyRequest}\n   * @returns A Promise of Key\n   */\n  createKey = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateKeyRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/key-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/keys`\n    },\n    marshalling_gen.unmarshalKey\n  );\n  /**\n   * Get key metadata. Retrieve the metadata of a key specified by the `region`\n   * and `key_id` parameters.\n   *\n   * @param request - The request {@link GetKeyRequest}\n   * @returns A Promise of Key\n   */\n  getKey = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/key-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/keys/${marshalling.validatePathParam(\"keyId\", request.keyId)}`\n    },\n    marshalling_gen.unmarshalKey\n  );\n  /**\n   * Update a key. Update a key's metadata (name, description and tags),\n   * specified by the `key_id` and `region` parameters.\n   *\n   * @param request - The request {@link UpdateKeyRequest}\n   * @returns A Promise of Key\n   */\n  updateKey = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateKeyRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/key-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/keys/${marshalling.validatePathParam(\"keyId\", request.keyId)}`\n    },\n    marshalling_gen.unmarshalKey\n  );\n  /**\n   * Delete a key. Delete an existing key specified by the `region` and `key_id`\n   * parameters. Deleting a key is permanent and cannot be undone. All data\n   * encrypted using this key, including data encryption keys, will become\n   * unusable.\n   *\n   * @param request - The request {@link DeleteKeyRequest}\n   */\n  deleteKey = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/key-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/keys/${marshalling.validatePathParam(\"keyId\", request.keyId)}`\n  });\n  /**\n   * Rotate a key. Generate a new version of an existing key with randomly\n   * generated key material. Rotated keys can still be used to decrypt\n   * previously encrypted data. The key's new material will be used for\n   * subsequent encryption operations and data key generation.\n   *\n   * @param request - The request {@link RotateKeyRequest}\n   * @returns A Promise of Key\n   */\n  rotateKey = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/key-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/keys/${marshalling.validatePathParam(\"keyId\", request.keyId)}/rotate`\n    },\n    marshalling_gen.unmarshalKey\n  );\n  /**\n   * Apply key protection. Apply key protection to a given key specified by the\n   * `key_id` parameter. Applying key protection means that your key can be used\n   * and modified, but it cannot be deleted.\n   *\n   * @param request - The request {@link ProtectKeyRequest}\n   * @returns A Promise of Key\n   */\n  protectKey = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/key-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/keys/${marshalling.validatePathParam(\"keyId\", request.keyId)}/protect`\n    },\n    marshalling_gen.unmarshalKey\n  );\n  /**\n   * Remove key protection. Remove key protection from a given key specified by\n   * the `key_id` parameter. Removing key protection means that your key can be\n   * deleted anytime.\n   *\n   * @param request - The request {@link UnprotectKeyRequest}\n   * @returns A Promise of Key\n   */\n  unprotectKey = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/key-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/keys/${marshalling.validatePathParam(\"keyId\", request.keyId)}/unprotect`\n    },\n    marshalling_gen.unmarshalKey\n  );\n  /**\n   * Enable key. Enable a given key to be used for cryptographic operations.\n   * Enabling a key allows you to make a disabled key usable again. You must\n   * specify the `region` and `key_id` parameters.\n   *\n   * @param request - The request {@link EnableKeyRequest}\n   * @returns A Promise of Key\n   */\n  enableKey = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/key-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/keys/${marshalling.validatePathParam(\"keyId\", request.keyId)}/enable`\n    },\n    marshalling_gen.unmarshalKey\n  );\n  /**\n   * Disable key. Disable a given key to be used for cryptographic operations.\n   * Disabling a key renders it unusable. You must specify the `region` and\n   * `key_id` parameters.\n   *\n   * @param request - The request {@link DisableKeyRequest}\n   * @returns A Promise of Key\n   */\n  disableKey = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/key-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/keys/${marshalling.validatePathParam(\"keyId\", request.keyId)}/disable`\n    },\n    marshalling_gen.unmarshalKey\n  );\n  pageOfListKeys = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/key-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/keys`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId],\n        [\"tags\", request.tags]\n      )\n    },\n    marshalling_gen.unmarshalListKeysResponse\n  );\n  /**\n   * List keys. Retrieve the list of keys created within all Projects of an\n   * Organization or in a given Project. You must specify the `region`, and\n   * either the `organization_id` or the `project_id`.\n   *\n   * @param request - The request {@link ListKeysRequest}\n   * @returns A Promise of ListKeysResponse\n   */\n  listKeys = (request = {}) => resourcePaginator.enrichForPagination(\"keys\", this.pageOfListKeys, request);\n  /**\n   * Generate a data encryption key. Generate a new data encryption key to use\n   * for cryptographic operations outside of Key Manager. Note that Key Manager\n   * does not store your data encryption key. The data encryption key is\n   * encrypted and must be decrypted using the key you have created in Key\n   * Manager. The data encryption key's plaintext is returned in the response\n   * object, for immediate usage.\n   *\n   * Always store the data encryption key's ciphertext, rather than its\n   * plaintext, which must not be stored. To retrieve your key's plaintext, call\n   * the Decrypt endpoint with your key's ID and ciphertext.\n   *\n   * @param request - The request {@link GenerateDataKeyRequest}\n   * @returns A Promise of DataKey\n   */\n  generateDataKey = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalGenerateDataKeyRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/key-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/keys/${marshalling.validatePathParam(\"keyId\", request.keyId)}/generate-data-key`\n    },\n    marshalling_gen.unmarshalDataKey\n  );\n  /**\n   * Encrypt data. Encrypt data using an existing key, specified by the `key_id`\n   * parameter. Only keys with a usage set to **symmetric_encryption** are\n   * supported by this method. The maximum payload size that can be encrypted is\n   * 64KB of plaintext.\n   *\n   * @param request - The request {@link EncryptRequest}\n   * @returns A Promise of EncryptResponse\n   */\n  encrypt = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalEncryptRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/key-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/keys/${marshalling.validatePathParam(\"keyId\", request.keyId)}/encrypt`\n    },\n    marshalling_gen.unmarshalEncryptResponse\n  );\n  /**\n   * Decrypt data. Decrypt data using an existing key, specified by the `key_id`\n   * parameter. The maximum payload size that can be decrypted is the result of\n   * the encryption of 64KB of data (around 131KB).\n   *\n   * @param request - The request {@link DecryptRequest}\n   * @returns A Promise of DecryptResponse\n   */\n  decrypt = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalDecryptRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/key-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/keys/${marshalling.validatePathParam(\"keyId\", request.keyId)}/decrypt`\n    },\n    marshalling_gen.unmarshalDecryptResponse\n  );\n  /**\n   * Import key material. Import key material to use to derive a new\n   * cryptographic key. The key's origin must be `external`.\n   *\n   * @param request - The request {@link ImportKeyMaterialRequest}\n   * @returns A Promise of Key\n   */\n  importKeyMaterial = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalImportKeyMaterialRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/key-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/keys/${marshalling.validatePathParam(\"keyId\", request.keyId)}/import-key-material`\n    },\n    marshalling_gen.unmarshalKey\n  );\n  /**\n   * Delete key material. Delete previously imported key material. This renders\n   * the associated cryptographic key unusable for any operation. The key's\n   * origin must be `external`.\n   *\n   * @param request - The request {@link DeleteKeyMaterialRequest}\n   */\n  deleteKeyMaterial = (request) => this.client.fetch({\n    body: \"{}\",\n    headers: jsonContentHeaders,\n    method: \"POST\",\n    path: `/key-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/keys/${marshalling.validatePathParam(\"keyId\", request.keyId)}/delete-key-material`\n  });\n}\nexports.API = API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nexports.API = api_gen.API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst json = require(\"../../../helpers/json.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst unmarshalKeyRotationPolicy = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'KeyRotationPolicy' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    nextRotationAt: marshalling.unmarshalDate(data.next_rotation_at),\n    rotationPeriod: data.rotation_period\n  };\n};\nconst unmarshalKeyUsage = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'KeyUsage' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    symmetricEncryption: data.symmetric_encryption ? data.symmetric_encryption : void 0\n  };\n};\nconst unmarshalKey = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Key' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    description: data.description,\n    id: data.id,\n    locked: data.locked,\n    name: data.name,\n    origin: data.origin,\n    projectId: data.project_id,\n    protected: data.protected,\n    region: data.region,\n    rotatedAt: marshalling.unmarshalDate(data.rotated_at),\n    rotationCount: data.rotation_count,\n    rotationPolicy: data.rotation_policy ? unmarshalKeyRotationPolicy(data.rotation_policy) : void 0,\n    state: data.state,\n    tags: data.tags,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    usage: data.usage ? unmarshalKeyUsage(data.usage) : void 0\n  };\n};\nconst unmarshalDataKey = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DataKey' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    algorithm: data.algorithm,\n    ciphertext: data.ciphertext,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    keyId: data.key_id,\n    plaintext: data.plaintext\n  };\n};\nconst unmarshalDecryptResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DecryptResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    ciphertext: data.ciphertext,\n    keyId: data.key_id,\n    plaintext: data.plaintext\n  };\n};\nconst unmarshalEncryptResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'EncryptResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    ciphertext: data.ciphertext,\n    keyId: data.key_id\n  };\n};\nconst unmarshalListKeysResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListKeysResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    keys: marshalling.unmarshalArrayOfObject(data.keys, unmarshalKey),\n    totalCount: data.total_count\n  };\n};\nconst marshalKeyRotationPolicy = (request, defaults) => ({\n  next_rotation_at: request.nextRotationAt,\n  rotation_period: request.rotationPeriod\n});\nconst marshalKeyUsage = (request, defaults) => ({\n  ...marshalling.resolveOneOf([\n    { param: \"symmetric_encryption\", value: request.symmetricEncryption }\n  ])\n});\nconst marshalCreateKeyRequest = (request, defaults) => ({\n  description: request.description,\n  name: request.name,\n  origin: request.origin,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  rotation_policy: request.rotationPolicy !== void 0 ? marshalKeyRotationPolicy(request.rotationPolicy) : void 0,\n  tags: request.tags,\n  unprotected: request.unprotected,\n  usage: request.usage !== void 0 ? marshalKeyUsage(request.usage) : void 0\n});\nconst marshalDecryptRequest = (request, defaults) => ({\n  associated_data: request.associatedData,\n  ciphertext: request.ciphertext\n});\nconst marshalEncryptRequest = (request, defaults) => ({\n  associated_data: request.associatedData,\n  plaintext: request.plaintext\n});\nconst marshalGenerateDataKeyRequest = (request, defaults) => ({\n  algorithm: request.algorithm,\n  without_plaintext: request.withoutPlaintext\n});\nconst marshalImportKeyMaterialRequest = (request, defaults) => ({\n  key_material: request.keyMaterial,\n  salt: request.salt\n});\nconst marshalUpdateKeyRequest = (request, defaults) => ({\n  description: request.description,\n  name: request.name,\n  rotation_policy: request.rotationPolicy !== void 0 ? marshalKeyRotationPolicy(request.rotationPolicy) : void 0,\n  tags: request.tags\n});\nexports.marshalCreateKeyRequest = marshalCreateKeyRequest;\nexports.marshalDecryptRequest = marshalDecryptRequest;\nexports.marshalEncryptRequest = marshalEncryptRequest;\nexports.marshalGenerateDataKeyRequest = marshalGenerateDataKeyRequest;\nexports.marshalImportKeyMaterialRequest = marshalImportKeyMaterialRequest;\nexports.marshalUpdateKeyRequest = marshalUpdateKeyRequest;\nexports.unmarshalDataKey = unmarshalDataKey;\nexports.unmarshalDecryptResponse = unmarshalDecryptResponse;\nexports.unmarshalEncryptResponse = unmarshalEncryptResponse;\nexports.unmarshalKey = unmarshalKey;\nexports.unmarshalListKeysResponse = unmarshalListKeysResponse;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index = require(\"./v1/index.cjs\");\nexports.v1 = index;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst intervalRetrier = require(\"../../../internal/async/interval-retrier.cjs\");\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass ZonedAPI extends api.API {\n  /** Lists the available zones of the API. */\n  static LOCALITIES = [\n    \"fr-par-1\",\n    \"fr-par-2\",\n    \"nl-ams-1\",\n    \"nl-ams-2\",\n    \"nl-ams-3\",\n    \"pl-waw-1\",\n    \"pl-waw-2\",\n    \"pl-waw-3\"\n  ];\n  pageOfListLbs = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/lbs`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId],\n        [\"tags\", request.tags]\n      )\n    },\n    marshalling_gen.unmarshalListLbsResponse\n  );\n  /**\n   * List Load Balancers. List all Load Balancers in the specified zone, for a\n   * Scaleway Organization or Scaleway Project. By default, the Load Balancers\n   * returned in the list are ordered by creation date in ascending order,\n   * though this can be modified via the `order_by` field.\n   *\n   * @param request - The request {@link ZonedApiListLbsRequest}\n   * @returns A Promise of ListLbsResponse\n   */\n  listLbs = (request = {}) => resourcePaginator.enrichForPagination(\"lbs\", this.pageOfListLbs, request);\n  /**\n   * Create a Load Balancer. Create a new Load Balancer. Note that the Load\n   * Balancer will be created without frontends or backends; these must be\n   * created separately via the dedicated endpoints.\n   *\n   * @param request - The request {@link ZonedApiCreateLbRequest}\n   * @returns A Promise of Lb\n   */\n  createLb = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalZonedApiCreateLbRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/lbs`\n    },\n    marshalling_gen.unmarshalLb\n  );\n  /**\n   * Get a Load Balancer. Retrieve information about an existing Load Balancer,\n   * specified by its Load Balancer ID. Its full details, including name, status\n   * and IP address, are returned in the response object.\n   *\n   * @param request - The request {@link ZonedApiGetLbRequest}\n   * @returns A Promise of Lb\n   */\n  getLb = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/lbs/${marshalling.validatePathParam(\"lbId\", request.lbId)}`\n    },\n    marshalling_gen.unmarshalLb\n  );\n  /**\n   * Waits for {@link Lb} to be in a final state.\n   *\n   * @param request - The request {@link ZonedApiGetLbRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Lb\n   */\n  waitForLb = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.LB_TRANSIENT_STATUSES.includes(res.status))),\n    this.getLb,\n    request,\n    options\n  );\n  /**\n   * Update a Load Balancer. Update the parameters of an existing Load Balancer,\n   * specified by its Load Balancer ID. Note that the request type is PUT and\n   * not PATCH. You must set all parameters.\n   *\n   * @param request - The request {@link ZonedApiUpdateLbRequest}\n   * @returns A Promise of Lb\n   */\n  updateLb = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalZonedApiUpdateLbRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/lbs/${marshalling.validatePathParam(\"lbId\", request.lbId)}`\n    },\n    marshalling_gen.unmarshalLb\n  );\n  /**\n   * Delete a Load Balancer. Delete an existing Load Balancer, specified by its\n   * Load Balancer ID. Deleting a Load Balancer is permanent, and cannot be\n   * undone. The Load Balancer's flexible IP address can either be deleted with\n   * the Load Balancer, or kept in your account for future use.\n   *\n   * @param request - The request {@link ZonedApiDeleteLbRequest}\n   */\n  deleteLb = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/lbs/${marshalling.validatePathParam(\"lbId\", request.lbId)}`,\n    urlParams: marshalling.urlParams([\"release_ip\", request.releaseIp])\n  });\n  /**\n   * Migrate a Load Balancer. Migrate an existing Load Balancer from one\n   * commercial type to another. Allows you to scale your Load Balancer up or\n   * down in terms of bandwidth or multi-cloud provision.\n   *\n   * @param request - The request {@link ZonedApiMigrateLbRequest}\n   * @returns A Promise of Lb\n   */\n  migrateLb = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalZonedApiMigrateLbRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/lbs/${marshalling.validatePathParam(\"lbId\", request.lbId)}/migrate`\n    },\n    marshalling_gen.unmarshalLb\n  );\n  pageOfListIPs = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/ips`,\n      urlParams: marshalling.urlParams(\n        [\"ip_address\", request.ipAddress],\n        [\"ip_type\", request.ipType],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId],\n        [\"tags\", request.tags]\n      )\n    },\n    marshalling_gen.unmarshalListIpsResponse\n  );\n  /**\n   * List IP addresses. List the Load Balancer flexible IP addresses held in the\n   * account (filtered by Organization ID or Project ID). It is also possible to\n   * search for a specific IP address.\n   *\n   * @param request - The request {@link ZonedApiListIPsRequest}\n   * @returns A Promise of ListIpsResponse\n   */\n  listIPs = (request = {}) => resourcePaginator.enrichForPagination(\"ips\", this.pageOfListIPs, request);\n  /**\n   * Create an IP address. Create a new Load Balancer flexible IP address, in\n   * the specified Scaleway Project. This can be attached to new Load Balancers\n   * created in the future.\n   *\n   * @param request - The request {@link ZonedApiCreateIpRequest}\n   * @returns A Promise of Ip\n   */\n  createIp = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalZonedApiCreateIpRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/ips`\n    },\n    marshalling_gen.unmarshalIp\n  );\n  /**\n   * Get an IP address. Retrieve the full details of a Load Balancer flexible IP\n   * address.\n   *\n   * @param request - The request {@link ZonedApiGetIpRequest}\n   * @returns A Promise of Ip\n   */\n  getIp = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/ips/${marshalling.validatePathParam(\"ipId\", request.ipId)}`\n    },\n    marshalling_gen.unmarshalIp\n  );\n  /**\n   * Delete an IP address. Delete a Load Balancer flexible IP address. This\n   * action is irreversible, and cannot be undone.\n   *\n   * @param request - The request {@link ZonedApiReleaseIpRequest}\n   */\n  releaseIp = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/ips/${marshalling.validatePathParam(\"ipId\", request.ipId)}`\n  });\n  /**\n   * Update an IP address. Update the reverse DNS of a Load Balancer flexible IP\n   * address.\n   *\n   * @param request - The request {@link ZonedApiUpdateIpRequest}\n   * @returns A Promise of Ip\n   */\n  updateIp = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalZonedApiUpdateIpRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/ips/${marshalling.validatePathParam(\"ipId\", request.ipId)}`\n    },\n    marshalling_gen.unmarshalIp\n  );\n  pageOfListBackends = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/lbs/${marshalling.validatePathParam(\"lbId\", request.lbId)}/backends`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListBackendsResponse\n  );\n  /**\n   * List the backends of a given Load Balancer. List all the backends of a Load\n   * Balancer, specified by its Load Balancer ID. By default, results are\n   * returned in ascending order by the creation date of each backend. The\n   * response is an array of backend objects, containing full details of each\n   * one including their configuration parameters such as protocol, port and\n   * forwarding algorithm.\n   *\n   * @param request - The request {@link ZonedApiListBackendsRequest}\n   * @returns A Promise of ListBackendsResponse\n   */\n  listBackends = (request) => resourcePaginator.enrichForPagination(\"backends\", this.pageOfListBackends, request);\n  /**\n   * Create a backend for a given Load Balancer. Create a new backend for a\n   * given Load Balancer, specifying its full configuration including protocol,\n   * port and forwarding algorithm.\n   *\n   * @param request - The request {@link ZonedApiCreateBackendRequest}\n   * @returns A Promise of Backend\n   */\n  createBackend = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalZonedApiCreateBackendRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/lbs/${marshalling.validatePathParam(\"lbId\", request.lbId)}/backends`\n    },\n    marshalling_gen.unmarshalBackend\n  );\n  /**\n   * Get a backend of a given Load Balancer. Get the full details of a given\n   * backend, specified by its backend ID. The response contains the backend's\n   * full configuration parameters including protocol, port and forwarding\n   * algorithm.\n   *\n   * @param request - The request {@link ZonedApiGetBackendRequest}\n   * @returns A Promise of Backend\n   */\n  getBackend = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/backends/${marshalling.validatePathParam(\"backendId\", request.backendId)}`\n    },\n    marshalling_gen.unmarshalBackend\n  );\n  /**\n   * Update a backend of a given Load Balancer. Update a backend of a given Load\n   * Balancer, specified by its backend ID. Note that the request type is PUT\n   * and not PATCH. You must set all parameters.\n   *\n   * @param request - The request {@link ZonedApiUpdateBackendRequest}\n   * @returns A Promise of Backend\n   */\n  updateBackend = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalZonedApiUpdateBackendRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/backends/${marshalling.validatePathParam(\"backendId\", request.backendId)}`\n    },\n    marshalling_gen.unmarshalBackend\n  );\n  /**\n   * Delete a backend of a given Load Balancer. Delete a backend of a given Load\n   * Balancer, specified by its backend ID. This action is irreversible and\n   * cannot be undone.\n   *\n   * @param request - The request {@link ZonedApiDeleteBackendRequest}\n   */\n  deleteBackend = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/backends/${marshalling.validatePathParam(\"backendId\", request.backendId)}`\n  });\n  /**\n   * Add a set of backend servers to a given backend. For a given backend\n   * specified by its backend ID, add a set of backend servers (identified by\n   * their IP addresses) it should forward traffic to. These will be appended to\n   * any existing set of backend servers for this backend.\n   *\n   * @param request - The request {@link ZonedApiAddBackendServersRequest}\n   * @returns A Promise of Backend\n   */\n  addBackendServers = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalZonedApiAddBackendServersRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/backends/${marshalling.validatePathParam(\"backendId\", request.backendId)}/servers`\n    },\n    marshalling_gen.unmarshalBackend\n  );\n  /**\n   * Remove a set of servers for a given backend. For a given backend specified\n   * by its backend ID, remove the specified backend servers (identified by\n   * their IP addresses) so that it no longer forwards traffic to them.\n   *\n   * @param request - The request {@link ZonedApiRemoveBackendServersRequest}\n   * @returns A Promise of Backend\n   */\n  removeBackendServers = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalZonedApiRemoveBackendServersRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"DELETE\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/backends/${marshalling.validatePathParam(\"backendId\", request.backendId)}/servers`\n    },\n    marshalling_gen.unmarshalBackend\n  );\n  /**\n   * Define all backend servers for a given backend. For a given backend\n   * specified by its backend ID, define the set of backend servers (identified\n   * by their IP addresses) that it should forward traffic to. Any existing\n   * backend servers configured for this backend will be removed.\n   *\n   * @param request - The request {@link ZonedApiSetBackendServersRequest}\n   * @returns A Promise of Backend\n   */\n  setBackendServers = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalZonedApiSetBackendServersRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/backends/${marshalling.validatePathParam(\"backendId\", request.backendId)}/servers`\n    },\n    marshalling_gen.unmarshalBackend\n  );\n  /**\n   * Update a health check for a given backend. Update the configuration of the\n   * health check performed by a given backend to verify the health of its\n   * backend servers, identified by its backend ID. Note that the request type\n   * is PUT and not PATCH. You must set all parameters.\n   *\n   * @param request - The request {@link ZonedApiUpdateHealthCheckRequest}\n   * @returns A Promise of HealthCheck\n   */\n  updateHealthCheck = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalZonedApiUpdateHealthCheckRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/backends/${marshalling.validatePathParam(\"backendId\", request.backendId)}/healthcheck`\n    },\n    marshalling_gen.unmarshalHealthCheck\n  );\n  pageOfListFrontends = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/lbs/${marshalling.validatePathParam(\"lbId\", request.lbId)}/frontends`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListFrontendsResponse\n  );\n  /**\n   * List frontends of a given Load Balancer. List all the frontends of a Load\n   * Balancer, specified by its Load Balancer ID. By default, results are\n   * returned in ascending order by the creation date of each frontend. The\n   * response is an array of frontend objects, containing full details of each\n   * one including the port they listen on and the backend they are attached\n   * to.\n   *\n   * @param request - The request {@link ZonedApiListFrontendsRequest}\n   * @returns A Promise of ListFrontendsResponse\n   */\n  listFrontends = (request) => resourcePaginator.enrichForPagination(\"frontends\", this.pageOfListFrontends, request);\n  /**\n   * Create a frontend in a given Load Balancer. Create a new frontend for a\n   * given Load Balancer, specifying its configuration including the port it\n   * should listen on and the backend to attach it to.\n   *\n   * @param request - The request {@link ZonedApiCreateFrontendRequest}\n   * @returns A Promise of Frontend\n   */\n  createFrontend = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalZonedApiCreateFrontendRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/lbs/${marshalling.validatePathParam(\"lbId\", request.lbId)}/frontends`\n    },\n    marshalling_gen.unmarshalFrontend\n  );\n  /**\n   * Get a frontend. Get the full details of a given frontend, specified by its\n   * frontend ID. The response contains the frontend's full configuration\n   * parameters including the backend it is attached to, the port it listens on,\n   * and any certificates it has.\n   *\n   * @param request - The request {@link ZonedApiGetFrontendRequest}\n   * @returns A Promise of Frontend\n   */\n  getFrontend = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/frontends/${marshalling.validatePathParam(\"frontendId\", request.frontendId)}`\n    },\n    marshalling_gen.unmarshalFrontend\n  );\n  /**\n   * Update a frontend. Update a given frontend, specified by its frontend ID.\n   * You can update configuration parameters including its name and the port it\n   * listens on. Note that the request type is PUT and not PATCH. You must set\n   * all parameters.\n   *\n   * @param request - The request {@link ZonedApiUpdateFrontendRequest}\n   * @returns A Promise of Frontend\n   */\n  updateFrontend = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalZonedApiUpdateFrontendRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/frontends/${marshalling.validatePathParam(\"frontendId\", request.frontendId)}`\n    },\n    marshalling_gen.unmarshalFrontend\n  );\n  /**\n   * Delete a frontend. Delete a given frontend, specified by its frontend ID.\n   * This action is irreversible and cannot be undone.\n   *\n   * @param request - The request {@link ZonedApiDeleteFrontendRequest}\n   */\n  deleteFrontend = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/frontends/${marshalling.validatePathParam(\"frontendId\", request.frontendId)}`\n  });\n  pageOfListRoutes = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/routes`,\n      urlParams: marshalling.urlParams(\n        [\"frontend_id\", request.frontendId],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListRoutesResponse\n  );\n  /**\n   * List all routes. List all routes for a given frontend. The response is an\n   * array of routes, each one with a specified backend to direct to if a\n   * certain condition is matched (based on the value of the SNI field or HTTP\n   * Host header).\n   *\n   * @param request - The request {@link ZonedApiListRoutesRequest}\n   * @returns A Promise of ListRoutesResponse\n   */\n  listRoutes = (request = {}) => resourcePaginator.enrichForPagination(\"routes\", this.pageOfListRoutes, request);\n  /**\n   * Create a route. Create a new route on a given frontend. To configure a\n   * route, specify the backend to direct to if a certain condition is matched\n   * (based on the value of the SNI field or HTTP Host header).\n   *\n   * @param request - The request {@link ZonedApiCreateRouteRequest}\n   * @returns A Promise of Route\n   */\n  createRoute = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalZonedApiCreateRouteRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/routes`\n    },\n    marshalling_gen.unmarshalRoute\n  );\n  /**\n   * Get a route. Retrieve information about an existing route, specified by its\n   * route ID. Its full details, origin frontend, target backend and match\n   * condition, are returned in the response object.\n   *\n   * @param request - The request {@link ZonedApiGetRouteRequest}\n   * @returns A Promise of Route\n   */\n  getRoute = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/routes/${marshalling.validatePathParam(\"routeId\", request.routeId)}`\n    },\n    marshalling_gen.unmarshalRoute\n  );\n  /**\n   * Update a route. Update the configuration of an existing route, specified by\n   * its route ID.\n   *\n   * @param request - The request {@link ZonedApiUpdateRouteRequest}\n   * @returns A Promise of Route\n   */\n  updateRoute = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalZonedApiUpdateRouteRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/routes/${marshalling.validatePathParam(\"routeId\", request.routeId)}`\n    },\n    marshalling_gen.unmarshalRoute\n  );\n  /**\n   * Delete a route. Delete an existing route, specified by its route ID.\n   * Deleting a route is permanent, and cannot be undone.\n   *\n   * @param request - The request {@link ZonedApiDeleteRouteRequest}\n   */\n  deleteRoute = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/routes/${marshalling.validatePathParam(\"routeId\", request.routeId)}`\n  });\n  /**\n   * Get usage statistics of a given Load Balancer.\n   *\n   * @deprecated\n   * @param request - The request {@link ZonedApiGetLbStatsRequest}\n   * @returns A Promise of LbStats\n   */\n  getLbStats = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/lbs/${marshalling.validatePathParam(\"lbId\", request.lbId)}/stats`,\n      urlParams: marshalling.urlParams([\"backend_id\", request.backendId])\n    },\n    marshalling_gen.unmarshalLbStats\n  );\n  pageOfListBackendStats = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/lbs/${marshalling.validatePathParam(\"lbId\", request.lbId)}/backend-stats`,\n      urlParams: marshalling.urlParams(\n        [\"backend_id\", request.backendId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListBackendStatsResponse\n  );\n  /**\n   * List backend server statistics. List information about your backend\n   * servers, including their state and the result of their last health check.\n   *\n   * @param request - The request {@link ZonedApiListBackendStatsRequest}\n   * @returns A Promise of ListBackendStatsResponse\n   */\n  listBackendStats = (request) => resourcePaginator.enrichForPagination(\n    \"backendServersStats\",\n    this.pageOfListBackendStats,\n    request\n  );\n  pageOfListAcls = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/frontends/${marshalling.validatePathParam(\"frontendId\", request.frontendId)}/acls`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListAclResponse\n  );\n  /**\n   * List ACLs for a given frontend. List the ACLs for a given frontend,\n   * specified by its frontend ID. The response is an array of ACL objects, each\n   * one representing an ACL that denies or allows traffic based on certain\n   * conditions.\n   *\n   * @param request - The request {@link ZonedApiListAclsRequest}\n   * @returns A Promise of ListAclResponse\n   */\n  listAcls = (request) => resourcePaginator.enrichForPagination(\"acls\", this.pageOfListAcls, request);\n  /**\n   * Create an ACL for a given frontend. Create a new ACL for a given frontend.\n   * Each ACL must have a name, an action to perform (allow or deny), and a\n   * match rule (the action is carried out when the incoming traffic matches the\n   * rule).\n   *\n   * @param request - The request {@link ZonedApiCreateAclRequest}\n   * @returns A Promise of Acl\n   */\n  createAcl = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalZonedApiCreateAclRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/frontends/${marshalling.validatePathParam(\"frontendId\", request.frontendId)}/acls`\n    },\n    marshalling_gen.unmarshalAcl\n  );\n  /**\n   * Get an ACL. Get information for a particular ACL, specified by its ACL ID.\n   * The response returns full details of the ACL, including its name, action,\n   * match rule and frontend.\n   *\n   * @param request - The request {@link ZonedApiGetAclRequest}\n   * @returns A Promise of Acl\n   */\n  getAcl = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/acls/${marshalling.validatePathParam(\"aclId\", request.aclId)}`\n    },\n    marshalling_gen.unmarshalAcl\n  );\n  /**\n   * Update an ACL. Update a particular ACL, specified by its ACL ID. You can\n   * update details including its name, action and match rule.\n   *\n   * @param request - The request {@link ZonedApiUpdateAclRequest}\n   * @returns A Promise of Acl\n   */\n  updateAcl = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalZonedApiUpdateAclRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/acls/${marshalling.validatePathParam(\"aclId\", request.aclId)}`\n    },\n    marshalling_gen.unmarshalAcl\n  );\n  /**\n   * Delete an ACL. Delete an ACL, specified by its ACL ID. Deleting an ACL is\n   * irreversible and cannot be undone.\n   *\n   * @param request - The request {@link ZonedApiDeleteAclRequest}\n   */\n  deleteAcl = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/acls/${marshalling.validatePathParam(\"aclId\", request.aclId)}`\n  });\n  /**\n   * Define all ACLs for a given frontend. For a given frontend specified by its\n   * frontend ID, define and add the complete set of ACLS for that frontend. Any\n   * existing ACLs on this frontend will be removed.\n   *\n   * @param request - The request {@link ZonedApiSetAclsRequest}\n   * @returns A Promise of SetAclsResponse\n   */\n  setAcls = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalZonedApiSetAclsRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/frontends/${marshalling.validatePathParam(\"frontendId\", request.frontendId)}/acls`\n    },\n    marshalling_gen.unmarshalSetAclsResponse\n  );\n  /**\n   * Create an SSL/TLS certificate. Generate a new SSL/TLS certificate for a\n   * given Load Balancer. You can choose to create a Let's Encrypt certificate,\n   * or import a custom certificate.\n   *\n   * @param request - The request {@link ZonedApiCreateCertificateRequest}\n   * @returns A Promise of Certificate\n   */\n  createCertificate = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalZonedApiCreateCertificateRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/lbs/${marshalling.validatePathParam(\"lbId\", request.lbId)}/certificates`\n    },\n    marshalling_gen.unmarshalCertificate\n  );\n  pageOfListCertificates = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/lbs/${marshalling.validatePathParam(\"lbId\", request.lbId)}/certificates`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListCertificatesResponse\n  );\n  /**\n   * List all SSL/TLS certificates on a given Load Balancer. List all the\n   * SSL/TLS certificates on a given Load Balancer. The response is an array of\n   * certificate objects, which are by default listed in ascending order of\n   * creation date.\n   *\n   * @param request - The request {@link ZonedApiListCertificatesRequest}\n   * @returns A Promise of ListCertificatesResponse\n   */\n  listCertificates = (request) => resourcePaginator.enrichForPagination(\"certificates\", this.pageOfListCertificates, request);\n  /**\n   * Get an SSL/TLS certificate. Get information for a particular SSL/TLS\n   * certificate, specified by its certificate ID. The response returns full\n   * details of the certificate, including its type, main domain name, and\n   * alternative domain names.\n   *\n   * @param request - The request {@link ZonedApiGetCertificateRequest}\n   * @returns A Promise of Certificate\n   */\n  getCertificate = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/certificates/${marshalling.validatePathParam(\"certificateId\", request.certificateId)}`\n    },\n    marshalling_gen.unmarshalCertificate\n  );\n  /**\n   * Waits for {@link Certificate} to be in a final state.\n   *\n   * @param request - The request {@link ZonedApiGetCertificateRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Certificate\n   */\n  waitForCertificate = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(\n      !content_gen.CERTIFICATE_TRANSIENT_STATUSES.includes(res.status)\n    )),\n    this.getCertificate,\n    request,\n    options\n  );\n  /**\n   * Update an SSL/TLS certificate. Update the name of a particular SSL/TLS\n   * certificate, specified by its certificate ID.\n   *\n   * @param request - The request {@link ZonedApiUpdateCertificateRequest}\n   * @returns A Promise of Certificate\n   */\n  updateCertificate = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalZonedApiUpdateCertificateRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/certificates/${marshalling.validatePathParam(\"certificateId\", request.certificateId)}`\n    },\n    marshalling_gen.unmarshalCertificate\n  );\n  /**\n   * Delete an SSL/TLS certificate. Delete an SSL/TLS certificate, specified by\n   * its certificate ID. Deleting a certificate is irreversible and cannot be\n   * undone.\n   *\n   * @param request - The request {@link ZonedApiDeleteCertificateRequest}\n   */\n  deleteCertificate = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/certificates/${marshalling.validatePathParam(\"certificateId\", request.certificateId)}`\n  });\n  pageOfListLbTypes = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/lb-types`,\n      urlParams: marshalling.urlParams(\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListLbTypesResponse\n  );\n  /**\n   * List all Load Balancer offer types. List all the different commercial Load\n   * Balancer types. The response includes an array of offer types, each with a\n   * name, description, and information about its stock availability.\n   *\n   * @param request - The request {@link ZonedApiListLbTypesRequest}\n   * @returns A Promise of ListLbTypesResponse\n   */\n  listLbTypes = (request = {}) => resourcePaginator.enrichForPagination(\"lbTypes\", this.pageOfListLbTypes, request);\n  /**\n   * Create a subscriber. Create a new subscriber, either with an email\n   * configuration or a webhook configuration, for a specified Scaleway\n   * Project.\n   *\n   * @param request - The request {@link ZonedApiCreateSubscriberRequest}\n   * @returns A Promise of Subscriber\n   */\n  createSubscriber = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalZonedApiCreateSubscriberRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/subscribers`\n    },\n    marshalling_gen.unmarshalSubscriber\n  );\n  /**\n   * Get a subscriber. Retrieve information about an existing subscriber,\n   * specified by its subscriber ID. Its full details, including name and\n   * email/webhook configuration, are returned in the response object.\n   *\n   * @param request - The request {@link ZonedApiGetSubscriberRequest}\n   * @returns A Promise of Subscriber\n   */\n  getSubscriber = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/subscribers/${marshalling.validatePathParam(\"subscriberId\", request.subscriberId)}`\n    },\n    marshalling_gen.unmarshalSubscriber\n  );\n  pageOfListSubscriber = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/subscribers`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListSubscriberResponse\n  );\n  /**\n   * List all subscribers. List all subscribers to Load Balancer alerts. By\n   * default, returns all subscribers to Load Balancer alerts for the\n   * Organization associated with the authentication token used for the\n   * request.\n   *\n   * @param request - The request {@link ZonedApiListSubscriberRequest}\n   * @returns A Promise of ListSubscriberResponse\n   */\n  listSubscriber = (request = {}) => resourcePaginator.enrichForPagination(\"subscribers\", this.pageOfListSubscriber, request);\n  /**\n   * Update a subscriber. Update the parameters of a given subscriber (e.g.\n   * name, webhook configuration, email configuration), specified by its\n   * subscriber ID.\n   *\n   * @param request - The request {@link ZonedApiUpdateSubscriberRequest}\n   * @returns A Promise of Subscriber\n   */\n  updateSubscriber = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalZonedApiUpdateSubscriberRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/subscribers/${marshalling.validatePathParam(\"subscriberId\", request.subscriberId)}`\n    },\n    marshalling_gen.unmarshalSubscriber\n  );\n  /**\n   * Delete a subscriber. Delete an existing subscriber, specified by its\n   * subscriber ID. Deleting a subscriber is permanent, and cannot be undone.\n   *\n   * @param request - The request {@link ZonedApiDeleteSubscriberRequest}\n   */\n  deleteSubscriber = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/lb/subscription/${marshalling.validatePathParam(\"subscriberId\", request.subscriberId)}`\n  });\n  /**\n   * Subscribe a subscriber to alerts for a given Load Balancer. Subscribe an\n   * existing subscriber to alerts for a given Load Balancer.\n   *\n   * @param request - The request {@link ZonedApiSubscribeToLbRequest}\n   * @returns A Promise of Lb\n   */\n  subscribeToLb = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalZonedApiSubscribeToLbRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/lb/${marshalling.validatePathParam(\"lbId\", request.lbId)}/subscribe`\n    },\n    marshalling_gen.unmarshalLb\n  );\n  /**\n   * Unsubscribe a subscriber from alerts for a given Load Balancer. Unsubscribe\n   * a subscriber from alerts for a given Load Balancer. The subscriber is not\n   * deleted, and can be resubscribed in the future if necessary.\n   *\n   * @param request - The request {@link ZonedApiUnsubscribeFromLbRequest}\n   * @returns A Promise of Lb\n   */\n  unsubscribeFromLb = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/lb/${marshalling.validatePathParam(\"lbId\", request.lbId)}/unsubscribe`\n    },\n    marshalling_gen.unmarshalLb\n  );\n  pageOfListLbPrivateNetworks = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/lbs/${marshalling.validatePathParam(\"lbId\", request.lbId)}/private-networks`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListLbPrivateNetworksResponse\n  );\n  /**\n   * List Private Networks attached to a Load Balancer. List the Private\n   * Networks attached to a given Load Balancer, specified by its Load Balancer\n   * ID. The response is an array of Private Network objects, giving information\n   * including the status, configuration, name and creation date of each Private\n   * Network.\n   *\n   * @param request - The request {@link ZonedApiListLbPrivateNetworksRequest}\n   * @returns A Promise of ListLbPrivateNetworksResponse\n   */\n  listLbPrivateNetworks = (request) => resourcePaginator.enrichForPagination(\n    \"privateNetwork\",\n    this.pageOfListLbPrivateNetworks,\n    request\n  );\n  /**\n   * Attach a Load Balancer to a Private Network. Attach a specified Load\n   * Balancer to a specified Private Network, defining a static or DHCP\n   * configuration for the Load Balancer on the network.\n   *\n   * @param request - The request {@link ZonedApiAttachPrivateNetworkRequest}\n   * @returns A Promise of PrivateNetwork\n   */\n  attachPrivateNetwork = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalZonedApiAttachPrivateNetworkRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/lbs/${marshalling.validatePathParam(\"lbId\", request.lbId)}/private-networks/${marshalling.validatePathParam(\"privateNetworkId\", request.privateNetworkId)}/attach`\n    },\n    marshalling_gen.unmarshalPrivateNetwork\n  );\n  /**\n   * Detach Load Balancer from Private Network. Detach a specified Load Balancer\n   * from a specified Private Network.\n   *\n   * @param request - The request {@link ZonedApiDetachPrivateNetworkRequest}\n   */\n  detachPrivateNetwork = (request) => this.client.fetch({\n    body: \"{}\",\n    headers: jsonContentHeaders,\n    method: \"POST\",\n    path: `/lb/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/lbs/${marshalling.validatePathParam(\"lbId\", request.lbId)}/private-networks/${marshalling.validatePathParam(\"privateNetworkId\", request.privateNetworkId)}/detach`\n  });\n}\nclass API extends api.API {\n  /** Lists the available regions of the API. */\n  static LOCALITIES = [\"fr-par\", \"nl-ams\", \"pl-waw\"];\n  pageOfListLbs = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/lbs`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId],\n        [\"tags\", request.tags]\n      )\n    },\n    marshalling_gen.unmarshalListLbsResponse\n  );\n  /**\n   * List load balancers.\n   *\n   * @param request - The request {@link ListLbsRequest}\n   * @returns A Promise of ListLbsResponse\n   */\n  listLbs = (request = {}) => resourcePaginator.enrichForPagination(\"lbs\", this.pageOfListLbs, request);\n  /**\n   * Create a load balancer.\n   *\n   * @param request - The request {@link CreateLbRequest}\n   * @returns A Promise of Lb\n   */\n  createLb = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateLbRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/lbs`\n    },\n    marshalling_gen.unmarshalLb\n  );\n  /**\n   * Get a load balancer.\n   *\n   * @param request - The request {@link GetLbRequest}\n   * @returns A Promise of Lb\n   */\n  getLb = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/lbs/${marshalling.validatePathParam(\"lbId\", request.lbId)}`\n    },\n    marshalling_gen.unmarshalLb\n  );\n  /**\n   * Waits for {@link Lb} to be in a final state.\n   *\n   * @param request - The request {@link GetLbRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Lb\n   */\n  waitForLb = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.LB_TRANSIENT_STATUSES.includes(res.status))),\n    this.getLb,\n    request,\n    options\n  );\n  /**\n   * Update a load balancer.\n   *\n   * @param request - The request {@link UpdateLbRequest}\n   * @returns A Promise of Lb\n   */\n  updateLb = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateLbRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/lbs/${marshalling.validatePathParam(\"lbId\", request.lbId)}`\n    },\n    marshalling_gen.unmarshalLb\n  );\n  /**\n   * Delete a load balancer.\n   *\n   * @param request - The request {@link DeleteLbRequest}\n   */\n  deleteLb = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/lbs/${marshalling.validatePathParam(\"lbId\", request.lbId)}`,\n    urlParams: marshalling.urlParams([\"release_ip\", request.releaseIp])\n  });\n  /**\n   * Migrate a load balancer.\n   *\n   * @param request - The request {@link MigrateLbRequest}\n   * @returns A Promise of Lb\n   */\n  migrateLb = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalMigrateLbRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/lbs/${marshalling.validatePathParam(\"lbId\", request.lbId)}/migrate`\n    },\n    marshalling_gen.unmarshalLb\n  );\n  pageOfListIPs = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/ips`,\n      urlParams: marshalling.urlParams(\n        [\"ip_address\", request.ipAddress],\n        [\"ip_type\", request.ipType],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId],\n        [\"tags\", request.tags]\n      )\n    },\n    marshalling_gen.unmarshalListIpsResponse\n  );\n  /**\n   * List IPs.\n   *\n   * @param request - The request {@link ListIPsRequest}\n   * @returns A Promise of ListIpsResponse\n   */\n  listIPs = (request = {}) => resourcePaginator.enrichForPagination(\"ips\", this.pageOfListIPs, request);\n  /**\n   * Create an IP.\n   *\n   * @param request - The request {@link CreateIpRequest}\n   * @returns A Promise of Ip\n   */\n  createIp = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateIpRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/ips`\n    },\n    marshalling_gen.unmarshalIp\n  );\n  /**\n   * Get an IP.\n   *\n   * @param request - The request {@link GetIpRequest}\n   * @returns A Promise of Ip\n   */\n  getIp = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/ips/${marshalling.validatePathParam(\"ipId\", request.ipId)}`\n    },\n    marshalling_gen.unmarshalIp\n  );\n  /**\n   * Delete an IP.\n   *\n   * @param request - The request {@link ReleaseIpRequest}\n   */\n  releaseIp = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/ips/${marshalling.validatePathParam(\"ipId\", request.ipId)}`\n  });\n  /**\n   * Update an IP.\n   *\n   * @param request - The request {@link UpdateIpRequest}\n   * @returns A Promise of Ip\n   */\n  updateIp = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateIpRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/ips/${marshalling.validatePathParam(\"ipId\", request.ipId)}`\n    },\n    marshalling_gen.unmarshalIp\n  );\n  pageOfListBackends = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/lbs/${marshalling.validatePathParam(\"lbId\", request.lbId)}/backends`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListBackendsResponse\n  );\n  /**\n   * List backends in a given load balancer.\n   *\n   * @param request - The request {@link ListBackendsRequest}\n   * @returns A Promise of ListBackendsResponse\n   */\n  listBackends = (request) => resourcePaginator.enrichForPagination(\"backends\", this.pageOfListBackends, request);\n  /**\n   * Create a backend in a given load balancer.\n   *\n   * @param request - The request {@link CreateBackendRequest}\n   * @returns A Promise of Backend\n   */\n  createBackend = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateBackendRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/lbs/${marshalling.validatePathParam(\"lbId\", request.lbId)}/backends`\n    },\n    marshalling_gen.unmarshalBackend\n  );\n  /**\n   * Get a backend in a given load balancer.\n   *\n   * @param request - The request {@link GetBackendRequest}\n   * @returns A Promise of Backend\n   */\n  getBackend = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/backends/${marshalling.validatePathParam(\"backendId\", request.backendId)}`\n    },\n    marshalling_gen.unmarshalBackend\n  );\n  /**\n   * Update a backend in a given load balancer.\n   *\n   * @param request - The request {@link UpdateBackendRequest}\n   * @returns A Promise of Backend\n   */\n  updateBackend = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateBackendRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/backends/${marshalling.validatePathParam(\"backendId\", request.backendId)}`\n    },\n    marshalling_gen.unmarshalBackend\n  );\n  /**\n   * Delete a backend in a given load balancer.\n   *\n   * @param request - The request {@link DeleteBackendRequest}\n   */\n  deleteBackend = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/backends/${marshalling.validatePathParam(\"backendId\", request.backendId)}`\n  });\n  /**\n   * Add a set of servers in a given backend.\n   *\n   * @param request - The request {@link AddBackendServersRequest}\n   * @returns A Promise of Backend\n   */\n  addBackendServers = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalAddBackendServersRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/backends/${marshalling.validatePathParam(\"backendId\", request.backendId)}/servers`\n    },\n    marshalling_gen.unmarshalBackend\n  );\n  /**\n   * Remove a set of servers for a given backend.\n   *\n   * @param request - The request {@link RemoveBackendServersRequest}\n   * @returns A Promise of Backend\n   */\n  removeBackendServers = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalRemoveBackendServersRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"DELETE\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/backends/${marshalling.validatePathParam(\"backendId\", request.backendId)}/servers`\n    },\n    marshalling_gen.unmarshalBackend\n  );\n  /**\n   * Define all servers in a given backend.\n   *\n   * @param request - The request {@link SetBackendServersRequest}\n   * @returns A Promise of Backend\n   */\n  setBackendServers = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSetBackendServersRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/backends/${marshalling.validatePathParam(\"backendId\", request.backendId)}/servers`\n    },\n    marshalling_gen.unmarshalBackend\n  );\n  /**\n   * Update an health check for a given backend.\n   *\n   * @param request - The request {@link UpdateHealthCheckRequest}\n   * @returns A Promise of HealthCheck\n   */\n  updateHealthCheck = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateHealthCheckRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/backends/${marshalling.validatePathParam(\"backendId\", request.backendId)}/healthcheck`\n    },\n    marshalling_gen.unmarshalHealthCheck\n  );\n  pageOfListFrontends = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/lbs/${marshalling.validatePathParam(\"lbId\", request.lbId)}/frontends`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListFrontendsResponse\n  );\n  /**\n   * List frontends in a given load balancer.\n   *\n   * @param request - The request {@link ListFrontendsRequest}\n   * @returns A Promise of ListFrontendsResponse\n   */\n  listFrontends = (request) => resourcePaginator.enrichForPagination(\"frontends\", this.pageOfListFrontends, request);\n  /**\n   * Create a frontend in a given load balancer.\n   *\n   * @param request - The request {@link CreateFrontendRequest}\n   * @returns A Promise of Frontend\n   */\n  createFrontend = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateFrontendRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/lbs/${marshalling.validatePathParam(\"lbId\", request.lbId)}/frontends`\n    },\n    marshalling_gen.unmarshalFrontend\n  );\n  /**\n   * Get a frontend.\n   *\n   * @param request - The request {@link GetFrontendRequest}\n   * @returns A Promise of Frontend\n   */\n  getFrontend = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/frontends/${marshalling.validatePathParam(\"frontendId\", request.frontendId)}`\n    },\n    marshalling_gen.unmarshalFrontend\n  );\n  /**\n   * Update a frontend.\n   *\n   * @param request - The request {@link UpdateFrontendRequest}\n   * @returns A Promise of Frontend\n   */\n  updateFrontend = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateFrontendRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/frontends/${marshalling.validatePathParam(\"frontendId\", request.frontendId)}`\n    },\n    marshalling_gen.unmarshalFrontend\n  );\n  /**\n   * Delete a frontend.\n   *\n   * @param request - The request {@link DeleteFrontendRequest}\n   */\n  deleteFrontend = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/frontends/${marshalling.validatePathParam(\"frontendId\", request.frontendId)}`\n  });\n  pageOfListRoutes = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/routes`,\n      urlParams: marshalling.urlParams(\n        [\"frontend_id\", request.frontendId],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListRoutesResponse\n  );\n  /**\n   * List all backend redirections.\n   *\n   * @param request - The request {@link ListRoutesRequest}\n   * @returns A Promise of ListRoutesResponse\n   */\n  listRoutes = (request = {}) => resourcePaginator.enrichForPagination(\"routes\", this.pageOfListRoutes, request);\n  /**\n   * Create a backend redirection.\n   *\n   * @param request - The request {@link CreateRouteRequest}\n   * @returns A Promise of Route\n   */\n  createRoute = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateRouteRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/routes`\n    },\n    marshalling_gen.unmarshalRoute\n  );\n  /**\n   * Get single backend redirection.\n   *\n   * @param request - The request {@link GetRouteRequest}\n   * @returns A Promise of Route\n   */\n  getRoute = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/routes/${marshalling.validatePathParam(\"routeId\", request.routeId)}`\n    },\n    marshalling_gen.unmarshalRoute\n  );\n  /**\n   * Edit a backend redirection.\n   *\n   * @param request - The request {@link UpdateRouteRequest}\n   * @returns A Promise of Route\n   */\n  updateRoute = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateRouteRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/routes/${marshalling.validatePathParam(\"routeId\", request.routeId)}`\n    },\n    marshalling_gen.unmarshalRoute\n  );\n  /**\n   * Delete a backend redirection.\n   *\n   * @param request - The request {@link DeleteRouteRequest}\n   */\n  deleteRoute = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/routes/${marshalling.validatePathParam(\"routeId\", request.routeId)}`\n  });\n  /**\n   * Get usage statistics of a given load balancer.\n   *\n   * @deprecated\n   * @param request - The request {@link GetLbStatsRequest}\n   * @returns A Promise of LbStats\n   */\n  getLbStats = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/lbs/${marshalling.validatePathParam(\"lbId\", request.lbId)}/stats`,\n      urlParams: marshalling.urlParams([\"backend_id\", request.backendId])\n    },\n    marshalling_gen.unmarshalLbStats\n  );\n  pageOfListBackendStats = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/lbs/${marshalling.validatePathParam(\"lbId\", request.lbId)}/backend-stats`,\n      urlParams: marshalling.urlParams(\n        [\"backend_id\", request.backendId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListBackendStatsResponse\n  );\n  /**\n   * List backend server statistics.\n   *\n   * @param request - The request {@link ListBackendStatsRequest}\n   * @returns A Promise of ListBackendStatsResponse\n   */\n  listBackendStats = (request) => resourcePaginator.enrichForPagination(\n    \"backendServersStats\",\n    this.pageOfListBackendStats,\n    request\n  );\n  pageOfListAcls = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/frontends/${marshalling.validatePathParam(\"frontendId\", request.frontendId)}/acls`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListAclResponse\n  );\n  /**\n   * List ACL for a given frontend.\n   *\n   * @param request - The request {@link ListAclsRequest}\n   * @returns A Promise of ListAclResponse\n   */\n  listAcls = (request) => resourcePaginator.enrichForPagination(\"acls\", this.pageOfListAcls, request);\n  /**\n   * Create an ACL for a given frontend.\n   *\n   * @param request - The request {@link CreateAclRequest}\n   * @returns A Promise of Acl\n   */\n  createAcl = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateAclRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/frontends/${marshalling.validatePathParam(\"frontendId\", request.frontendId)}/acls`\n    },\n    marshalling_gen.unmarshalAcl\n  );\n  /**\n   * Get an ACL.\n   *\n   * @param request - The request {@link GetAclRequest}\n   * @returns A Promise of Acl\n   */\n  getAcl = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/acls/${marshalling.validatePathParam(\"aclId\", request.aclId)}`\n    },\n    marshalling_gen.unmarshalAcl\n  );\n  /**\n   * Update an ACL.\n   *\n   * @param request - The request {@link UpdateAclRequest}\n   * @returns A Promise of Acl\n   */\n  updateAcl = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateAclRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/acls/${marshalling.validatePathParam(\"aclId\", request.aclId)}`\n    },\n    marshalling_gen.unmarshalAcl\n  );\n  /**\n   * Delete an ACL.\n   *\n   * @param request - The request {@link DeleteAclRequest}\n   */\n  deleteAcl = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/acls/${marshalling.validatePathParam(\"aclId\", request.aclId)}`\n  });\n  /**\n   * Create a TLS certificate. Generate a new TLS certificate using Let's\n   * Encrypt or import your certificate.\n   *\n   * @param request - The request {@link CreateCertificateRequest}\n   * @returns A Promise of Certificate\n   */\n  createCertificate = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateCertificateRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/lbs/${marshalling.validatePathParam(\"lbId\", request.lbId)}/certificates`\n    },\n    marshalling_gen.unmarshalCertificate\n  );\n  pageOfListCertificates = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/lbs/${marshalling.validatePathParam(\"lbId\", request.lbId)}/certificates`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListCertificatesResponse\n  );\n  /**\n   * List all TLS certificates on a given load balancer.\n   *\n   * @param request - The request {@link ListCertificatesRequest}\n   * @returns A Promise of ListCertificatesResponse\n   */\n  listCertificates = (request) => resourcePaginator.enrichForPagination(\"certificates\", this.pageOfListCertificates, request);\n  /**\n   * Get a TLS certificate.\n   *\n   * @param request - The request {@link GetCertificateRequest}\n   * @returns A Promise of Certificate\n   */\n  getCertificate = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/certificates/${marshalling.validatePathParam(\"certificateId\", request.certificateId)}`\n    },\n    marshalling_gen.unmarshalCertificate\n  );\n  /**\n   * Waits for {@link Certificate} to be in a final state.\n   *\n   * @param request - The request {@link GetCertificateRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Certificate\n   */\n  waitForCertificate = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(\n      !content_gen.CERTIFICATE_TRANSIENT_STATUSES.includes(res.status)\n    )),\n    this.getCertificate,\n    request,\n    options\n  );\n  /**\n   * Update a TLS certificate.\n   *\n   * @param request - The request {@link UpdateCertificateRequest}\n   * @returns A Promise of Certificate\n   */\n  updateCertificate = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateCertificateRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/certificates/${marshalling.validatePathParam(\"certificateId\", request.certificateId)}`\n    },\n    marshalling_gen.unmarshalCertificate\n  );\n  /**\n   * Delete a TLS certificate.\n   *\n   * @param request - The request {@link DeleteCertificateRequest}\n   */\n  deleteCertificate = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/certificates/${marshalling.validatePathParam(\"certificateId\", request.certificateId)}`\n  });\n  pageOfListLbTypes = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/lb-types`,\n      urlParams: marshalling.urlParams(\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListLbTypesResponse\n  );\n  /**\n   * List all load balancer offer type.\n   *\n   * @param request - The request {@link ListLbTypesRequest}\n   * @returns A Promise of ListLbTypesResponse\n   */\n  listLbTypes = (request = {}) => resourcePaginator.enrichForPagination(\"lbTypes\", this.pageOfListLbTypes, request);\n  /**\n   * Create a subscriber, webhook or email.\n   *\n   * @param request - The request {@link CreateSubscriberRequest}\n   * @returns A Promise of Subscriber\n   */\n  createSubscriber = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateSubscriberRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/subscribers`\n    },\n    marshalling_gen.unmarshalSubscriber\n  );\n  /**\n   * Get a subscriber.\n   *\n   * @param request - The request {@link GetSubscriberRequest}\n   * @returns A Promise of Subscriber\n   */\n  getSubscriber = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/subscribers/${marshalling.validatePathParam(\"subscriberId\", request.subscriberId)}`\n    },\n    marshalling_gen.unmarshalSubscriber\n  );\n  pageOfListSubscriber = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/subscribers`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListSubscriberResponse\n  );\n  /**\n   * List all subscriber.\n   *\n   * @param request - The request {@link ListSubscriberRequest}\n   * @returns A Promise of ListSubscriberResponse\n   */\n  listSubscriber = (request = {}) => resourcePaginator.enrichForPagination(\"subscribers\", this.pageOfListSubscriber, request);\n  /**\n   * Update a subscriber.\n   *\n   * @param request - The request {@link UpdateSubscriberRequest}\n   * @returns A Promise of Subscriber\n   */\n  updateSubscriber = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateSubscriberRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/subscribers/${marshalling.validatePathParam(\"subscriberId\", request.subscriberId)}`\n    },\n    marshalling_gen.unmarshalSubscriber\n  );\n  /**\n   * Delete a subscriber.\n   *\n   * @param request - The request {@link DeleteSubscriberRequest}\n   */\n  deleteSubscriber = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/lb/subscriber/${marshalling.validatePathParam(\"subscriberId\", request.subscriberId)}`\n  });\n  /**\n   * Subscribe a subscriber to a given load balancer.\n   *\n   * @param request - The request {@link SubscribeToLbRequest}\n   * @returns A Promise of Lb\n   */\n  subscribeToLb = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSubscribeToLbRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/lb/${marshalling.validatePathParam(\"lbId\", request.lbId)}/subscribe`\n    },\n    marshalling_gen.unmarshalLb\n  );\n  /**\n   * Unsubscribe a subscriber from a given load balancer.\n   *\n   * @param request - The request {@link UnsubscribeFromLbRequest}\n   * @returns A Promise of Lb\n   */\n  unsubscribeFromLb = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/lb/${marshalling.validatePathParam(\"lbId\", request.lbId)}/unsubscribe`\n    },\n    marshalling_gen.unmarshalLb\n  );\n  pageOfListLbPrivateNetworks = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/lbs/${marshalling.validatePathParam(\"lbId\", request.lbId)}/private-networks`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListLbPrivateNetworksResponse\n  );\n  /**\n   * List attached private network of load balancer.\n   *\n   * @param request - The request {@link ListLbPrivateNetworksRequest}\n   * @returns A Promise of ListLbPrivateNetworksResponse\n   */\n  listLbPrivateNetworks = (request) => resourcePaginator.enrichForPagination(\n    \"privateNetwork\",\n    this.pageOfListLbPrivateNetworks,\n    request\n  );\n  /**\n   * Add load balancer on instance private network.\n   *\n   * @param request - The request {@link AttachPrivateNetworkRequest}\n   * @returns A Promise of PrivateNetwork\n   */\n  attachPrivateNetwork = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalAttachPrivateNetworkRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/lbs/${marshalling.validatePathParam(\"lbId\", request.lbId)}/private-networks/${marshalling.validatePathParam(\"privateNetworkId\", request.privateNetworkId)}/attach`\n    },\n    marshalling_gen.unmarshalPrivateNetwork\n  );\n  /**\n   * Remove load balancer of private network.\n   *\n   * @param request - The request {@link DetachPrivateNetworkRequest}\n   */\n  detachPrivateNetwork = (request) => this.client.fetch({\n    body: \"{}\",\n    headers: jsonContentHeaders,\n    method: \"POST\",\n    path: `/lb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/lbs/${marshalling.validatePathParam(\"lbId\", request.lbId)}/private-networks/${marshalling.validatePathParam(\"privateNetworkId\", request.privateNetworkId)}/detach`\n  });\n}\nexports.API = API;\nexports.ZonedAPI = ZonedAPI;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst intervalRetrier = require(\"../../../internal/async/interval-retrier.cjs\");\nconst api_gen = require(\"./api.gen.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nclass LbV1UtilsAPI extends api_gen.API {\n  /**\n   * Waits for all private networks of a load balancer to be in a final state.\n   *\n   * @param request - The request {@link WaitForLbPrivateNetworksRequest}\n   * @param options - The waiting options\n   * @returns A Promise of ListLbPrivateNetworksResponse\n   */\n  waitForLbPrivateNetworks = (request, options) => intervalRetrier.tryAtIntervals(\n    async () => {\n      const value = await this.listLbPrivateNetworks({\n        lbId: request.lbId,\n        region: request.region\n      }).all().then((list) => ({\n        privateNetwork: list,\n        totalCount: list.length\n      }));\n      return {\n        done: value.privateNetwork.find(\n          (elt) => content_gen.PRIVATE_NETWORK_TRANSIENT_STATUSES.includes(elt.status)\n        ) === void 0,\n        value\n      };\n    },\n    intervalRetrier.createExponentialBackoffStrategy(\n      options?.minDelay ?? 1,\n      options?.maxDelay ?? 30\n    ),\n    options?.timeout\n  );\n  /**\n   * Waits for all instances of a load balancer to be in a final state.\n   *\n   * @param request - The request {@link GetLbRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Lb\n   */\n  waitForLbInstances = (request, options) => intervalRetrier.tryAtIntervals(\n    async () => {\n      const value = await this.getLb(request);\n      return {\n        done: !content_gen.LB_TRANSIENT_STATUSES.includes(value.status) && value.instances.find(\n          (elt) => content_gen.INSTANCE_TRANSIENT_STATUSES.includes(elt.status)\n        ) === void 0,\n        value\n      };\n    },\n    intervalRetrier.createExponentialBackoffStrategy(\n      options?.minDelay ?? 1,\n      options?.maxDelay ?? 30\n    ),\n    options?.timeout\n  );\n}\nclass LbZonedV1UtilsAPI extends api_gen.ZonedAPI {\n  /**\n   * Waits for all private networks of a (zoned) load balancer to be in a final\n   * state.\n   *\n   * @param request - The request {@link ZonedWaitForLbPrivateNetworksRequest}\n   * @param options - The waiting options\n   * @returns A Promise of ListLbPrivateNetworksResponse\n   */\n  waitForLbPrivateNetworks = (request, options) => intervalRetrier.tryAtIntervals(\n    async () => {\n      const value = await this.listLbPrivateNetworks({\n        lbId: request.lbId,\n        zone: request.zone\n      }).all().then((list) => ({\n        privateNetwork: list,\n        totalCount: list.length\n      }));\n      return {\n        done: value.privateNetwork.find(\n          (elt) => content_gen.PRIVATE_NETWORK_TRANSIENT_STATUSES.includes(elt.status)\n        ) === void 0,\n        value\n      };\n    },\n    intervalRetrier.createExponentialBackoffStrategy(\n      options?.minDelay ?? 1,\n      options?.maxDelay ?? 30\n    ),\n    options?.timeout\n  );\n  /**\n   * Waits for all instances of a (zoned) load balancer to be in a final state.\n   *\n   * @param request - The request {@link GetLbRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Lb\n   */\n  waitForLbInstances = (request, options) => intervalRetrier.tryAtIntervals(\n    async () => {\n      const value = await this.getLb(request);\n      return {\n        done: !content_gen.LB_TRANSIENT_STATUSES.includes(value.status) && value.instances.find(\n          (elt) => content_gen.INSTANCE_TRANSIENT_STATUSES.includes(elt.status)\n        ) === void 0,\n        value\n      };\n    },\n    intervalRetrier.createExponentialBackoffStrategy(\n      options?.minDelay ?? 1,\n      options?.maxDelay ?? 30\n    ),\n    options?.timeout\n  );\n}\nexports.LbV1UtilsAPI = LbV1UtilsAPI;\nexports.LbZonedV1UtilsAPI = LbZonedV1UtilsAPI;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst CERTIFICATE_TRANSIENT_STATUSES = [\"pending\"];\nconst INSTANCE_TRANSIENT_STATUSES = [\n  \"pending\",\n  \"migrating\"\n];\nconst LB_TRANSIENT_STATUSES = [\n  \"pending\",\n  \"migrating\",\n  \"to_create\",\n  \"creating\",\n  \"to_delete\",\n  \"deleting\"\n];\nconst PRIVATE_NETWORK_TRANSIENT_STATUSES = [\n  \"pending\"\n];\nexports.CERTIFICATE_TRANSIENT_STATUSES = CERTIFICATE_TRANSIENT_STATUSES;\nexports.INSTANCE_TRANSIENT_STATUSES = INSTANCE_TRANSIENT_STATUSES;\nexports.LB_TRANSIENT_STATUSES = LB_TRANSIENT_STATUSES;\nexports.PRIVATE_NETWORK_TRANSIENT_STATUSES = PRIVATE_NETWORK_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_utils = require(\"./api.utils.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nexports.API = api_utils.LbV1UtilsAPI;\nexports.ZonedAPI = api_utils.LbZonedV1UtilsAPI;\nexports.CERTIFICATE_TRANSIENT_STATUSES = content_gen.CERTIFICATE_TRANSIENT_STATUSES;\nexports.INSTANCE_TRANSIENT_STATUSES = content_gen.INSTANCE_TRANSIENT_STATUSES;\nexports.LB_TRANSIENT_STATUSES = content_gen.LB_TRANSIENT_STATUSES;\nexports.PRIVATE_NETWORK_TRANSIENT_STATUSES = content_gen.PRIVATE_NETWORK_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst randomName = require(\"@scaleway/random-name\");\nconst json = require(\"../../../helpers/json.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst unmarshalIp = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Ip' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    id: data.id,\n    ipAddress: data.ip_address,\n    lbId: data.lb_id,\n    organizationId: data.organization_id,\n    projectId: data.project_id,\n    region: data.region,\n    reverse: data.reverse,\n    tags: data.tags,\n    zone: data.zone\n  };\n};\nconst unmarshalSubscriberEmailConfig = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SubscriberEmailConfig' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    email: data.email\n  };\n};\nconst unmarshalSubscriberWebhookConfig = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SubscriberWebhookConfig' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    uri: data.uri\n  };\n};\nconst unmarshalSubscriber = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Subscriber' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    emailConfig: data.email_config ? unmarshalSubscriberEmailConfig(data.email_config) : void 0,\n    id: data.id,\n    name: data.name,\n    webhookConfig: data.webhook_config ? unmarshalSubscriberWebhookConfig(data.webhook_config) : void 0\n  };\n};\nconst unmarshalHealthCheckHttpConfig = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'HealthCheckHttpConfig' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    code: data.code,\n    hostHeader: data.host_header,\n    method: data.method,\n    uri: data.uri\n  };\n};\nconst unmarshalHealthCheckHttpsConfig = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'HealthCheckHttpsConfig' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    code: data.code,\n    hostHeader: data.host_header,\n    method: data.method,\n    sni: data.sni,\n    uri: data.uri\n  };\n};\nconst unmarshalHealthCheckLdapConfig = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'HealthCheckLdapConfig' failed as data isn't a dictionary.`\n    );\n  }\n  return {};\n};\nconst unmarshalHealthCheckMysqlConfig = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'HealthCheckMysqlConfig' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    user: data.user\n  };\n};\nconst unmarshalHealthCheckPgsqlConfig = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'HealthCheckPgsqlConfig' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    user: data.user\n  };\n};\nconst unmarshalHealthCheckRedisConfig = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'HealthCheckRedisConfig' failed as data isn't a dictionary.`\n    );\n  }\n  return {};\n};\nconst unmarshalHealthCheckTcpConfig = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'HealthCheckTcpConfig' failed as data isn't a dictionary.`\n    );\n  }\n  return {};\n};\nconst unmarshalHealthCheck = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'HealthCheck' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    checkDelay: data.check_delay,\n    checkMaxRetries: data.check_max_retries,\n    checkSendProxy: data.check_send_proxy,\n    checkTimeout: data.check_timeout,\n    httpConfig: data.http_config ? unmarshalHealthCheckHttpConfig(data.http_config) : void 0,\n    httpsConfig: data.https_config ? unmarshalHealthCheckHttpsConfig(data.https_config) : void 0,\n    ldapConfig: data.ldap_config ? unmarshalHealthCheckLdapConfig(data.ldap_config) : void 0,\n    mysqlConfig: data.mysql_config ? unmarshalHealthCheckMysqlConfig(data.mysql_config) : void 0,\n    pgsqlConfig: data.pgsql_config ? unmarshalHealthCheckPgsqlConfig(data.pgsql_config) : void 0,\n    port: data.port,\n    redisConfig: data.redis_config ? unmarshalHealthCheckRedisConfig(data.redis_config) : void 0,\n    tcpConfig: data.tcp_config ? unmarshalHealthCheckTcpConfig(data.tcp_config) : void 0,\n    transientCheckDelay: data.transient_check_delay\n  };\n};\nconst unmarshalInstance = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Instance' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    id: data.id,\n    ipAddress: data.ip_address,\n    region: data.region,\n    status: data.status,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    zone: data.zone\n  };\n};\nconst unmarshalLb = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Lb' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    backendCount: data.backend_count,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    description: data.description,\n    frontendCount: data.frontend_count,\n    id: data.id,\n    instances: marshalling.unmarshalArrayOfObject(data.instances, unmarshalInstance),\n    ip: marshalling.unmarshalArrayOfObject(data.ip, unmarshalIp),\n    name: data.name,\n    organizationId: data.organization_id,\n    privateNetworkCount: data.private_network_count,\n    projectId: data.project_id,\n    region: data.region,\n    routeCount: data.route_count,\n    sslCompatibilityLevel: data.ssl_compatibility_level,\n    status: data.status,\n    subscriber: data.subscriber ? unmarshalSubscriber(data.subscriber) : void 0,\n    tags: data.tags,\n    type: data.type,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    zone: data.zone\n  };\n};\nconst unmarshalBackend = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Backend' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    failoverHost: data.failover_host,\n    forwardPort: data.forward_port,\n    forwardPortAlgorithm: data.forward_port_algorithm,\n    forwardProtocol: data.forward_protocol,\n    healthCheck: data.health_check ? unmarshalHealthCheck(data.health_check) : void 0,\n    id: data.id,\n    ignoreSslServerVerify: data.ignore_ssl_server_verify,\n    lb: data.lb ? unmarshalLb(data.lb) : void 0,\n    maxConnections: data.max_connections,\n    maxRetries: data.max_retries,\n    name: data.name,\n    onMarkedDownAction: data.on_marked_down_action,\n    pool: data.pool,\n    proxyProtocol: data.proxy_protocol,\n    redispatchAttemptCount: data.redispatch_attempt_count,\n    sendProxyV2: data.send_proxy_v2,\n    sslBridging: data.ssl_bridging,\n    stickySessions: data.sticky_sessions,\n    stickySessionsCookieName: data.sticky_sessions_cookie_name,\n    timeoutConnect: data.timeout_connect,\n    timeoutQueue: data.timeout_queue,\n    timeoutServer: data.timeout_server,\n    timeoutTunnel: data.timeout_tunnel,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalCertificate = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Certificate' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    commonName: data.common_name,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    fingerprint: data.fingerprint,\n    id: data.id,\n    lb: data.lb ? unmarshalLb(data.lb) : void 0,\n    name: data.name,\n    notValidAfter: marshalling.unmarshalDate(data.not_valid_after),\n    notValidBefore: marshalling.unmarshalDate(data.not_valid_before),\n    status: data.status,\n    statusDetails: data.status_details,\n    subjectAlternativeName: data.subject_alternative_name,\n    type: data.type,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalFrontend = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Frontend' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    backend: data.backend ? unmarshalBackend(data.backend) : void 0,\n    certificate: data.certificate ? unmarshalCertificate(data.certificate) : void 0,\n    certificateIds: data.certificate_ids,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    enableHttp3: data.enable_http3,\n    id: data.id,\n    inboundPort: data.inbound_port,\n    lb: data.lb ? unmarshalLb(data.lb) : void 0,\n    name: data.name,\n    timeoutClient: data.timeout_client,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalAclActionRedirect = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'AclActionRedirect' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    code: data.code,\n    target: data.target,\n    type: data.type\n  };\n};\nconst unmarshalAclAction = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'AclAction' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    redirect: data.redirect ? unmarshalAclActionRedirect(data.redirect) : void 0,\n    type: data.type\n  };\n};\nconst unmarshalAclMatch = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'AclMatch' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    httpFilter: data.http_filter,\n    httpFilterOption: data.http_filter_option,\n    httpFilterValue: data.http_filter_value,\n    invert: data.invert,\n    ipSubnet: data.ip_subnet\n  };\n};\nconst unmarshalAcl = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Acl' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    action: data.action ? unmarshalAclAction(data.action) : void 0,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    description: data.description,\n    frontend: data.frontend ? unmarshalFrontend(data.frontend) : void 0,\n    id: data.id,\n    index: data.index,\n    match: data.match ? unmarshalAclMatch(data.match) : void 0,\n    name: data.name,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalPrivateNetworkDHCPConfig = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'PrivateNetworkDHCPConfig' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    ipId: data.ip_id\n  };\n};\nconst unmarshalPrivateNetworkIpamConfig = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'PrivateNetworkIpamConfig' failed as data isn't a dictionary.`\n    );\n  }\n  return {};\n};\nconst unmarshalPrivateNetworkStaticConfig = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'PrivateNetworkStaticConfig' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    ipAddress: data.ip_address ? data.ip_address : void 0\n  };\n};\nconst unmarshalPrivateNetwork = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'PrivateNetwork' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    dhcpConfig: data.dhcp_config ? unmarshalPrivateNetworkDHCPConfig(data.dhcp_config) : void 0,\n    ipamConfig: data.ipam_config ? unmarshalPrivateNetworkIpamConfig(data.ipam_config) : void 0,\n    ipamIds: data.ipam_ids,\n    lb: data.lb ? unmarshalLb(data.lb) : void 0,\n    privateNetworkId: data.private_network_id,\n    staticConfig: data.static_config ? unmarshalPrivateNetworkStaticConfig(data.static_config) : void 0,\n    status: data.status,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalRouteMatch = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'RouteMatch' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    hostHeader: data.host_header,\n    sni: data.sni\n  };\n};\nconst unmarshalRoute = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Route' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    backendId: data.backend_id,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    frontendId: data.frontend_id,\n    id: data.id,\n    match: data.match ? unmarshalRouteMatch(data.match) : void 0,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalBackendServerStats = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'BackendServerStats' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    backendId: data.backend_id,\n    instanceId: data.instance_id,\n    ip: data.ip,\n    lastHealthCheckStatus: data.last_health_check_status,\n    serverState: data.server_state,\n    serverStateChangedAt: marshalling.unmarshalDate(data.server_state_changed_at)\n  };\n};\nconst unmarshalLbStats = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'LbStats' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    backendServersStats: marshalling.unmarshalArrayOfObject(\n      data.backend_servers_stats,\n      unmarshalBackendServerStats\n    )\n  };\n};\nconst unmarshalListAclResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListAclResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    acls: marshalling.unmarshalArrayOfObject(data.acls, unmarshalAcl),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListBackendStatsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListBackendStatsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    backendServersStats: marshalling.unmarshalArrayOfObject(\n      data.backend_servers_stats,\n      unmarshalBackendServerStats\n    ),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListBackendsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListBackendsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    backends: marshalling.unmarshalArrayOfObject(data.backends, unmarshalBackend),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListCertificatesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListCertificatesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    certificates: marshalling.unmarshalArrayOfObject(\n      data.certificates,\n      unmarshalCertificate\n    ),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListFrontendsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListFrontendsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    frontends: marshalling.unmarshalArrayOfObject(data.frontends, unmarshalFrontend),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListIpsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListIpsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    ips: marshalling.unmarshalArrayOfObject(data.ips, unmarshalIp),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListLbPrivateNetworksResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListLbPrivateNetworksResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    privateNetwork: marshalling.unmarshalArrayOfObject(\n      data.private_network,\n      unmarshalPrivateNetwork\n    ),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalLbType = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'LbType' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    description: data.description,\n    name: data.name,\n    region: data.region,\n    stockStatus: data.stock_status,\n    zone: data.zone\n  };\n};\nconst unmarshalListLbTypesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListLbTypesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    lbTypes: marshalling.unmarshalArrayOfObject(data.lb_types, unmarshalLbType),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListLbsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListLbsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    lbs: marshalling.unmarshalArrayOfObject(data.lbs, unmarshalLb),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListRoutesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListRoutesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    routes: marshalling.unmarshalArrayOfObject(data.routes, unmarshalRoute),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListSubscriberResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListSubscriberResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    subscribers: marshalling.unmarshalArrayOfObject(data.subscribers, unmarshalSubscriber),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalSetAclsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SetAclsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    acls: marshalling.unmarshalArrayOfObject(data.acls, unmarshalAcl),\n    totalCount: data.total_count\n  };\n};\nconst marshalAddBackendServersRequest = (request, defaults) => ({\n  server_ip: request.serverIp\n});\nconst marshalPrivateNetworkDHCPConfig = (request, defaults) => ({\n  ip_id: request.ipId\n});\nconst marshalPrivateNetworkIpamConfig = (request, defaults) => ({});\nconst marshalPrivateNetworkStaticConfig = (request, defaults) => ({\n  ip_address: request.ipAddress\n});\nconst marshalAttachPrivateNetworkRequest = (request, defaults) => ({\n  ipam_ids: request.ipamIds,\n  ...marshalling.resolveOneOf([\n    {\n      param: \"static_config\",\n      value: request.staticConfig !== void 0 ? marshalPrivateNetworkStaticConfig(request.staticConfig) : void 0\n    },\n    {\n      param: \"dhcp_config\",\n      value: request.dhcpConfig !== void 0 ? marshalPrivateNetworkDHCPConfig(request.dhcpConfig) : void 0\n    },\n    {\n      param: \"ipam_config\",\n      value: request.ipamConfig !== void 0 ? marshalPrivateNetworkIpamConfig(request.ipamConfig) : void 0\n    }\n  ])\n});\nconst marshalAclActionRedirect = (request, defaults) => ({\n  code: request.code,\n  target: request.target,\n  type: request.type\n});\nconst marshalAclAction = (request, defaults) => ({\n  redirect: request.redirect !== void 0 ? marshalAclActionRedirect(request.redirect) : void 0,\n  type: request.type\n});\nconst marshalAclMatch = (request, defaults) => ({\n  http_filter: request.httpFilter,\n  http_filter_option: request.httpFilterOption,\n  http_filter_value: request.httpFilterValue,\n  invert: request.invert,\n  ip_subnet: request.ipSubnet\n});\nconst marshalCreateAclRequest = (request, defaults) => ({\n  action: marshalAclAction(request.action),\n  description: request.description,\n  index: request.index,\n  match: request.match !== void 0 ? marshalAclMatch(request.match) : void 0,\n  name: request.name || randomName(\"acl\")\n});\nconst marshalHealthCheckHttpConfig = (request, defaults) => ({\n  code: request.code,\n  host_header: request.hostHeader,\n  method: request.method,\n  uri: request.uri\n});\nconst marshalHealthCheckHttpsConfig = (request, defaults) => ({\n  code: request.code,\n  host_header: request.hostHeader,\n  method: request.method,\n  sni: request.sni,\n  uri: request.uri\n});\nconst marshalHealthCheckLdapConfig = (request, defaults) => ({});\nconst marshalHealthCheckMysqlConfig = (request, defaults) => ({\n  user: request.user\n});\nconst marshalHealthCheckPgsqlConfig = (request, defaults) => ({\n  user: request.user\n});\nconst marshalHealthCheckRedisConfig = (request, defaults) => ({});\nconst marshalHealthCheckTcpConfig = (request, defaults) => ({});\nconst marshalHealthCheck = (request, defaults) => ({\n  check_delay: request.checkDelay,\n  check_max_retries: request.checkMaxRetries,\n  check_send_proxy: request.checkSendProxy,\n  check_timeout: request.checkTimeout,\n  port: request.port,\n  transient_check_delay: request.transientCheckDelay,\n  ...marshalling.resolveOneOf([\n    {\n      param: \"tcp_config\",\n      value: request.tcpConfig !== void 0 ? marshalHealthCheckTcpConfig(request.tcpConfig) : void 0\n    },\n    {\n      param: \"mysql_config\",\n      value: request.mysqlConfig !== void 0 ? marshalHealthCheckMysqlConfig(request.mysqlConfig) : void 0\n    },\n    {\n      param: \"pgsql_config\",\n      value: request.pgsqlConfig !== void 0 ? marshalHealthCheckPgsqlConfig(request.pgsqlConfig) : void 0\n    },\n    {\n      param: \"ldap_config\",\n      value: request.ldapConfig !== void 0 ? marshalHealthCheckLdapConfig(request.ldapConfig) : void 0\n    },\n    {\n      param: \"redis_config\",\n      value: request.redisConfig !== void 0 ? marshalHealthCheckRedisConfig(request.redisConfig) : void 0\n    },\n    {\n      param: \"http_config\",\n      value: request.httpConfig !== void 0 ? marshalHealthCheckHttpConfig(request.httpConfig) : void 0\n    },\n    {\n      param: \"https_config\",\n      value: request.httpsConfig !== void 0 ? marshalHealthCheckHttpsConfig(request.httpsConfig) : void 0\n    }\n  ])\n});\nconst marshalCreateBackendRequest = (request, defaults) => ({\n  failover_host: request.failoverHost,\n  forward_port: request.forwardPort,\n  forward_port_algorithm: request.forwardPortAlgorithm,\n  forward_protocol: request.forwardProtocol,\n  health_check: marshalHealthCheck(request.healthCheck),\n  ignore_ssl_server_verify: request.ignoreSslServerVerify,\n  max_connections: request.maxConnections,\n  max_retries: request.maxRetries,\n  name: request.name || randomName(\"lbb\"),\n  on_marked_down_action: request.onMarkedDownAction,\n  proxy_protocol: request.proxyProtocol,\n  redispatch_attempt_count: request.redispatchAttemptCount,\n  send_proxy_v2: request.sendProxyV2,\n  server_ip: request.serverIp,\n  ssl_bridging: request.sslBridging,\n  sticky_sessions: request.stickySessions,\n  sticky_sessions_cookie_name: request.stickySessionsCookieName,\n  timeout_connect: request.timeoutConnect,\n  timeout_queue: request.timeoutQueue,\n  timeout_server: request.timeoutServer,\n  timeout_tunnel: request.timeoutTunnel\n});\nconst marshalCreateCertificateRequestCustomCertificate = (request, defaults) => ({\n  certificate_chain: request.certificateChain\n});\nconst marshalCreateCertificateRequestLetsencryptConfig = (request, defaults) => ({\n  common_name: request.commonName,\n  subject_alternative_name: request.subjectAlternativeName\n});\nconst marshalCreateCertificateRequest = (request, defaults) => ({\n  name: request.name || randomName(\"certificate\"),\n  ...marshalling.resolveOneOf([\n    {\n      param: \"letsencrypt\",\n      value: request.letsencrypt !== void 0 ? marshalCreateCertificateRequestLetsencryptConfig(\n        request.letsencrypt\n      ) : void 0\n    },\n    {\n      param: \"custom_certificate\",\n      value: request.customCertificate !== void 0 ? marshalCreateCertificateRequestCustomCertificate(\n        request.customCertificate\n      ) : void 0\n    }\n  ])\n});\nconst marshalCreateFrontendRequest = (request, defaults) => ({\n  backend_id: request.backendId,\n  certificate_id: request.certificateId,\n  certificate_ids: request.certificateIds,\n  enable_http3: request.enableHttp3,\n  inbound_port: request.inboundPort,\n  name: request.name || randomName(\"lbf\"),\n  timeout_client: request.timeoutClient\n});\nconst marshalCreateIpRequest = (request, defaults) => ({\n  is_ipv6: request.isIpv6,\n  reverse: request.reverse,\n  tags: request.tags,\n  ...marshalling.resolveOneOf([\n    {\n      default: defaults.defaultProjectId,\n      param: \"project_id\",\n      value: request.projectId\n    },\n    {\n      default: defaults.defaultOrganizationId,\n      param: \"organization_id\",\n      value: request.organizationId\n    }\n  ])\n});\nconst marshalCreateLbRequest = (request, defaults) => ({\n  assign_flexible_ip: request.assignFlexibleIp,\n  assign_flexible_ipv6: request.assignFlexibleIpv6,\n  description: request.description,\n  ip_id: request.ipId,\n  ip_ids: request.ipIds,\n  name: request.name || randomName(\"lb\"),\n  ssl_compatibility_level: request.sslCompatibilityLevel,\n  tags: request.tags,\n  type: request.type,\n  ...marshalling.resolveOneOf([\n    {\n      default: defaults.defaultProjectId,\n      param: \"project_id\",\n      value: request.projectId\n    },\n    {\n      default: defaults.defaultOrganizationId,\n      param: \"organization_id\",\n      value: request.organizationId\n    }\n  ])\n});\nconst marshalRouteMatch = (request, defaults) => ({\n  ...marshalling.resolveOneOf([\n    { param: \"sni\", value: request.sni },\n    { param: \"host_header\", value: request.hostHeader }\n  ])\n});\nconst marshalCreateRouteRequest = (request, defaults) => ({\n  backend_id: request.backendId,\n  frontend_id: request.frontendId,\n  match: request.match !== void 0 ? marshalRouteMatch(request.match) : void 0\n});\nconst marshalSubscriberEmailConfig = (request, defaults) => ({\n  email: request.email\n});\nconst marshalSubscriberWebhookConfig = (request, defaults) => ({\n  uri: request.uri\n});\nconst marshalCreateSubscriberRequest = (request, defaults) => ({\n  name: request.name,\n  ...marshalling.resolveOneOf([\n    {\n      default: defaults.defaultProjectId,\n      param: \"project_id\",\n      value: request.projectId\n    },\n    {\n      default: defaults.defaultOrganizationId,\n      param: \"organization_id\",\n      value: request.organizationId\n    }\n  ]),\n  ...marshalling.resolveOneOf([\n    {\n      param: \"email_config\",\n      value: request.emailConfig !== void 0 ? marshalSubscriberEmailConfig(request.emailConfig) : void 0\n    },\n    {\n      param: \"webhook_config\",\n      value: request.webhookConfig !== void 0 ? marshalSubscriberWebhookConfig(request.webhookConfig) : void 0\n    }\n  ])\n});\nconst marshalMigrateLbRequest = (request, defaults) => ({\n  type: request.type\n});\nconst marshalRemoveBackendServersRequest = (request, defaults) => ({\n  server_ip: request.serverIp\n});\nconst marshalSetBackendServersRequest = (request, defaults) => ({\n  server_ip: request.serverIp\n});\nconst marshalSubscribeToLbRequest = (request, defaults) => ({\n  subscriber_id: request.subscriberId\n});\nconst marshalUpdateAclRequest = (request, defaults) => ({\n  action: marshalAclAction(request.action),\n  description: request.description,\n  index: request.index,\n  match: request.match !== void 0 ? marshalAclMatch(request.match) : void 0,\n  name: request.name\n});\nconst marshalUpdateBackendRequest = (request, defaults) => ({\n  failover_host: request.failoverHost,\n  forward_port: request.forwardPort,\n  forward_port_algorithm: request.forwardPortAlgorithm,\n  forward_protocol: request.forwardProtocol,\n  ignore_ssl_server_verify: request.ignoreSslServerVerify,\n  max_connections: request.maxConnections,\n  max_retries: request.maxRetries,\n  name: request.name,\n  on_marked_down_action: request.onMarkedDownAction,\n  proxy_protocol: request.proxyProtocol,\n  redispatch_attempt_count: request.redispatchAttemptCount,\n  send_proxy_v2: request.sendProxyV2,\n  ssl_bridging: request.sslBridging,\n  sticky_sessions: request.stickySessions,\n  sticky_sessions_cookie_name: request.stickySessionsCookieName,\n  timeout_connect: request.timeoutConnect,\n  timeout_queue: request.timeoutQueue,\n  timeout_server: request.timeoutServer,\n  timeout_tunnel: request.timeoutTunnel\n});\nconst marshalUpdateCertificateRequest = (request, defaults) => ({\n  name: request.name\n});\nconst marshalUpdateFrontendRequest = (request, defaults) => ({\n  backend_id: request.backendId,\n  certificate_id: request.certificateId,\n  certificate_ids: request.certificateIds,\n  enable_http3: request.enableHttp3,\n  inbound_port: request.inboundPort,\n  name: request.name,\n  timeout_client: request.timeoutClient\n});\nconst marshalUpdateHealthCheckRequest = (request, defaults) => ({\n  check_delay: request.checkDelay,\n  check_max_retries: request.checkMaxRetries,\n  check_send_proxy: request.checkSendProxy,\n  check_timeout: request.checkTimeout,\n  port: request.port,\n  transient_check_delay: request.transientCheckDelay,\n  ...marshalling.resolveOneOf([\n    {\n      param: \"tcp_config\",\n      value: request.tcpConfig !== void 0 ? marshalHealthCheckTcpConfig(request.tcpConfig) : void 0\n    },\n    {\n      param: \"mysql_config\",\n      value: request.mysqlConfig !== void 0 ? marshalHealthCheckMysqlConfig(request.mysqlConfig) : void 0\n    },\n    {\n      param: \"pgsql_config\",\n      value: request.pgsqlConfig !== void 0 ? marshalHealthCheckPgsqlConfig(request.pgsqlConfig) : void 0\n    },\n    {\n      param: \"ldap_config\",\n      value: request.ldapConfig !== void 0 ? marshalHealthCheckLdapConfig(request.ldapConfig) : void 0\n    },\n    {\n      param: \"redis_config\",\n      value: request.redisConfig !== void 0 ? marshalHealthCheckRedisConfig(request.redisConfig) : void 0\n    },\n    {\n      param: \"http_config\",\n      value: request.httpConfig !== void 0 ? marshalHealthCheckHttpConfig(request.httpConfig) : void 0\n    },\n    {\n      param: \"https_config\",\n      value: request.httpsConfig !== void 0 ? marshalHealthCheckHttpsConfig(request.httpsConfig) : void 0\n    }\n  ])\n});\nconst marshalUpdateIpRequest = (request, defaults) => ({\n  lb_id: request.lbId,\n  reverse: request.reverse,\n  tags: request.tags\n});\nconst marshalUpdateLbRequest = (request, defaults) => ({\n  description: request.description,\n  name: request.name,\n  ssl_compatibility_level: request.sslCompatibilityLevel,\n  tags: request.tags\n});\nconst marshalUpdateRouteRequest = (request, defaults) => ({\n  backend_id: request.backendId,\n  match: request.match !== void 0 ? marshalRouteMatch(request.match) : void 0\n});\nconst marshalUpdateSubscriberRequest = (request, defaults) => ({\n  name: request.name,\n  ...marshalling.resolveOneOf([\n    {\n      param: \"email_config\",\n      value: request.emailConfig !== void 0 ? marshalSubscriberEmailConfig(request.emailConfig) : void 0\n    },\n    {\n      param: \"webhook_config\",\n      value: request.webhookConfig !== void 0 ? marshalSubscriberWebhookConfig(request.webhookConfig) : void 0\n    }\n  ])\n});\nconst marshalZonedApiAddBackendServersRequest = (request, defaults) => ({\n  server_ip: request.serverIp\n});\nconst marshalZonedApiAttachPrivateNetworkRequest = (request, defaults) => ({\n  ipam_ids: request.ipamIds,\n  ...marshalling.resolveOneOf([\n    {\n      param: \"static_config\",\n      value: request.staticConfig !== void 0 ? marshalPrivateNetworkStaticConfig(request.staticConfig) : void 0\n    },\n    {\n      param: \"dhcp_config\",\n      value: request.dhcpConfig !== void 0 ? marshalPrivateNetworkDHCPConfig(request.dhcpConfig) : void 0\n    },\n    {\n      param: \"ipam_config\",\n      value: request.ipamConfig !== void 0 ? marshalPrivateNetworkIpamConfig(request.ipamConfig) : void 0\n    }\n  ])\n});\nconst marshalZonedApiCreateAclRequest = (request, defaults) => ({\n  action: marshalAclAction(request.action),\n  description: request.description,\n  index: request.index,\n  match: request.match !== void 0 ? marshalAclMatch(request.match) : void 0,\n  name: request.name || randomName(\"acl\")\n});\nconst marshalZonedApiCreateBackendRequest = (request, defaults) => ({\n  failover_host: request.failoverHost,\n  forward_port: request.forwardPort,\n  forward_port_algorithm: request.forwardPortAlgorithm,\n  forward_protocol: request.forwardProtocol,\n  health_check: marshalHealthCheck(request.healthCheck),\n  ignore_ssl_server_verify: request.ignoreSslServerVerify,\n  max_connections: request.maxConnections,\n  max_retries: request.maxRetries,\n  name: request.name || randomName(\"lbb\"),\n  on_marked_down_action: request.onMarkedDownAction,\n  proxy_protocol: request.proxyProtocol,\n  redispatch_attempt_count: request.redispatchAttemptCount,\n  send_proxy_v2: request.sendProxyV2,\n  server_ip: request.serverIp,\n  ssl_bridging: request.sslBridging,\n  sticky_sessions: request.stickySessions,\n  sticky_sessions_cookie_name: request.stickySessionsCookieName,\n  timeout_connect: request.timeoutConnect,\n  timeout_queue: request.timeoutQueue,\n  timeout_server: request.timeoutServer,\n  timeout_tunnel: request.timeoutTunnel\n});\nconst marshalZonedApiCreateCertificateRequest = (request, defaults) => ({\n  name: request.name || randomName(\"certificate\"),\n  ...marshalling.resolveOneOf([\n    {\n      param: \"letsencrypt\",\n      value: request.letsencrypt !== void 0 ? marshalCreateCertificateRequestLetsencryptConfig(\n        request.letsencrypt\n      ) : void 0\n    },\n    {\n      param: \"custom_certificate\",\n      value: request.customCertificate !== void 0 ? marshalCreateCertificateRequestCustomCertificate(\n        request.customCertificate\n      ) : void 0\n    }\n  ])\n});\nconst marshalZonedApiCreateFrontendRequest = (request, defaults) => ({\n  backend_id: request.backendId,\n  certificate_id: request.certificateId,\n  certificate_ids: request.certificateIds,\n  enable_http3: request.enableHttp3,\n  inbound_port: request.inboundPort,\n  name: request.name || randomName(\"lbf\"),\n  timeout_client: request.timeoutClient\n});\nconst marshalZonedApiCreateIpRequest = (request, defaults) => ({\n  is_ipv6: request.isIpv6,\n  reverse: request.reverse,\n  tags: request.tags,\n  ...marshalling.resolveOneOf([\n    {\n      default: defaults.defaultProjectId,\n      param: \"project_id\",\n      value: request.projectId\n    },\n    {\n      default: defaults.defaultOrganizationId,\n      param: \"organization_id\",\n      value: request.organizationId\n    }\n  ])\n});\nconst marshalZonedApiCreateLbRequest = (request, defaults) => ({\n  assign_flexible_ip: request.assignFlexibleIp,\n  assign_flexible_ipv6: request.assignFlexibleIpv6,\n  description: request.description,\n  ip_id: request.ipId,\n  ip_ids: request.ipIds,\n  name: request.name || randomName(\"lb\"),\n  ssl_compatibility_level: request.sslCompatibilityLevel,\n  tags: request.tags,\n  type: request.type,\n  ...marshalling.resolveOneOf([\n    {\n      default: defaults.defaultProjectId,\n      param: \"project_id\",\n      value: request.projectId\n    },\n    {\n      default: defaults.defaultOrganizationId,\n      param: \"organization_id\",\n      value: request.organizationId\n    }\n  ])\n});\nconst marshalZonedApiCreateRouteRequest = (request, defaults) => ({\n  backend_id: request.backendId,\n  frontend_id: request.frontendId,\n  match: request.match !== void 0 ? marshalRouteMatch(request.match) : void 0\n});\nconst marshalZonedApiCreateSubscriberRequest = (request, defaults) => ({\n  name: request.name,\n  ...marshalling.resolveOneOf([\n    {\n      default: defaults.defaultProjectId,\n      param: \"project_id\",\n      value: request.projectId\n    },\n    {\n      default: defaults.defaultOrganizationId,\n      param: \"organization_id\",\n      value: request.organizationId\n    }\n  ]),\n  ...marshalling.resolveOneOf([\n    {\n      param: \"email_config\",\n      value: request.emailConfig !== void 0 ? marshalSubscriberEmailConfig(request.emailConfig) : void 0\n    },\n    {\n      param: \"webhook_config\",\n      value: request.webhookConfig !== void 0 ? marshalSubscriberWebhookConfig(request.webhookConfig) : void 0\n    }\n  ])\n});\nconst marshalZonedApiMigrateLbRequest = (request, defaults) => ({\n  type: request.type\n});\nconst marshalZonedApiRemoveBackendServersRequest = (request, defaults) => ({\n  server_ip: request.serverIp\n});\nconst marshalAclSpec = (request, defaults) => ({\n  action: marshalAclAction(request.action),\n  description: request.description,\n  index: request.index,\n  match: request.match !== void 0 ? marshalAclMatch(request.match) : void 0,\n  name: request.name\n});\nconst marshalZonedApiSetAclsRequest = (request, defaults) => ({\n  acls: request.acls.map((elt) => marshalAclSpec(elt))\n});\nconst marshalZonedApiSetBackendServersRequest = (request, defaults) => ({\n  server_ip: request.serverIp\n});\nconst marshalZonedApiSubscribeToLbRequest = (request, defaults) => ({\n  subscriber_id: request.subscriberId\n});\nconst marshalZonedApiUpdateAclRequest = (request, defaults) => ({\n  action: marshalAclAction(request.action),\n  description: request.description,\n  index: request.index,\n  match: request.match !== void 0 ? marshalAclMatch(request.match) : void 0,\n  name: request.name\n});\nconst marshalZonedApiUpdateBackendRequest = (request, defaults) => ({\n  failover_host: request.failoverHost,\n  forward_port: request.forwardPort,\n  forward_port_algorithm: request.forwardPortAlgorithm,\n  forward_protocol: request.forwardProtocol,\n  ignore_ssl_server_verify: request.ignoreSslServerVerify,\n  max_connections: request.maxConnections,\n  max_retries: request.maxRetries,\n  name: request.name,\n  on_marked_down_action: request.onMarkedDownAction,\n  proxy_protocol: request.proxyProtocol,\n  redispatch_attempt_count: request.redispatchAttemptCount,\n  send_proxy_v2: request.sendProxyV2,\n  ssl_bridging: request.sslBridging,\n  sticky_sessions: request.stickySessions,\n  sticky_sessions_cookie_name: request.stickySessionsCookieName,\n  timeout_connect: request.timeoutConnect,\n  timeout_queue: request.timeoutQueue,\n  timeout_server: request.timeoutServer,\n  timeout_tunnel: request.timeoutTunnel\n});\nconst marshalZonedApiUpdateCertificateRequest = (request, defaults) => ({\n  name: request.name\n});\nconst marshalZonedApiUpdateFrontendRequest = (request, defaults) => ({\n  backend_id: request.backendId,\n  certificate_id: request.certificateId,\n  certificate_ids: request.certificateIds,\n  enable_http3: request.enableHttp3,\n  inbound_port: request.inboundPort,\n  name: request.name,\n  timeout_client: request.timeoutClient\n});\nconst marshalZonedApiUpdateHealthCheckRequest = (request, defaults) => ({\n  check_delay: request.checkDelay,\n  check_max_retries: request.checkMaxRetries,\n  check_send_proxy: request.checkSendProxy,\n  check_timeout: request.checkTimeout,\n  port: request.port,\n  transient_check_delay: request.transientCheckDelay,\n  ...marshalling.resolveOneOf([\n    {\n      param: \"tcp_config\",\n      value: request.tcpConfig !== void 0 ? marshalHealthCheckTcpConfig(request.tcpConfig) : void 0\n    },\n    {\n      param: \"mysql_config\",\n      value: request.mysqlConfig !== void 0 ? marshalHealthCheckMysqlConfig(request.mysqlConfig) : void 0\n    },\n    {\n      param: \"pgsql_config\",\n      value: request.pgsqlConfig !== void 0 ? marshalHealthCheckPgsqlConfig(request.pgsqlConfig) : void 0\n    },\n    {\n      param: \"ldap_config\",\n      value: request.ldapConfig !== void 0 ? marshalHealthCheckLdapConfig(request.ldapConfig) : void 0\n    },\n    {\n      param: \"redis_config\",\n      value: request.redisConfig !== void 0 ? marshalHealthCheckRedisConfig(request.redisConfig) : void 0\n    },\n    {\n      param: \"http_config\",\n      value: request.httpConfig !== void 0 ? marshalHealthCheckHttpConfig(request.httpConfig) : void 0\n    },\n    {\n      param: \"https_config\",\n      value: request.httpsConfig !== void 0 ? marshalHealthCheckHttpsConfig(request.httpsConfig) : void 0\n    }\n  ])\n});\nconst marshalZonedApiUpdateIpRequest = (request, defaults) => ({\n  lb_id: request.lbId,\n  reverse: request.reverse,\n  tags: request.tags\n});\nconst marshalZonedApiUpdateLbRequest = (request, defaults) => ({\n  description: request.description,\n  name: request.name,\n  ssl_compatibility_level: request.sslCompatibilityLevel,\n  tags: request.tags\n});\nconst marshalZonedApiUpdateRouteRequest = (request, defaults) => ({\n  backend_id: request.backendId,\n  match: request.match !== void 0 ? marshalRouteMatch(request.match) : void 0\n});\nconst marshalZonedApiUpdateSubscriberRequest = (request, defaults) => ({\n  name: request.name,\n  ...marshalling.resolveOneOf([\n    {\n      param: \"email_config\",\n      value: request.emailConfig !== void 0 ? marshalSubscriberEmailConfig(request.emailConfig) : void 0\n    },\n    {\n      param: \"webhook_config\",\n      value: request.webhookConfig !== void 0 ? marshalSubscriberWebhookConfig(request.webhookConfig) : void 0\n    }\n  ])\n});\nexports.marshalAddBackendServersRequest = marshalAddBackendServersRequest;\nexports.marshalAttachPrivateNetworkRequest = marshalAttachPrivateNetworkRequest;\nexports.marshalCreateAclRequest = marshalCreateAclRequest;\nexports.marshalCreateBackendRequest = marshalCreateBackendRequest;\nexports.marshalCreateCertificateRequest = marshalCreateCertificateRequest;\nexports.marshalCreateFrontendRequest = marshalCreateFrontendRequest;\nexports.marshalCreateIpRequest = marshalCreateIpRequest;\nexports.marshalCreateLbRequest = marshalCreateLbRequest;\nexports.marshalCreateRouteRequest = marshalCreateRouteRequest;\nexports.marshalCreateSubscriberRequest = marshalCreateSubscriberRequest;\nexports.marshalMigrateLbRequest = marshalMigrateLbRequest;\nexports.marshalRemoveBackendServersRequest = marshalRemoveBackendServersRequest;\nexports.marshalSetBackendServersRequest = marshalSetBackendServersRequest;\nexports.marshalSubscribeToLbRequest = marshalSubscribeToLbRequest;\nexports.marshalUpdateAclRequest = marshalUpdateAclRequest;\nexports.marshalUpdateBackendRequest = marshalUpdateBackendRequest;\nexports.marshalUpdateCertificateRequest = marshalUpdateCertificateRequest;\nexports.marshalUpdateFrontendRequest = marshalUpdateFrontendRequest;\nexports.marshalUpdateHealthCheckRequest = marshalUpdateHealthCheckRequest;\nexports.marshalUpdateIpRequest = marshalUpdateIpRequest;\nexports.marshalUpdateLbRequest = marshalUpdateLbRequest;\nexports.marshalUpdateRouteRequest = marshalUpdateRouteRequest;\nexports.marshalUpdateSubscriberRequest = marshalUpdateSubscriberRequest;\nexports.marshalZonedApiAddBackendServersRequest = marshalZonedApiAddBackendServersRequest;\nexports.marshalZonedApiAttachPrivateNetworkRequest = marshalZonedApiAttachPrivateNetworkRequest;\nexports.marshalZonedApiCreateAclRequest = marshalZonedApiCreateAclRequest;\nexports.marshalZonedApiCreateBackendRequest = marshalZonedApiCreateBackendRequest;\nexports.marshalZonedApiCreateCertificateRequest = marshalZonedApiCreateCertificateRequest;\nexports.marshalZonedApiCreateFrontendRequest = marshalZonedApiCreateFrontendRequest;\nexports.marshalZonedApiCreateIpRequest = marshalZonedApiCreateIpRequest;\nexports.marshalZonedApiCreateLbRequest = marshalZonedApiCreateLbRequest;\nexports.marshalZonedApiCreateRouteRequest = marshalZonedApiCreateRouteRequest;\nexports.marshalZonedApiCreateSubscriberRequest = marshalZonedApiCreateSubscriberRequest;\nexports.marshalZonedApiMigrateLbRequest = marshalZonedApiMigrateLbRequest;\nexports.marshalZonedApiRemoveBackendServersRequest = marshalZonedApiRemoveBackendServersRequest;\nexports.marshalZonedApiSetAclsRequest = marshalZonedApiSetAclsRequest;\nexports.marshalZonedApiSetBackendServersRequest = marshalZonedApiSetBackendServersRequest;\nexports.marshalZonedApiSubscribeToLbRequest = marshalZonedApiSubscribeToLbRequest;\nexports.marshalZonedApiUpdateAclRequest = marshalZonedApiUpdateAclRequest;\nexports.marshalZonedApiUpdateBackendRequest = marshalZonedApiUpdateBackendRequest;\nexports.marshalZonedApiUpdateCertificateRequest = marshalZonedApiUpdateCertificateRequest;\nexports.marshalZonedApiUpdateFrontendRequest = marshalZonedApiUpdateFrontendRequest;\nexports.marshalZonedApiUpdateHealthCheckRequest = marshalZonedApiUpdateHealthCheckRequest;\nexports.marshalZonedApiUpdateIpRequest = marshalZonedApiUpdateIpRequest;\nexports.marshalZonedApiUpdateLbRequest = marshalZonedApiUpdateLbRequest;\nexports.marshalZonedApiUpdateRouteRequest = marshalZonedApiUpdateRouteRequest;\nexports.marshalZonedApiUpdateSubscriberRequest = marshalZonedApiUpdateSubscriberRequest;\nexports.unmarshalAcl = unmarshalAcl;\nexports.unmarshalBackend = unmarshalBackend;\nexports.unmarshalBackendServerStats = unmarshalBackendServerStats;\nexports.unmarshalCertificate = unmarshalCertificate;\nexports.unmarshalFrontend = unmarshalFrontend;\nexports.unmarshalHealthCheck = unmarshalHealthCheck;\nexports.unmarshalIp = unmarshalIp;\nexports.unmarshalLb = unmarshalLb;\nexports.unmarshalLbStats = unmarshalLbStats;\nexports.unmarshalListAclResponse = unmarshalListAclResponse;\nexports.unmarshalListBackendStatsResponse = unmarshalListBackendStatsResponse;\nexports.unmarshalListBackendsResponse = unmarshalListBackendsResponse;\nexports.unmarshalListCertificatesResponse = unmarshalListCertificatesResponse;\nexports.unmarshalListFrontendsResponse = unmarshalListFrontendsResponse;\nexports.unmarshalListIpsResponse = unmarshalListIpsResponse;\nexports.unmarshalListLbPrivateNetworksResponse = unmarshalListLbPrivateNetworksResponse;\nexports.unmarshalListLbTypesResponse = unmarshalListLbTypesResponse;\nexports.unmarshalListLbsResponse = unmarshalListLbsResponse;\nexports.unmarshalListRoutesResponse = unmarshalListRoutesResponse;\nexports.unmarshalListSubscriberResponse = unmarshalListSubscriberResponse;\nexports.unmarshalPrivateNetwork = unmarshalPrivateNetwork;\nexports.unmarshalRoute = unmarshalRoute;\nexports.unmarshalSetAclsResponse = unmarshalSetAclsResponse;\nexports.unmarshalSubscriber = unmarshalSubscriber;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index_gen = require(\"./v1beta1/index.gen.cjs\");\nexports.v1beta1 = index_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst intervalRetrier = require(\"../../../internal/async/interval-retrier.cjs\");\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass API extends api.API {\n  /** Lists the available regions of the API. */\n  static LOCALITIES = [\"fr-par\"];\n  pageOfListDeployments = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/llm-inference/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/deployments`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId],\n        [\"tags\", request.tags]\n      )\n    },\n    marshalling_gen.unmarshalListDeploymentsResponse\n  );\n  /**\n   * List inference deployments. List all your inference deployments.\n   *\n   * @param request - The request {@link ListDeploymentsRequest}\n   * @returns A Promise of ListDeploymentsResponse\n   */\n  listDeployments = (request = {}) => resourcePaginator.enrichForPagination(\"deployments\", this.pageOfListDeployments, request);\n  /**\n   * Get a deployment. Get the deployment for the given ID.\n   *\n   * @param request - The request {@link GetDeploymentRequest}\n   * @returns A Promise of Deployment\n   */\n  getDeployment = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/llm-inference/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/deployments/${marshalling.validatePathParam(\"deploymentId\", request.deploymentId)}`\n    },\n    marshalling_gen.unmarshalDeployment\n  );\n  /**\n   * Waits for {@link Deployment} to be in a final state.\n   *\n   * @param request - The request {@link GetDeploymentRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Deployment\n   */\n  waitForDeployment = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.DEPLOYMENT_TRANSIENT_STATUSES.includes(res.status))),\n    this.getDeployment,\n    request,\n    options\n  );\n  /**\n   * Create a deployment. Create a new inference deployment related to a\n   * specific model.\n   *\n   * @param request - The request {@link CreateDeploymentRequest}\n   * @returns A Promise of Deployment\n   */\n  createDeployment = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateDeploymentRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/llm-inference/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/deployments`\n    },\n    marshalling_gen.unmarshalDeployment\n  );\n  /**\n   * Update a deployment. Update an existing inference deployment.\n   *\n   * @param request - The request {@link UpdateDeploymentRequest}\n   * @returns A Promise of Deployment\n   */\n  updateDeployment = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateDeploymentRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/llm-inference/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/deployments/${marshalling.validatePathParam(\"deploymentId\", request.deploymentId)}`\n    },\n    marshalling_gen.unmarshalDeployment\n  );\n  /**\n   * Delete a deployment. Delete an existing inference deployment.\n   *\n   * @param request - The request {@link DeleteDeploymentRequest}\n   * @returns A Promise of Deployment\n   */\n  deleteDeployment = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/llm-inference/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/deployments/${marshalling.validatePathParam(\"deploymentId\", request.deploymentId)}`\n    },\n    marshalling_gen.unmarshalDeployment\n  );\n  /**\n   * Get the CA certificate. Get the CA certificate used for the deployment of\n   * private endpoints. The CA certificate will be returned as a PEM file.\n   *\n   * @param request - The request {@link GetDeploymentCertificateRequest}\n   * @returns A Promise of Blob\n   */\n  getDeploymentCertificate = (request) => this.client.fetch({\n    method: \"GET\",\n    path: `/llm-inference/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/deployments/${marshalling.validatePathParam(\"deploymentId\", request.deploymentId)}/certificate`,\n    urlParams: marshalling.urlParams([\"dl\", 1]),\n    responseType: \"blob\"\n  });\n  /**\n   * Create an endpoint. Create a new Endpoint related to a specific deployment.\n   *\n   * @param request - The request {@link CreateEndpointRequest}\n   * @returns A Promise of Endpoint\n   */\n  createEndpoint = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateEndpointRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/llm-inference/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/endpoints`\n    },\n    marshalling_gen.unmarshalEndpoint\n  );\n  /**\n   * Update an endpoint. Update an existing Endpoint.\n   *\n   * @param request - The request {@link UpdateEndpointRequest}\n   * @returns A Promise of Endpoint\n   */\n  updateEndpoint = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateEndpointRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/llm-inference/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/endpoints/${marshalling.validatePathParam(\"endpointId\", request.endpointId)}`\n    },\n    marshalling_gen.unmarshalEndpoint\n  );\n  /**\n   * Delete an endpoint. Delete an existing Endpoint.\n   *\n   * @param request - The request {@link DeleteEndpointRequest}\n   */\n  deleteEndpoint = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/llm-inference/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/endpoints/${marshalling.validatePathParam(\"endpointId\", request.endpointId)}`\n  });\n  pageOfListDeploymentACLRules = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/llm-inference/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/deployments/${marshalling.validatePathParam(\"deploymentId\", request.deploymentId)}/acls`,\n      urlParams: marshalling.urlParams(\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListDeploymentACLRulesResponse\n  );\n  /**\n   * List your ACLs. List ACLs for a specific deployment.\n   *\n   * @param request - The request {@link ListDeploymentACLRulesRequest}\n   * @returns A Promise of ListDeploymentACLRulesResponse\n   */\n  listDeploymentACLRules = (request) => resourcePaginator.enrichForPagination(\"rules\", this.pageOfListDeploymentACLRules, request);\n  /**\n   * Add new ACLs. Add new ACL rules for a specific deployment.\n   *\n   * @param request - The request {@link AddDeploymentACLRulesRequest}\n   * @returns A Promise of AddDeploymentACLRulesResponse\n   */\n  addDeploymentACLRules = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalAddDeploymentACLRulesRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/llm-inference/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/deployments/${marshalling.validatePathParam(\"deploymentId\", request.deploymentId)}/acls`\n    },\n    marshalling_gen.unmarshalAddDeploymentACLRulesResponse\n  );\n  /**\n   * Set new ACL. Set new ACL rules for a specific deployment.\n   *\n   * @param request - The request {@link SetDeploymentACLRulesRequest}\n   * @returns A Promise of SetDeploymentACLRulesResponse\n   */\n  setDeploymentACLRules = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSetDeploymentACLRulesRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/llm-inference/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/deployments/${marshalling.validatePathParam(\"deploymentId\", request.deploymentId)}/acls`\n    },\n    marshalling_gen.unmarshalSetDeploymentACLRulesResponse\n  );\n  /**\n   * Delete an exising ACL.\n   *\n   * @param request - The request {@link DeleteDeploymentACLRuleRequest}\n   */\n  deleteDeploymentACLRule = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/llm-inference/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/acls/${marshalling.validatePathParam(\"aclId\", request.aclId)}`\n  });\n  pageOfListModels = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/llm-inference/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/models`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId],\n        [\"tags\", request.tags]\n      )\n    },\n    marshalling_gen.unmarshalListModelsResponse\n  );\n  /**\n   * List models. List all available models.\n   *\n   * @param request - The request {@link ListModelsRequest}\n   * @returns A Promise of ListModelsResponse\n   */\n  listModels = (request = {}) => resourcePaginator.enrichForPagination(\"models\", this.pageOfListModels, request);\n  /**\n   * Get a model. Get the model for the given ID.\n   *\n   * @param request - The request {@link GetModelRequest}\n   * @returns A Promise of Model\n   */\n  getModel = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/llm-inference/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/models/${marshalling.validatePathParam(\"modelId\", request.modelId)}`\n    },\n    marshalling_gen.unmarshalModel\n  );\n  getModelEula = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/llm-inference/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/models/${marshalling.validatePathParam(\"modelId\", request.modelId)}/eula`\n    },\n    marshalling_gen.unmarshalEula\n  );\n  pageOfListNodeTypes = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/llm-inference/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/node-types`,\n      urlParams: marshalling.urlParams(\n        [\"include_disabled_types\", request.includeDisabledTypes],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListNodeTypesResponse\n  );\n  /**\n   * List available node types. List all available node types. By default, the\n   * node types returned in the list are ordered by creation date in ascending\n   * order, though this can be modified via the `order_by` field.\n   *\n   * @param request - The request {@link ListNodeTypesRequest}\n   * @returns A Promise of ListNodeTypesResponse\n   */\n  listNodeTypes = (request) => resourcePaginator.enrichForPagination(\"nodeTypes\", this.pageOfListNodeTypes, request);\n}\nexports.API = API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst DEPLOYMENT_TRANSIENT_STATUSES = [\n  \"creating\",\n  \"deploying\",\n  \"deleting\"\n];\nexports.DEPLOYMENT_TRANSIENT_STATUSES = DEPLOYMENT_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst validationRules_gen = require(\"./validation-rules.gen.cjs\");\nexports.API = api_gen.API;\nexports.DEPLOYMENT_TRANSIENT_STATUSES = content_gen.DEPLOYMENT_TRANSIENT_STATUSES;\nexports.ValidationRules = validationRules_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst randomName = require(\"@scaleway/random-name\");\nconst json = require(\"../../../helpers/json.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst unmarshalEndpointPrivateNetworkDetails = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'EndpointPrivateNetworkDetails' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    privateNetworkId: data.private_network_id\n  };\n};\nconst unmarshalEndpointPublicAccessDetails = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'EndpointPublicAccessDetails' failed as data isn't a dictionary.`\n    );\n  }\n  return {};\n};\nconst unmarshalEndpoint = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Endpoint' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    disableAuth: data.disable_auth,\n    id: data.id,\n    privateNetwork: data.private_network ? unmarshalEndpointPrivateNetworkDetails(data.private_network) : void 0,\n    publicAccess: data.public_access ? unmarshalEndpointPublicAccessDetails(data.public_access) : void 0,\n    url: data.url\n  };\n};\nconst unmarshalDeployment = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Deployment' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    endpoints: marshalling.unmarshalArrayOfObject(data.endpoints, unmarshalEndpoint),\n    errorMessage: data.error_message,\n    id: data.id,\n    maxSize: data.max_size,\n    minSize: data.min_size,\n    modelName: data.model_name,\n    name: data.name,\n    nodeType: data.node_type,\n    projectId: data.project_id,\n    region: data.region,\n    size: data.size,\n    status: data.status,\n    tags: data.tags,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalModelS3Model = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ModelS3Model' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    nodeType: data.node_type,\n    pythonDependencies: data.python_dependencies,\n    s3Url: data.s3_url,\n    tritonServerVersion: data.triton_server_version\n  };\n};\nconst unmarshalModel = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Model' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    compatibleNodeTypes: data.compatible_node_types,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    description: data.description,\n    hasEula: data.has_eula,\n    id: data.id,\n    isPublic: data.is_public,\n    name: data.name,\n    projectId: data.project_id,\n    provider: data.provider,\n    quantizationLevel: data.quantization_level,\n    region: data.region,\n    s3Model: data.s3_model ? unmarshalModelS3Model(data.s3_model) : void 0,\n    tags: data.tags,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalACLRule = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ACLRule' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    description: data.description,\n    id: data.id,\n    ip: data.ip\n  };\n};\nconst unmarshalAddDeploymentACLRulesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'AddDeploymentACLRulesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    rules: marshalling.unmarshalArrayOfObject(data.rules, unmarshalACLRule)\n  };\n};\nconst unmarshalEula = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Eula' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    content: data.content\n  };\n};\nconst unmarshalListDeploymentACLRulesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListDeploymentACLRulesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    rules: marshalling.unmarshalArrayOfObject(data.rules, unmarshalACLRule),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListDeploymentsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListDeploymentsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    deployments: marshalling.unmarshalArrayOfObject(data.deployments, unmarshalDeployment),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListModelsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListModelsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    models: marshalling.unmarshalArrayOfObject(data.models, unmarshalModel),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalNodeType = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'NodeType' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    beta: data.beta,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    description: data.description,\n    disabled: data.disabled,\n    gpus: data.gpus,\n    memory: data.memory,\n    name: data.name,\n    region: data.region,\n    stockStatus: data.stock_status,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    vcpus: data.vcpus,\n    vram: data.vram\n  };\n};\nconst unmarshalListNodeTypesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListNodeTypesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    nodeTypes: marshalling.unmarshalArrayOfObject(data.node_types, unmarshalNodeType),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalSetDeploymentACLRulesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SetDeploymentACLRulesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    rules: marshalling.unmarshalArrayOfObject(data.rules, unmarshalACLRule)\n  };\n};\nconst marshalACLRuleRequest = (request, defaults) => ({\n  description: request.description,\n  ip: request.ip\n});\nconst marshalAddDeploymentACLRulesRequest = (request, defaults) => ({\n  acls: request.acls !== void 0 ? request.acls.map((elt) => marshalACLRuleRequest(elt)) : void 0\n});\nconst marshalEndpointSpecPrivateNetwork = (request, defaults) => ({\n  private_network_id: request.privateNetworkId\n});\nconst marshalEndpointSpecPublic = (request, defaults) => ({});\nconst marshalEndpointSpec = (request, defaults) => ({\n  disable_auth: request.disableAuth,\n  ...marshalling.resolveOneOf([\n    {\n      param: \"public\",\n      value: request.public !== void 0 ? marshalEndpointSpecPublic(request.public) : void 0\n    },\n    {\n      param: \"private_network\",\n      value: request.privateNetwork !== void 0 ? marshalEndpointSpecPrivateNetwork(request.privateNetwork) : void 0\n    }\n  ])\n});\nconst marshalCreateDeploymentRequest = (request, defaults) => ({\n  accept_eula: request.acceptEula,\n  endpoints: request.endpoints.map((elt) => marshalEndpointSpec(elt)),\n  max_size: request.maxSize,\n  min_size: request.minSize,\n  model_name: request.modelName,\n  name: request.name || randomName(\"llm\"),\n  node_type: request.nodeType,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  tags: request.tags\n});\nconst marshalCreateEndpointRequest = (request, defaults) => ({\n  deployment_id: request.deploymentId,\n  endpoint: marshalEndpointSpec(request.endpoint)\n});\nconst marshalSetDeploymentACLRulesRequest = (request, defaults) => ({\n  acls: request.acls !== void 0 ? request.acls.map((elt) => marshalACLRuleRequest(elt)) : void 0\n});\nconst marshalUpdateDeploymentRequest = (request, defaults) => ({\n  max_size: request.maxSize,\n  min_size: request.minSize,\n  name: request.name,\n  tags: request.tags\n});\nconst marshalUpdateEndpointRequest = (request, defaults) => ({\n  disable_auth: request.disableAuth\n});\nexports.marshalAddDeploymentACLRulesRequest = marshalAddDeploymentACLRulesRequest;\nexports.marshalCreateDeploymentRequest = marshalCreateDeploymentRequest;\nexports.marshalCreateEndpointRequest = marshalCreateEndpointRequest;\nexports.marshalSetDeploymentACLRulesRequest = marshalSetDeploymentACLRulesRequest;\nexports.marshalUpdateDeploymentRequest = marshalUpdateDeploymentRequest;\nexports.marshalUpdateEndpointRequest = marshalUpdateEndpointRequest;\nexports.unmarshalAddDeploymentACLRulesResponse = unmarshalAddDeploymentACLRulesResponse;\nexports.unmarshalDeployment = unmarshalDeployment;\nexports.unmarshalEndpoint = unmarshalEndpoint;\nexports.unmarshalEula = unmarshalEula;\nexports.unmarshalListDeploymentACLRulesResponse = unmarshalListDeploymentACLRulesResponse;\nexports.unmarshalListDeploymentsResponse = unmarshalListDeploymentsResponse;\nexports.unmarshalListModelsResponse = unmarshalListModelsResponse;\nexports.unmarshalListNodeTypesResponse = unmarshalListNodeTypesResponse;\nexports.unmarshalModel = unmarshalModel;\nexports.unmarshalSetDeploymentACLRulesResponse = unmarshalSetDeploymentACLRulesResponse;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst CreateDeploymentRequest = {\n  maxSize: {\n    greaterThanOrEqual: 1,\n    lessThanOrEqual: 50\n  },\n  minSize: {\n    greaterThanOrEqual: 1,\n    lessThanOrEqual: 50\n  },\n  modelName: {\n    maxLength: 255,\n    minLength: 0,\n    pattern: /^[\\w-_]+\\/[\\w-_.]+(:[\\w]+)?$/\n  },\n  name: {\n    maxLength: 255,\n    minLength: 1,\n    pattern: /^[A-Za-z0-9-_]+$/\n  },\n  nodeType: {\n    maxLength: 64,\n    minLength: 1\n  }\n};\nconst ListDeploymentsRequest = {\n  name: {\n    maxLength: 255,\n    minLength: 1\n  }\n};\nconst ListModelsRequest = {\n  name: {\n    maxLength: 255,\n    minLength: 1\n  }\n};\nconst UpdateDeploymentRequest = {\n  maxSize: {\n    greaterThanOrEqual: 1,\n    lessThanOrEqual: 50\n  },\n  minSize: {\n    greaterThanOrEqual: 1,\n    lessThanOrEqual: 50\n  },\n  name: {\n    maxLength: 255,\n    minLength: 1\n  }\n};\nexports.CreateDeploymentRequest = CreateDeploymentRequest;\nexports.ListDeploymentsRequest = ListDeploymentsRequest;\nexports.ListModelsRequest = ListModelsRequest;\nexports.UpdateDeploymentRequest = UpdateDeploymentRequest;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index_gen = require(\"./v2/index.gen.cjs\");\nexports.v2 = index_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nclass API extends api.API {\n  pageOfListImages = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/marketplace/v2/images`,\n      urlParams: marshalling.urlParams(\n        [\"arch\", request.arch],\n        [\"category\", request.category],\n        [\"include_eol\", request.includeEol],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListImagesResponse\n  );\n  /**\n   * List marketplace images. List all available images on the marketplace,\n   * their UUID, CPU architecture and description.\n   *\n   * @param request - The request {@link ListImagesRequest}\n   * @returns A Promise of ListImagesResponse\n   */\n  listImages = (request) => resourcePaginator.enrichForPagination(\"images\", this.pageOfListImages, request);\n  /**\n   * Get a specific marketplace image. Get detailed information about a\n   * marketplace image, specified by its `image_id` (UUID format).\n   *\n   * @param request - The request {@link GetImageRequest}\n   * @returns A Promise of Image\n   */\n  getImage = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/marketplace/v2/images/${marshalling.validatePathParam(\"imageId\", request.imageId)}`\n    },\n    marshalling_gen.unmarshalImage\n  );\n  pageOfListVersions = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/marketplace/v2/versions`,\n      urlParams: marshalling.urlParams(\n        [\"image_id\", request.imageId],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListVersionsResponse\n  );\n  /**\n   * List versions of an Image. Get a list of all available version of an image,\n   * specified by its `image_id` (UUID format).\n   *\n   * @param request - The request {@link ListVersionsRequest}\n   * @returns A Promise of ListVersionsResponse\n   */\n  listVersions = (request) => resourcePaginator.enrichForPagination(\"versions\", this.pageOfListVersions, request);\n  /**\n   * Get a specific image version. Get information such as the name, creation\n   * date, last update and published date for an image version specified by its\n   * `version_id` (UUID format).\n   *\n   * @param request - The request {@link GetVersionRequest}\n   * @returns A Promise of Version\n   */\n  getVersion = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/marketplace/v2/versions/${marshalling.validatePathParam(\"versionId\", request.versionId)}`\n    },\n    marshalling_gen.unmarshalVersion\n  );\n  pageOfListLocalImages = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/marketplace/v2/local-images`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"type\", request.type],\n        [\"zone\", request.zone],\n        ...Object.entries(\n          marshalling.resolveOneOf([\n            { param: \"image_id\", value: request.imageId },\n            { param: \"version_id\", value: request.versionId },\n            { param: \"image_label\", value: request.imageLabel }\n          ])\n        )\n      )\n    },\n    marshalling_gen.unmarshalListLocalImagesResponse\n  );\n  /**\n   * List local images from a specific image or version. List information about\n   * local images in a specific Availability Zone, specified by its `image_id`\n   * (UUID format), `version_id` (UUID format) or `image_label`. Only one of\n   * these three parameters may be set.\n   *\n   * @param request - The request {@link ListLocalImagesRequest}\n   * @returns A Promise of ListLocalImagesResponse\n   */\n  listLocalImages = (request = {}) => resourcePaginator.enrichForPagination(\"localImages\", this.pageOfListLocalImages, request);\n  /**\n   * Get a specific local image by ID. Get detailed information about a local\n   * image, including compatible commercial types, supported architecture,\n   * labels and the Availability Zone of the image, specified by its\n   * `local_image_id` (UUID format).\n   *\n   * @param request - The request {@link GetLocalImageRequest}\n   * @returns A Promise of LocalImage\n   */\n  getLocalImage = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/marketplace/v2/local-images/${marshalling.validatePathParam(\"localImageId\", request.localImageId)}`\n    },\n    marshalling_gen.unmarshalLocalImage\n  );\n  pageOfListCategories = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/marketplace/v2/categories`,\n      urlParams: marshalling.urlParams(\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListCategoriesResponse\n  );\n  /**\n   * List existing image categories. Get a list of all existing categories. The\n   * output can be paginated.\n   *\n   * @param request - The request {@link ListCategoriesRequest}\n   * @returns A Promise of ListCategoriesResponse\n   */\n  listCategories = (request = {}) => resourcePaginator.enrichForPagination(\"categories\", this.pageOfListCategories, request);\n  /**\n   * Get a specific category. Get information about a specific category of the\n   * marketplace catalog, specified by its `category_id` (UUID format).\n   *\n   * @param request - The request {@link GetCategoryRequest}\n   * @returns A Promise of Category\n   */\n  getCategory = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/marketplace/v2/categories/${marshalling.validatePathParam(\"categoryId\", request.categoryId)}`\n    },\n    marshalling_gen.unmarshalCategory\n  );\n}\nexports.API = API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nexports.API = api_gen.API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst json = require(\"../../../helpers/json.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst unmarshalCategory = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Category' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    description: data.description,\n    id: data.id,\n    name: data.name\n  };\n};\nconst unmarshalImage = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Image' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    categories: data.categories,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    description: data.description,\n    id: data.id,\n    label: data.label,\n    logo: data.logo,\n    name: data.name,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    validUntil: marshalling.unmarshalDate(data.valid_until)\n  };\n};\nconst unmarshalLocalImage = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'LocalImage' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    arch: data.arch,\n    compatibleCommercialTypes: data.compatible_commercial_types,\n    id: data.id,\n    label: data.label,\n    type: data.type,\n    zone: data.zone\n  };\n};\nconst unmarshalVersion = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Version' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    id: data.id,\n    name: data.name,\n    publishedAt: marshalling.unmarshalDate(data.published_at),\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalListCategoriesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListCategoriesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    categories: marshalling.unmarshalArrayOfObject(data.categories, unmarshalCategory),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListImagesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListImagesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    images: marshalling.unmarshalArrayOfObject(data.images, unmarshalImage),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListLocalImagesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListLocalImagesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    localImages: marshalling.unmarshalArrayOfObject(data.local_images, unmarshalLocalImage),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListVersionsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListVersionsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    totalCount: data.total_count,\n    versions: marshalling.unmarshalArrayOfObject(data.versions, unmarshalVersion)\n  };\n};\nexports.unmarshalCategory = unmarshalCategory;\nexports.unmarshalImage = unmarshalImage;\nexports.unmarshalListCategoriesResponse = unmarshalListCategoriesResponse;\nexports.unmarshalListImagesResponse = unmarshalListImagesResponse;\nexports.unmarshalListLocalImagesResponse = unmarshalListLocalImagesResponse;\nexports.unmarshalListVersionsResponse = unmarshalListVersionsResponse;\nexports.unmarshalLocalImage = unmarshalLocalImage;\nexports.unmarshalVersion = unmarshalVersion;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index_gen = require(\"./v1beta1/index.gen.cjs\");\nexports.v1beta1 = index_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass NatsAPI extends api.API {\n  /** Lists the available regions of the API. */\n  static LOCALITIES = [\"fr-par\", \"nl-ams\"];\n  /**\n   * Create a NATS account. Create a NATS account associated with a Project.\n   *\n   * @param request - The request {@link NatsApiCreateNatsAccountRequest}\n   * @returns A Promise of NatsAccount\n   */\n  createNatsAccount = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalNatsApiCreateNatsAccountRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/nats-accounts`\n    },\n    marshalling_gen.unmarshalNatsAccount\n  );\n  /**\n   * Delete a NATS account. Delete a NATS account, specified by its NATS account\n   * ID. Note that deleting a NATS account is irreversible, and any credentials,\n   * streams, consumer and stored messages belonging to this NATS account will\n   * also be deleted.\n   *\n   * @param request - The request {@link NatsApiDeleteNatsAccountRequest}\n   */\n  deleteNatsAccount = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/mnq/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/nats-accounts/${marshalling.validatePathParam(\"natsAccountId\", request.natsAccountId)}`\n  });\n  /**\n   * Update the name of a NATS account. Update the name of a NATS account,\n   * specified by its NATS account ID.\n   *\n   * @param request - The request {@link NatsApiUpdateNatsAccountRequest}\n   * @returns A Promise of NatsAccount\n   */\n  updateNatsAccount = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalNatsApiUpdateNatsAccountRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/nats-accounts/${marshalling.validatePathParam(\"natsAccountId\", request.natsAccountId)}`\n    },\n    marshalling_gen.unmarshalNatsAccount\n  );\n  /**\n   * Get a NATS account. Retrieve information about an existing NATS account\n   * identified by its NATS account ID. Its full details, including name and\n   * endpoint, are returned in the response.\n   *\n   * @param request - The request {@link NatsApiGetNatsAccountRequest}\n   * @returns A Promise of NatsAccount\n   */\n  getNatsAccount = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/nats-accounts/${marshalling.validatePathParam(\"natsAccountId\", request.natsAccountId)}`\n    },\n    marshalling_gen.unmarshalNatsAccount\n  );\n  pageOfListNatsAccounts = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/nats-accounts`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListNatsAccountsResponse\n  );\n  /**\n   * List NATS accounts. List all NATS accounts in the specified region, for a\n   * Scaleway Organization or Project. By default, the NATS accounts returned in\n   * the list are ordered by creation date in ascending order, though this can\n   * be modified via the `order_by` field.\n   *\n   * @param request - The request {@link NatsApiListNatsAccountsRequest}\n   * @returns A Promise of ListNatsAccountsResponse\n   */\n  listNatsAccounts = (request = {}) => resourcePaginator.enrichForPagination(\"natsAccounts\", this.pageOfListNatsAccounts, request);\n  /**\n   * Create NATS credentials. Create a set of credentials for a NATS account,\n   * specified by its NATS account ID.\n   *\n   * @param request - The request {@link NatsApiCreateNatsCredentialsRequest}\n   * @returns A Promise of NatsCredentials\n   */\n  createNatsCredentials = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalNatsApiCreateNatsCredentialsRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/nats-credentials`\n    },\n    marshalling_gen.unmarshalNatsCredentials\n  );\n  /**\n   * Delete NATS credentials. Delete a set of credentials, specified by their\n   * credentials ID. Deleting credentials is irreversible and cannot be undone.\n   * The credentials can no longer be used to access the NATS account, and\n   * active connections using this credentials will be closed.\n   *\n   * @param request - The request {@link NatsApiDeleteNatsCredentialsRequest}\n   */\n  deleteNatsCredentials = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/mnq/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/nats-credentials/${marshalling.validatePathParam(\"natsCredentialsId\", request.natsCredentialsId)}`\n  });\n  /**\n   * Get NATS credentials. Retrieve an existing set of credentials, identified\n   * by the `nats_credentials_id`. The credentials themselves are NOT returned,\n   * only their metadata (NATS account ID, credentials name, etc), are returned\n   * in the response.\n   *\n   * @param request - The request {@link NatsApiGetNatsCredentialsRequest}\n   * @returns A Promise of NatsCredentials\n   */\n  getNatsCredentials = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/nats-credentials/${marshalling.validatePathParam(\"natsCredentialsId\", request.natsCredentialsId)}`\n    },\n    marshalling_gen.unmarshalNatsCredentials\n  );\n  pageOfListNatsCredentials = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/nats-credentials`,\n      urlParams: marshalling.urlParams(\n        [\"nats_account_id\", request.natsAccountId],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListNatsCredentialsResponse\n  );\n  /**\n   * List NATS credentials. List existing credentials in the specified NATS\n   * account. The response contains only the metadata for the credentials, not\n   * the credentials themselves, which are only returned after a **Create\n   * Credentials** call.\n   *\n   * @param request - The request {@link NatsApiListNatsCredentialsRequest}\n   * @returns A Promise of ListNatsCredentialsResponse\n   */\n  listNatsCredentials = (request = {}) => resourcePaginator.enrichForPagination(\n    \"natsCredentials\",\n    this.pageOfListNatsCredentials,\n    request\n  );\n}\nclass SnsAPI extends api.API {\n  /** Lists the available regions of the API. */\n  static LOCALITIES = [\"fr-par\", \"nl-ams\"];\n  /**\n   * Activate SNS. Activate SNS for the specified Project ID. SNS must be\n   * activated before any usage. Activating SNS does not trigger any billing,\n   * and you can deactivate at any time.\n   *\n   * @param request - The request {@link SnsApiActivateSnsRequest}\n   * @returns A Promise of SnsInfo\n   */\n  activateSns = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSnsApiActivateSnsRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/activate-sns`\n    },\n    marshalling_gen.unmarshalSnsInfo\n  );\n  /**\n   * Get SNS info. Retrieve the SNS information of the specified Project ID.\n   * Informations include the activation status and the SNS API endpoint URL.\n   *\n   * @param request - The request {@link SnsApiGetSnsInfoRequest}\n   * @returns A Promise of SnsInfo\n   */\n  getSnsInfo = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/sns-info`,\n      urlParams: marshalling.urlParams([\n        \"project_id\",\n        request.projectId ?? this.client.settings.defaultProjectId\n      ])\n    },\n    marshalling_gen.unmarshalSnsInfo\n  );\n  /**\n   * Deactivate SNS. Deactivate SNS for the specified Project ID.You must delete\n   * all topics and credentials before this call or you need to set the\n   * force_delete parameter.\n   *\n   * @param request - The request {@link SnsApiDeactivateSnsRequest}\n   * @returns A Promise of SnsInfo\n   */\n  deactivateSns = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSnsApiDeactivateSnsRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/deactivate-sns`\n    },\n    marshalling_gen.unmarshalSnsInfo\n  );\n  /**\n   * Create SNS credentials. Create a set of credentials for SNS, specified by a\n   * Project ID. Credentials give the bearer access to topics, and the level of\n   * permissions can be defined granularly.\n   *\n   * @param request - The request {@link SnsApiCreateSnsCredentialsRequest}\n   * @returns A Promise of SnsCredentials\n   */\n  createSnsCredentials = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSnsApiCreateSnsCredentialsRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/sns-credentials`\n    },\n    marshalling_gen.unmarshalSnsCredentials\n  );\n  /**\n   * Delete SNS credentials. Delete a set of SNS credentials, specified by their\n   * credentials ID. Deleting credentials is irreversible and cannot be undone.\n   * The credentials can then no longer be used to access SNS.\n   *\n   * @param request - The request {@link SnsApiDeleteSnsCredentialsRequest}\n   */\n  deleteSnsCredentials = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/mnq/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/sns-credentials/${marshalling.validatePathParam(\"snsCredentialsId\", request.snsCredentialsId)}`\n  });\n  /**\n   * Update SNS credentials. Update a set of SNS credentials. You can update the\n   * credentials' name, or their permissions.\n   *\n   * @param request - The request {@link SnsApiUpdateSnsCredentialsRequest}\n   * @returns A Promise of SnsCredentials\n   */\n  updateSnsCredentials = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSnsApiUpdateSnsCredentialsRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/sns-credentials/${marshalling.validatePathParam(\"snsCredentialsId\", request.snsCredentialsId)}`\n    },\n    marshalling_gen.unmarshalSnsCredentials\n  );\n  /**\n   * Get SNS credentials. Retrieve an existing set of credentials, identified by\n   * the `credentials_id`. The credentials themselves, as well as their metadata\n   * (name, project ID etc), are returned in the response.\n   *\n   * @param request - The request {@link SnsApiGetSnsCredentialsRequest}\n   * @returns A Promise of SnsCredentials\n   */\n  getSnsCredentials = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/sns-credentials/${marshalling.validatePathParam(\"snsCredentialsId\", request.snsCredentialsId)}`\n    },\n    marshalling_gen.unmarshalSnsCredentials\n  );\n  pageOfListSnsCredentials = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/sns-credentials`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListSnsCredentialsResponse\n  );\n  /**\n   * List SNS credentials. List existing SNS credentials in the specified\n   * region. The response contains only the metadata for the credentials, not\n   * the credentials themselves.\n   *\n   * @param request - The request {@link SnsApiListSnsCredentialsRequest}\n   * @returns A Promise of ListSnsCredentialsResponse\n   */\n  listSnsCredentials = (request = {}) => resourcePaginator.enrichForPagination(\n    \"snsCredentials\",\n    this.pageOfListSnsCredentials,\n    request\n  );\n}\nclass SqsAPI extends api.API {\n  /** Lists the available regions of the API. */\n  static LOCALITIES = [\"fr-par\", \"nl-ams\"];\n  /**\n   * Activate SQS. Activate SQS for the specified Project ID. SQS must be\n   * activated before any usage such as creating credentials and queues.\n   * Activating SQS does not trigger any billing, and you can deactivate at any\n   * time.\n   *\n   * @param request - The request {@link SqsApiActivateSqsRequest}\n   * @returns A Promise of SqsInfo\n   */\n  activateSqs = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSqsApiActivateSqsRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/activate-sqs`\n    },\n    marshalling_gen.unmarshalSqsInfo\n  );\n  /**\n   * Get SQS info. Retrieve the SQS information of the specified Project ID.\n   * Informations include the activation status and the SQS API endpoint URL.\n   *\n   * @param request - The request {@link SqsApiGetSqsInfoRequest}\n   * @returns A Promise of SqsInfo\n   */\n  getSqsInfo = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/sqs-info`,\n      urlParams: marshalling.urlParams([\n        \"project_id\",\n        request.projectId ?? this.client.settings.defaultProjectId\n      ])\n    },\n    marshalling_gen.unmarshalSqsInfo\n  );\n  /**\n   * Deactivate SQS. Deactivate SQS for the specified Project ID. You must\n   * delete all queues and credentials before this call or you need to set the\n   * force_delete parameter.\n   *\n   * @param request - The request {@link SqsApiDeactivateSqsRequest}\n   * @returns A Promise of SqsInfo\n   */\n  deactivateSqs = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSqsApiDeactivateSqsRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/deactivate-sqs`\n    },\n    marshalling_gen.unmarshalSqsInfo\n  );\n  /**\n   * Create SQS credentials. Create a set of credentials for SQS, specified by a\n   * Project ID. Credentials give the bearer access to queues, and the level of\n   * permissions can be defined granularly.\n   *\n   * @param request - The request {@link SqsApiCreateSqsCredentialsRequest}\n   * @returns A Promise of SqsCredentials\n   */\n  createSqsCredentials = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSqsApiCreateSqsCredentialsRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/sqs-credentials`\n    },\n    marshalling_gen.unmarshalSqsCredentials\n  );\n  /**\n   * Delete SQS credentials. Delete a set of SQS credentials, specified by their\n   * credentials ID. Deleting credentials is irreversible and cannot be undone.\n   * The credentials can then no longer be used to access SQS.\n   *\n   * @param request - The request {@link SqsApiDeleteSqsCredentialsRequest}\n   */\n  deleteSqsCredentials = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/mnq/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/sqs-credentials/${marshalling.validatePathParam(\"sqsCredentialsId\", request.sqsCredentialsId)}`\n  });\n  /**\n   * Update SQS credentials. Update a set of SQS credentials. You can update the\n   * credentials' name, or their permissions.\n   *\n   * @param request - The request {@link SqsApiUpdateSqsCredentialsRequest}\n   * @returns A Promise of SqsCredentials\n   */\n  updateSqsCredentials = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSqsApiUpdateSqsCredentialsRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/sqs-credentials/${marshalling.validatePathParam(\"sqsCredentialsId\", request.sqsCredentialsId)}`\n    },\n    marshalling_gen.unmarshalSqsCredentials\n  );\n  /**\n   * Get SQS credentials. Retrieve an existing set of credentials, identified by\n   * the `credentials_id`. The credentials themselves, as well as their metadata\n   * (name, project ID etc), are returned in the response.\n   *\n   * @param request - The request {@link SqsApiGetSqsCredentialsRequest}\n   * @returns A Promise of SqsCredentials\n   */\n  getSqsCredentials = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/sqs-credentials/${marshalling.validatePathParam(\"sqsCredentialsId\", request.sqsCredentialsId)}`\n    },\n    marshalling_gen.unmarshalSqsCredentials\n  );\n  pageOfListSqsCredentials = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/mnq/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/sqs-credentials`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListSqsCredentialsResponse\n  );\n  /**\n   * List SQS credentials. List existing SQS credentials in the specified\n   * region. The response contains only the metadata for the credentials, not\n   * the credentials themselves.\n   *\n   * @param request - The request {@link SqsApiListSqsCredentialsRequest}\n   * @returns A Promise of ListSqsCredentialsResponse\n   */\n  listSqsCredentials = (request = {}) => resourcePaginator.enrichForPagination(\n    \"sqsCredentials\",\n    this.pageOfListSqsCredentials,\n    request\n  );\n}\nexports.NatsAPI = NatsAPI;\nexports.SnsAPI = SnsAPI;\nexports.SqsAPI = SqsAPI;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nconst validationRules_gen = require(\"./validation-rules.gen.cjs\");\nexports.NatsAPI = api_gen.NatsAPI;\nexports.SnsAPI = api_gen.SnsAPI;\nexports.SqsAPI = api_gen.SqsAPI;\nexports.ValidationRules = validationRules_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst randomName = require(\"@scaleway/random-name\");\nconst json = require(\"../../../helpers/json.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst unmarshalNatsAccount = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'NatsAccount' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    endpoint: data.endpoint,\n    id: data.id,\n    name: data.name,\n    projectId: data.project_id,\n    region: data.region,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalFile = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'File' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    content: data.content,\n    name: data.name\n  };\n};\nconst unmarshalNatsCredentials = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'NatsCredentials' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    checksum: data.checksum,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    credentials: data.credentials ? unmarshalFile(data.credentials) : void 0,\n    id: data.id,\n    name: data.name,\n    natsAccountId: data.nats_account_id,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalSnsPermissions = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SnsPermissions' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    canManage: data.can_manage,\n    canPublish: data.can_publish,\n    canReceive: data.can_receive\n  };\n};\nconst unmarshalSnsCredentials = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SnsCredentials' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    accessKey: data.access_key,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    id: data.id,\n    name: data.name,\n    permissions: data.permissions ? unmarshalSnsPermissions(data.permissions) : void 0,\n    projectId: data.project_id,\n    region: data.region,\n    secretChecksum: data.secret_checksum,\n    secretKey: data.secret_key,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalSqsPermissions = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SqsPermissions' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    canManage: data.can_manage,\n    canPublish: data.can_publish,\n    canReceive: data.can_receive\n  };\n};\nconst unmarshalSqsCredentials = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SqsCredentials' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    accessKey: data.access_key,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    id: data.id,\n    name: data.name,\n    permissions: data.permissions ? unmarshalSqsPermissions(data.permissions) : void 0,\n    projectId: data.project_id,\n    region: data.region,\n    secretChecksum: data.secret_checksum,\n    secretKey: data.secret_key,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalListNatsAccountsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListNatsAccountsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    natsAccounts: marshalling.unmarshalArrayOfObject(\n      data.nats_accounts,\n      unmarshalNatsAccount\n    ),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListNatsCredentialsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListNatsCredentialsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    natsCredentials: marshalling.unmarshalArrayOfObject(\n      data.nats_credentials,\n      unmarshalNatsCredentials\n    ),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListSnsCredentialsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListSnsCredentialsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    snsCredentials: marshalling.unmarshalArrayOfObject(\n      data.sns_credentials,\n      unmarshalSnsCredentials\n    ),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListSqsCredentialsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListSqsCredentialsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    sqsCredentials: marshalling.unmarshalArrayOfObject(\n      data.sqs_credentials,\n      unmarshalSqsCredentials\n    ),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalSnsInfo = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SnsInfo' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    projectId: data.project_id,\n    region: data.region,\n    snsEndpointUrl: data.sns_endpoint_url,\n    status: data.status,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalSqsInfo = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SqsInfo' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    projectId: data.project_id,\n    region: data.region,\n    sqsEndpointUrl: data.sqs_endpoint_url,\n    status: data.status,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst marshalNatsApiCreateNatsAccountRequest = (request, defaults) => ({\n  name: request.name || randomName(\"mnq\"),\n  project_id: request.projectId ?? defaults.defaultProjectId\n});\nconst marshalNatsApiCreateNatsCredentialsRequest = (request, defaults) => ({\n  name: request.name || randomName(\"mnq\"),\n  nats_account_id: request.natsAccountId\n});\nconst marshalNatsApiUpdateNatsAccountRequest = (request, defaults) => ({\n  name: request.name\n});\nconst marshalSnsApiActivateSnsRequest = (request, defaults) => ({\n  project_id: request.projectId ?? defaults.defaultProjectId\n});\nconst marshalSnsPermissions = (request, defaults) => ({\n  can_manage: request.canManage,\n  can_publish: request.canPublish,\n  can_receive: request.canReceive\n});\nconst marshalSnsApiCreateSnsCredentialsRequest = (request, defaults) => ({\n  name: request.name || randomName(\"mnq_sns\"),\n  permissions: request.permissions !== void 0 ? marshalSnsPermissions(request.permissions) : void 0,\n  project_id: request.projectId ?? defaults.defaultProjectId\n});\nconst marshalSnsApiDeactivateSnsRequest = (request, defaults) => ({\n  project_id: request.projectId ?? defaults.defaultProjectId\n});\nconst marshalSnsApiUpdateSnsCredentialsRequest = (request, defaults) => ({\n  name: request.name,\n  permissions: request.permissions !== void 0 ? marshalSnsPermissions(request.permissions) : void 0\n});\nconst marshalSqsApiActivateSqsRequest = (request, defaults) => ({\n  project_id: request.projectId ?? defaults.defaultProjectId\n});\nconst marshalSqsPermissions = (request, defaults) => ({\n  can_manage: request.canManage,\n  can_publish: request.canPublish,\n  can_receive: request.canReceive\n});\nconst marshalSqsApiCreateSqsCredentialsRequest = (request, defaults) => ({\n  name: request.name || randomName(\"mnq_sqs\"),\n  permissions: request.permissions !== void 0 ? marshalSqsPermissions(request.permissions) : void 0,\n  project_id: request.projectId ?? defaults.defaultProjectId\n});\nconst marshalSqsApiDeactivateSqsRequest = (request, defaults) => ({\n  project_id: request.projectId ?? defaults.defaultProjectId\n});\nconst marshalSqsApiUpdateSqsCredentialsRequest = (request, defaults) => ({\n  name: request.name,\n  permissions: request.permissions !== void 0 ? marshalSqsPermissions(request.permissions) : void 0\n});\nexports.marshalNatsApiCreateNatsAccountRequest = marshalNatsApiCreateNatsAccountRequest;\nexports.marshalNatsApiCreateNatsCredentialsRequest = marshalNatsApiCreateNatsCredentialsRequest;\nexports.marshalNatsApiUpdateNatsAccountRequest = marshalNatsApiUpdateNatsAccountRequest;\nexports.marshalSnsApiActivateSnsRequest = marshalSnsApiActivateSnsRequest;\nexports.marshalSnsApiCreateSnsCredentialsRequest = marshalSnsApiCreateSnsCredentialsRequest;\nexports.marshalSnsApiDeactivateSnsRequest = marshalSnsApiDeactivateSnsRequest;\nexports.marshalSnsApiUpdateSnsCredentialsRequest = marshalSnsApiUpdateSnsCredentialsRequest;\nexports.marshalSqsApiActivateSqsRequest = marshalSqsApiActivateSqsRequest;\nexports.marshalSqsApiCreateSqsCredentialsRequest = marshalSqsApiCreateSqsCredentialsRequest;\nexports.marshalSqsApiDeactivateSqsRequest = marshalSqsApiDeactivateSqsRequest;\nexports.marshalSqsApiUpdateSqsCredentialsRequest = marshalSqsApiUpdateSqsCredentialsRequest;\nexports.unmarshalListNatsAccountsResponse = unmarshalListNatsAccountsResponse;\nexports.unmarshalListNatsCredentialsResponse = unmarshalListNatsCredentialsResponse;\nexports.unmarshalListSnsCredentialsResponse = unmarshalListSnsCredentialsResponse;\nexports.unmarshalListSqsCredentialsResponse = unmarshalListSqsCredentialsResponse;\nexports.unmarshalNatsAccount = unmarshalNatsAccount;\nexports.unmarshalNatsCredentials = unmarshalNatsCredentials;\nexports.unmarshalSnsCredentials = unmarshalSnsCredentials;\nexports.unmarshalSnsInfo = unmarshalSnsInfo;\nexports.unmarshalSqsCredentials = unmarshalSqsCredentials;\nexports.unmarshalSqsInfo = unmarshalSqsInfo;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst NatsAccount = {\n  name: {\n    maxLength: 64,\n    minLength: 1\n  }\n};\nconst NatsApiCreateNatsAccountRequest = {\n  name: {\n    maxLength: 64,\n    minLength: 1\n  }\n};\nconst NatsApiCreateNatsCredentialsRequest = {\n  name: {\n    maxLength: 500,\n    minLength: 1\n  }\n};\nconst NatsApiUpdateNatsAccountRequest = {\n  name: {\n    maxLength: 64,\n    minLength: 1\n  }\n};\nconst NatsCredentials = {\n  name: {\n    maxLength: 500,\n    minLength: 1\n  }\n};\nconst SnsApiCreateSnsCredentialsRequest = {\n  name: {\n    maxLength: 500,\n    minLength: 1\n  }\n};\nconst SnsApiUpdateSnsCredentialsRequest = {\n  name: {\n    maxLength: 500,\n    minLength: 1\n  }\n};\nconst SnsCredentials = {\n  accessKey: {\n    minLength: 1\n  },\n  name: {\n    maxLength: 500,\n    minLength: 1\n  }\n};\nconst SqsApiCreateSqsCredentialsRequest = {\n  name: {\n    maxLength: 500,\n    minLength: 1\n  }\n};\nconst SqsApiUpdateSqsCredentialsRequest = {\n  name: {\n    maxLength: 500,\n    minLength: 1\n  }\n};\nconst SqsCredentials = {\n  accessKey: {\n    minLength: 1\n  },\n  name: {\n    maxLength: 500,\n    minLength: 1\n  }\n};\nexports.NatsAccount = NatsAccount;\nexports.NatsApiCreateNatsAccountRequest = NatsApiCreateNatsAccountRequest;\nexports.NatsApiCreateNatsCredentialsRequest = NatsApiCreateNatsCredentialsRequest;\nexports.NatsApiUpdateNatsAccountRequest = NatsApiUpdateNatsAccountRequest;\nexports.NatsCredentials = NatsCredentials;\nexports.SnsApiCreateSnsCredentialsRequest = SnsApiCreateSnsCredentialsRequest;\nexports.SnsApiUpdateSnsCredentialsRequest = SnsApiUpdateSnsCredentialsRequest;\nexports.SnsCredentials = SnsCredentials;\nexports.SqsApiCreateSqsCredentialsRequest = SqsApiCreateSqsCredentialsRequest;\nexports.SqsApiUpdateSqsCredentialsRequest = SqsApiUpdateSqsCredentialsRequest;\nexports.SqsCredentials = SqsCredentials;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index_gen = require(\"./v1alpha1/index.gen.cjs\");\nexports.v1alpha1 = index_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst intervalRetrier = require(\"../../../internal/async/interval-retrier.cjs\");\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass API extends api.API {\n  /**\n   * Get job information. Retrieve information about the provided **job ID**,\n   * such as status, payload, and result.\n   *\n   * @param request - The request {@link GetJobRequest}\n   * @returns A Promise of Job\n   */\n  getJob = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/qaas/v1alpha1/jobs/${marshalling.validatePathParam(\"jobId\", request.jobId)}`\n    },\n    marshalling_gen.unmarshalJob\n  );\n  /**\n   * Waits for {@link Job} to be in a final state.\n   *\n   * @param request - The request {@link GetJobRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Job\n   */\n  waitForJob = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.JOB_TRANSIENT_STATUSES.includes(res.status))),\n    this.getJob,\n    request,\n    options\n  );\n  pageOfListJobs = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/qaas/v1alpha1/jobs`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"tags\", request.tags],\n        ...Object.entries(\n          marshalling.resolveOneOf([\n            { param: \"session_id\", value: request.sessionId },\n            {\n              default: this.client.settings.defaultProjectId,\n              param: \"project_id\",\n              value: request.projectId\n            }\n          ])\n        )\n      )\n    },\n    marshalling_gen.unmarshalListJobsResponse\n  );\n  /**\n   * List all jobs within a project or session. Retrieve information about all\n   * jobs within a given project or session.\n   *\n   * @param request - The request {@link ListJobsRequest}\n   * @returns A Promise of ListJobsResponse\n   */\n  listJobs = (request = {}) => resourcePaginator.enrichForPagination(\"jobs\", this.pageOfListJobs, request);\n  pageOfListJobResults = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/qaas/v1alpha1/jobs/${marshalling.validatePathParam(\"jobId\", request.jobId)}/results`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListJobResultsResponse\n  );\n  /**\n   * List all results of a job. Retrieve all intermediate and final results of a\n   * job.\n   *\n   * @param request - The request {@link ListJobResultsRequest}\n   * @returns A Promise of ListJobResultsResponse\n   */\n  listJobResults = (request) => resourcePaginator.enrichForPagination(\"jobResults\", this.pageOfListJobResults, request);\n  /**\n   * Create a job. Create a job to be executed inside a session.\n   *\n   * @param request - The request {@link CreateJobRequest}\n   * @returns A Promise of Job\n   */\n  createJob = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateJobRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/qaas/v1alpha1/jobs`\n    },\n    marshalling_gen.unmarshalJob\n  );\n  /**\n   * Update job information. Update job information about the provided **job\n   * ID**.\n   *\n   * @param request - The request {@link UpdateJobRequest}\n   * @returns A Promise of Job\n   */\n  updateJob = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateJobRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/qaas/v1alpha1/jobs/${marshalling.validatePathParam(\"jobId\", request.jobId)}`\n    },\n    marshalling_gen.unmarshalJob\n  );\n  /**\n   * Cancel a job. Cancel the job corresponding to the provided **job ID**.\n   *\n   * @param request - The request {@link CancelJobRequest}\n   * @returns A Promise of Job\n   */\n  cancelJob = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/qaas/v1alpha1/jobs/${marshalling.validatePathParam(\"jobId\", request.jobId)}/cancel`\n    },\n    marshalling_gen.unmarshalJob\n  );\n  /**\n   * Delete a job. Delete the job corresponding to the provided **job ID**.\n   *\n   * @param request - The request {@link DeleteJobRequest}\n   */\n  deleteJob = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/qaas/v1alpha1/jobs/${marshalling.validatePathParam(\"jobId\", request.jobId)}`\n  });\n  /**\n   * Get a job circuit. Retrieve the circuit of the provided **job ID**.\n   *\n   * @param request - The request {@link GetJobCircuitRequest}\n   * @returns A Promise of JobCircuit\n   */\n  getJobCircuit = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/qaas/v1alpha1/jobs/${marshalling.validatePathParam(\"jobId\", request.jobId)}/circuit`\n    },\n    marshalling_gen.unmarshalJobCircuit\n  );\n  /**\n   * Get platform information. Retrieve information about the provided\n   * **platform ID**, such as provider name, technology, and type.\n   *\n   * @param request - The request {@link GetPlatformRequest}\n   * @returns A Promise of Platform\n   */\n  getPlatform = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/qaas/v1alpha1/platforms/${marshalling.validatePathParam(\"platformId\", request.platformId)}`\n    },\n    marshalling_gen.unmarshalPlatform\n  );\n  pageOfListPlatforms = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/qaas/v1alpha1/platforms`,\n      urlParams: marshalling.urlParams(\n        [\"backend_name\", request.backendName],\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"platform_technology\", request.platformTechnology],\n        [\"platform_type\", request.platformType],\n        [\"provider_name\", request.providerName]\n      )\n    },\n    marshalling_gen.unmarshalListPlatformsResponse\n  );\n  /**\n   * List all available platforms. Retrieve information about all platforms.\n   *\n   * @param request - The request {@link ListPlatformsRequest}\n   * @returns A Promise of ListPlatformsResponse\n   */\n  listPlatforms = (request = {}) => resourcePaginator.enrichForPagination(\"platforms\", this.pageOfListPlatforms, request);\n  /**\n   * Get session infrormation. Retrieve information about the provided **session\n   * ID**, such as name, status, and number of executed jobs.\n   *\n   * @param request - The request {@link GetSessionRequest}\n   * @returns A Promise of Session\n   */\n  getSession = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/qaas/v1alpha1/sessions/${marshalling.validatePathParam(\"sessionId\", request.sessionId)}`\n    },\n    marshalling_gen.unmarshalSession\n  );\n  /**\n   * Waits for {@link Session} to be in a final state.\n   *\n   * @param request - The request {@link GetSessionRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Session\n   */\n  waitForSession = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.SESSION_TRANSIENT_STATUSES.includes(res.status))),\n    this.getSession,\n    request,\n    options\n  );\n  pageOfListSessions = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/qaas/v1alpha1/sessions`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"platform_id\", request.platformId],\n        [\n          \"project_id\",\n          request.projectId ?? this.client.settings.defaultProjectId\n        ],\n        [\"tags\", request.tags]\n      )\n    },\n    marshalling_gen.unmarshalListSessionsResponse\n  );\n  /**\n   * List all sessions. Retrieve information about all sessions.\n   *\n   * @param request - The request {@link ListSessionsRequest}\n   * @returns A Promise of ListSessionsResponse\n   */\n  listSessions = (request = {}) => resourcePaginator.enrichForPagination(\"sessions\", this.pageOfListSessions, request);\n  /**\n   * Create a session. Create a dedicated session for the specified platform.\n   *\n   * @param request - The request {@link CreateSessionRequest}\n   * @returns A Promise of Session\n   */\n  createSession = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateSessionRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/qaas/v1alpha1/sessions`\n    },\n    marshalling_gen.unmarshalSession\n  );\n  /**\n   * Update session information. Update session information of the provided\n   * **session ID**.\n   *\n   * @param request - The request {@link UpdateSessionRequest}\n   * @returns A Promise of Session\n   */\n  updateSession = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateSessionRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/qaas/v1alpha1/sessions/${marshalling.validatePathParam(\"sessionId\", request.sessionId)}`\n    },\n    marshalling_gen.unmarshalSession\n  );\n  /**\n   * Terminate an existing session. Terminate a session by its unique ID and\n   * cancel all its attached jobs.\n   *\n   * @param request - The request {@link TerminateSessionRequest}\n   * @returns A Promise of Session\n   */\n  terminateSession = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/qaas/v1alpha1/sessions/${marshalling.validatePathParam(\"sessionId\", request.sessionId)}/terminate`\n    },\n    marshalling_gen.unmarshalSession\n  );\n  /**\n   * Delete an existing session. Delete a session by its unique ID and delete\n   * all its attached jobs.\n   *\n   * @param request - The request {@link DeleteSessionRequest}\n   */\n  deleteSession = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/qaas/v1alpha1/sessions/${marshalling.validatePathParam(\"sessionId\", request.sessionId)}`\n  });\n  pageOfListSessionACLs = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/qaas/v1alpha1/sessions/${marshalling.validatePathParam(\"sessionId\", request.sessionId)}/acls`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListSessionACLsResponse\n  );\n  listSessionACLs = (request) => resourcePaginator.enrichForPagination(\"acls\", this.pageOfListSessionACLs, request);\n  /**\n   * Create a process. Create a new process for the specified application on a\n   * specified platform.\n   *\n   * @param request - The request {@link CreateProcessRequest}\n   * @returns A Promise of Process\n   */\n  createProcess = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateProcessRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/qaas/v1alpha1/processes`\n    },\n    marshalling_gen.unmarshalProcess\n  );\n  /**\n   * Get process infrormation. Retrieve information about the provided **process\n   * ID**, such as name, status and progress.\n   *\n   * @param request - The request {@link GetProcessRequest}\n   * @returns A Promise of Process\n   */\n  getProcess = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/qaas/v1alpha1/processes/${marshalling.validatePathParam(\"processId\", request.processId)}`\n    },\n    marshalling_gen.unmarshalProcess\n  );\n  /**\n   * Waits for {@link Process} to be in a final state.\n   *\n   * @param request - The request {@link GetProcessRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Process\n   */\n  waitForProcess = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.PROCESS_TRANSIENT_STATUSES.includes(res.status))),\n    this.getProcess,\n    request,\n    options\n  );\n  pageOfListProcesses = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/qaas/v1alpha1/processes`,\n      urlParams: marshalling.urlParams(\n        [\"application_id\", request.applicationId],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\n          \"project_id\",\n          request.projectId ?? this.client.settings.defaultProjectId\n        ],\n        [\"tags\", request.tags]\n      )\n    },\n    marshalling_gen.unmarshalListProcessesResponse\n  );\n  /**\n   * List all processes. Retrieve information about all processes.\n   *\n   * @param request - The request {@link ListProcessesRequest}\n   * @returns A Promise of ListProcessesResponse\n   */\n  listProcesses = (request = {}) => resourcePaginator.enrichForPagination(\"processes\", this.pageOfListProcesses, request);\n  /**\n   * Update process information. Update process information of the provided\n   * **process ID**.\n   *\n   * @param request - The request {@link UpdateProcessRequest}\n   * @returns A Promise of Process\n   */\n  updateProcess = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateProcessRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/qaas/v1alpha1/processes/${marshalling.validatePathParam(\"processId\", request.processId)}`\n    },\n    marshalling_gen.unmarshalProcess\n  );\n  /**\n   * Cancel a running process. Cancel a process by its unique ID. Intermediate\n   * results are still available.\n   *\n   * @param request - The request {@link CancelProcessRequest}\n   * @returns A Promise of Process\n   */\n  cancelProcess = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/qaas/v1alpha1/processes/${marshalling.validatePathParam(\"processId\", request.processId)}/cancel`\n    },\n    marshalling_gen.unmarshalProcess\n  );\n  /**\n   * Delete an existing process. Delete a process by its unique ID and delete\n   * all its data.\n   *\n   * @param request - The request {@link DeleteProcessRequest}\n   */\n  deleteProcess = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/qaas/v1alpha1/processes/${marshalling.validatePathParam(\"processId\", request.processId)}`\n  });\n  pageOfListProcessResults = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/qaas/v1alpha1/processes/${marshalling.validatePathParam(\"processId\", request.processId)}/results`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListProcessResultsResponse\n  );\n  /**\n   * List all results of a process. Retrieve all intermediate and final result\n   * of a process.\n   *\n   * @param request - The request {@link ListProcessResultsRequest}\n   * @returns A Promise of ListProcessResultsResponse\n   */\n  listProcessResults = (request) => resourcePaginator.enrichForPagination(\n    \"processResults\",\n    this.pageOfListProcessResults,\n    request\n  );\n  /**\n   * Get application information. Retrieve information about the provided\n   * **applcation ID**, such as name, type and compatible platforms.\n   *\n   * @param request - The request {@link GetApplicationRequest}\n   * @returns A Promise of Application\n   */\n  getApplication = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/qaas/v1alpha1/applications/${marshalling.validatePathParam(\"applicationId\", request.applicationId)}`\n    },\n    marshalling_gen.unmarshalApplication\n  );\n  pageOfListApplications = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/qaas/v1alpha1/applications`,\n      urlParams: marshalling.urlParams(\n        [\"application_type\", request.applicationType],\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListApplicationsResponse\n  );\n  /**\n   * List all available applications. Retrieve information about all\n   * applications.\n   *\n   * @param request - The request {@link ListApplicationsRequest}\n   * @returns A Promise of ListApplicationsResponse\n   */\n  listApplications = (request = {}) => resourcePaginator.enrichForPagination(\"applications\", this.pageOfListApplications, request);\n}\nexports.API = API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst JOB_TRANSIENT_STATUSES = [\n  \"waiting\",\n  \"running\",\n  \"cancelling\"\n];\nconst PROCESS_TRANSIENT_STATUSES = [\n  \"starting\",\n  \"running\",\n  \"cancelling\"\n];\nconst SESSION_TRANSIENT_STATUSES = [\n  \"starting\",\n  \"stopping\"\n];\nexports.JOB_TRANSIENT_STATUSES = JOB_TRANSIENT_STATUSES;\nexports.PROCESS_TRANSIENT_STATUSES = PROCESS_TRANSIENT_STATUSES;\nexports.SESSION_TRANSIENT_STATUSES = SESSION_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst validationRules_gen = require(\"./validation-rules.gen.cjs\");\nexports.API = api_gen.API;\nexports.JOB_TRANSIENT_STATUSES = content_gen.JOB_TRANSIENT_STATUSES;\nexports.PROCESS_TRANSIENT_STATUSES = content_gen.PROCESS_TRANSIENT_STATUSES;\nexports.SESSION_TRANSIENT_STATUSES = content_gen.SESSION_TRANSIENT_STATUSES;\nexports.ValidationRules = validationRules_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst json = require(\"../../../helpers/json.cjs\");\nconst customMarshalling = require(\"../../../scw/custom-marshalling.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nconst unmarshalJobCircuit = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'JobCircuit' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    percevalCircuit: data.perceval_circuit,\n    qiskitCircuit: data.qiskit_circuit\n  };\n};\nconst unmarshalApplication = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Application' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    compatiblePlatformIds: data.compatible_platform_ids,\n    id: data.id,\n    inputTemplate: data.input_template,\n    name: data.name,\n    type: data.type\n  };\n};\nconst unmarshalJob = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Job' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    id: data.id,\n    jobDuration: data.job_duration,\n    name: data.name,\n    progressMessage: data.progress_message,\n    resultDistribution: data.result_distribution,\n    sessionId: data.session_id,\n    startedAt: marshalling.unmarshalDate(data.started_at),\n    status: data.status,\n    tags: data.tags,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalPlatformHardware = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'PlatformHardware' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    gpus: data.gpus,\n    gpusNetwork: data.gpus_network,\n    name: data.name,\n    ram: data.ram,\n    vcpus: data.vcpus,\n    vram: data.vram\n  };\n};\nconst unmarshalPlatform = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Platform' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    availability: data.availability,\n    backendName: data.backend_name,\n    hardware: data.hardware ? unmarshalPlatformHardware(data.hardware) : void 0,\n    id: data.id,\n    maxQubitCount: data.max_qubit_count,\n    metadata: data.metadata,\n    name: data.name,\n    pricePerHour: data.price_per_hour ? customMarshalling.unmarshalMoney(data.price_per_hour) : void 0,\n    providerName: data.provider_name,\n    technology: data.technology,\n    type: data.type,\n    version: data.version\n  };\n};\nconst unmarshalProcess = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Process' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    applicationId: data.application_id,\n    attachedSessionIds: data.attached_session_ids,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    finishedAt: marshalling.unmarshalDate(data.finished_at),\n    id: data.id,\n    input: data.input,\n    name: data.name,\n    platformId: data.platform_id,\n    progress: data.progress,\n    progressMessage: data.progress_message,\n    projectId: data.project_id,\n    startedAt: marshalling.unmarshalDate(data.started_at),\n    status: data.status,\n    tags: data.tags,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalSession = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Session' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    deduplicationId: data.deduplication_id,\n    finishedJobCount: data.finished_job_count,\n    id: data.id,\n    maxDuration: data.max_duration,\n    maxIdleDuration: data.max_idle_duration,\n    name: data.name,\n    originId: data.origin_id,\n    originType: data.origin_type,\n    platformId: data.platform_id,\n    progressMessage: data.progress_message,\n    projectId: data.project_id,\n    startedAt: marshalling.unmarshalDate(data.started_at),\n    status: data.status,\n    tags: data.tags,\n    terminatedAt: marshalling.unmarshalDate(data.terminated_at),\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    waitingJobCount: data.waiting_job_count\n  };\n};\nconst unmarshalListApplicationsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListApplicationsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    applications: marshalling.unmarshalArrayOfObject(\n      data.applications,\n      unmarshalApplication\n    ),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalJobResult = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'JobResult' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    jobId: data.job_id,\n    result: data.result,\n    url: data.url\n  };\n};\nconst unmarshalListJobResultsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListJobResultsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    jobResults: marshalling.unmarshalArrayOfObject(data.job_results, unmarshalJobResult),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListJobsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListJobsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    jobs: marshalling.unmarshalArrayOfObject(data.jobs, unmarshalJob),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListPlatformsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListPlatformsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    platforms: marshalling.unmarshalArrayOfObject(data.platforms, unmarshalPlatform),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalProcessResult = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ProcessResult' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    processId: data.process_id,\n    result: data.result\n  };\n};\nconst unmarshalListProcessResultsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListProcessResultsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    processResults: marshalling.unmarshalArrayOfObject(\n      data.process_results,\n      unmarshalProcessResult\n    ),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListProcessesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListProcessesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    processes: marshalling.unmarshalArrayOfObject(data.processes, unmarshalProcess),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListSessionACLsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListSessionACLsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    acls: data.acls,\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListSessionsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListSessionsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    sessions: marshalling.unmarshalArrayOfObject(data.sessions, unmarshalSession),\n    totalCount: data.total_count\n  };\n};\nconst marshalJobCircuit = (request, defaults) => ({\n  ...marshalling.resolveOneOf([\n    { param: \"perceval_circuit\", value: request.percevalCircuit },\n    { param: \"qiskit_circuit\", value: request.qiskitCircuit }\n  ])\n});\nconst marshalCreateJobRequest = (request, defaults) => ({\n  circuit: marshalJobCircuit(request.circuit),\n  max_duration: request.maxDuration,\n  name: request.name,\n  session_id: request.sessionId,\n  tags: request.tags\n});\nconst marshalCreateProcessRequest = (request, defaults) => ({\n  application_id: request.applicationId,\n  input: request.input,\n  name: request.name,\n  platform_id: request.platformId,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  tags: request.tags\n});\nconst marshalCreateSessionRequest = (request, defaults) => ({\n  deduplication_id: request.deduplicationId,\n  max_duration: request.maxDuration,\n  max_idle_duration: request.maxIdleDuration,\n  name: request.name,\n  platform_id: request.platformId,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  tags: request.tags\n});\nconst marshalUpdateJobRequest = (request, defaults) => ({\n  name: request.name,\n  tags: request.tags\n});\nconst marshalUpdateProcessRequest = (request, defaults) => ({\n  name: request.name,\n  tags: request.tags\n});\nconst marshalUpdateSessionRequest = (request, defaults) => ({\n  max_duration: request.maxDuration,\n  max_idle_duration: request.maxIdleDuration,\n  name: request.name,\n  tags: request.tags\n});\nexports.marshalCreateJobRequest = marshalCreateJobRequest;\nexports.marshalCreateProcessRequest = marshalCreateProcessRequest;\nexports.marshalCreateSessionRequest = marshalCreateSessionRequest;\nexports.marshalUpdateJobRequest = marshalUpdateJobRequest;\nexports.marshalUpdateProcessRequest = marshalUpdateProcessRequest;\nexports.marshalUpdateSessionRequest = marshalUpdateSessionRequest;\nexports.unmarshalApplication = unmarshalApplication;\nexports.unmarshalJob = unmarshalJob;\nexports.unmarshalJobCircuit = unmarshalJobCircuit;\nexports.unmarshalListApplicationsResponse = unmarshalListApplicationsResponse;\nexports.unmarshalListJobResultsResponse = unmarshalListJobResultsResponse;\nexports.unmarshalListJobsResponse = unmarshalListJobsResponse;\nexports.unmarshalListPlatformsResponse = unmarshalListPlatformsResponse;\nexports.unmarshalListProcessResultsResponse = unmarshalListProcessResultsResponse;\nexports.unmarshalListProcessesResponse = unmarshalListProcessesResponse;\nexports.unmarshalListSessionACLsResponse = unmarshalListSessionACLsResponse;\nexports.unmarshalListSessionsResponse = unmarshalListSessionsResponse;\nexports.unmarshalPlatform = unmarshalPlatform;\nexports.unmarshalProcess = unmarshalProcess;\nexports.unmarshalSession = unmarshalSession;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst CreateJobRequest = {\n  name: {\n    minLength: 1\n  }\n};\nconst CreateProcessRequest = {\n  name: {\n    minLength: 1\n  }\n};\nexports.CreateJobRequest = CreateJobRequest;\nexports.CreateProcessRequest = CreateProcessRequest;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index_gen = require(\"./v1/index.gen.cjs\");\nexports.v1 = index_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst intervalRetrier = require(\"../../../internal/async/interval-retrier.cjs\");\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass API extends api.API {\n  /** Lists the available regions of the API. */\n  static LOCALITIES = [\"fr-par\", \"nl-ams\", \"pl-waw\"];\n  pageOfListDatabaseEngines = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/database-engines`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"version\", request.version]\n      )\n    },\n    marshalling_gen.unmarshalListDatabaseEnginesResponse\n  );\n  /**\n   * List available database engines. List the PostgreSQL and MySQL database\n   * engines available at Scaleway.\n   *\n   * @param request - The request {@link ListDatabaseEnginesRequest}\n   * @returns A Promise of ListDatabaseEnginesResponse\n   */\n  listDatabaseEngines = (request = {}) => resourcePaginator.enrichForPagination(\"engines\", this.pageOfListDatabaseEngines, request);\n  pageOfListNodeTypes = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/node-types`,\n      urlParams: marshalling.urlParams(\n        [\"include_disabled_types\", request.includeDisabledTypes],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListNodeTypesResponse\n  );\n  /**\n   * List available node types. List all available node types. By default, the\n   * node types returned in the list are ordered by creation date in ascending\n   * order, though this can be modified via the `order_by` field.\n   *\n   * @param request - The request {@link ListNodeTypesRequest}\n   * @returns A Promise of ListNodeTypesResponse\n   */\n  listNodeTypes = (request) => resourcePaginator.enrichForPagination(\"nodeTypes\", this.pageOfListNodeTypes, request);\n  pageOfListDatabaseBackups = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/backups`,\n      urlParams: marshalling.urlParams(\n        [\"instance_id\", request.instanceId],\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListDatabaseBackupsResponse\n  );\n  /**\n   * List database backups. List all backups in a specified region, for a given\n   * Scaleway Organization or Scaleway Project. By default, the backups listed\n   * are ordered by creation date in ascending order. This can be modified via\n   * the `order_by` field.\n   *\n   * @param request - The request {@link ListDatabaseBackupsRequest}\n   * @returns A Promise of ListDatabaseBackupsResponse\n   */\n  listDatabaseBackups = (request = {}) => resourcePaginator.enrichForPagination(\n    \"databaseBackups\",\n    this.pageOfListDatabaseBackups,\n    request\n  );\n  /**\n   * Create a database backup. Create a new backup. You must set the\n   * `instance_id`, `database_name`, `name` and `expires_at` parameters.\n   *\n   * @param request - The request {@link CreateDatabaseBackupRequest}\n   * @returns A Promise of DatabaseBackup\n   */\n  createDatabaseBackup = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateDatabaseBackupRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/backups`\n    },\n    marshalling_gen.unmarshalDatabaseBackup\n  );\n  /**\n   * Get a database backup. Retrieve information about a given backup, specified\n   * by its database backup ID and region. Full details about the backup, like\n   * size, URL and expiration date, are returned in the response.\n   *\n   * @param request - The request {@link GetDatabaseBackupRequest}\n   * @returns A Promise of DatabaseBackup\n   */\n  getDatabaseBackup = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/backups/${marshalling.validatePathParam(\"databaseBackupId\", request.databaseBackupId)}`\n    },\n    marshalling_gen.unmarshalDatabaseBackup\n  );\n  /**\n   * Waits for {@link DatabaseBackup} to be in a final state.\n   *\n   * @param request - The request {@link GetDatabaseBackupRequest}\n   * @param options - The waiting options\n   * @returns A Promise of DatabaseBackup\n   */\n  waitForDatabaseBackup = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(\n      !content_gen.DATABASE_BACKUP_TRANSIENT_STATUSES.includes(res.status)\n    )),\n    this.getDatabaseBackup,\n    request,\n    options\n  );\n  /**\n   * Update a database backup. Update the parameters of a backup, including name\n   * and expiration date.\n   *\n   * @param request - The request {@link UpdateDatabaseBackupRequest}\n   * @returns A Promise of DatabaseBackup\n   */\n  updateDatabaseBackup = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateDatabaseBackupRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/backups/${marshalling.validatePathParam(\"databaseBackupId\", request.databaseBackupId)}`\n    },\n    marshalling_gen.unmarshalDatabaseBackup\n  );\n  /**\n   * Delete a database backup. Delete a backup, specified by its database backup\n   * ID and region. Deleting a backup is permanent, and cannot be undone.\n   *\n   * @param request - The request {@link DeleteDatabaseBackupRequest}\n   * @returns A Promise of DatabaseBackup\n   */\n  deleteDatabaseBackup = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/backups/${marshalling.validatePathParam(\"databaseBackupId\", request.databaseBackupId)}`\n    },\n    marshalling_gen.unmarshalDatabaseBackup\n  );\n  /**\n   * Restore a database backup. Launch the process of restoring database backup.\n   * You must specify the `instance_id` of the Database Instance of destination,\n   * where the backup will be restored. Note that large database backups can\n   * take up to several hours to restore.\n   *\n   * @param request - The request {@link RestoreDatabaseBackupRequest}\n   * @returns A Promise of DatabaseBackup\n   */\n  restoreDatabaseBackup = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalRestoreDatabaseBackupRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/backups/${marshalling.validatePathParam(\"databaseBackupId\", request.databaseBackupId)}/restore`\n    },\n    marshalling_gen.unmarshalDatabaseBackup\n  );\n  /**\n   * Export a database backup. Export a backup, specified by the\n   * `database_backup_id` and the `region` parameters. The download URL is\n   * returned in the response.\n   *\n   * @param request - The request {@link ExportDatabaseBackupRequest}\n   * @returns A Promise of DatabaseBackup\n   */\n  exportDatabaseBackup = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/backups/${marshalling.validatePathParam(\"databaseBackupId\", request.databaseBackupId)}/export`\n    },\n    marshalling_gen.unmarshalDatabaseBackup\n  );\n  /**\n   * Upgrade a Database Instance. Upgrade your current Database Instance\n   * specifications like node type, high availability, volume, or the database\n   * engine version. Note that upon upgrade the `enable_ha` parameter can only\n   * be set to `true`.\n   *\n   * @param request - The request {@link UpgradeInstanceRequest}\n   * @returns A Promise of Instance\n   */\n  upgradeInstance = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpgradeInstanceRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/upgrade`\n    },\n    marshalling_gen.unmarshalInstance\n  );\n  pageOfListInstances = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId],\n        [\"tags\", request.tags]\n      )\n    },\n    marshalling_gen.unmarshalListInstancesResponse\n  );\n  /**\n   * List Database Instances. List all Database Instances in the specified\n   * region, for a given Scaleway Organization or Scaleway Project. By default,\n   * the Database Instances returned in the list are ordered by creation date in\n   * ascending order, though this can be modified via the order_by field. You\n   * can define additional parameters for your query, such as `tags` and `name`.\n   * For the `name` parameter, the value you include will be checked against the\n   * whole name string to see if it includes the string you put in the\n   * parameter.\n   *\n   * @param request - The request {@link ListInstancesRequest}\n   * @returns A Promise of ListInstancesResponse\n   */\n  listInstances = (request = {}) => resourcePaginator.enrichForPagination(\"instances\", this.pageOfListInstances, request);\n  /**\n   * Get a Database Instance. Retrieve information about a given Database\n   * Instance, specified by the `region` and `instance_id` parameters. Its full\n   * details, including name, status, IP address and port, are returned in the\n   * response object.\n   *\n   * @param request - The request {@link GetInstanceRequest}\n   * @returns A Promise of Instance\n   */\n  getInstance = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}`\n    },\n    marshalling_gen.unmarshalInstance\n  );\n  /**\n   * Waits for {@link Instance} to be in a final state.\n   *\n   * @param request - The request {@link GetInstanceRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Instance\n   */\n  waitForInstance = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.INSTANCE_TRANSIENT_STATUSES.includes(res.status))),\n    this.getInstance,\n    request,\n    options\n  );\n  /**\n   * Create a Database Instance. Create a new Database Instance. You must set\n   * the `engine`, `user_name`, `password` and `node_type` parameters.\n   * Optionally, you can specify the volume type and size.\n   *\n   * @param request - The request {@link CreateInstanceRequest}\n   * @returns A Promise of Instance\n   */\n  createInstance = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateInstanceRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances`\n    },\n    marshalling_gen.unmarshalInstance\n  );\n  /**\n   * Update a Database Instance. Update the parameters of a Database Instance,\n   * including name, tags and backup schedule details.\n   *\n   * @param request - The request {@link UpdateInstanceRequest}\n   * @returns A Promise of Instance\n   */\n  updateInstance = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateInstanceRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}`\n    },\n    marshalling_gen.unmarshalInstance\n  );\n  /**\n   * Delete a Database Instance. Delete a given Database Instance, specified by\n   * the `region` and `instance_id` parameters. Deleting a Database Instance is\n   * permanent, and cannot be undone. Note that upon deletion all your data will\n   * be lost.\n   *\n   * @param request - The request {@link DeleteInstanceRequest}\n   * @returns A Promise of Instance\n   */\n  deleteInstance = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}`\n    },\n    marshalling_gen.unmarshalInstance\n  );\n  /**\n   * Clone a Database Instance. Clone a given Database Instance, specified by\n   * the `region` and `instance_id` parameters. The clone feature allows you to\n   * create a new Database Instance from an existing one. The clone includes all\n   * existing databases, users and permissions. You can create a clone on a\n   * Database Instance bigger than your current one.\n   *\n   * @param request - The request {@link CloneInstanceRequest}\n   * @returns A Promise of Instance\n   */\n  cloneInstance = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCloneInstanceRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/clone`\n    },\n    marshalling_gen.unmarshalInstance\n  );\n  /**\n   * Restart Database Instance. Restart a given Database Instance, specified by\n   * the `region` and `instance_id` parameters. The status of the Database\n   * Instance returned in the response.\n   *\n   * @param request - The request {@link RestartInstanceRequest}\n   * @returns A Promise of Instance\n   */\n  restartInstance = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/restart`\n    },\n    marshalling_gen.unmarshalInstance\n  );\n  /**\n   * Get the TLS certificate of a Database Instance. Retrieve information about\n   * the TLS certificate of a given Database Instance. Details like name and\n   * content are returned in the response.\n   *\n   * @param request - The request {@link GetInstanceCertificateRequest}\n   * @returns A Promise of Blob\n   */\n  getInstanceCertificate = (request) => this.client.fetch({\n    method: \"GET\",\n    path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/certificate`,\n    urlParams: marshalling.urlParams([\"dl\", 1]),\n    responseType: \"blob\"\n  });\n  /**\n   * Renew the TLS certificate of a Database Instance. Renew a TLS for a\n   * Database Instance. Renewing a certificate means that you will not be able\n   * to connect to your Database Instance using the previous certificate. You\n   * will also need to download and update the new certificate for all database\n   * clients.\n   *\n   * @param request - The request {@link RenewInstanceCertificateRequest}\n   */\n  renewInstanceCertificate = (request) => this.client.fetch({\n    body: \"{}\",\n    headers: jsonContentHeaders,\n    method: \"POST\",\n    path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/renew-certificate`\n  });\n  /**\n   * Get Database Instance metrics. Retrieve the time series metrics of a given\n   * Database Instance. You can define the period from which to retrieve metrics\n   * by specifying the `start_date` and `end_date`.\n   *\n   * @param request - The request {@link GetInstanceMetricsRequest}\n   * @returns A Promise of InstanceMetrics\n   */\n  getInstanceMetrics = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/metrics`,\n      urlParams: marshalling.urlParams(\n        [\"end_date\", request.endDate],\n        [\"metric_name\", request.metricName],\n        [\"start_date\", request.startDate]\n      )\n    },\n    marshalling_gen.unmarshalInstanceMetrics\n  );\n  /**\n   * Create a Read Replica. Create a new Read Replica of a Database Instance.\n   * You must specify the `region` and the `instance_id`. You can only create a\n   * maximum of 3 Read Replicas per Database Instance.\n   *\n   * @param request - The request {@link CreateReadReplicaRequest}\n   * @returns A Promise of ReadReplica\n   */\n  createReadReplica = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateReadReplicaRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/read-replicas`\n    },\n    marshalling_gen.unmarshalReadReplica\n  );\n  /**\n   * Get a Read Replica. Retrieve information about a Database Instance Read\n   * Replica. Full details about the Read Replica, like `endpoints`, `status`\n   * and `region` are returned in the response.\n   *\n   * @param request - The request {@link GetReadReplicaRequest}\n   * @returns A Promise of ReadReplica\n   */\n  getReadReplica = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/read-replicas/${marshalling.validatePathParam(\"readReplicaId\", request.readReplicaId)}`\n    },\n    marshalling_gen.unmarshalReadReplica\n  );\n  /**\n   * Waits for {@link ReadReplica} to be in a final state.\n   *\n   * @param request - The request {@link GetReadReplicaRequest}\n   * @param options - The waiting options\n   * @returns A Promise of ReadReplica\n   */\n  waitForReadReplica = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(\n      !content_gen.READ_REPLICA_TRANSIENT_STATUSES.includes(res.status)\n    )),\n    this.getReadReplica,\n    request,\n    options\n  );\n  /**\n   * Delete a Read Replica. Delete a Read Replica of a Database Instance. You\n   * must specify the `region` and `read_replica_id` parameters of the Read\n   * Replica you want to delete.\n   *\n   * @param request - The request {@link DeleteReadReplicaRequest}\n   * @returns A Promise of ReadReplica\n   */\n  deleteReadReplica = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/read-replicas/${marshalling.validatePathParam(\"readReplicaId\", request.readReplicaId)}`\n    },\n    marshalling_gen.unmarshalReadReplica\n  );\n  /**\n   * Resync a Read Replica. When you resync a Read Replica, first it is reset,\n   * then its data is resynchronized from the primary node. Your Read Replica\n   * remains unavailable during the resync process. The duration of this process\n   * is proportional to the size of your Database Instance. The configured\n   * endpoints do not change.\n   *\n   * @param request - The request {@link ResetReadReplicaRequest}\n   * @returns A Promise of ReadReplica\n   */\n  resetReadReplica = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/read-replicas/${marshalling.validatePathParam(\"readReplicaId\", request.readReplicaId)}/reset`\n    },\n    marshalling_gen.unmarshalReadReplica\n  );\n  /**\n   * Promote a Read Replica. Promote a Read Replica to Database Instance\n   * automatically.\n   *\n   * @param request - The request {@link PromoteReadReplicaRequest}\n   * @returns A Promise of Instance\n   */\n  promoteReadReplica = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/read-replicas/${marshalling.validatePathParam(\"readReplicaId\", request.readReplicaId)}/promote`\n    },\n    marshalling_gen.unmarshalInstance\n  );\n  /**\n   * Create an endpoint for a Read Replica. Create a new endpoint for a Read\n   * Replica. Read Replicas can have at most one direct access and one Private\n   * Network endpoint.\n   *\n   * @param request - The request {@link CreateReadReplicaEndpointRequest}\n   * @returns A Promise of ReadReplica\n   */\n  createReadReplicaEndpoint = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateReadReplicaEndpointRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/read-replicas/${marshalling.validatePathParam(\"readReplicaId\", request.readReplicaId)}/endpoints`\n    },\n    marshalling_gen.unmarshalReadReplica\n  );\n  /**\n   * Prepare logs of a Database Instance. Prepare your Database Instance logs.\n   * You can define the `start_date` and `end_date` parameters for your query.\n   * The download URL is returned in the response. Logs are recorded from 00h00\n   * to 23h59 and then aggregated in a `.log` file once a day. Therefore, even\n   * if you specify a timeframe from which you want to get the logs, you will\n   * receive logs from the full 24 hours.\n   *\n   * @param request - The request {@link PrepareInstanceLogsRequest}\n   * @returns A Promise of PrepareInstanceLogsResponse\n   */\n  prepareInstanceLogs = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalPrepareInstanceLogsRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/prepare-logs`\n    },\n    marshalling_gen.unmarshalPrepareInstanceLogsResponse\n  );\n  /**\n   * List available logs of a Database Instance. List the available logs of a\n   * Database Instance. By default, the logs returned in the list are ordered by\n   * creation date in ascending order, though this can be modified via the\n   * order_by field.\n   *\n   * @param request - The request {@link ListInstanceLogsRequest}\n   * @returns A Promise of ListInstanceLogsResponse\n   */\n  listInstanceLogs = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/logs`,\n      urlParams: marshalling.urlParams([\"order_by\", request.orderBy])\n    },\n    marshalling_gen.unmarshalListInstanceLogsResponse\n  );\n  /**\n   * Get given logs of a Database Instance. Retrieve information about the logs\n   * of a Database Instance. Specify the `instance_log_id` and `region` in your\n   * request to get information such as `download_url`, `status`, `expires_at`\n   * and `created_at` about your logs in the response.\n   *\n   * @param request - The request {@link GetInstanceLogRequest}\n   * @returns A Promise of InstanceLog\n   */\n  getInstanceLog = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/logs/${marshalling.validatePathParam(\"instanceLogId\", request.instanceLogId)}`\n    },\n    marshalling_gen.unmarshalInstanceLog\n  );\n  /**\n   * Waits for {@link InstanceLog} to be in a final state.\n   *\n   * @param request - The request {@link GetInstanceLogRequest}\n   * @param options - The waiting options\n   * @returns A Promise of InstanceLog\n   */\n  waitForInstanceLog = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(\n      !content_gen.INSTANCE_LOG_TRANSIENT_STATUSES.includes(res.status)\n    )),\n    this.getInstanceLog,\n    request,\n    options\n  );\n  /**\n   * Purge remote Database Instance logs. Purge a given remote log from a\n   * Database Instance. You can specify the `log_name` of the log you wish to\n   * clean from your Database Instance.\n   *\n   * @param request - The request {@link PurgeInstanceLogsRequest}\n   */\n  purgeInstanceLogs = (request) => this.client.fetch({\n    body: JSON.stringify(\n      marshalling_gen.marshalPurgeInstanceLogsRequest(request, this.client.settings)\n    ),\n    headers: jsonContentHeaders,\n    method: \"POST\",\n    path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/purge-logs`\n  });\n  /**\n   * List remote Database Instance logs details. List remote log details. By\n   * default, the details returned in the list are ordered by creation date in\n   * ascending order, though this can be modified via the order_by field.\n   *\n   * @param request - The request {@link ListInstanceLogsDetailsRequest}\n   * @returns A Promise of ListInstanceLogsDetailsResponse\n   */\n  listInstanceLogsDetails = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/logs-details`\n    },\n    marshalling_gen.unmarshalListInstanceLogsDetailsResponse\n  );\n  /**\n   * Add Database Instance advanced settings. Add an advanced setting to a\n   * Database Instance. You must set the `name` and the `value` of each\n   * setting.\n   *\n   * @param request - The request {@link AddInstanceSettingsRequest}\n   * @returns A Promise of AddInstanceSettingsResponse\n   */\n  addInstanceSettings = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalAddInstanceSettingsRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/settings`\n    },\n    marshalling_gen.unmarshalAddInstanceSettingsResponse\n  );\n  /**\n   * Delete Database Instance advanced settings. Delete an advanced setting in a\n   * Database Instance. You must specify the names of the settings you want to\n   * delete in the request.\n   *\n   * @param request - The request {@link DeleteInstanceSettingsRequest}\n   * @returns A Promise of DeleteInstanceSettingsResponse\n   */\n  deleteInstanceSettings = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalDeleteInstanceSettingsRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"DELETE\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/settings`\n    },\n    marshalling_gen.unmarshalDeleteInstanceSettingsResponse\n  );\n  /**\n   * Set Database Instance advanced settings. Update an advanced setting for a\n   * Database Instance. Settings added upon database engine initalization can\n   * only be defined once, and cannot, therefore, be updated.\n   *\n   * @param request - The request {@link SetInstanceSettingsRequest}\n   * @returns A Promise of SetInstanceSettingsResponse\n   */\n  setInstanceSettings = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSetInstanceSettingsRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/settings`\n    },\n    marshalling_gen.unmarshalSetInstanceSettingsResponse\n  );\n  pageOfListInstanceACLRules = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/acls`,\n      urlParams: marshalling.urlParams(\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListInstanceACLRulesResponse\n  );\n  /**\n   * List ACL rules of a Database Instance. List the ACL rules for a given\n   * Database Instance. The response is an array of ACL objects, each one\n   * representing an ACL that denies, allows or redirects traffic based on\n   * certain conditions.\n   *\n   * @param request - The request {@link ListInstanceACLRulesRequest}\n   * @returns A Promise of ListInstanceACLRulesResponse\n   */\n  listInstanceACLRules = (request) => resourcePaginator.enrichForPagination(\"rules\", this.pageOfListInstanceACLRules, request);\n  /**\n   * Add an ACL rule to a Database Instance. Add an additional ACL rule to a\n   * Database Instance.\n   *\n   * @param request - The request {@link AddInstanceACLRulesRequest}\n   * @returns A Promise of AddInstanceACLRulesResponse\n   */\n  addInstanceACLRules = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalAddInstanceACLRulesRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/acls`\n    },\n    marshalling_gen.unmarshalAddInstanceACLRulesResponse\n  );\n  /**\n   * Set ACL rules for a Database Instance. Replace all the ACL rules of a\n   * Database Instance.\n   *\n   * @param request - The request {@link SetInstanceACLRulesRequest}\n   * @returns A Promise of SetInstanceACLRulesResponse\n   */\n  setInstanceACLRules = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSetInstanceACLRulesRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/acls`\n    },\n    marshalling_gen.unmarshalSetInstanceACLRulesResponse\n  );\n  /**\n   * Delete ACL rules of a Database Instance. Delete one or more ACL rules of a\n   * Database Instance.\n   *\n   * @param request - The request {@link DeleteInstanceACLRulesRequest}\n   * @returns A Promise of DeleteInstanceACLRulesResponse\n   */\n  deleteInstanceACLRules = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalDeleteInstanceACLRulesRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"DELETE\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/acls`\n    },\n    marshalling_gen.unmarshalDeleteInstanceACLRulesResponse\n  );\n  pageOfListUsers = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/users`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListUsersResponse\n  );\n  /**\n   * List users of a Database Instance. List all users of a given Database\n   * Instance. By default, the users returned in the list are ordered by\n   * creation date in ascending order, though this can be modified via the\n   * order_by field.\n   *\n   * @param request - The request {@link ListUsersRequest}\n   * @returns A Promise of ListUsersResponse\n   */\n  listUsers = (request) => resourcePaginator.enrichForPagination(\"users\", this.pageOfListUsers, request);\n  /**\n   * Create a user for a Database Instance. Create a new user for a Database\n   * Instance. You must define the `name`, `password` and `is_admin`\n   * parameters.\n   *\n   * @param request - The request {@link CreateUserRequest}\n   * @returns A Promise of User\n   */\n  createUser = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateUserRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/users`\n    },\n    marshalling_gen.unmarshalUser\n  );\n  /**\n   * Update a user on a Database Instance. Update the parameters of a user on a\n   * Database Instance. You can update the `password` and `is_admin` parameters,\n   * but you cannot change the name of the user.\n   *\n   * @param request - The request {@link UpdateUserRequest}\n   * @returns A Promise of User\n   */\n  updateUser = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateUserRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/users/${marshalling.validatePathParam(\"name\", request.name)}`\n    },\n    marshalling_gen.unmarshalUser\n  );\n  /**\n   * Delete a user on a Database Instance. Delete a given user on a Database\n   * Instance. You must specify, in the endpoint, the `region`, `instance_id`\n   * and `name` parameters of the user you want to delete.\n   *\n   * @param request - The request {@link DeleteUserRequest}\n   */\n  deleteUser = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/users/${marshalling.validatePathParam(\"name\", request.name)}`\n  });\n  pageOfListDatabases = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/databases`,\n      urlParams: marshalling.urlParams(\n        [\"managed\", request.managed],\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"owner\", request.owner],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListDatabasesResponse\n  );\n  /**\n   * List databases in a Database Instance. List all databases of a given\n   * Database Instance. By default, the databases returned in the list are\n   * ordered by creation date in ascending order, though this can be modified\n   * via the order_by field. You can define additional parameters for your\n   * query, such as `name`, `managed` and `owner`.\n   *\n   * @param request - The request {@link ListDatabasesRequest}\n   * @returns A Promise of ListDatabasesResponse\n   */\n  listDatabases = (request) => resourcePaginator.enrichForPagination(\"databases\", this.pageOfListDatabases, request);\n  /**\n   * Create a database in a Database Instance. Create a new database. You must\n   * define the `name` parameter in the request.\n   *\n   * @param request - The request {@link CreateDatabaseRequest}\n   * @returns A Promise of Database\n   */\n  createDatabase = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateDatabaseRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/databases`\n    },\n    marshalling_gen.unmarshalDatabase\n  );\n  /**\n   * Delete a database in a Database Instance. Delete a given database on a\n   * Database Instance. You must specify, in the endpoint, the `region`,\n   * `instance_id` and `name` parameters of the database you want to delete.\n   *\n   * @param request - The request {@link DeleteDatabaseRequest}\n   */\n  deleteDatabase = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/databases/${marshalling.validatePathParam(\"name\", request.name)}`\n  });\n  pageOfListPrivileges = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/privileges`,\n      urlParams: marshalling.urlParams(\n        [\"database_name\", request.databaseName],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"user_name\", request.userName]\n      )\n    },\n    marshalling_gen.unmarshalListPrivilegesResponse\n  );\n  /**\n   * List user privileges for a database. List privileges of a user on a\n   * database. By default, the details returned in the list are ordered by\n   * creation date in ascending order, though this can be modified via the\n   * order_by field. You can define additional parameters for your query, such\n   * as `database_name` and `user_name`.\n   *\n   * @param request - The request {@link ListPrivilegesRequest}\n   * @returns A Promise of ListPrivilegesResponse\n   */\n  listPrivileges = (request) => resourcePaginator.enrichForPagination(\"privileges\", this.pageOfListPrivileges, request);\n  /**\n   * Set user privileges for a database. Set the privileges of a user on a\n   * database. You must define `database_name`, `user_name` and `permission` in\n   * the request body.\n   *\n   * @param request - The request {@link SetPrivilegeRequest}\n   * @returns A Promise of Privilege\n   */\n  setPrivilege = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSetPrivilegeRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/privileges`\n    },\n    marshalling_gen.unmarshalPrivilege\n  );\n  pageOfListSnapshots = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/snapshots`,\n      urlParams: marshalling.urlParams(\n        [\"instance_id\", request.instanceId],\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListSnapshotsResponse\n  );\n  /**\n   * List snapshots. List snapshots. You can include the `instance_id` or\n   * `project_id` in your query to get the list of snapshots for specific\n   * Database Instances and/or Projects. By default, the details returned in the\n   * list are ordered by creation date in ascending order, though this can be\n   * modified via the `order_by` field.\n   *\n   * @param request - The request {@link ListSnapshotsRequest}\n   * @returns A Promise of ListSnapshotsResponse\n   */\n  listSnapshots = (request = {}) => resourcePaginator.enrichForPagination(\"snapshots\", this.pageOfListSnapshots, request);\n  /**\n   * Get a Database Instance snapshot. Retrieve information about a given\n   * snapshot, specified by its `snapshot_id` and `region`. Full details about\n   * the snapshot, like size and expiration date, are returned in the response.\n   *\n   * @param request - The request {@link GetSnapshotRequest}\n   * @returns A Promise of Snapshot\n   */\n  getSnapshot = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/snapshots/${marshalling.validatePathParam(\"snapshotId\", request.snapshotId)}`\n    },\n    marshalling_gen.unmarshalSnapshot\n  );\n  /**\n   * Waits for {@link Snapshot} to be in a final state.\n   *\n   * @param request - The request {@link GetSnapshotRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Snapshot\n   */\n  waitForSnapshot = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.SNAPSHOT_TRANSIENT_STATUSES.includes(res.status))),\n    this.getSnapshot,\n    request,\n    options\n  );\n  /**\n   * Create a Database Instance snapshot. Create a new snapshot of a Database\n   * Instance. You must define the `name` parameter in the request.\n   *\n   * @param request - The request {@link CreateSnapshotRequest}\n   * @returns A Promise of Snapshot\n   */\n  createSnapshot = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateSnapshotRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/snapshots`\n    },\n    marshalling_gen.unmarshalSnapshot\n  );\n  /**\n   * Update a Database Instance snapshot. Update the parameters of a snapshot of\n   * a Database Instance. You can update the `name` and `expires_at`\n   * parameters.\n   *\n   * @param request - The request {@link UpdateSnapshotRequest}\n   * @returns A Promise of Snapshot\n   */\n  updateSnapshot = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateSnapshotRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/snapshots/${marshalling.validatePathParam(\"snapshotId\", request.snapshotId)}`\n    },\n    marshalling_gen.unmarshalSnapshot\n  );\n  /**\n   * Delete a Database Instance snapshot. Delete a given snapshot of a Database\n   * Instance. You must specify, in the endpoint, the `region` and `snapshot_id`\n   * parameters of the snapshot you want to delete.\n   *\n   * @param request - The request {@link DeleteSnapshotRequest}\n   * @returns A Promise of Snapshot\n   */\n  deleteSnapshot = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/snapshots/${marshalling.validatePathParam(\"snapshotId\", request.snapshotId)}`\n    },\n    marshalling_gen.unmarshalSnapshot\n  );\n  /**\n   * Create a new Database Instance from a snapshot. Restore a snapshot. When\n   * you restore a snapshot, a new Instance is created and billed to your\n   * account. Note that is possible to select a larger node type for your new\n   * Database Instance. However, the Block volume size will be the same as the\n   * size of the restored snapshot. All Instance settings will be restored if\n   * you chose a node type with the same or more memory size than the initial\n   * Instance. Settings will be reset to the default if your node type has less\n   * memory.\n   *\n   * @param request - The request {@link CreateInstanceFromSnapshotRequest}\n   * @returns A Promise of Instance\n   */\n  createInstanceFromSnapshot = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateInstanceFromSnapshotRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/snapshots/${marshalling.validatePathParam(\"snapshotId\", request.snapshotId)}/create-instance`\n    },\n    marshalling_gen.unmarshalInstance\n  );\n  /**\n   * Create a new Database Instance endpoint. Create a new endpoint for a\n   * Database Instance. You can add `load_balancer` and `private_network`\n   * specifications to the body of the request.\n   *\n   * @param request - The request {@link CreateEndpointRequest}\n   * @returns A Promise of Endpoint\n   */\n  createEndpoint = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateEndpointRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/endpoints`\n    },\n    marshalling_gen.unmarshalEndpoint\n  );\n  /**\n   * Delete a Database Instance endpoint. Delete the endpoint of a Database\n   * Instance. You must specify the `region` and `endpoint_id` parameters of the\n   * endpoint you want to delete. Note that might need to update any environment\n   * configurations that point to the deleted endpoint.\n   *\n   * @param request - The request {@link DeleteEndpointRequest}\n   */\n  deleteEndpoint = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/endpoints/${marshalling.validatePathParam(\"endpointId\", request.endpointId)}`\n  });\n  /**\n   * Get a Database Instance endpoint. Retrieve information about a Database\n   * Instance endpoint. Full details about the endpoint, like `ip`, `port`,\n   * `private_network` and `load_balancer` specifications are returned in the\n   * response.\n   *\n   * @param request - The request {@link GetEndpointRequest}\n   * @returns A Promise of Endpoint\n   */\n  getEndpoint = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/endpoints/${marshalling.validatePathParam(\"endpointId\", request.endpointId)}`\n    },\n    marshalling_gen.unmarshalEndpoint\n  );\n  /**\n   * Migrate an existing instance endpoint to another instance.\n   *\n   * @param request - The request {@link MigrateEndpointRequest}\n   * @returns A Promise of Endpoint\n   */\n  migrateEndpoint = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalMigrateEndpointRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/endpoints/${marshalling.validatePathParam(\"endpointId\", request.endpointId)}/migrate`\n    },\n    marshalling_gen.unmarshalEndpoint\n  );\n  /**\n   * Apply Database Instance maintenance. Apply maintenance tasks to your\n   * Database Instance. This will trigger pending maintenance tasks to start in\n   * your Database Instance and can generate service interruption. Maintenance\n   * tasks can be applied between `starts_at` and `stops_at` times, and are run\n   * directly by Scaleway at `forced_at` timestamp.\n   *\n   * @param request - The request {@link ApplyInstanceMaintenanceRequest}\n   * @returns A Promise of Maintenance\n   */\n  applyInstanceMaintenance = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/rdb/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/instances/${marshalling.validatePathParam(\"instanceId\", request.instanceId)}/apply-maintenance`\n    },\n    marshalling_gen.unmarshalMaintenance\n  );\n}\nexports.API = API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst DATABASE_BACKUP_TRANSIENT_STATUSES = [\n  \"creating\",\n  \"restoring\",\n  \"deleting\",\n  \"exporting\"\n];\nconst INSTANCE_LOG_TRANSIENT_STATUSES = [\"creating\"];\nconst INSTANCE_TRANSIENT_STATUSES = [\n  \"provisioning\",\n  \"configuring\",\n  \"deleting\",\n  \"autohealing\",\n  \"initializing\",\n  \"backuping\",\n  \"snapshotting\",\n  \"restarting\"\n];\nconst MAINTENANCE_TRANSIENT_STATUSES = [\"ongoing\"];\nconst READ_REPLICA_TRANSIENT_STATUSES = [\n  \"provisioning\",\n  \"initializing\",\n  \"deleting\",\n  \"configuring\",\n  \"promoting\"\n];\nconst SNAPSHOT_TRANSIENT_STATUSES = [\n  \"creating\",\n  \"restoring\",\n  \"deleting\"\n];\nexports.DATABASE_BACKUP_TRANSIENT_STATUSES = DATABASE_BACKUP_TRANSIENT_STATUSES;\nexports.INSTANCE_LOG_TRANSIENT_STATUSES = INSTANCE_LOG_TRANSIENT_STATUSES;\nexports.INSTANCE_TRANSIENT_STATUSES = INSTANCE_TRANSIENT_STATUSES;\nexports.MAINTENANCE_TRANSIENT_STATUSES = MAINTENANCE_TRANSIENT_STATUSES;\nexports.READ_REPLICA_TRANSIENT_STATUSES = READ_REPLICA_TRANSIENT_STATUSES;\nexports.SNAPSHOT_TRANSIENT_STATUSES = SNAPSHOT_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst validationRules_gen = require(\"./validation-rules.gen.cjs\");\nexports.API = api_gen.API;\nexports.DATABASE_BACKUP_TRANSIENT_STATUSES = content_gen.DATABASE_BACKUP_TRANSIENT_STATUSES;\nexports.INSTANCE_LOG_TRANSIENT_STATUSES = content_gen.INSTANCE_LOG_TRANSIENT_STATUSES;\nexports.INSTANCE_TRANSIENT_STATUSES = content_gen.INSTANCE_TRANSIENT_STATUSES;\nexports.MAINTENANCE_TRANSIENT_STATUSES = content_gen.MAINTENANCE_TRANSIENT_STATUSES;\nexports.READ_REPLICA_TRANSIENT_STATUSES = content_gen.READ_REPLICA_TRANSIENT_STATUSES;\nexports.SNAPSHOT_TRANSIENT_STATUSES = content_gen.SNAPSHOT_TRANSIENT_STATUSES;\nexports.ValidationRules = validationRules_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst randomName = require(\"@scaleway/random-name\");\nconst json = require(\"../../../helpers/json.cjs\");\nconst customMarshalling = require(\"../../../scw/custom-marshalling.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nconst unmarshalEndpointDirectAccessDetails = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'EndpointDirectAccessDetails' failed as data isn't a dictionary.`\n    );\n  }\n  return {};\n};\nconst unmarshalEndpointLoadBalancerDetails = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'EndpointLoadBalancerDetails' failed as data isn't a dictionary.`\n    );\n  }\n  return {};\n};\nconst unmarshalEndpointPrivateNetworkDetails = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'EndpointPrivateNetworkDetails' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    privateNetworkId: data.private_network_id,\n    provisioningMode: data.provisioning_mode,\n    serviceIp: data.service_ip,\n    zone: data.zone\n  };\n};\nconst unmarshalEndpoint = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Endpoint' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    directAccess: data.direct_access ? unmarshalEndpointDirectAccessDetails(data.direct_access) : void 0,\n    hostname: data.hostname,\n    id: data.id,\n    ip: data.ip,\n    loadBalancer: data.load_balancer ? unmarshalEndpointLoadBalancerDetails(data.load_balancer) : void 0,\n    name: data.name,\n    port: data.port,\n    privateNetwork: data.private_network ? unmarshalEndpointPrivateNetworkDetails(data.private_network) : void 0\n  };\n};\nconst unmarshalMaintenance = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Maintenance' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    closedAt: marshalling.unmarshalDate(data.closed_at),\n    forcedAt: marshalling.unmarshalDate(data.forced_at),\n    reason: data.reason,\n    startsAt: marshalling.unmarshalDate(data.starts_at),\n    status: data.status,\n    stopsAt: marshalling.unmarshalDate(data.stops_at)\n  };\n};\nconst unmarshalReadReplica = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ReadReplica' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    endpoints: marshalling.unmarshalArrayOfObject(data.endpoints, unmarshalEndpoint),\n    id: data.id,\n    instanceId: data.instance_id,\n    region: data.region,\n    sameZone: data.same_zone,\n    status: data.status\n  };\n};\nconst unmarshalDatabaseBackup = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DatabaseBackup' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    databaseName: data.database_name,\n    downloadUrl: data.download_url,\n    downloadUrlExpiresAt: marshalling.unmarshalDate(data.download_url_expires_at),\n    expiresAt: marshalling.unmarshalDate(data.expires_at),\n    id: data.id,\n    instanceId: data.instance_id,\n    instanceName: data.instance_name,\n    name: data.name,\n    region: data.region,\n    sameRegion: data.same_region,\n    size: data.size,\n    status: data.status,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalDatabase = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Database' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    managed: data.managed,\n    name: data.name,\n    owner: data.owner,\n    size: data.size\n  };\n};\nconst unmarshalInstanceLog = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'InstanceLog' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    downloadUrl: data.download_url,\n    expiresAt: marshalling.unmarshalDate(data.expires_at),\n    id: data.id,\n    nodeName: data.node_name,\n    region: data.region,\n    status: data.status\n  };\n};\nconst unmarshalBackupSchedule = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'BackupSchedule' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    disabled: data.disabled,\n    frequency: data.frequency,\n    nextRunAt: marshalling.unmarshalDate(data.next_run_at),\n    retention: data.retention\n  };\n};\nconst unmarshalEncryptionAtRest = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'EncryptionAtRest' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    enabled: data.enabled\n  };\n};\nconst unmarshalInstanceSetting = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'InstanceSetting' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    name: data.name,\n    value: data.value\n  };\n};\nconst unmarshalLogsPolicy = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'LogsPolicy' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    maxAgeRetention: data.max_age_retention,\n    totalDiskRetention: data.total_disk_retention\n  };\n};\nconst unmarshalUpgradableVersion = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'UpgradableVersion' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    id: data.id,\n    minorVersion: data.minor_version,\n    name: data.name,\n    version: data.version\n  };\n};\nconst unmarshalVolume = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Volume' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    class: data.class,\n    size: data.size,\n    type: data.type\n  };\n};\nconst unmarshalInstance = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Instance' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    backupSameRegion: data.backup_same_region,\n    backupSchedule: data.backup_schedule ? unmarshalBackupSchedule(data.backup_schedule) : void 0,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    encryption: data.encryption ? unmarshalEncryptionAtRest(data.encryption) : void 0,\n    endpoint: data.endpoint ? unmarshalEndpoint(data.endpoint) : void 0,\n    endpoints: marshalling.unmarshalArrayOfObject(data.endpoints, unmarshalEndpoint),\n    engine: data.engine,\n    id: data.id,\n    initSettings: marshalling.unmarshalArrayOfObject(\n      data.init_settings,\n      unmarshalInstanceSetting\n    ),\n    isHaCluster: data.is_ha_cluster,\n    logsPolicy: data.logs_policy ? unmarshalLogsPolicy(data.logs_policy) : void 0,\n    maintenances: marshalling.unmarshalArrayOfObject(\n      data.maintenances,\n      unmarshalMaintenance\n    ),\n    name: data.name,\n    nodeType: data.node_type,\n    organizationId: data.organization_id,\n    projectId: data.project_id,\n    readReplicas: marshalling.unmarshalArrayOfObject(\n      data.read_replicas,\n      unmarshalReadReplica\n    ),\n    region: data.region,\n    settings: marshalling.unmarshalArrayOfObject(data.settings, unmarshalInstanceSetting),\n    status: data.status,\n    tags: data.tags,\n    upgradableVersion: marshalling.unmarshalArrayOfObject(\n      data.upgradable_version,\n      unmarshalUpgradableVersion\n    ),\n    volume: data.volume ? unmarshalVolume(data.volume) : void 0\n  };\n};\nconst unmarshalPrivilege = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Privilege' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    databaseName: data.database_name,\n    permission: data.permission,\n    userName: data.user_name\n  };\n};\nconst unmarshalSnapshotVolumeType = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SnapshotVolumeType' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    class: data.class,\n    type: data.type\n  };\n};\nconst unmarshalSnapshot = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Snapshot' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    expiresAt: marshalling.unmarshalDate(data.expires_at),\n    id: data.id,\n    instanceId: data.instance_id,\n    instanceName: data.instance_name,\n    name: data.name,\n    nodeType: data.node_type,\n    region: data.region,\n    size: data.size,\n    status: data.status,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    volumeType: data.volume_type ? unmarshalSnapshotVolumeType(data.volume_type) : void 0\n  };\n};\nconst unmarshalUser = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'User' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    isAdmin: data.is_admin,\n    name: data.name\n  };\n};\nconst unmarshalACLRule = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ACLRule' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    action: data.action,\n    description: data.description,\n    direction: data.direction,\n    ip: data.ip,\n    port: data.port,\n    protocol: data.protocol\n  };\n};\nconst unmarshalAddInstanceACLRulesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'AddInstanceACLRulesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    rules: marshalling.unmarshalArrayOfObject(data.rules, unmarshalACLRule)\n  };\n};\nconst unmarshalAddInstanceSettingsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'AddInstanceSettingsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    settings: marshalling.unmarshalArrayOfObject(data.settings, unmarshalInstanceSetting)\n  };\n};\nconst unmarshalDeleteInstanceACLRulesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DeleteInstanceACLRulesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    rules: marshalling.unmarshalArrayOfObject(data.rules, unmarshalACLRule)\n  };\n};\nconst unmarshalDeleteInstanceSettingsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DeleteInstanceSettingsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    settings: marshalling.unmarshalArrayOfObject(data.settings, unmarshalInstanceSetting)\n  };\n};\nconst unmarshalInstanceMetrics = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'InstanceMetrics' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    timeseries: marshalling.unmarshalArrayOfObject(data.timeseries, customMarshalling.unmarshalTimeSeries)\n  };\n};\nconst unmarshalListDatabaseBackupsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListDatabaseBackupsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    databaseBackups: marshalling.unmarshalArrayOfObject(\n      data.database_backups,\n      unmarshalDatabaseBackup\n    ),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalEngineSetting = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'EngineSetting' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    defaultValue: data.default_value,\n    description: data.description,\n    floatMax: data.float_max,\n    floatMin: data.float_min,\n    hotConfigurable: data.hot_configurable,\n    intMax: data.int_max,\n    intMin: data.int_min,\n    name: data.name,\n    propertyType: data.property_type,\n    stringConstraint: data.string_constraint,\n    unit: data.unit\n  };\n};\nconst unmarshalEngineVersion = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'EngineVersion' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    availableInitSettings: marshalling.unmarshalArrayOfObject(\n      data.available_init_settings,\n      unmarshalEngineSetting\n    ),\n    availableSettings: marshalling.unmarshalArrayOfObject(\n      data.available_settings,\n      unmarshalEngineSetting\n    ),\n    beta: data.beta,\n    disabled: data.disabled,\n    endOfLife: marshalling.unmarshalDate(data.end_of_life),\n    name: data.name,\n    version: data.version\n  };\n};\nconst unmarshalDatabaseEngine = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DatabaseEngine' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    logoUrl: data.logo_url,\n    name: data.name,\n    region: data.region,\n    versions: marshalling.unmarshalArrayOfObject(data.versions, unmarshalEngineVersion)\n  };\n};\nconst unmarshalListDatabaseEnginesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListDatabaseEnginesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    engines: marshalling.unmarshalArrayOfObject(data.engines, unmarshalDatabaseEngine),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListDatabasesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListDatabasesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    databases: marshalling.unmarshalArrayOfObject(data.databases, unmarshalDatabase),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListInstanceACLRulesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListInstanceACLRulesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    rules: marshalling.unmarshalArrayOfObject(data.rules, unmarshalACLRule),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListInstanceLogsDetailsResponseInstanceLogDetail = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListInstanceLogsDetailsResponseInstanceLogDetail' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    logName: data.log_name,\n    size: data.size\n  };\n};\nconst unmarshalListInstanceLogsDetailsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListInstanceLogsDetailsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    details: marshalling.unmarshalArrayOfObject(\n      data.details,\n      unmarshalListInstanceLogsDetailsResponseInstanceLogDetail\n    )\n  };\n};\nconst unmarshalListInstanceLogsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListInstanceLogsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    instanceLogs: marshalling.unmarshalArrayOfObject(\n      data.instance_logs,\n      unmarshalInstanceLog\n    )\n  };\n};\nconst unmarshalListInstancesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListInstancesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    instances: marshalling.unmarshalArrayOfObject(data.instances, unmarshalInstance),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalNodeTypeVolumeConstraintSizes = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'NodeTypeVolumeConstraintSizes' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    maxSize: data.max_size,\n    minSize: data.min_size\n  };\n};\nconst unmarshalNodeTypeVolumeType = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'NodeTypeVolumeType' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    chunkSize: data.chunk_size,\n    class: data.class,\n    description: data.description,\n    maxSize: data.max_size,\n    minSize: data.min_size,\n    type: data.type\n  };\n};\nconst unmarshalNodeType = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'NodeType' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    availableVolumeTypes: marshalling.unmarshalArrayOfObject(\n      data.available_volume_types,\n      unmarshalNodeTypeVolumeType\n    ),\n    beta: data.beta,\n    description: data.description,\n    disabled: data.disabled,\n    generation: data.generation,\n    instanceRange: data.instance_range,\n    isBssdCompatible: data.is_bssd_compatible,\n    isHaRequired: data.is_ha_required,\n    memory: data.memory,\n    name: data.name,\n    region: data.region,\n    stockStatus: data.stock_status,\n    vcpus: data.vcpus,\n    volumeConstraint: data.volume_constraint ? unmarshalNodeTypeVolumeConstraintSizes(data.volume_constraint) : void 0\n  };\n};\nconst unmarshalListNodeTypesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListNodeTypesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    nodeTypes: marshalling.unmarshalArrayOfObject(data.node_types, unmarshalNodeType),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListPrivilegesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListPrivilegesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    privileges: marshalling.unmarshalArrayOfObject(data.privileges, unmarshalPrivilege),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListSnapshotsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListSnapshotsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    snapshots: marshalling.unmarshalArrayOfObject(data.snapshots, unmarshalSnapshot),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListUsersResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListUsersResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    totalCount: data.total_count,\n    users: marshalling.unmarshalArrayOfObject(data.users, unmarshalUser)\n  };\n};\nconst unmarshalPrepareInstanceLogsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'PrepareInstanceLogsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    instanceLogs: marshalling.unmarshalArrayOfObject(\n      data.instance_logs,\n      unmarshalInstanceLog\n    )\n  };\n};\nconst unmarshalSetInstanceACLRulesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SetInstanceACLRulesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    rules: marshalling.unmarshalArrayOfObject(data.rules, unmarshalACLRule)\n  };\n};\nconst unmarshalSetInstanceSettingsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SetInstanceSettingsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    settings: marshalling.unmarshalArrayOfObject(data.settings, unmarshalInstanceSetting)\n  };\n};\nconst marshalACLRuleRequest = (request, defaults) => ({\n  description: request.description,\n  ip: request.ip\n});\nconst marshalAddInstanceACLRulesRequest = (request, defaults) => ({\n  rules: request.rules.map((elt) => marshalACLRuleRequest(elt))\n});\nconst marshalInstanceSetting = (request, defaults) => ({\n  name: request.name,\n  value: request.value\n});\nconst marshalAddInstanceSettingsRequest = (request, defaults) => ({\n  settings: request.settings.map((elt) => marshalInstanceSetting(elt))\n});\nconst marshalCloneInstanceRequest = (request, defaults) => ({\n  name: request.name,\n  node_type: request.nodeType\n});\nconst marshalCreateDatabaseBackupRequest = (request, defaults) => ({\n  database_name: request.databaseName,\n  expires_at: request.expiresAt,\n  instance_id: request.instanceId,\n  name: request.name || randomName(\"bkp\")\n});\nconst marshalCreateDatabaseRequest = (request, defaults) => ({\n  name: request.name\n});\nconst marshalEndpointSpecPrivateNetworkIpamConfig = (request, defaults) => ({});\nconst marshalEndpointSpecLoadBalancer = (request, defaults) => ({});\nconst marshalEndpointSpecPrivateNetwork = (request, defaults) => ({\n  private_network_id: request.privateNetworkId,\n  ...marshalling.resolveOneOf([\n    { param: \"service_ip\", value: request.serviceIp },\n    {\n      param: \"ipam_config\",\n      value: request.ipamConfig !== void 0 ? marshalEndpointSpecPrivateNetworkIpamConfig(\n        request.ipamConfig\n      ) : void 0\n    }\n  ])\n});\nconst marshalEndpointSpec = (request, defaults) => ({\n  ...marshalling.resolveOneOf([\n    {\n      param: \"load_balancer\",\n      value: request.loadBalancer !== void 0 ? marshalEndpointSpecLoadBalancer(request.loadBalancer) : void 0\n    },\n    {\n      param: \"private_network\",\n      value: request.privateNetwork !== void 0 ? marshalEndpointSpecPrivateNetwork(request.privateNetwork) : void 0\n    }\n  ])\n});\nconst marshalCreateEndpointRequest = (request, defaults) => ({\n  endpoint_spec: request.endpointSpec !== void 0 ? marshalEndpointSpec(request.endpointSpec) : void 0\n});\nconst marshalCreateInstanceFromSnapshotRequest = (request, defaults) => ({\n  instance_name: request.instanceName,\n  is_ha_cluster: request.isHaCluster,\n  node_type: request.nodeType\n});\nconst marshalEncryptionAtRest = (request, defaults) => ({\n  enabled: request.enabled\n});\nconst marshalCreateInstanceRequest = (request, defaults) => ({\n  backup_same_region: request.backupSameRegion,\n  disable_backup: request.disableBackup,\n  encryption: request.encryption !== void 0 ? marshalEncryptionAtRest(request.encryption) : void 0,\n  engine: request.engine,\n  init_endpoints: request.initEndpoints !== void 0 ? request.initEndpoints.map((elt) => marshalEndpointSpec(elt)) : void 0,\n  init_settings: request.initSettings !== void 0 ? request.initSettings.map((elt) => marshalInstanceSetting(elt)) : void 0,\n  is_ha_cluster: request.isHaCluster,\n  name: request.name || randomName(\"ins\"),\n  node_type: request.nodeType,\n  password: request.password,\n  tags: request.tags,\n  user_name: request.userName,\n  volume_size: request.volumeSize,\n  volume_type: request.volumeType,\n  ...marshalling.resolveOneOf([\n    {\n      default: defaults.defaultProjectId,\n      param: \"project_id\",\n      value: request.projectId\n    },\n    {\n      default: defaults.defaultOrganizationId,\n      param: \"organization_id\",\n      value: request.organizationId\n    }\n  ])\n});\nconst marshalReadReplicaEndpointSpecPrivateNetworkIpamConfig = (request, defaults) => ({});\nconst marshalReadReplicaEndpointSpecDirectAccess = (request, defaults) => ({});\nconst marshalReadReplicaEndpointSpecPrivateNetwork = (request, defaults) => ({\n  private_network_id: request.privateNetworkId,\n  ...marshalling.resolveOneOf([\n    { param: \"service_ip\", value: request.serviceIp },\n    {\n      param: \"ipam_config\",\n      value: request.ipamConfig !== void 0 ? marshalReadReplicaEndpointSpecPrivateNetworkIpamConfig(\n        request.ipamConfig\n      ) : void 0\n    }\n  ])\n});\nconst marshalReadReplicaEndpointSpec = (request, defaults) => ({\n  ...marshalling.resolveOneOf([\n    {\n      param: \"direct_access\",\n      value: request.directAccess !== void 0 ? marshalReadReplicaEndpointSpecDirectAccess(\n        request.directAccess\n      ) : void 0\n    },\n    {\n      param: \"private_network\",\n      value: request.privateNetwork !== void 0 ? marshalReadReplicaEndpointSpecPrivateNetwork(\n        request.privateNetwork\n      ) : void 0\n    }\n  ])\n});\nconst marshalCreateReadReplicaEndpointRequest = (request, defaults) => ({\n  endpoint_spec: request.endpointSpec.map(\n    (elt) => marshalReadReplicaEndpointSpec(elt)\n  )\n});\nconst marshalCreateReadReplicaRequest = (request, defaults) => ({\n  endpoint_spec: request.endpointSpec !== void 0 ? request.endpointSpec.map(\n    (elt) => marshalReadReplicaEndpointSpec(elt)\n  ) : void 0,\n  instance_id: request.instanceId,\n  same_zone: request.sameZone\n});\nconst marshalCreateSnapshotRequest = (request, defaults) => ({\n  expires_at: request.expiresAt,\n  name: request.name || randomName(\"snp\")\n});\nconst marshalCreateUserRequest = (request, defaults) => ({\n  is_admin: request.isAdmin,\n  name: request.name,\n  password: request.password\n});\nconst marshalDeleteInstanceACLRulesRequest = (request, defaults) => ({\n  acl_rule_ips: request.aclRuleIps\n});\nconst marshalDeleteInstanceSettingsRequest = (request, defaults) => ({\n  setting_names: request.settingNames\n});\nconst marshalMigrateEndpointRequest = (request, defaults) => ({\n  instance_id: request.instanceId\n});\nconst marshalPrepareInstanceLogsRequest = (request, defaults) => ({\n  end_date: request.endDate,\n  start_date: request.startDate\n});\nconst marshalPurgeInstanceLogsRequest = (request, defaults) => ({\n  log_name: request.logName\n});\nconst marshalRestoreDatabaseBackupRequest = (request, defaults) => ({\n  database_name: request.databaseName,\n  instance_id: request.instanceId\n});\nconst marshalSetInstanceACLRulesRequest = (request, defaults) => ({\n  rules: request.rules.map((elt) => marshalACLRuleRequest(elt))\n});\nconst marshalSetInstanceSettingsRequest = (request, defaults) => ({\n  settings: request.settings.map((elt) => marshalInstanceSetting(elt))\n});\nconst marshalSetPrivilegeRequest = (request, defaults) => ({\n  database_name: request.databaseName,\n  permission: request.permission,\n  user_name: request.userName\n});\nconst marshalUpdateDatabaseBackupRequest = (request, defaults) => ({\n  expires_at: request.expiresAt,\n  name: request.name\n});\nconst marshalLogsPolicy = (request, defaults) => ({\n  max_age_retention: request.maxAgeRetention,\n  total_disk_retention: request.totalDiskRetention\n});\nconst marshalUpdateInstanceRequest = (request, defaults) => ({\n  backup_same_region: request.backupSameRegion,\n  backup_schedule_frequency: request.backupScheduleFrequency,\n  backup_schedule_retention: request.backupScheduleRetention,\n  backup_schedule_start_hour: request.backupScheduleStartHour,\n  is_backup_schedule_disabled: request.isBackupScheduleDisabled,\n  logs_policy: request.logsPolicy !== void 0 ? marshalLogsPolicy(request.logsPolicy) : void 0,\n  name: request.name,\n  tags: request.tags\n});\nconst marshalUpdateSnapshotRequest = (request, defaults) => ({\n  expires_at: request.expiresAt,\n  name: request.name\n});\nconst marshalUpdateUserRequest = (request, defaults) => ({\n  is_admin: request.isAdmin,\n  password: request.password\n});\nconst marshalUpgradeInstanceRequestMajorUpgradeWorkflow = (request, defaults) => ({\n  upgradable_version_id: request.upgradableVersionId,\n  with_endpoints: request.withEndpoints\n});\nconst marshalUpgradeInstanceRequest = (request, defaults) => ({\n  ...marshalling.resolveOneOf([\n    { param: \"node_type\", value: request.nodeType },\n    { param: \"enable_ha\", value: request.enableHa },\n    { param: \"volume_size\", value: request.volumeSize },\n    { param: \"volume_type\", value: request.volumeType },\n    { param: \"upgradable_version_id\", value: request.upgradableVersionId },\n    {\n      param: \"major_upgrade_workflow\",\n      value: request.majorUpgradeWorkflow !== void 0 ? marshalUpgradeInstanceRequestMajorUpgradeWorkflow(\n        request.majorUpgradeWorkflow\n      ) : void 0\n    }\n  ])\n});\nexports.marshalAddInstanceACLRulesRequest = marshalAddInstanceACLRulesRequest;\nexports.marshalAddInstanceSettingsRequest = marshalAddInstanceSettingsRequest;\nexports.marshalCloneInstanceRequest = marshalCloneInstanceRequest;\nexports.marshalCreateDatabaseBackupRequest = marshalCreateDatabaseBackupRequest;\nexports.marshalCreateDatabaseRequest = marshalCreateDatabaseRequest;\nexports.marshalCreateEndpointRequest = marshalCreateEndpointRequest;\nexports.marshalCreateInstanceFromSnapshotRequest = marshalCreateInstanceFromSnapshotRequest;\nexports.marshalCreateInstanceRequest = marshalCreateInstanceRequest;\nexports.marshalCreateReadReplicaEndpointRequest = marshalCreateReadReplicaEndpointRequest;\nexports.marshalCreateReadReplicaRequest = marshalCreateReadReplicaRequest;\nexports.marshalCreateSnapshotRequest = marshalCreateSnapshotRequest;\nexports.marshalCreateUserRequest = marshalCreateUserRequest;\nexports.marshalDeleteInstanceACLRulesRequest = marshalDeleteInstanceACLRulesRequest;\nexports.marshalDeleteInstanceSettingsRequest = marshalDeleteInstanceSettingsRequest;\nexports.marshalMigrateEndpointRequest = marshalMigrateEndpointRequest;\nexports.marshalPrepareInstanceLogsRequest = marshalPrepareInstanceLogsRequest;\nexports.marshalPurgeInstanceLogsRequest = marshalPurgeInstanceLogsRequest;\nexports.marshalRestoreDatabaseBackupRequest = marshalRestoreDatabaseBackupRequest;\nexports.marshalSetInstanceACLRulesRequest = marshalSetInstanceACLRulesRequest;\nexports.marshalSetInstanceSettingsRequest = marshalSetInstanceSettingsRequest;\nexports.marshalSetPrivilegeRequest = marshalSetPrivilegeRequest;\nexports.marshalUpdateDatabaseBackupRequest = marshalUpdateDatabaseBackupRequest;\nexports.marshalUpdateInstanceRequest = marshalUpdateInstanceRequest;\nexports.marshalUpdateSnapshotRequest = marshalUpdateSnapshotRequest;\nexports.marshalUpdateUserRequest = marshalUpdateUserRequest;\nexports.marshalUpgradeInstanceRequest = marshalUpgradeInstanceRequest;\nexports.unmarshalACLRule = unmarshalACLRule;\nexports.unmarshalAddInstanceACLRulesResponse = unmarshalAddInstanceACLRulesResponse;\nexports.unmarshalAddInstanceSettingsResponse = unmarshalAddInstanceSettingsResponse;\nexports.unmarshalBackupSchedule = unmarshalBackupSchedule;\nexports.unmarshalDatabase = unmarshalDatabase;\nexports.unmarshalDatabaseBackup = unmarshalDatabaseBackup;\nexports.unmarshalDeleteInstanceACLRulesResponse = unmarshalDeleteInstanceACLRulesResponse;\nexports.unmarshalDeleteInstanceSettingsResponse = unmarshalDeleteInstanceSettingsResponse;\nexports.unmarshalEndpoint = unmarshalEndpoint;\nexports.unmarshalInstance = unmarshalInstance;\nexports.unmarshalInstanceLog = unmarshalInstanceLog;\nexports.unmarshalInstanceMetrics = unmarshalInstanceMetrics;\nexports.unmarshalListDatabaseBackupsResponse = unmarshalListDatabaseBackupsResponse;\nexports.unmarshalListDatabaseEnginesResponse = unmarshalListDatabaseEnginesResponse;\nexports.unmarshalListDatabasesResponse = unmarshalListDatabasesResponse;\nexports.unmarshalListInstanceACLRulesResponse = unmarshalListInstanceACLRulesResponse;\nexports.unmarshalListInstanceLogsDetailsResponse = unmarshalListInstanceLogsDetailsResponse;\nexports.unmarshalListInstanceLogsResponse = unmarshalListInstanceLogsResponse;\nexports.unmarshalListInstancesResponse = unmarshalListInstancesResponse;\nexports.unmarshalListNodeTypesResponse = unmarshalListNodeTypesResponse;\nexports.unmarshalListPrivilegesResponse = unmarshalListPrivilegesResponse;\nexports.unmarshalListSnapshotsResponse = unmarshalListSnapshotsResponse;\nexports.unmarshalListUsersResponse = unmarshalListUsersResponse;\nexports.unmarshalMaintenance = unmarshalMaintenance;\nexports.unmarshalPrepareInstanceLogsResponse = unmarshalPrepareInstanceLogsResponse;\nexports.unmarshalPrivilege = unmarshalPrivilege;\nexports.unmarshalReadReplica = unmarshalReadReplica;\nexports.unmarshalSetInstanceACLRulesResponse = unmarshalSetInstanceACLRulesResponse;\nexports.unmarshalSetInstanceSettingsResponse = unmarshalSetInstanceSettingsResponse;\nexports.unmarshalSnapshot = unmarshalSnapshot;\nexports.unmarshalUser = unmarshalUser;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst UpdateInstanceRequest = {\n  backupScheduleStartHour: {\n    lessThanOrEqual: 23\n  }\n};\nexports.UpdateInstanceRequest = UpdateInstanceRequest;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index_gen = require(\"./v1/index.gen.cjs\");\nexports.v1 = index_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst intervalRetrier = require(\"../../../internal/async/interval-retrier.cjs\");\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass API extends api.API {\n  /** Lists the available zones of the API. */\n  static LOCALITIES = [\n    \"fr-par-1\",\n    \"fr-par-2\",\n    \"nl-ams-1\",\n    \"nl-ams-2\",\n    \"pl-waw-1\",\n    \"pl-waw-2\"\n  ];\n  /**\n   * Create a Redis™ Database Instance. Create a new Redis™ Database Instance\n   * (Redis™ cluster). You must set the `zone`, `project_id`, `version`,\n   * `node_type`, `user_name` and `password` parameters. Optionally you can\n   * define `acl_rules`, `endpoints`, `tls_enabled` and `cluster_settings`.\n   *\n   * @param request - The request {@link CreateClusterRequest}\n   * @returns A Promise of Cluster\n   */\n  createCluster = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateClusterRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/redis/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/clusters`\n    },\n    marshalling_gen.unmarshalCluster\n  );\n  /**\n   * Update a Redis™ Database Instance. Update the parameters of a Redis™\n   * Database Instance (Redis™ cluster), including `name`, `tags`, `user_name`\n   * and `password`.\n   *\n   * @param request - The request {@link UpdateClusterRequest}\n   * @returns A Promise of Cluster\n   */\n  updateCluster = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateClusterRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/redis/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/clusters/${marshalling.validatePathParam(\"clusterId\", request.clusterId)}`\n    },\n    marshalling_gen.unmarshalCluster\n  );\n  /**\n   * Get a Redis™ Database Instance. Retrieve information about a Redis™\n   * Database Instance (Redis™ cluster). Specify the `cluster_id` and `region`\n   * in your request to get information such as `id`, `status`, `version`,\n   * `tls_enabled`, `cluster_settings`, `upgradable_versions` and `endpoints`\n   * about your cluster in the response.\n   *\n   * @param request - The request {@link GetClusterRequest}\n   * @returns A Promise of Cluster\n   */\n  getCluster = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/redis/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/clusters/${marshalling.validatePathParam(\"clusterId\", request.clusterId)}`\n    },\n    marshalling_gen.unmarshalCluster\n  );\n  /**\n   * Waits for {@link Cluster} to be in a final state.\n   *\n   * @param request - The request {@link GetClusterRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Cluster\n   */\n  waitForCluster = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.CLUSTER_TRANSIENT_STATUSES.includes(res.status))),\n    this.getCluster,\n    request,\n    options\n  );\n  pageOfListClusters = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/redis/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/clusters`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId],\n        [\"tags\", request.tags],\n        [\"version\", request.version]\n      )\n    },\n    marshalling_gen.unmarshalListClustersResponse\n  );\n  /**\n   * List Redis™ Database Instances. List all Redis™ Database Instances (Redis™\n   * cluster) in the specified zone. By default, the Database Instances returned\n   * in the list are ordered by creation date in ascending order, though this\n   * can be modified via the order_by field. You can define additional\n   * parameters for your query, such as `tags`, `name`, `organization_id` and\n   * `version`.\n   *\n   * @param request - The request {@link ListClustersRequest}\n   * @returns A Promise of ListClustersResponse\n   */\n  listClusters = (request = {}) => resourcePaginator.enrichForPagination(\"clusters\", this.pageOfListClusters, request);\n  /**\n   * Scale up a Redis™ Database Instance. Upgrade your Redis™ Database Instance,\n   * either by upgrading to a bigger node type (vertical scaling) or by adding\n   * more nodes to your Database Instance to increase your number of endpoints\n   * and distribute cache (horizontal scaling, available for clusters only).\n   * Note that scaling horizontally your Redis™ Database Instance will not renew\n   * its TLS certificate. In order to refresh the TLS certificate, you must use\n   * the Renew TLS certificate endpoint.\n   *\n   * @param request - The request {@link MigrateClusterRequest}\n   * @returns A Promise of Cluster\n   */\n  migrateCluster = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalMigrateClusterRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/redis/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/clusters/${marshalling.validatePathParam(\"clusterId\", request.clusterId)}/migrate`\n    },\n    marshalling_gen.unmarshalCluster\n  );\n  /**\n   * Delete a Redis™ Database Instance. Delete a Redis™ Database Instance\n   * (Redis™ cluster), specified by the `region` and `cluster_id` parameters.\n   * Deleting a Database Instance is permanent, and cannot be undone. Note that\n   * upon deletion all your data will be lost.\n   *\n   * @param request - The request {@link DeleteClusterRequest}\n   * @returns A Promise of Cluster\n   */\n  deleteCluster = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/redis/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/clusters/${marshalling.validatePathParam(\"clusterId\", request.clusterId)}`\n    },\n    marshalling_gen.unmarshalCluster\n  );\n  /**\n   * Get metrics of a Redis™ Database Instance. Retrieve the metrics of a Redis™\n   * Database Instance (Redis™ cluster). You can define the period from which to\n   * retrieve metrics by specifying the `start_date` and `end_date`.\n   *\n   * @param request - The request {@link GetClusterMetricsRequest}\n   * @returns A Promise of ClusterMetricsResponse\n   */\n  getClusterMetrics = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/redis/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/clusters/${marshalling.validatePathParam(\"clusterId\", request.clusterId)}/metrics`,\n      urlParams: marshalling.urlParams(\n        [\"end_at\", request.endAt],\n        [\"metric_name\", request.metricName],\n        [\"start_at\", request.startAt]\n      )\n    },\n    marshalling_gen.unmarshalClusterMetricsResponse\n  );\n  pageOfListNodeTypes = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/redis/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/node-types`,\n      urlParams: marshalling.urlParams(\n        [\"include_disabled_types\", request.includeDisabledTypes],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListNodeTypesResponse\n  );\n  /**\n   * List available node types. List all available node types. By default, the\n   * node types returned in the list are ordered by creation date in ascending\n   * order, though this can be modified via the `order_by` field.\n   *\n   * @param request - The request {@link ListNodeTypesRequest}\n   * @returns A Promise of ListNodeTypesResponse\n   */\n  listNodeTypes = (request) => resourcePaginator.enrichForPagination(\"nodeTypes\", this.pageOfListNodeTypes, request);\n  pageOfListClusterVersions = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/redis/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/cluster-versions`,\n      urlParams: marshalling.urlParams(\n        [\"include_beta\", request.includeBeta],\n        [\"include_deprecated\", request.includeDeprecated],\n        [\"include_disabled\", request.includeDisabled],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"version\", request.version]\n      )\n    },\n    marshalling_gen.unmarshalListClusterVersionsResponse\n  );\n  /**\n   * List available Redis™ versions. List the Redis™ database engine versions\n   * available. You can define additional parameters for your query, such as\n   * `include_disabled`, `include_beta`, `include_deprecated` and `version`.\n   *\n   * @param request - The request {@link ListClusterVersionsRequest}\n   * @returns A Promise of ListClusterVersionsResponse\n   */\n  listClusterVersions = (request) => resourcePaginator.enrichForPagination(\"versions\", this.pageOfListClusterVersions, request);\n  /**\n   * Get the TLS certificate of a cluster. Retrieve information about the TLS\n   * certificate of a Redis™ Database Instance (Redis™ cluster). Details like\n   * name and content are returned in the response.\n   *\n   * @param request - The request {@link GetClusterCertificateRequest}\n   * @returns A Promise of Blob\n   */\n  getClusterCertificate = (request) => this.client.fetch({\n    method: \"GET\",\n    path: `/redis/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/clusters/${marshalling.validatePathParam(\"clusterId\", request.clusterId)}/certificate`,\n    urlParams: marshalling.urlParams([\"dl\", 1]),\n    responseType: \"blob\"\n  });\n  /**\n   * Renew the TLS certificate of a cluster. Renew a TLS certificate for a\n   * Redis™ Database Instance (Redis™ cluster). Renewing a certificate means\n   * that you will not be able to connect to your Database Instance using the\n   * previous certificate. You will also need to download and update the new\n   * certificate for all database clients.\n   *\n   * @param request - The request {@link RenewClusterCertificateRequest}\n   * @returns A Promise of Cluster\n   */\n  renewClusterCertificate = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/redis/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/clusters/${marshalling.validatePathParam(\"clusterId\", request.clusterId)}/renew-certificate`\n    },\n    marshalling_gen.unmarshalCluster\n  );\n  /**\n   * Add advanced settings. Add an advanced setting to a Redis™ Database\n   * Instance (Redis™ cluster). You must set the `name` and the `value` of each\n   * setting.\n   *\n   * @param request - The request {@link AddClusterSettingsRequest}\n   * @returns A Promise of ClusterSettingsResponse\n   */\n  addClusterSettings = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalAddClusterSettingsRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/redis/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/clusters/${marshalling.validatePathParam(\"clusterId\", request.clusterId)}/settings`\n    },\n    marshalling_gen.unmarshalClusterSettingsResponse\n  );\n  /**\n   * Delete advanced setting. Delete an advanced setting in a Redis™ Database\n   * Instance (Redis™ cluster). You must specify the names of the settings you\n   * want to delete in the request body.\n   *\n   * @param request - The request {@link DeleteClusterSettingRequest}\n   * @returns A Promise of Cluster\n   */\n  deleteClusterSetting = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/redis/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/clusters/${marshalling.validatePathParam(\"clusterId\", request.clusterId)}/settings/${marshalling.validatePathParam(\"settingName\", request.settingName)}`\n    },\n    marshalling_gen.unmarshalCluster\n  );\n  /**\n   * Set advanced settings. Update an advanced setting for a Redis™ Database\n   * Instance (Redis™ cluster). Settings added upon database engine\n   * initalization can only be defined once, and cannot, therefore, be updated.\n   *\n   * @param request - The request {@link SetClusterSettingsRequest}\n   * @returns A Promise of ClusterSettingsResponse\n   */\n  setClusterSettings = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSetClusterSettingsRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/redis/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/clusters/${marshalling.validatePathParam(\"clusterId\", request.clusterId)}/settings`\n    },\n    marshalling_gen.unmarshalClusterSettingsResponse\n  );\n  /**\n   * Set ACL rules for a cluster. Replace all the ACL rules of a Redis™ Database\n   * Instance (Redis™ cluster).\n   *\n   * @param request - The request {@link SetAclRulesRequest}\n   * @returns A Promise of SetAclRulesResponse\n   */\n  setAclRules = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSetAclRulesRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/redis/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/clusters/${marshalling.validatePathParam(\"clusterId\", request.clusterId)}/acls`\n    },\n    marshalling_gen.unmarshalSetAclRulesResponse\n  );\n  /**\n   * Add ACL rules for a cluster. Add an additional ACL rule to a Redis™\n   * Database Instance (Redis™ cluster).\n   *\n   * @param request - The request {@link AddAclRulesRequest}\n   * @returns A Promise of AddAclRulesResponse\n   */\n  addAclRules = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalAddAclRulesRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/redis/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/clusters/${marshalling.validatePathParam(\"clusterId\", request.clusterId)}/acls`\n    },\n    marshalling_gen.unmarshalAddAclRulesResponse\n  );\n  /**\n   * Delete an ACL rule for a cluster. Delete an ACL rule of a Redis™ Database\n   * Instance (Redis™ cluster). You must specify the `acl_id` of the rule you\n   * want to delete in your request.\n   *\n   * @param request - The request {@link DeleteAclRuleRequest}\n   * @returns A Promise of Cluster\n   */\n  deleteAclRule = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/redis/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/acls/${marshalling.validatePathParam(\"aclId\", request.aclId)}`\n    },\n    marshalling_gen.unmarshalCluster\n  );\n  /**\n   * Get an ACL rule. Retrieve information about an ACL rule of a Redis™\n   * Database Instance (Redis™ cluster). You must specify the `acl_id` of the\n   * rule in your request.\n   *\n   * @param request - The request {@link GetAclRuleRequest}\n   * @returns A Promise of ACLRule\n   */\n  getAclRule = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/redis/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/acls/${marshalling.validatePathParam(\"aclId\", request.aclId)}`\n    },\n    marshalling_gen.unmarshalACLRule\n  );\n  /**\n   * Set endpoints for a cluster. Update an endpoint for a Redis™ Database\n   * Instance (Redis™ cluster). You must specify the `cluster_id` and the\n   * `endpoints` parameters in your request.\n   *\n   * @param request - The request {@link SetEndpointsRequest}\n   * @returns A Promise of SetEndpointsResponse\n   */\n  setEndpoints = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSetEndpointsRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/redis/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/clusters/${marshalling.validatePathParam(\"clusterId\", request.clusterId)}/endpoints`\n    },\n    marshalling_gen.unmarshalSetEndpointsResponse\n  );\n  /**\n   * Add endpoints for a cluster. Add a new endpoint for a Redis™ Database\n   * Instance (Redis™ cluster). You can add `private_network` or\n   * `public_network` specifications to the body of the request.\n   *\n   * @param request - The request {@link AddEndpointsRequest}\n   * @returns A Promise of AddEndpointsResponse\n   */\n  addEndpoints = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalAddEndpointsRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/redis/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/clusters/${marshalling.validatePathParam(\"clusterId\", request.clusterId)}/endpoints`\n    },\n    marshalling_gen.unmarshalAddEndpointsResponse\n  );\n  /**\n   * Delete an endpoint for a cluster. Delete the endpoint of a Redis™ Database\n   * Instance (Redis™ cluster). You must specify the `region` and `endpoint_id`\n   * parameters of the endpoint you want to delete. Note that might need to\n   * update any environment configurations that point to the deleted endpoint.\n   *\n   * @param request - The request {@link DeleteEndpointRequest}\n   * @returns A Promise of Cluster\n   */\n  deleteEndpoint = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/redis/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/endpoints/${marshalling.validatePathParam(\"endpointId\", request.endpointId)}`\n    },\n    marshalling_gen.unmarshalCluster\n  );\n  /**\n   * Get an endpoint. Retrieve information about a Redis™ Database Instance\n   * (Redis™ cluster) endpoint. Full details about the endpoint, like `ips`,\n   * `port`, `private_network` and `public_network` specifications are returned\n   * in the response.\n   *\n   * @param request - The request {@link GetEndpointRequest}\n   * @returns A Promise of Endpoint\n   */\n  getEndpoint = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/redis/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/endpoints/${marshalling.validatePathParam(\"endpointId\", request.endpointId)}`\n    },\n    marshalling_gen.unmarshalEndpoint\n  );\n  /**\n   * Update an endpoint. Update information about a Redis™ Database Instance\n   * (Redis™ cluster) endpoint. Full details about the endpoint, like `ips`,\n   * `port`, `private_network` and `public_network` specifications are returned\n   * in the response.\n   *\n   * @param request - The request {@link UpdateEndpointRequest}\n   * @returns A Promise of Endpoint\n   */\n  updateEndpoint = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateEndpointRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/redis/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/endpoints/${marshalling.validatePathParam(\"endpointId\", request.endpointId)}`\n    },\n    marshalling_gen.unmarshalEndpoint\n  );\n}\nexports.API = API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst CLUSTER_TRANSIENT_STATUSES = [\n  \"provisioning\",\n  \"configuring\",\n  \"deleting\",\n  \"autohealing\",\n  \"initializing\"\n];\nexports.CLUSTER_TRANSIENT_STATUSES = CLUSTER_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nexports.API = api_gen.API;\nexports.CLUSTER_TRANSIENT_STATUSES = content_gen.CLUSTER_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst randomName = require(\"@scaleway/random-name\");\nconst json = require(\"../../../helpers/json.cjs\");\nconst customMarshalling = require(\"../../../scw/custom-marshalling.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nconst unmarshalACLRule = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ACLRule' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    description: data.description,\n    id: data.id,\n    ipCidr: data.ip_cidr\n  };\n};\nconst unmarshalPrivateNetwork = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'PrivateNetwork' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    id: data.id,\n    provisioningMode: data.provisioning_mode,\n    serviceIps: data.service_ips,\n    zone: data.zone\n  };\n};\nconst unmarshalPublicNetwork = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'PublicNetwork' failed as data isn't a dictionary.`\n    );\n  }\n  return {};\n};\nconst unmarshalEndpoint = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Endpoint' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    id: data.id,\n    ips: data.ips,\n    port: data.port,\n    privateNetwork: data.private_network ? unmarshalPrivateNetwork(data.private_network) : void 0,\n    publicNetwork: data.public_network ? unmarshalPublicNetwork(data.public_network) : void 0\n  };\n};\nconst unmarshalClusterSetting = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ClusterSetting' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    name: data.name,\n    value: data.value\n  };\n};\nconst unmarshalCluster = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Cluster' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    aclRules: marshalling.unmarshalArrayOfObject(data.acl_rules, unmarshalACLRule),\n    clusterSettings: marshalling.unmarshalArrayOfObject(\n      data.cluster_settings,\n      unmarshalClusterSetting\n    ),\n    clusterSize: data.cluster_size,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    endpoints: marshalling.unmarshalArrayOfObject(data.endpoints, unmarshalEndpoint),\n    id: data.id,\n    name: data.name,\n    nodeType: data.node_type,\n    projectId: data.project_id,\n    status: data.status,\n    tags: data.tags,\n    tlsEnabled: data.tls_enabled,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    upgradableVersions: data.upgradable_versions,\n    userName: data.user_name,\n    version: data.version,\n    zone: data.zone\n  };\n};\nconst unmarshalAddAclRulesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'AddAclRulesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    aclRules: marshalling.unmarshalArrayOfObject(data.acl_rules, unmarshalACLRule),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalAddEndpointsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'AddEndpointsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    endpoints: marshalling.unmarshalArrayOfObject(data.endpoints, unmarshalEndpoint),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalClusterMetricsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ClusterMetricsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    timeseries: marshalling.unmarshalArrayOfObject(data.timeseries, customMarshalling.unmarshalTimeSeries)\n  };\n};\nconst unmarshalClusterSettingsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ClusterSettingsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    settings: marshalling.unmarshalArrayOfObject(data.settings, unmarshalClusterSetting)\n  };\n};\nconst unmarshalAvailableClusterSetting = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'AvailableClusterSetting' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    defaultValue: data.default_value,\n    deprecated: data.deprecated,\n    description: data.description,\n    maxValue: data.max_value,\n    minValue: data.min_value,\n    name: data.name,\n    regex: data.regex,\n    type: data.type\n  };\n};\nconst unmarshalClusterVersion = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ClusterVersion' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    availableSettings: marshalling.unmarshalArrayOfObject(\n      data.available_settings,\n      unmarshalAvailableClusterSetting\n    ),\n    endOfLifeAt: marshalling.unmarshalDate(data.end_of_life_at),\n    logoUrl: data.logo_url,\n    version: data.version,\n    zone: data.zone\n  };\n};\nconst unmarshalListClusterVersionsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListClusterVersionsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    totalCount: data.total_count,\n    versions: marshalling.unmarshalArrayOfObject(data.versions, unmarshalClusterVersion)\n  };\n};\nconst unmarshalListClustersResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListClustersResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    clusters: marshalling.unmarshalArrayOfObject(data.clusters, unmarshalCluster),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalNodeType = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'NodeType' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    beta: data.beta,\n    description: data.description,\n    disabled: data.disabled,\n    memory: data.memory,\n    name: data.name,\n    stockStatus: data.stock_status,\n    vcpus: data.vcpus,\n    zone: data.zone\n  };\n};\nconst unmarshalListNodeTypesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListNodeTypesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    nodeTypes: marshalling.unmarshalArrayOfObject(data.node_types, unmarshalNodeType),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalSetAclRulesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SetAclRulesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    aclRules: marshalling.unmarshalArrayOfObject(data.acl_rules, unmarshalACLRule)\n  };\n};\nconst unmarshalSetEndpointsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SetEndpointsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    endpoints: marshalling.unmarshalArrayOfObject(data.endpoints, unmarshalEndpoint)\n  };\n};\nconst marshalACLRuleSpec = (request, defaults) => ({\n  description: request.description,\n  ip_cidr: request.ipCidr\n});\nconst marshalAddAclRulesRequest = (request, defaults) => ({\n  acl_rules: request.aclRules.map((elt) => marshalACLRuleSpec(elt))\n});\nconst marshalClusterSetting = (request, defaults) => ({\n  name: request.name,\n  value: request.value\n});\nconst marshalAddClusterSettingsRequest = (request, defaults) => ({\n  settings: request.settings.map((elt) => marshalClusterSetting(elt))\n});\nconst marshalEndpointSpecPrivateNetworkSpecIpamConfig = (request, defaults) => ({});\nconst marshalEndpointSpecPrivateNetworkSpec = (request, defaults) => ({\n  id: request.id,\n  ipam_config: request.ipamConfig !== void 0 ? marshalEndpointSpecPrivateNetworkSpecIpamConfig(\n    request.ipamConfig\n  ) : void 0,\n  service_ips: request.serviceIps\n});\nconst marshalEndpointSpecPublicNetworkSpec = (request, defaults) => ({});\nconst marshalEndpointSpec = (request, defaults) => ({\n  ...marshalling.resolveOneOf([\n    {\n      param: \"private_network\",\n      value: request.privateNetwork !== void 0 ? marshalEndpointSpecPrivateNetworkSpec(\n        request.privateNetwork\n      ) : void 0\n    },\n    {\n      param: \"public_network\",\n      value: request.publicNetwork !== void 0 ? marshalEndpointSpecPublicNetworkSpec(\n        request.publicNetwork\n      ) : void 0\n    }\n  ])\n});\nconst marshalAddEndpointsRequest = (request, defaults) => ({\n  endpoints: request.endpoints.map((elt) => marshalEndpointSpec(elt))\n});\nconst marshalCreateClusterRequest = (request, defaults) => ({\n  acl_rules: request.aclRules !== void 0 ? request.aclRules.map((elt) => marshalACLRuleSpec(elt)) : void 0,\n  cluster_settings: request.clusterSettings !== void 0 ? request.clusterSettings.map((elt) => marshalClusterSetting(elt)) : void 0,\n  cluster_size: request.clusterSize,\n  endpoints: request.endpoints !== void 0 ? request.endpoints.map((elt) => marshalEndpointSpec(elt)) : void 0,\n  name: request.name || randomName(\"ins\"),\n  node_type: request.nodeType,\n  password: request.password,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  tags: request.tags,\n  tls_enabled: request.tlsEnabled,\n  user_name: request.userName,\n  version: request.version\n});\nconst marshalMigrateClusterRequest = (request, defaults) => ({\n  ...marshalling.resolveOneOf([\n    { param: \"version\", value: request.version },\n    { param: \"node_type\", value: request.nodeType },\n    { param: \"cluster_size\", value: request.clusterSize }\n  ])\n});\nconst marshalSetAclRulesRequest = (request, defaults) => ({\n  acl_rules: request.aclRules.map((elt) => marshalACLRuleSpec(elt))\n});\nconst marshalSetClusterSettingsRequest = (request, defaults) => ({\n  settings: request.settings.map((elt) => marshalClusterSetting(elt))\n});\nconst marshalSetEndpointsRequest = (request, defaults) => ({\n  endpoints: request.endpoints.map((elt) => marshalEndpointSpec(elt))\n});\nconst marshalUpdateClusterRequest = (request, defaults) => ({\n  name: request.name,\n  password: request.password,\n  tags: request.tags,\n  user_name: request.userName\n});\nconst marshalUpdateEndpointRequest = (request, defaults) => ({\n  ...marshalling.resolveOneOf([\n    {\n      param: \"private_network\",\n      value: request.privateNetwork !== void 0 ? marshalEndpointSpecPrivateNetworkSpec(\n        request.privateNetwork\n      ) : void 0\n    },\n    {\n      param: \"public_network\",\n      value: request.publicNetwork !== void 0 ? marshalEndpointSpecPublicNetworkSpec(\n        request.publicNetwork\n      ) : void 0\n    }\n  ])\n});\nexports.marshalAddAclRulesRequest = marshalAddAclRulesRequest;\nexports.marshalAddClusterSettingsRequest = marshalAddClusterSettingsRequest;\nexports.marshalAddEndpointsRequest = marshalAddEndpointsRequest;\nexports.marshalCreateClusterRequest = marshalCreateClusterRequest;\nexports.marshalMigrateClusterRequest = marshalMigrateClusterRequest;\nexports.marshalSetAclRulesRequest = marshalSetAclRulesRequest;\nexports.marshalSetClusterSettingsRequest = marshalSetClusterSettingsRequest;\nexports.marshalSetEndpointsRequest = marshalSetEndpointsRequest;\nexports.marshalUpdateClusterRequest = marshalUpdateClusterRequest;\nexports.marshalUpdateEndpointRequest = marshalUpdateEndpointRequest;\nexports.unmarshalACLRule = unmarshalACLRule;\nexports.unmarshalAddAclRulesResponse = unmarshalAddAclRulesResponse;\nexports.unmarshalAddEndpointsResponse = unmarshalAddEndpointsResponse;\nexports.unmarshalCluster = unmarshalCluster;\nexports.unmarshalClusterMetricsResponse = unmarshalClusterMetricsResponse;\nexports.unmarshalClusterSettingsResponse = unmarshalClusterSettingsResponse;\nexports.unmarshalEndpoint = unmarshalEndpoint;\nexports.unmarshalListClusterVersionsResponse = unmarshalListClusterVersionsResponse;\nexports.unmarshalListClustersResponse = unmarshalListClustersResponse;\nexports.unmarshalListNodeTypesResponse = unmarshalListNodeTypesResponse;\nexports.unmarshalSetAclRulesResponse = unmarshalSetAclRulesResponse;\nexports.unmarshalSetEndpointsResponse = unmarshalSetEndpointsResponse;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index_gen = require(\"./v1/index.gen.cjs\");\nexports.v1 = index_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst intervalRetrier = require(\"../../../internal/async/interval-retrier.cjs\");\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass API extends api.API {\n  /** Lists the available regions of the API. */\n  static LOCALITIES = [\"fr-par\", \"nl-ams\", \"pl-waw\"];\n  pageOfListNamespaces = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/registry/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/namespaces`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListNamespacesResponse\n  );\n  /**\n   * List namespaces. List all namespaces in a specified region. By default, the\n   * namespaces listed are ordered by creation date in ascending order. This can\n   * be modified via the order_by field. You can also define additional\n   * parameters for your query, such as the `instance_id` and `project_id`\n   * parameters.\n   *\n   * @param request - The request {@link ListNamespacesRequest}\n   * @returns A Promise of ListNamespacesResponse\n   */\n  listNamespaces = (request = {}) => resourcePaginator.enrichForPagination(\"namespaces\", this.pageOfListNamespaces, request);\n  /**\n   * Get a namespace. Retrieve information about a given namespace, specified by\n   * its `namespace_id` and region. Full details about the namespace, such as\n   * `description`, `project_id`, `status`, `endpoint`, `is_public`, `size`, and\n   * `image_count` are returned in the response.\n   *\n   * @param request - The request {@link GetNamespaceRequest}\n   * @returns A Promise of Namespace\n   */\n  getNamespace = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/registry/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/namespaces/${marshalling.validatePathParam(\"namespaceId\", request.namespaceId)}`\n    },\n    marshalling_gen.unmarshalNamespace\n  );\n  /**\n   * Waits for {@link Namespace} to be in a final state.\n   *\n   * @param request - The request {@link GetNamespaceRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Namespace\n   */\n  waitForNamespace = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.NAMESPACE_TRANSIENT_STATUSES.includes(res.status))),\n    this.getNamespace,\n    request,\n    options\n  );\n  /**\n   * Create a namespace. Create a new Container Registry namespace. You must\n   * specify the namespace name and region in which you want it to be created.\n   * Optionally, you can specify the `project_id` and `is_public` in the request\n   * payload.\n   *\n   * @param request - The request {@link CreateNamespaceRequest}\n   * @returns A Promise of Namespace\n   */\n  createNamespace = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateNamespaceRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/registry/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/namespaces`\n    },\n    marshalling_gen.unmarshalNamespace\n  );\n  /**\n   * Update a namespace. Update the parameters of a given namespace, specified\n   * by its `namespace_id` and `region`. You can update the `description` and\n   * `is_public` parameters.\n   *\n   * @param request - The request {@link UpdateNamespaceRequest}\n   * @returns A Promise of Namespace\n   */\n  updateNamespace = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateNamespaceRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/registry/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/namespaces/${marshalling.validatePathParam(\"namespaceId\", request.namespaceId)}`\n    },\n    marshalling_gen.unmarshalNamespace\n  );\n  /**\n   * Delete a namespace. Delete a given namespace. You must specify, in the\n   * endpoint, the `region` and `namespace_id` parameters of the namespace you\n   * want to delete.\n   *\n   * @param request - The request {@link DeleteNamespaceRequest}\n   * @returns A Promise of Namespace\n   */\n  deleteNamespace = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/registry/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/namespaces/${marshalling.validatePathParam(\"namespaceId\", request.namespaceId)}`\n    },\n    marshalling_gen.unmarshalNamespace\n  );\n  pageOfListImages = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/registry/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/images`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"namespace_id\", request.namespaceId],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListImagesResponse\n  );\n  /**\n   * List images. List all images in a specified region. By default, the images\n   * listed are ordered by creation date in ascending order. This can be\n   * modified via the order_by field. You can also define additional parameters\n   * for your query, such as the `namespace_id` and `project_id` parameters.\n   *\n   * @param request - The request {@link ListImagesRequest}\n   * @returns A Promise of ListImagesResponse\n   */\n  listImages = (request = {}) => resourcePaginator.enrichForPagination(\"images\", this.pageOfListImages, request);\n  /**\n   * Get an image. Retrieve information about a given container image, specified\n   * by its `image_id` and region. Full details about the image, such as `name`,\n   * `namespace_id`, `status`, `visibility`, and `size` are returned in the\n   * response.\n   *\n   * @param request - The request {@link GetImageRequest}\n   * @returns A Promise of Image\n   */\n  getImage = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/registry/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/images/${marshalling.validatePathParam(\"imageId\", request.imageId)}`\n    },\n    marshalling_gen.unmarshalImage\n  );\n  /**\n   * Waits for {@link Image} to be in a final state.\n   *\n   * @param request - The request {@link GetImageRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Image\n   */\n  waitForImage = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.IMAGE_TRANSIENT_STATUSES.includes(res.status))),\n    this.getImage,\n    request,\n    options\n  );\n  /**\n   * Update an image. Update the parameters of a given image, specified by its\n   * `image_id` and `region`. You can update the `visibility` parameter.\n   *\n   * @param request - The request {@link UpdateImageRequest}\n   * @returns A Promise of Image\n   */\n  updateImage = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateImageRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/registry/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/images/${marshalling.validatePathParam(\"imageId\", request.imageId)}`\n    },\n    marshalling_gen.unmarshalImage\n  );\n  /**\n   * Delete an image. Delete a given image. You must specify, in the endpoint,\n   * the `region` and `image_id` parameters of the image you want to delete.\n   *\n   * @param request - The request {@link DeleteImageRequest}\n   * @returns A Promise of Image\n   */\n  deleteImage = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/registry/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/images/${marshalling.validatePathParam(\"imageId\", request.imageId)}`\n    },\n    marshalling_gen.unmarshalImage\n  );\n  pageOfListTags = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/registry/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/images/${marshalling.validatePathParam(\"imageId\", request.imageId)}/tags`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListTagsResponse\n  );\n  /**\n   * List tags. List all tags for a given image, specified by region. By\n   * default, the tags listed are ordered by creation date in ascending order.\n   * This can be modified via the order_by field. You can also define additional\n   * parameters for your query, such as the `name`.\n   *\n   * @param request - The request {@link ListTagsRequest}\n   * @returns A Promise of ListTagsResponse\n   */\n  listTags = (request) => resourcePaginator.enrichForPagination(\"tags\", this.pageOfListTags, request);\n  /**\n   * Get a tag. Retrieve information about a given image tag, specified by its\n   * `tag_id` and region. Full details about the tag, such as `name`,\n   * `image_id`, `status`, and `digest` are returned in the response.\n   *\n   * @param request - The request {@link GetTagRequest}\n   * @returns A Promise of Tag\n   */\n  getTag = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/registry/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/tags/${marshalling.validatePathParam(\"tagId\", request.tagId)}`\n    },\n    marshalling_gen.unmarshalTag\n  );\n  /**\n   * Waits for {@link Tag} to be in a final state.\n   *\n   * @param request - The request {@link GetTagRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Tag\n   */\n  waitForTag = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.TAG_TRANSIENT_STATUSES.includes(res.status))),\n    this.getTag,\n    request,\n    options\n  );\n  /**\n   * Delete a tag. Delete a given image tag. You must specify, in the endpoint,\n   * the `region` and `tag_id` parameters of the tag you want to delete.\n   *\n   * @param request - The request {@link DeleteTagRequest}\n   * @returns A Promise of Tag\n   */\n  deleteTag = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/registry/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/tags/${marshalling.validatePathParam(\"tagId\", request.tagId)}`,\n      urlParams: marshalling.urlParams([\"force\", request.force])\n    },\n    marshalling_gen.unmarshalTag\n  );\n}\nexports.API = API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst IMAGE_TRANSIENT_STATUSES = [\"deleting\"];\nconst NAMESPACE_TRANSIENT_STATUSES = [\"deleting\"];\nconst TAG_TRANSIENT_STATUSES = [\"deleting\"];\nexports.IMAGE_TRANSIENT_STATUSES = IMAGE_TRANSIENT_STATUSES;\nexports.NAMESPACE_TRANSIENT_STATUSES = NAMESPACE_TRANSIENT_STATUSES;\nexports.TAG_TRANSIENT_STATUSES = TAG_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nexports.API = api_gen.API;\nexports.IMAGE_TRANSIENT_STATUSES = content_gen.IMAGE_TRANSIENT_STATUSES;\nexports.NAMESPACE_TRANSIENT_STATUSES = content_gen.NAMESPACE_TRANSIENT_STATUSES;\nexports.TAG_TRANSIENT_STATUSES = content_gen.TAG_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst randomName = require(\"@scaleway/random-name\");\nconst json = require(\"../../../helpers/json.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst unmarshalImage = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Image' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    id: data.id,\n    name: data.name,\n    namespaceId: data.namespace_id,\n    size: data.size,\n    status: data.status,\n    statusMessage: data.status_message,\n    tags: data.tags,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    visibility: data.visibility\n  };\n};\nconst unmarshalNamespace = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Namespace' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    description: data.description,\n    endpoint: data.endpoint,\n    id: data.id,\n    imageCount: data.image_count,\n    isPublic: data.is_public,\n    name: data.name,\n    organizationId: data.organization_id,\n    projectId: data.project_id,\n    region: data.region,\n    size: data.size,\n    status: data.status,\n    statusMessage: data.status_message,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalTag = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Tag' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    digest: data.digest,\n    id: data.id,\n    imageId: data.image_id,\n    name: data.name,\n    status: data.status,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalListImagesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListImagesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    images: marshalling.unmarshalArrayOfObject(data.images, unmarshalImage),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListNamespacesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListNamespacesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    namespaces: marshalling.unmarshalArrayOfObject(data.namespaces, unmarshalNamespace),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListTagsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListTagsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    tags: marshalling.unmarshalArrayOfObject(data.tags, unmarshalTag),\n    totalCount: data.total_count\n  };\n};\nconst marshalCreateNamespaceRequest = (request, defaults) => ({\n  description: request.description,\n  is_public: request.isPublic,\n  name: request.name || randomName(\"ns\"),\n  ...marshalling.resolveOneOf([\n    {\n      default: defaults.defaultProjectId,\n      param: \"project_id\",\n      value: request.projectId\n    },\n    {\n      default: defaults.defaultOrganizationId,\n      param: \"organization_id\",\n      value: request.organizationId\n    }\n  ])\n});\nconst marshalUpdateImageRequest = (request, defaults) => ({\n  visibility: request.visibility\n});\nconst marshalUpdateNamespaceRequest = (request, defaults) => ({\n  description: request.description,\n  is_public: request.isPublic\n});\nexports.marshalCreateNamespaceRequest = marshalCreateNamespaceRequest;\nexports.marshalUpdateImageRequest = marshalUpdateImageRequest;\nexports.marshalUpdateNamespaceRequest = marshalUpdateNamespaceRequest;\nexports.unmarshalImage = unmarshalImage;\nexports.unmarshalListImagesResponse = unmarshalListImagesResponse;\nexports.unmarshalListNamespacesResponse = unmarshalListNamespacesResponse;\nexports.unmarshalListTagsResponse = unmarshalListTagsResponse;\nexports.unmarshalNamespace = unmarshalNamespace;\nexports.unmarshalTag = unmarshalTag;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index_gen = require(\"./v1alpha1/index.gen.cjs\");\nconst index_gen$1 = require(\"./v1beta1/index.gen.cjs\");\nexports.v1alpha1 = index_gen;\nexports.v1beta1 = index_gen$1;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass API extends api.API {\n  /** Lists the available regions of the API. */\n  static LOCALITIES = [\"fr-par\", \"nl-ams\", \"pl-waw\"];\n  /**\n   * Create a secret. You must specify the `region` to create a secret.\n   *\n   * @param request - The request {@link CreateSecretRequest}\n   * @returns A Promise of Secret\n   */\n  createSecret = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateSecretRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secrets`\n    },\n    marshalling_gen.unmarshalSecret\n  );\n  /**\n   * Create folder.\n   *\n   * @param request - The request {@link CreateFolderRequest}\n   * @returns A Promise of Folder\n   */\n  createFolder = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateFolderRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/folders`\n    },\n    marshalling_gen.unmarshalFolder\n  );\n  /**\n   * Get metadata using the secret's ID. Retrieve the metadata of a secret\n   * specified by the `region` and `secret_id` parameters.\n   *\n   * @param request - The request {@link GetSecretRequest}\n   * @returns A Promise of Secret\n   */\n  getSecret = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam(\"secretId\", request.secretId)}`\n    },\n    marshalling_gen.unmarshalSecret\n  );\n  /**\n   * Get metadata using the secret's name. Retrieve the metadata of a secret\n   * specified by the `region` and `secret_name` parameters.\n   *\n   * GetSecretByName usage is now deprecated.\n   *\n   * Scaleway recommends that you use the `ListSecrets` request with the `name`\n   * filter.\n   *\n   * @deprecated\n   * @param request - The request {@link GetSecretByNameRequest}\n   * @returns A Promise of Secret\n   */\n  getSecretByName = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secrets-by-name/${marshalling.validatePathParam(\"secretName\", request.secretName)}`,\n      urlParams: marshalling.urlParams([\"project_id\", request.projectId])\n    },\n    marshalling_gen.unmarshalSecret\n  );\n  /**\n   * Update metadata of a secret. Edit a secret's metadata such as name, tag(s),\n   * description and ephemeral policy. The secret to update is specified by the\n   * `secret_id` and `region` parameters.\n   *\n   * @param request - The request {@link UpdateSecretRequest}\n   * @returns A Promise of Secret\n   */\n  updateSecret = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateSecretRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam(\"secretId\", request.secretId)}`\n    },\n    marshalling_gen.unmarshalSecret\n  );\n  pageOfListSecrets = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secrets`,\n      urlParams: marshalling.urlParams(\n        [\"is_ephemeral\", request.isEphemeral],\n        [\"is_managed\", request.isManaged],\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"path\", request.path],\n        [\"project_id\", request.projectId],\n        [\"tags\", request.tags]\n      )\n    },\n    marshalling_gen.unmarshalListSecretsResponse\n  );\n  /**\n   * List secrets. Retrieve the list of secrets created within an Organization\n   * and/or Project. You must specify either the `organization_id` or the\n   * `project_id` and the `region`.\n   *\n   * @param request - The request {@link ListSecretsRequest}\n   * @returns A Promise of ListSecretsResponse\n   */\n  listSecrets = (request = {}) => resourcePaginator.enrichForPagination(\"secrets\", this.pageOfListSecrets, request);\n  pageOfListFolders = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/folders`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"path\", request.path],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListFoldersResponse\n  );\n  /**\n   * List folders. Retrieve the list of folders created within a Project.\n   *\n   * @param request - The request {@link ListFoldersRequest}\n   * @returns A Promise of ListFoldersResponse\n   */\n  listFolders = (request = {}) => resourcePaginator.enrichForPagination(\"folders\", this.pageOfListFolders, request);\n  /**\n   * Delete a secret. Delete a given secret specified by the `region` and\n   * `secret_id` parameters.\n   *\n   * @param request - The request {@link DeleteSecretRequest}\n   */\n  deleteSecret = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam(\"secretId\", request.secretId)}`\n  });\n  /**\n   * Delete a given folder specified by the `region` and `folder_id` parameters.\n   *\n   * @param request - The request {@link DeleteFolderRequest}\n   */\n  deleteFolder = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/folders/${marshalling.validatePathParam(\"folderId\", request.folderId)}`\n  });\n  /**\n   * Protect a secret. Protect a given secret specified by the `secret_id`\n   * parameter. A protected secret can be read and modified but cannot be\n   * deleted.\n   *\n   * @param request - The request {@link ProtectSecretRequest}\n   * @returns A Promise of Secret\n   */\n  protectSecret = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam(\"secretId\", request.secretId)}/protect`\n    },\n    marshalling_gen.unmarshalSecret\n  );\n  /**\n   * Unprotect a secret. Unprotect a given secret specified by the `secret_id`\n   * parameter. An unprotected secret can be read, modified and deleted.\n   *\n   * @param request - The request {@link UnprotectSecretRequest}\n   * @returns A Promise of Secret\n   */\n  unprotectSecret = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam(\"secretId\", request.secretId)}/unprotect`\n    },\n    marshalling_gen.unmarshalSecret\n  );\n  /**\n   * Allow a product to use the secret.\n   *\n   * @param request - The request {@link AddSecretOwnerRequest}\n   */\n  addSecretOwner = (request) => this.client.fetch({\n    body: JSON.stringify(\n      marshalling_gen.marshalAddSecretOwnerRequest(request, this.client.settings)\n    ),\n    headers: jsonContentHeaders,\n    method: \"POST\",\n    path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam(\"secretId\", request.secretId)}/add-owner`\n  });\n  /**\n   * Create a version. Create a version of a given secret specified by the\n   * `region` and `secret_id` parameters.\n   *\n   * @param request - The request {@link CreateSecretVersionRequest}\n   * @returns A Promise of SecretVersion\n   */\n  createSecretVersion = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateSecretVersionRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam(\"secretId\", request.secretId)}/versions`\n    },\n    marshalling_gen.unmarshalSecretVersion\n  );\n  /**\n   * Generate a password in a new version. Generate a password for the given\n   * secret specified by the `region` and `secret_id` parameters. This will also\n   * create a new version of the secret that will store the password.\n   *\n   * @param request - The request {@link GeneratePasswordRequest}\n   * @returns A Promise of SecretVersion\n   */\n  generatePassword = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalGeneratePasswordRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam(\"secretId\", request.secretId)}/generate-password`\n    },\n    marshalling_gen.unmarshalSecretVersion\n  );\n  /**\n   * Get metadata of a secret's version using the secret's ID. Retrieve the\n   * metadata of a secret's given version specified by the `region`, `secret_id`\n   * and `revision` parameters.\n   *\n   * @param request - The request {@link GetSecretVersionRequest}\n   * @returns A Promise of SecretVersion\n   */\n  getSecretVersion = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam(\"secretId\", request.secretId)}/versions/${marshalling.validatePathParam(\"revision\", request.revision)}`\n    },\n    marshalling_gen.unmarshalSecretVersion\n  );\n  /**\n   * Get metadata of a secret's version using the secret's name. Retrieve the\n   * metadata of a secret's given version specified by the `region`,\n   * `secret_name`, `revision` and `project_id` parameters.\n   *\n   * This method is deprecated.\n   *\n   * Scaleway recommends that you use the `ListSecrets` request with the `name`\n   * filter to specify the secret version desired, then use the\n   * `GetSecretVersion` request.\n   *\n   * @deprecated\n   * @param request - The request {@link GetSecretVersionByNameRequest}\n   * @returns A Promise of SecretVersion\n   */\n  getSecretVersionByName = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secrets-by-name/${marshalling.validatePathParam(\"secretName\", request.secretName)}/versions/${marshalling.validatePathParam(\"revision\", request.revision)}`,\n      urlParams: marshalling.urlParams([\"project_id\", request.projectId])\n    },\n    marshalling_gen.unmarshalSecretVersion\n  );\n  /**\n   * Update metadata of a version. Edit the metadata of a secret's given\n   * version, specified by the `region`, `secret_id` and `revision` parameters.\n   *\n   * @param request - The request {@link UpdateSecretVersionRequest}\n   * @returns A Promise of SecretVersion\n   */\n  updateSecretVersion = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateSecretVersionRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam(\"secretId\", request.secretId)}/versions/${marshalling.validatePathParam(\"revision\", request.revision)}`\n    },\n    marshalling_gen.unmarshalSecretVersion\n  );\n  pageOfListSecretVersions = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam(\"secretId\", request.secretId)}/versions`,\n      urlParams: marshalling.urlParams(\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"status\", request.status]\n      )\n    },\n    marshalling_gen.unmarshalListSecretVersionsResponse\n  );\n  /**\n   * List versions of a secret using the secret's ID. Retrieve the list of a\n   * given secret's versions specified by the `secret_id` and `region`\n   * parameters.\n   *\n   * @param request - The request {@link ListSecretVersionsRequest}\n   * @returns A Promise of ListSecretVersionsResponse\n   */\n  listSecretVersions = (request) => resourcePaginator.enrichForPagination(\"versions\", this.pageOfListSecretVersions, request);\n  pageOfListSecretVersionsByName = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secrets-by-name/${marshalling.validatePathParam(\"secretName\", request.secretName)}/versions`,\n      urlParams: marshalling.urlParams(\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId],\n        [\"status\", request.status]\n      )\n    },\n    marshalling_gen.unmarshalListSecretVersionsResponse\n  );\n  /**\n   * List versions of a secret using the secret's name. Retrieve the list of a\n   * given secret's versions specified by the `secret_name`,`region` and\n   * `project_id` parameters.\n   *\n   * This method is deprecated.\n   *\n   * Scaleway recommends that you use the `ListSecrets` request with the `name`\n   * filter to specify the secret version desired, then use the\n   * `ListSecretVersions` request.\n   *\n   * @deprecated\n   * @param request - The request {@link ListSecretVersionsByNameRequest}\n   * @returns A Promise of ListSecretVersionsResponse\n   */\n  listSecretVersionsByName = (request) => resourcePaginator.enrichForPagination(\n    \"versions\",\n    this.pageOfListSecretVersionsByName,\n    request\n  );\n  /**\n   * Enable a version. Make a specific version accessible. You must specify the\n   * `region`, `secret_id` and `revision` parameters.\n   *\n   * @param request - The request {@link EnableSecretVersionRequest}\n   * @returns A Promise of SecretVersion\n   */\n  enableSecretVersion = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam(\"secretId\", request.secretId)}/versions/${marshalling.validatePathParam(\"revision\", request.revision)}/enable`\n    },\n    marshalling_gen.unmarshalSecretVersion\n  );\n  /**\n   * Disable a version. Make a specific version inaccessible. You must specify\n   * the `region`, `secret_id` and `revision` parameters.\n   *\n   * @param request - The request {@link DisableSecretVersionRequest}\n   * @returns A Promise of SecretVersion\n   */\n  disableSecretVersion = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam(\"secretId\", request.secretId)}/versions/${marshalling.validatePathParam(\"revision\", request.revision)}/disable`\n    },\n    marshalling_gen.unmarshalSecretVersion\n  );\n  /**\n   * Access a secret's version using the secret's ID. Access sensitive data in a\n   * secret's version specified by the `region`, `secret_id` and `revision`\n   * parameters.\n   *\n   * @param request - The request {@link AccessSecretVersionRequest}\n   * @returns A Promise of AccessSecretVersionResponse\n   */\n  accessSecretVersion = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam(\"secretId\", request.secretId)}/versions/${marshalling.validatePathParam(\"revision\", request.revision)}/access`\n    },\n    marshalling_gen.unmarshalAccessSecretVersionResponse\n  );\n  /**\n   * Access a secret's version using the secret's name. Access sensitive data in\n   * a secret's version specified by the `region`, `secret_name`, `revision` and\n   * `project_id` parameters.\n   *\n   * This method is deprecated.\n   *\n   * Scaleway recommends that you use the `ListSecrets` request with the `name`\n   * filter to specify the secret version desired, then use the\n   * `AccessSecretVersion` request.\n   *\n   * @deprecated\n   * @param request - The request {@link AccessSecretVersionByNameRequest}\n   * @returns A Promise of AccessSecretVersionResponse\n   */\n  accessSecretVersionByName = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secrets-by-name/${marshalling.validatePathParam(\"secretName\", request.secretName)}/versions/${marshalling.validatePathParam(\"revision\", request.revision)}/access`,\n      urlParams: marshalling.urlParams([\"project_id\", request.projectId])\n    },\n    marshalling_gen.unmarshalAccessSecretVersionResponse\n  );\n  /**\n   * Delete a version. Delete a secret's version and the sensitive data\n   * contained in it. Deleting a version is permanent and cannot be undone.\n   *\n   * @param request - The request {@link DestroySecretVersionRequest}\n   * @returns A Promise of SecretVersion\n   */\n  destroySecretVersion = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam(\"secretId\", request.secretId)}/versions/${marshalling.validatePathParam(\"revision\", request.revision)}/destroy`\n    },\n    marshalling_gen.unmarshalSecretVersion\n  );\n  pageOfListTags = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/secret-manager/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/tags`,\n      urlParams: marshalling.urlParams(\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListTagsResponse\n  );\n  /**\n   * List tags. List all tags associated with secrets within a given Project.\n   *\n   * @param request - The request {@link ListTagsRequest}\n   * @returns A Promise of ListTagsResponse\n   */\n  listTags = (request = {}) => resourcePaginator.enrichForPagination(\"tags\", this.pageOfListTags, request);\n}\nexports.API = API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nexports.API = api_gen.API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst json = require(\"../../../helpers/json.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst unmarshalFolder = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Folder' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    id: data.id,\n    name: data.name,\n    path: data.path,\n    projectId: data.project_id,\n    region: data.region\n  };\n};\nconst unmarshalEphemeralProperties = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'EphemeralProperties' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    action: data.action,\n    expiresAt: marshalling.unmarshalDate(data.expires_at),\n    expiresOnceAccessed: data.expires_once_accessed\n  };\n};\nconst unmarshalSecretVersion = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SecretVersion' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    description: data.description,\n    ephemeralProperties: data.ephemeral_properties ? unmarshalEphemeralProperties(data.ephemeral_properties) : void 0,\n    isLatest: data.is_latest,\n    revision: data.revision,\n    secretId: data.secret_id,\n    status: data.status,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalEphemeralPolicy = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'EphemeralPolicy' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    action: data.action,\n    expiresOnceAccessed: data.expires_once_accessed,\n    timeToLive: data.time_to_live\n  };\n};\nconst unmarshalSecret = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Secret' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    description: data.description,\n    ephemeralPolicy: data.ephemeral_policy ? unmarshalEphemeralPolicy(data.ephemeral_policy) : void 0,\n    id: data.id,\n    isManaged: data.is_managed,\n    isProtected: data.is_protected,\n    name: data.name,\n    path: data.path,\n    projectId: data.project_id,\n    region: data.region,\n    status: data.status,\n    tags: data.tags,\n    type: data.type,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    versionCount: data.version_count\n  };\n};\nconst unmarshalAccessSecretVersionResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'AccessSecretVersionResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    data: data.data,\n    dataCrc32: data.data_crc32,\n    revision: data.revision,\n    secretId: data.secret_id\n  };\n};\nconst unmarshalListFoldersResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListFoldersResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    folders: marshalling.unmarshalArrayOfObject(data.folders, unmarshalFolder),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListSecretVersionsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListSecretVersionsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    totalCount: data.total_count,\n    versions: marshalling.unmarshalArrayOfObject(data.versions, unmarshalSecretVersion)\n  };\n};\nconst unmarshalListSecretsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListSecretsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    secrets: marshalling.unmarshalArrayOfObject(data.secrets, unmarshalSecret),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListTagsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListTagsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    tags: data.tags,\n    totalCount: data.total_count\n  };\n};\nconst marshalAddSecretOwnerRequest = (request, defaults) => ({\n  product: request.product,\n  product_name: request.productName\n});\nconst marshalCreateFolderRequest = (request, defaults) => ({\n  name: request.name,\n  path: request.path,\n  project_id: request.projectId ?? defaults.defaultProjectId\n});\nconst marshalEphemeralPolicy = (request, defaults) => ({\n  action: request.action,\n  expires_once_accessed: request.expiresOnceAccessed,\n  time_to_live: request.timeToLive\n});\nconst marshalCreateSecretRequest = (request, defaults) => ({\n  description: request.description,\n  ephemeral_policy: request.ephemeralPolicy !== void 0 ? marshalEphemeralPolicy(request.ephemeralPolicy) : void 0,\n  is_protected: request.isProtected,\n  name: request.name,\n  path: request.path,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  tags: request.tags,\n  type: request.type\n});\nconst marshalPasswordGenerationParams = (request, defaults) => ({\n  additional_chars: request.additionalChars,\n  length: request.length,\n  no_digits: request.noDigits,\n  no_lowercase_letters: request.noLowercaseLetters,\n  no_uppercase_letters: request.noUppercaseLetters\n});\nconst marshalCreateSecretVersionRequest = (request, defaults) => ({\n  data: request.data,\n  data_crc32: request.dataCrc32,\n  description: request.description,\n  disable_previous: request.disablePrevious,\n  password_generation: request.passwordGeneration !== void 0 ? marshalPasswordGenerationParams(request.passwordGeneration) : void 0\n});\nconst marshalGeneratePasswordRequest = (request, defaults) => ({\n  additional_chars: request.additionalChars,\n  description: request.description,\n  disable_previous: request.disablePrevious,\n  length: request.length,\n  no_digits: request.noDigits,\n  no_lowercase_letters: request.noLowercaseLetters,\n  no_uppercase_letters: request.noUppercaseLetters\n});\nconst marshalUpdateSecretRequest = (request, defaults) => ({\n  description: request.description,\n  ephemeral_policy: request.ephemeralPolicy !== void 0 ? marshalEphemeralPolicy(request.ephemeralPolicy) : void 0,\n  name: request.name,\n  path: request.path,\n  tags: request.tags\n});\nconst marshalEphemeralProperties = (request, defaults) => ({\n  action: request.action,\n  expires_at: request.expiresAt,\n  expires_once_accessed: request.expiresOnceAccessed\n});\nconst marshalUpdateSecretVersionRequest = (request, defaults) => ({\n  description: request.description,\n  ephemeral_properties: request.ephemeralProperties !== void 0 ? marshalEphemeralProperties(request.ephemeralProperties) : void 0\n});\nexports.marshalAddSecretOwnerRequest = marshalAddSecretOwnerRequest;\nexports.marshalCreateFolderRequest = marshalCreateFolderRequest;\nexports.marshalCreateSecretRequest = marshalCreateSecretRequest;\nexports.marshalCreateSecretVersionRequest = marshalCreateSecretVersionRequest;\nexports.marshalEphemeralPolicy = marshalEphemeralPolicy;\nexports.marshalGeneratePasswordRequest = marshalGeneratePasswordRequest;\nexports.marshalUpdateSecretRequest = marshalUpdateSecretRequest;\nexports.marshalUpdateSecretVersionRequest = marshalUpdateSecretVersionRequest;\nexports.unmarshalAccessSecretVersionResponse = unmarshalAccessSecretVersionResponse;\nexports.unmarshalEphemeralPolicy = unmarshalEphemeralPolicy;\nexports.unmarshalFolder = unmarshalFolder;\nexports.unmarshalListFoldersResponse = unmarshalListFoldersResponse;\nexports.unmarshalListSecretVersionsResponse = unmarshalListSecretVersionsResponse;\nexports.unmarshalListSecretsResponse = unmarshalListSecretsResponse;\nexports.unmarshalListTagsResponse = unmarshalListTagsResponse;\nexports.unmarshalSecret = unmarshalSecret;\nexports.unmarshalSecretVersion = unmarshalSecretVersion;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass API extends api.API {\n  /** Lists the available regions of the API. */\n  static LOCALITIES = [\"fr-par\", \"nl-ams\", \"pl-waw\"];\n  /**\n   * Create a secret. Create a secret in a given region specified by the\n   * `region` parameter.\n   *\n   * @param request - The request {@link CreateSecretRequest}\n   * @returns A Promise of Secret\n   */\n  createSecret = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateSecretRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secrets`\n    },\n    marshalling_gen.unmarshalSecret\n  );\n  /**\n   * Get metadata using the secret's ID. Retrieve the metadata of a secret\n   * specified by the `region` and `secret_id` parameters.\n   *\n   * @param request - The request {@link GetSecretRequest}\n   * @returns A Promise of Secret\n   */\n  getSecret = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam(\"secretId\", request.secretId)}`\n    },\n    marshalling_gen.unmarshalSecret\n  );\n  /**\n   * Update metadata of a secret. Edit a secret's metadata such as name, tag(s),\n   * description and ephemeral policy. The secret to update is specified by the\n   * `secret_id` and `region` parameters.\n   *\n   * @param request - The request {@link UpdateSecretRequest}\n   * @returns A Promise of Secret\n   */\n  updateSecret = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateSecretRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam(\"secretId\", request.secretId)}`\n    },\n    marshalling_gen.unmarshalSecret\n  );\n  /**\n   * Delete a secret. Delete a given secret specified by the `region` and\n   * `secret_id` parameters.\n   *\n   * @param request - The request {@link DeleteSecretRequest}\n   */\n  deleteSecret = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam(\"secretId\", request.secretId)}`\n  });\n  pageOfListSecrets = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secrets`,\n      urlParams: marshalling.urlParams(\n        [\"ephemeral\", request.ephemeral],\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"path\", request.path],\n        [\"project_id\", request.projectId],\n        [\"tags\", request.tags],\n        [\"type\", request.type]\n      )\n    },\n    marshalling_gen.unmarshalListSecretsResponse\n  );\n  /**\n   * List secrets. Retrieve the list of secrets created within an Organization\n   * and/or Project. You must specify either the `organization_id` or the\n   * `project_id` and the `region`.\n   *\n   * @param request - The request {@link ListSecretsRequest}\n   * @returns A Promise of ListSecretsResponse\n   */\n  listSecrets = (request = {}) => resourcePaginator.enrichForPagination(\"secrets\", this.pageOfListSecrets, request);\n  /**\n   * Browse secrets. Retrieve the list of secrets and folders for the given\n   * prefix. You must specify either the `organization_id` or the `project_id`\n   * and the `region`.\n   *\n   * @param request - The request {@link BrowseSecretsRequest}\n   * @returns A Promise of BrowseSecretsResponse\n   */\n  browseSecrets = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secrets/browse`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"prefix\", request.prefix],\n        [\"project_id\", request.projectId],\n        [\"tags\", request.tags],\n        [\"type\", request.type]\n      )\n    },\n    marshalling_gen.unmarshalBrowseSecretsResponse\n  );\n  /**\n   * Enable secret protection. Enable secret protection for a given secret\n   * specified by the `secret_id` parameter. Enabling secret protection means\n   * that your secret can be read and modified, but it cannot be deleted.\n   *\n   * @param request - The request {@link ProtectSecretRequest}\n   * @returns A Promise of Secret\n   */\n  protectSecret = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam(\"secretId\", request.secretId)}/protect`\n    },\n    marshalling_gen.unmarshalSecret\n  );\n  /**\n   * Disable secret protection. Disable secret protection for a given secret\n   * specified by the `secret_id` parameter. Disabling secret protection means\n   * that your secret can be read, modified and deleted.\n   *\n   * @param request - The request {@link UnprotectSecretRequest}\n   * @returns A Promise of Secret\n   */\n  unprotectSecret = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam(\"secretId\", request.secretId)}/unprotect`\n    },\n    marshalling_gen.unmarshalSecret\n  );\n  /**\n   * Allow a product to use the secret.\n   *\n   * @param request - The request {@link AddSecretOwnerRequest}\n   */\n  addSecretOwner = (request) => this.client.fetch({\n    body: JSON.stringify(\n      marshalling_gen.marshalAddSecretOwnerRequest(request, this.client.settings)\n    ),\n    headers: jsonContentHeaders,\n    method: \"POST\",\n    path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam(\"secretId\", request.secretId)}/add-owner`\n  });\n  /**\n   * Create a version. Create a version of a given secret specified by the\n   * `region` and `secret_id` parameters.\n   *\n   * @param request - The request {@link CreateSecretVersionRequest}\n   * @returns A Promise of SecretVersion\n   */\n  createSecretVersion = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateSecretVersionRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam(\"secretId\", request.secretId)}/versions`\n    },\n    marshalling_gen.unmarshalSecretVersion\n  );\n  /**\n   * Get metadata of a secret's version using the secret's ID. Retrieve the\n   * metadata of a secret's given version specified by the `region`, `secret_id`\n   * and `revision` parameters.\n   *\n   * @param request - The request {@link GetSecretVersionRequest}\n   * @returns A Promise of SecretVersion\n   */\n  getSecretVersion = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam(\"secretId\", request.secretId)}/versions/${marshalling.validatePathParam(\"revision\", request.revision)}`\n    },\n    marshalling_gen.unmarshalSecretVersion\n  );\n  /**\n   * Update metadata of a version. Edit the metadata of a secret's given\n   * version, specified by the `region`, `secret_id` and `revision` parameters.\n   *\n   * @param request - The request {@link UpdateSecretVersionRequest}\n   * @returns A Promise of SecretVersion\n   */\n  updateSecretVersion = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateSecretVersionRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam(\"secretId\", request.secretId)}/versions/${marshalling.validatePathParam(\"revision\", request.revision)}`\n    },\n    marshalling_gen.unmarshalSecretVersion\n  );\n  /**\n   * Delete a version. Delete a secret's version and the sensitive data\n   * contained in it. Deleting a version is permanent and cannot be undone.\n   *\n   * @param request - The request {@link DeleteSecretVersionRequest}\n   */\n  deleteSecretVersion = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam(\"secretId\", request.secretId)}/versions/${marshalling.validatePathParam(\"revision\", request.revision)}`\n  });\n  pageOfListSecretVersions = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam(\"secretId\", request.secretId)}/versions`,\n      urlParams: marshalling.urlParams(\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"status\", request.status]\n      )\n    },\n    marshalling_gen.unmarshalListSecretVersionsResponse\n  );\n  /**\n   * List versions of a secret using the secret's ID. Retrieve the list of a\n   * given secret's versions specified by the `secret_id` and `region`\n   * parameters.\n   *\n   * @param request - The request {@link ListSecretVersionsRequest}\n   * @returns A Promise of ListSecretVersionsResponse\n   */\n  listSecretVersions = (request) => resourcePaginator.enrichForPagination(\"versions\", this.pageOfListSecretVersions, request);\n  /**\n   * Access a secret's version using the secret's ID. Access sensitive data in a\n   * secret's version specified by the `region`, `secret_id` and `revision`\n   * parameters.\n   *\n   * @param request - The request {@link AccessSecretVersionRequest}\n   * @returns A Promise of AccessSecretVersionResponse\n   */\n  accessSecretVersion = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam(\"secretId\", request.secretId)}/versions/${marshalling.validatePathParam(\"revision\", request.revision)}/access`\n    },\n    marshalling_gen.unmarshalAccessSecretVersionResponse\n  );\n  /**\n   * Access a secret's version using the secret's name and path. Access\n   * sensitive data in a secret's version specified by the `region`,\n   * `secret_name`, `secret_path` and `revision` parameters.\n   *\n   * @param request - The request {@link AccessSecretVersionByPathRequest}\n   * @returns A Promise of AccessSecretVersionResponse\n   */\n  accessSecretVersionByPath = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secrets-by-path/versions/${marshalling.validatePathParam(\"revision\", request.revision)}/access`,\n      urlParams: marshalling.urlParams(\n        [\n          \"project_id\",\n          request.projectId ?? this.client.settings.defaultProjectId\n        ],\n        [\"secret_name\", request.secretName],\n        [\"secret_path\", request.secretPath]\n      )\n    },\n    marshalling_gen.unmarshalAccessSecretVersionResponse\n  );\n  /**\n   * Enable a version. Make a specific version accessible. You must specify the\n   * `region`, `secret_id` and `revision` parameters.\n   *\n   * @param request - The request {@link EnableSecretVersionRequest}\n   * @returns A Promise of SecretVersion\n   */\n  enableSecretVersion = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam(\"secretId\", request.secretId)}/versions/${marshalling.validatePathParam(\"revision\", request.revision)}/enable`\n    },\n    marshalling_gen.unmarshalSecretVersion\n  );\n  /**\n   * Disable a version. Make a specific version inaccessible. You must specify\n   * the `region`, `secret_id` and `revision` parameters.\n   *\n   * @param request - The request {@link DisableSecretVersionRequest}\n   * @returns A Promise of SecretVersion\n   */\n  disableSecretVersion = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secrets/${marshalling.validatePathParam(\"secretId\", request.secretId)}/versions/${marshalling.validatePathParam(\"revision\", request.revision)}/disable`\n    },\n    marshalling_gen.unmarshalSecretVersion\n  );\n  pageOfListTags = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/tags`,\n      urlParams: marshalling.urlParams(\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\n          \"project_id\",\n          request.projectId ?? this.client.settings.defaultProjectId\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListTagsResponse\n  );\n  /**\n   * List tags. List all tags associated with secrets within a given Project.\n   *\n   * @param request - The request {@link ListTagsRequest}\n   * @returns A Promise of ListTagsResponse\n   */\n  listTags = (request = {}) => resourcePaginator.enrichForPagination(\"tags\", this.pageOfListTags, request);\n  pageOfListSecretTypes = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/secret-manager/v1beta1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/secret-types`,\n      urlParams: marshalling.urlParams(\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\n          \"project_id\",\n          request.projectId ?? this.client.settings.defaultProjectId\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListSecretTypesResponse\n  );\n  /**\n   * List secret types. List all secret types created within a given Project.\n   *\n   * @param request - The request {@link ListSecretTypesRequest}\n   * @returns A Promise of ListSecretTypesResponse\n   */\n  listSecretTypes = (request = {}) => resourcePaginator.enrichForPagination(\"types\", this.pageOfListSecretTypes, request);\n}\nexports.API = API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nconst validationRules_gen = require(\"./validation-rules.gen.cjs\");\nexports.API = api_gen.API;\nexports.ValidationRules = validationRules_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst json = require(\"../../../helpers/json.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst unmarshalEphemeralProperties = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'EphemeralProperties' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    action: data.action,\n    expiresAt: marshalling.unmarshalDate(data.expires_at),\n    expiresOnceAccessed: data.expires_once_accessed\n  };\n};\nconst unmarshalSecretVersion = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SecretVersion' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    description: data.description,\n    ephemeralProperties: data.ephemeral_properties ? unmarshalEphemeralProperties(data.ephemeral_properties) : void 0,\n    latest: data.latest,\n    revision: data.revision,\n    secretId: data.secret_id,\n    status: data.status,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalEphemeralPolicy = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'EphemeralPolicy' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    action: data.action,\n    expiresOnceAccessed: data.expires_once_accessed,\n    timeToLive: data.time_to_live\n  };\n};\nconst unmarshalSecret = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Secret' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    description: data.description,\n    ephemeralPolicy: data.ephemeral_policy ? unmarshalEphemeralPolicy(data.ephemeral_policy) : void 0,\n    id: data.id,\n    managed: data.managed,\n    name: data.name,\n    path: data.path,\n    projectId: data.project_id,\n    protected: data.protected,\n    region: data.region,\n    status: data.status,\n    tags: data.tags,\n    type: data.type,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    usedBy: data.used_by,\n    versionCount: data.version_count\n  };\n};\nconst unmarshalAccessSecretVersionResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'AccessSecretVersionResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    data: data.data,\n    dataCrc32: data.data_crc32,\n    revision: data.revision,\n    secretId: data.secret_id,\n    type: data.type\n  };\n};\nconst unmarshalBrowseSecretsResponseItemFolderDetails = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'BrowseSecretsResponseItemFolderDetails' failed as data isn't a dictionary.`\n    );\n  }\n  return {};\n};\nconst unmarshalBrowseSecretsResponseItemSecretDetails = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'BrowseSecretsResponseItemSecretDetails' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    ephemeralPolicy: data.ephemeral_policy ? unmarshalEphemeralPolicy(data.ephemeral_policy) : void 0,\n    id: data.id,\n    protected: data.protected,\n    tags: data.tags,\n    type: data.type,\n    versionCount: data.version_count\n  };\n};\nconst unmarshalBrowseSecretsResponseItem = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'BrowseSecretsResponseItem' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    folder: data.folder ? unmarshalBrowseSecretsResponseItemFolderDetails(data.folder) : void 0,\n    name: data.name,\n    secret: data.secret ? unmarshalBrowseSecretsResponseItemSecretDetails(data.secret) : void 0,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalBrowseSecretsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'BrowseSecretsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    currentPath: data.current_path,\n    items: marshalling.unmarshalArrayOfObject(\n      data.items,\n      unmarshalBrowseSecretsResponseItem\n    ),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListSecretTypesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListSecretTypesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    totalCount: data.total_count,\n    types: data.types\n  };\n};\nconst unmarshalListSecretVersionsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListSecretVersionsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    totalCount: data.total_count,\n    versions: marshalling.unmarshalArrayOfObject(data.versions, unmarshalSecretVersion)\n  };\n};\nconst unmarshalListSecretsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListSecretsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    secrets: marshalling.unmarshalArrayOfObject(data.secrets, unmarshalSecret),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListTagsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListTagsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    tags: data.tags,\n    totalCount: data.total_count\n  };\n};\nconst marshalAddSecretOwnerRequest = (request, defaults) => ({\n  product: request.product\n});\nconst marshalEphemeralPolicy = (request, defaults) => ({\n  action: request.action,\n  expires_once_accessed: request.expiresOnceAccessed,\n  time_to_live: request.timeToLive\n});\nconst marshalCreateSecretRequest = (request, defaults) => ({\n  description: request.description,\n  ephemeral_policy: request.ephemeralPolicy !== void 0 ? marshalEphemeralPolicy(request.ephemeralPolicy) : void 0,\n  name: request.name,\n  path: request.path,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  protected: request.protected,\n  tags: request.tags,\n  type: request.type\n});\nconst marshalCreateSecretVersionRequest = (request, defaults) => ({\n  data: request.data,\n  data_crc32: request.dataCrc32,\n  description: request.description,\n  disable_previous: request.disablePrevious\n});\nconst marshalUpdateSecretRequest = (request, defaults) => ({\n  description: request.description,\n  ephemeral_policy: request.ephemeralPolicy !== void 0 ? marshalEphemeralPolicy(request.ephemeralPolicy) : void 0,\n  name: request.name,\n  path: request.path,\n  tags: request.tags\n});\nconst marshalEphemeralProperties = (request, defaults) => ({\n  action: request.action,\n  expires_at: request.expiresAt,\n  expires_once_accessed: request.expiresOnceAccessed\n});\nconst marshalUpdateSecretVersionRequest = (request, defaults) => ({\n  description: request.description,\n  ephemeral_properties: request.ephemeralProperties !== void 0 ? marshalEphemeralProperties(request.ephemeralProperties) : void 0\n});\nexports.marshalAddSecretOwnerRequest = marshalAddSecretOwnerRequest;\nexports.marshalCreateSecretRequest = marshalCreateSecretRequest;\nexports.marshalCreateSecretVersionRequest = marshalCreateSecretVersionRequest;\nexports.marshalUpdateSecretRequest = marshalUpdateSecretRequest;\nexports.marshalUpdateSecretVersionRequest = marshalUpdateSecretVersionRequest;\nexports.unmarshalAccessSecretVersionResponse = unmarshalAccessSecretVersionResponse;\nexports.unmarshalBrowseSecretsResponse = unmarshalBrowseSecretsResponse;\nexports.unmarshalListSecretTypesResponse = unmarshalListSecretTypesResponse;\nexports.unmarshalListSecretVersionsResponse = unmarshalListSecretVersionsResponse;\nexports.unmarshalListSecretsResponse = unmarshalListSecretsResponse;\nexports.unmarshalListTagsResponse = unmarshalListTagsResponse;\nexports.unmarshalSecret = unmarshalSecret;\nexports.unmarshalSecretVersion = unmarshalSecretVersion;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst DatabaseCredentials = {\n  port: {\n    pattern: /^[0-9]+$/\n  }\n};\nexports.DatabaseCredentials = DatabaseCredentials;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index_gen = require(\"./v1alpha1/index.gen.cjs\");\nexports.v1alpha1 = index_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst intervalRetrier = require(\"../../../internal/async/interval-retrier.cjs\");\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass API extends api.API {\n  /** Lists the available regions of the API. */\n  static LOCALITIES = [\"fr-par\"];\n  /**\n   * Create a new Serverless SQL Database. You must provide the following\n   * parameters: `organization_id`, `project_id`, `name`, `cpu_min`, `cpu_max`.\n   * You can also provide `from_backup_id` to create a database from a backup.\n   *\n   * @param request - The request {@link CreateDatabaseRequest}\n   * @returns A Promise of Database\n   */\n  createDatabase = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateDatabaseRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/serverless-sqldb/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/databases`\n    },\n    marshalling_gen.unmarshalDatabase\n  );\n  /**\n   * Get a database information. Retrieve information about your Serverless SQL\n   * Database. You must provide the `database_id` parameter.\n   *\n   * @param request - The request {@link GetDatabaseRequest}\n   * @returns A Promise of Database\n   */\n  getDatabase = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/serverless-sqldb/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/databases/${marshalling.validatePathParam(\"databaseId\", request.databaseId)}`\n    },\n    marshalling_gen.unmarshalDatabase\n  );\n  /**\n   * Waits for {@link Database} to be in a final state.\n   *\n   * @param request - The request {@link GetDatabaseRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Database\n   */\n  waitForDatabase = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.DATABASE_TRANSIENT_STATUSES.includes(res.status))),\n    this.getDatabase,\n    request,\n    options\n  );\n  /**\n   * Delete a database. Deletes a database. You must provide the `database_id`\n   * parameter. All data stored in the database will be permanently deleted.\n   *\n   * @param request - The request {@link DeleteDatabaseRequest}\n   * @returns A Promise of Database\n   */\n  deleteDatabase = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/serverless-sqldb/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/databases/${marshalling.validatePathParam(\"databaseId\", request.databaseId)}`\n    },\n    marshalling_gen.unmarshalDatabase\n  );\n  pageOfListDatabases = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/serverless-sqldb/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/databases`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\"page_size\", request.pageSize],\n        [\n          \"project_id\",\n          request.projectId ?? this.client.settings.defaultProjectId\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListDatabasesResponse\n  );\n  /**\n   * List your Serverless SQL Databases. List all Serverless SQL Databases for a\n   * given Scaleway Organization or Scaleway Project. By default, the databases\n   * returned in the list are ordered by creation date in ascending order,\n   * though this can be modified via the order_by field. For the `name`\n   * parameter, the value you include will be checked against the whole name\n   * string to see if it includes the string you put in the parameter.\n   *\n   * @param request - The request {@link ListDatabasesRequest}\n   * @returns A Promise of ListDatabasesResponse\n   */\n  listDatabases = (request = {}) => resourcePaginator.enrichForPagination(\"databases\", this.pageOfListDatabases, request);\n  /**\n   * Update database information. Update CPU limits of your Serverless SQL\n   * Database. You must provide the `database_id` parameter.\n   *\n   * @param request - The request {@link UpdateDatabaseRequest}\n   * @returns A Promise of Database\n   */\n  updateDatabase = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateDatabaseRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/serverless-sqldb/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/databases/${marshalling.validatePathParam(\"databaseId\", request.databaseId)}`\n    },\n    marshalling_gen.unmarshalDatabase\n  );\n  /**\n   * Restore a database from a backup. Restore a database from a backup. You\n   * must provide the `backup_id` parameter.\n   *\n   * @param request - The request {@link RestoreDatabaseFromBackupRequest}\n   * @returns A Promise of Database\n   */\n  restoreDatabaseFromBackup = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalRestoreDatabaseFromBackupRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/serverless-sqldb/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/databases/${marshalling.validatePathParam(\"databaseId\", request.databaseId)}/restore`\n    },\n    marshalling_gen.unmarshalDatabase\n  );\n  /**\n   * Get a database backup information. Retrieve information about your\n   * Serverless SQL Database backup. You must provide the `backup_id`\n   * parameter.\n   *\n   * @param request - The request {@link GetDatabaseBackupRequest}\n   * @returns A Promise of DatabaseBackup\n   */\n  getDatabaseBackup = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/serverless-sqldb/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/backups/${marshalling.validatePathParam(\"backupId\", request.backupId)}`\n    },\n    marshalling_gen.unmarshalDatabaseBackup\n  );\n  pageOfListDatabaseBackups = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/serverless-sqldb/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/backups`,\n      urlParams: marshalling.urlParams(\n        [\"database_id\", request.databaseId],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\"page_size\", request.pageSize],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListDatabaseBackupsResponse\n  );\n  /**\n   * List your Serverless SQL Database backups. List all Serverless SQL Database\n   * backups for a given Scaleway Project or Database. By default, the backups\n   * returned in the list are ordered by creation date in descending order,\n   * though this can be modified via the order_by field.\n   *\n   * @param request - The request {@link ListDatabaseBackupsRequest}\n   * @returns A Promise of ListDatabaseBackupsResponse\n   */\n  listDatabaseBackups = (request) => resourcePaginator.enrichForPagination(\"backups\", this.pageOfListDatabaseBackups, request);\n  /**\n   * Export a database backup. Export a database backup providing a download\n   * link once the export process is completed. You must provide the `backup_id`\n   * parameter.\n   *\n   * @param request - The request {@link ExportDatabaseBackupRequest}\n   * @returns A Promise of DatabaseBackup\n   */\n  exportDatabaseBackup = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/serverless-sqldb/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/backups/${marshalling.validatePathParam(\"backupId\", request.backupId)}/export`\n    },\n    marshalling_gen.unmarshalDatabaseBackup\n  );\n}\nexports.API = API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst DATABASE_TRANSIENT_STATUSES = [\n  \"creating\",\n  \"deleting\",\n  \"restoring\"\n];\nexports.DATABASE_TRANSIENT_STATUSES = DATABASE_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst validationRules_gen = require(\"./validation-rules.gen.cjs\");\nexports.API = api_gen.API;\nexports.DATABASE_TRANSIENT_STATUSES = content_gen.DATABASE_TRANSIENT_STATUSES;\nexports.ValidationRules = validationRules_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst json = require(\"../../../helpers/json.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst unmarshalDatabaseBackup = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DatabaseBackup' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    databaseId: data.database_id,\n    dbSize: data.db_size,\n    downloadUrl: data.download_url,\n    downloadUrlExpiresAt: marshalling.unmarshalDate(data.download_url_expires_at),\n    expiresAt: marshalling.unmarshalDate(data.expires_at),\n    id: data.id,\n    organizationId: data.organization_id,\n    projectId: data.project_id,\n    region: data.region,\n    size: data.size,\n    status: data.status\n  };\n};\nconst unmarshalDatabase = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Database' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    cpuCurrent: data.cpu_current,\n    cpuMax: data.cpu_max,\n    cpuMin: data.cpu_min,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    endpoint: data.endpoint,\n    engineMajorVersion: data.engine_major_version,\n    id: data.id,\n    name: data.name,\n    organizationId: data.organization_id,\n    projectId: data.project_id,\n    region: data.region,\n    started: data.started,\n    status: data.status\n  };\n};\nconst unmarshalListDatabaseBackupsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListDatabaseBackupsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    backups: marshalling.unmarshalArrayOfObject(data.backups, unmarshalDatabaseBackup),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListDatabasesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListDatabasesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    databases: marshalling.unmarshalArrayOfObject(data.databases, unmarshalDatabase),\n    totalCount: data.total_count\n  };\n};\nconst marshalCreateDatabaseRequest = (request, defaults) => ({\n  cpu_max: request.cpuMax,\n  cpu_min: request.cpuMin,\n  from_backup_id: request.fromBackupId,\n  name: request.name,\n  project_id: request.projectId ?? defaults.defaultProjectId\n});\nconst marshalRestoreDatabaseFromBackupRequest = (request, defaults) => ({\n  backup_id: request.backupId\n});\nconst marshalUpdateDatabaseRequest = (request, defaults) => ({\n  cpu_max: request.cpuMax,\n  cpu_min: request.cpuMin\n});\nexports.marshalCreateDatabaseRequest = marshalCreateDatabaseRequest;\nexports.marshalRestoreDatabaseFromBackupRequest = marshalRestoreDatabaseFromBackupRequest;\nexports.marshalUpdateDatabaseRequest = marshalUpdateDatabaseRequest;\nexports.unmarshalDatabase = unmarshalDatabase;\nexports.unmarshalDatabaseBackup = unmarshalDatabaseBackup;\nexports.unmarshalListDatabaseBackupsResponse = unmarshalListDatabaseBackupsResponse;\nexports.unmarshalListDatabasesResponse = unmarshalListDatabasesResponse;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst CreateDatabaseRequest = {\n  cpuMax: {\n    greaterThanOrEqual: 1,\n    lessThanOrEqual: 15\n  },\n  cpuMin: {\n    lessThanOrEqual: 15\n  },\n  fromBackupId: {\n    ignoreEmpty: true\n  },\n  name: {\n    maxLength: 63,\n    minLength: 1\n  }\n};\nconst Database = {\n  cpuCurrent: {\n    lessThanOrEqual: 15\n  },\n  cpuMax: {\n    greaterThanOrEqual: 1,\n    lessThanOrEqual: 15\n  },\n  cpuMin: {\n    lessThanOrEqual: 15\n  }\n};\nconst ListDatabaseBackupsRequest = {\n  page: {\n    greaterThanOrEqual: 1\n  },\n  pageSize: {\n    greaterThanOrEqual: 1,\n    lessThanOrEqual: 1e3\n  }\n};\nconst ListDatabasesRequest = {\n  page: {\n    greaterThanOrEqual: 1\n  },\n  pageSize: {\n    greaterThanOrEqual: 1,\n    lessThanOrEqual: 1e3\n  }\n};\nconst UpdateDatabaseRequest = {\n  cpuMax: {\n    greaterThanOrEqual: 1,\n    lessThanOrEqual: 15\n  },\n  cpuMin: {\n    lessThanOrEqual: 15\n  }\n};\nexports.CreateDatabaseRequest = CreateDatabaseRequest;\nexports.Database = Database;\nexports.ListDatabaseBackupsRequest = ListDatabaseBackupsRequest;\nexports.ListDatabasesRequest = ListDatabasesRequest;\nexports.UpdateDatabaseRequest = UpdateDatabaseRequest;\n","\"use strict\";\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index_gen = require(\"./v1alpha1/index.gen.cjs\");\nexports.v1alpha1 = index_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst intervalRetrier = require(\"../../../internal/async/interval-retrier.cjs\");\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass API extends api.API {\n  /** Lists the available regions of the API. */\n  static LOCALITIES = [\"fr-par\"];\n  /**\n   * Send an email. You must specify the `region`, the sender and the\n   * recipient's information and the `project_id` to send an email from a\n   * checked domain. The subject of the email must contain at least 6\n   * characters.\n   *\n   * @param request - The request {@link CreateEmailRequest}\n   * @returns A Promise of CreateEmailResponse\n   */\n  createEmail = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateEmailRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/transactional-email/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/emails`\n    },\n    marshalling_gen.unmarshalCreateEmailResponse\n  );\n  /**\n   * Get an email. Retrieve information about a specific email using the\n   * `email_id` and `region` parameters.\n   *\n   * @param request - The request {@link GetEmailRequest}\n   * @returns A Promise of Email\n   */\n  getEmail = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/transactional-email/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/emails/${marshalling.validatePathParam(\"emailId\", request.emailId)}`\n    },\n    marshalling_gen.unmarshalEmail\n  );\n  /**\n   * Waits for {@link Email} to be in a final state.\n   *\n   * @param request - The request {@link GetEmailRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Email\n   */\n  waitForEmail = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.EMAIL_TRANSIENT_STATUSES.includes(res.status))),\n    this.getEmail,\n    request,\n    options\n  );\n  pageOfListEmails = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/transactional-email/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/emails`,\n      urlParams: marshalling.urlParams(\n        [\"domain_id\", request.domainId],\n        [\"flags\", request.flags],\n        [\"mail_from\", request.mailFrom],\n        [\"mail_rcpt\", request.mailRcpt],\n        [\"mail_to\", request.mailTo],\n        [\"message_id\", request.messageId],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId],\n        [\"search\", request.search],\n        [\"since\", request.since],\n        [\"statuses\", request.statuses],\n        [\"subject\", request.subject],\n        [\"until\", request.until]\n      )\n    },\n    marshalling_gen.unmarshalListEmailsResponse\n  );\n  /**\n   * List emails. Retrieve the list of emails sent from a specific domain or for\n   * a specific Project or Organization. You must specify the `region`.\n   *\n   * @param request - The request {@link ListEmailsRequest}\n   * @returns A Promise of ListEmailsResponse\n   */\n  listEmails = (request = {}) => resourcePaginator.enrichForPagination(\"emails\", this.pageOfListEmails, request);\n  /**\n   * Email statuses. Get information on your emails' statuses.\n   *\n   * @param request - The request {@link GetStatisticsRequest}\n   * @returns A Promise of Statistics\n   */\n  getStatistics = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/transactional-email/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/statistics`,\n      urlParams: marshalling.urlParams(\n        [\"domain_id\", request.domainId],\n        [\"mail_from\", request.mailFrom],\n        [\"project_id\", request.projectId],\n        [\"since\", request.since],\n        [\"until\", request.until]\n      )\n    },\n    marshalling_gen.unmarshalStatistics\n  );\n  /**\n   * Cancel an email. You can cancel the sending of an email if it has not been\n   * sent yet. You must specify the `region` and the `email_id` of the email you\n   * want to cancel.\n   *\n   * @param request - The request {@link CancelEmailRequest}\n   * @returns A Promise of Email\n   */\n  cancelEmail = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/transactional-email/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/emails/${marshalling.validatePathParam(\"emailId\", request.emailId)}/cancel`\n    },\n    marshalling_gen.unmarshalEmail\n  );\n  /**\n   * Register a domain in a project. You must specify the `region`, `project_id`\n   * and `domain_name` to register a domain in a specific Project.\n   *\n   * @param request - The request {@link CreateDomainRequest}\n   * @returns A Promise of Domain\n   */\n  createDomain = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateDomainRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/transactional-email/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/domains`\n    },\n    marshalling_gen.unmarshalDomain\n  );\n  /**\n   * Get information about a domain. Retrieve information about a specific\n   * domain using the `region` and `domain_id` parameters. Monitor your domain's\n   * reputation and improve **average** and **bad** reputation statuses, using\n   * your domain's **Email activity** tab on the [Scaleway\n   * console](https://console.scaleway.com/transactional-email/domains) to get a\n   * more detailed report. Check out our [dedicated\n   * documentation](https://www.scaleway.com/en/docs/managed-services/transactional-email/reference-content/understanding-tem-reputation-score/)\n   * to improve your domain's reputation.\n   *\n   * @param request - The request {@link GetDomainRequest}\n   * @returns A Promise of Domain\n   */\n  getDomain = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/transactional-email/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/domains/${marshalling.validatePathParam(\"domainId\", request.domainId)}`\n    },\n    marshalling_gen.unmarshalDomain\n  );\n  /**\n   * Waits for {@link Domain} to be in a final state.\n   *\n   * @param request - The request {@link GetDomainRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Domain\n   */\n  waitForDomain = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.DOMAIN_TRANSIENT_STATUSES.includes(res.status))),\n    this.getDomain,\n    request,\n    options\n  );\n  pageOfListDomains = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/transactional-email/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/domains`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId],\n        [\"status\", request.status]\n      )\n    },\n    marshalling_gen.unmarshalListDomainsResponse\n  );\n  /**\n   * List domains. Retrieve domains in a specific Project or in a specific\n   * Organization using the `region` parameter.\n   *\n   * @param request - The request {@link ListDomainsRequest}\n   * @returns A Promise of ListDomainsResponse\n   */\n  listDomains = (request = {}) => resourcePaginator.enrichForPagination(\"domains\", this.pageOfListDomains, request);\n  /**\n   * Delete a domain. You must specify the domain you want to delete by the\n   * `region` and `domain_id`. Deleting a domain is permanent and cannot be\n   * undone.\n   *\n   * @param request - The request {@link RevokeDomainRequest}\n   * @returns A Promise of Domain\n   */\n  revokeDomain = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/transactional-email/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/domains/${marshalling.validatePathParam(\"domainId\", request.domainId)}/revoke`\n    },\n    marshalling_gen.unmarshalDomain\n  );\n  /**\n   * Domain DNS check. Perform an immediate DNS check of a domain using the\n   * `region` and `domain_id` parameters.\n   *\n   * @param request - The request {@link CheckDomainRequest}\n   * @returns A Promise of Domain\n   */\n  checkDomain = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/transactional-email/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/domains/${marshalling.validatePathParam(\"domainId\", request.domainId)}/check`\n    },\n    marshalling_gen.unmarshalDomain\n  );\n  /**\n   * Display SPF and DKIM records status and potential errors. Display SPF and\n   * DKIM records status and potential errors, including the found records to\n   * make debugging easier.\n   *\n   * @param request - The request {@link GetDomainLastStatusRequest}\n   * @returns A Promise of DomainLastStatus\n   */\n  getDomainLastStatus = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/transactional-email/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/domains/${marshalling.validatePathParam(\"domainId\", request.domainId)}/verification`\n    },\n    marshalling_gen.unmarshalDomainLastStatus\n  );\n  /**\n   * Update a domain. Update a domain auto-configuration.\n   *\n   * @param request - The request {@link UpdateDomainRequest}\n   * @returns A Promise of Domain\n   */\n  updateDomain = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateDomainRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/transactional-email/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/domains/${marshalling.validatePathParam(\"domainId\", request.domainId)}`\n    },\n    marshalling_gen.unmarshalDomain\n  );\n  /**\n   * Create a Webhook. Create a new Webhook triggered by a list of event types\n   * and pushed to a Scaleway SNS ARN.\n   *\n   * @param request - The request {@link CreateWebhookRequest}\n   * @returns A Promise of Webhook\n   */\n  createWebhook = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateWebhookRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/transactional-email/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/webhooks`\n    },\n    marshalling_gen.unmarshalWebhook\n  );\n  pageOfListWebhooks = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/transactional-email/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/webhooks`,\n      urlParams: marshalling.urlParams(\n        [\"domain_id\", request.domainId],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListWebhooksResponse\n  );\n  /**\n   * List Webhooks. Retrieve Webhooks in a specific Project or in a specific\n   * Organization using the `region` parameter.\n   *\n   * @param request - The request {@link ListWebhooksRequest}\n   * @returns A Promise of ListWebhooksResponse\n   */\n  listWebhooks = (request = {}) => resourcePaginator.enrichForPagination(\"webhooks\", this.pageOfListWebhooks, request);\n  /**\n   * Get information about a Webhook. Retrieve information about a specific\n   * Webhook using the `webhook_id` and `region` parameters.\n   *\n   * @param request - The request {@link GetWebhookRequest}\n   * @returns A Promise of Webhook\n   */\n  getWebhook = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/transactional-email/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/webhooks/${marshalling.validatePathParam(\"webhookId\", request.webhookId)}`\n    },\n    marshalling_gen.unmarshalWebhook\n  );\n  /**\n   * Update a Webhook. Update a Webhook events type, SNS ARN or name.\n   *\n   * @param request - The request {@link UpdateWebhookRequest}\n   * @returns A Promise of Webhook\n   */\n  updateWebhook = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateWebhookRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/transactional-email/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/webhooks/${marshalling.validatePathParam(\"webhookId\", request.webhookId)}`\n    },\n    marshalling_gen.unmarshalWebhook\n  );\n  /**\n   * Delete a Webhook. You must specify the Webhook you want to delete by the\n   * `region` and `webhook_id`. Deleting a Webhook is permanent and cannot be\n   * undone.\n   *\n   * @param request - The request {@link DeleteWebhookRequest}\n   */\n  deleteWebhook = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/transactional-email/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/webhooks/${marshalling.validatePathParam(\"webhookId\", request.webhookId)}`\n  });\n  pageOfListWebhookEvents = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/transactional-email/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/webhooks/${marshalling.validatePathParam(\"webhookId\", request.webhookId)}/events`,\n      urlParams: marshalling.urlParams(\n        [\"domain_id\", request.domainId],\n        [\"email_id\", request.emailId],\n        [\"event_types\", request.eventTypes],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId],\n        [\"statuses\", request.statuses]\n      )\n    },\n    marshalling_gen.unmarshalListWebhookEventsResponse\n  );\n  /**\n   * List Webhook triggered events. Retrieve the list of Webhook events\n   * triggered from a specific Webhook or for a specific Project or\n   * Organization. You must specify the `region`.\n   *\n   * @param request - The request {@link ListWebhookEventsRequest}\n   * @returns A Promise of ListWebhookEventsResponse\n   */\n  listWebhookEvents = (request) => resourcePaginator.enrichForPagination(\"webhookEvents\", this.pageOfListWebhookEvents, request);\n  /**\n   * List project settings. Retrieve the project settings including periodic\n   * reports.\n   *\n   * @param request - The request {@link GetProjectSettingsRequest}\n   * @returns A Promise of ProjectSettings\n   */\n  getProjectSettings = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/transactional-email/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/project/${marshalling.validatePathParam(\"projectId\", request.projectId ?? this.client.settings.defaultProjectId)}/settings`\n    },\n    marshalling_gen.unmarshalProjectSettings\n  );\n  /**\n   * Update project settings. Update the project settings including periodic\n   * reports.\n   *\n   * @param request - The request {@link UpdateProjectSettingsRequest}\n   * @returns A Promise of ProjectSettings\n   */\n  updateProjectSettings = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateProjectSettingsRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/transactional-email/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/project/${marshalling.validatePathParam(\"projectId\", request.projectId ?? this.client.settings.defaultProjectId)}/settings`\n    },\n    marshalling_gen.unmarshalProjectSettings\n  );\n}\nexports.API = API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst DOMAIN_TRANSIENT_STATUSES = [\n  \"pending\",\n  \"autoconfiguring\"\n];\nconst EMAIL_TRANSIENT_STATUSES = [\"new\", \"sending\"];\nexports.DOMAIN_TRANSIENT_STATUSES = DOMAIN_TRANSIENT_STATUSES;\nexports.EMAIL_TRANSIENT_STATUSES = EMAIL_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst validationRules_gen = require(\"./validation-rules.gen.cjs\");\nexports.API = api_gen.API;\nexports.DOMAIN_TRANSIENT_STATUSES = content_gen.DOMAIN_TRANSIENT_STATUSES;\nexports.EMAIL_TRANSIENT_STATUSES = content_gen.EMAIL_TRANSIENT_STATUSES;\nexports.ValidationRules = validationRules_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst json = require(\"../../../helpers/json.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst unmarshalEmailTry = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'EmailTry' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    code: data.code,\n    message: data.message,\n    rank: data.rank,\n    triedAt: marshalling.unmarshalDate(data.tried_at)\n  };\n};\nconst unmarshalEmail = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Email' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    flags: data.flags,\n    id: data.id,\n    lastTries: marshalling.unmarshalArrayOfObject(data.last_tries, unmarshalEmailTry),\n    mailFrom: data.mail_from,\n    mailRcpt: data.mail_rcpt,\n    messageId: data.message_id,\n    projectId: data.project_id,\n    rcptTo: data.rcpt_to,\n    rcptType: data.rcpt_type,\n    status: data.status,\n    statusDetails: data.status_details,\n    subject: data.subject,\n    tryCount: data.try_count,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalDomainRecordsDMARC = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DomainRecordsDMARC' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    name: data.name,\n    value: data.value\n  };\n};\nconst unmarshalDomainRecords = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DomainRecords' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    dmarc: data.dmarc ? unmarshalDomainRecordsDMARC(data.dmarc) : void 0\n  };\n};\nconst unmarshalDomainReputation = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DomainReputation' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    previousScore: data.previous_score,\n    previousScoredAt: marshalling.unmarshalDate(data.previous_scored_at),\n    score: data.score,\n    scoredAt: marshalling.unmarshalDate(data.scored_at),\n    status: data.status\n  };\n};\nconst unmarshalDomainStatistics = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DomainStatistics' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    canceledCount: data.canceled_count,\n    failedCount: data.failed_count,\n    sentCount: data.sent_count,\n    totalCount: data.total_count\n  };\n};\nconst unmarshalDomain = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Domain' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    autoconfig: data.autoconfig,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    dkimConfig: data.dkim_config,\n    id: data.id,\n    lastError: data.last_error,\n    lastValidAt: marshalling.unmarshalDate(data.last_valid_at),\n    name: data.name,\n    nextCheckAt: marshalling.unmarshalDate(data.next_check_at),\n    organizationId: data.organization_id,\n    projectId: data.project_id,\n    records: data.records ? unmarshalDomainRecords(data.records) : void 0,\n    region: data.region,\n    reputation: data.reputation ? unmarshalDomainReputation(data.reputation) : void 0,\n    revokedAt: marshalling.unmarshalDate(data.revoked_at),\n    spfConfig: data.spf_config,\n    statistics: data.statistics ? unmarshalDomainStatistics(data.statistics) : void 0,\n    status: data.status\n  };\n};\nconst unmarshalWebhook = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Webhook' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    domainId: data.domain_id,\n    eventTypes: data.event_types,\n    id: data.id,\n    name: data.name,\n    organizationId: data.organization_id,\n    projectId: data.project_id,\n    snsArn: data.sns_arn,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalCreateEmailResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'CreateEmailResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    emails: marshalling.unmarshalArrayOfObject(data.emails, unmarshalEmail)\n  };\n};\nconst unmarshalDomainLastStatusDkimRecord = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DomainLastStatusDkimRecord' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    error: data.error,\n    lastValidAt: marshalling.unmarshalDate(data.last_valid_at),\n    status: data.status\n  };\n};\nconst unmarshalDomainLastStatusDmarcRecord = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DomainLastStatusDmarcRecord' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    error: data.error,\n    lastValidAt: marshalling.unmarshalDate(data.last_valid_at),\n    status: data.status\n  };\n};\nconst unmarshalDomainLastStatusSpfRecord = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DomainLastStatusSpfRecord' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    error: data.error,\n    lastValidAt: marshalling.unmarshalDate(data.last_valid_at),\n    status: data.status\n  };\n};\nconst unmarshalDomainLastStatus = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DomainLastStatus' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    dkimRecord: data.dkim_record ? unmarshalDomainLastStatusDkimRecord(data.dkim_record) : void 0,\n    dmarcRecord: data.dmarc_record ? unmarshalDomainLastStatusDmarcRecord(data.dmarc_record) : void 0,\n    domainId: data.domain_id,\n    domainName: data.domain_name,\n    spfRecord: data.spf_record ? unmarshalDomainLastStatusSpfRecord(data.spf_record) : void 0\n  };\n};\nconst unmarshalListDomainsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListDomainsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    domains: marshalling.unmarshalArrayOfObject(data.domains, unmarshalDomain),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListEmailsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListEmailsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    emails: marshalling.unmarshalArrayOfObject(data.emails, unmarshalEmail),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalWebhookEvent = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'WebhookEvent' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    data: data.data,\n    domainId: data.domain_id,\n    emailId: data.email_id,\n    id: data.id,\n    organizationId: data.organization_id,\n    projectId: data.project_id,\n    status: data.status,\n    type: data.type,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    webhookId: data.webhook_id\n  };\n};\nconst unmarshalListWebhookEventsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListWebhookEventsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    totalCount: data.total_count,\n    webhookEvents: marshalling.unmarshalArrayOfObject(\n      data.webhook_events,\n      unmarshalWebhookEvent\n    )\n  };\n};\nconst unmarshalListWebhooksResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListWebhooksResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    totalCount: data.total_count,\n    webhooks: marshalling.unmarshalArrayOfObject(data.webhooks, unmarshalWebhook)\n  };\n};\nconst unmarshalProjectSettingsPeriodicReport = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ProjectSettingsPeriodicReport' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    enabled: data.enabled,\n    frequency: data.frequency,\n    sendingDay: data.sending_day,\n    sendingHour: data.sending_hour\n  };\n};\nconst unmarshalProjectSettings = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ProjectSettings' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    periodicReport: data.periodic_report ? unmarshalProjectSettingsPeriodicReport(data.periodic_report) : void 0\n  };\n};\nconst unmarshalStatistics = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Statistics' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    canceledCount: data.canceled_count,\n    failedCount: data.failed_count,\n    newCount: data.new_count,\n    sendingCount: data.sending_count,\n    sentCount: data.sent_count,\n    totalCount: data.total_count\n  };\n};\nconst marshalCreateDomainRequest = (request, defaults) => ({\n  accept_tos: request.acceptTos,\n  autoconfig: request.autoconfig,\n  domain_name: request.domainName,\n  project_id: request.projectId ?? defaults.defaultProjectId\n});\nconst marshalCreateEmailRequestAddress = (request, defaults) => ({\n  email: request.email,\n  name: request.name\n});\nconst marshalCreateEmailRequestAttachment = (request, defaults) => ({\n  content: request.content,\n  name: request.name,\n  type: request.type\n});\nconst marshalCreateEmailRequestHeader = (request, defaults) => ({\n  key: request.key,\n  value: request.value\n});\nconst marshalCreateEmailRequest = (request, defaults) => ({\n  additional_headers: request.additionalHeaders !== void 0 ? request.additionalHeaders.map(\n    (elt) => marshalCreateEmailRequestHeader(elt)\n  ) : void 0,\n  attachments: request.attachments !== void 0 ? request.attachments.map(\n    (elt) => marshalCreateEmailRequestAttachment(elt)\n  ) : void 0,\n  bcc: request.bcc !== void 0 ? request.bcc.map((elt) => marshalCreateEmailRequestAddress(elt)) : void 0,\n  cc: request.cc !== void 0 ? request.cc.map((elt) => marshalCreateEmailRequestAddress(elt)) : void 0,\n  from: marshalCreateEmailRequestAddress(request.from),\n  html: request.html,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  send_before: request.sendBefore,\n  subject: request.subject,\n  text: request.text,\n  to: request.to !== void 0 ? request.to.map((elt) => marshalCreateEmailRequestAddress(elt)) : void 0\n});\nconst marshalCreateWebhookRequest = (request, defaults) => ({\n  domain_id: request.domainId,\n  event_types: request.eventTypes !== void 0 ? request.eventTypes : void 0,\n  name: request.name,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  sns_arn: request.snsArn\n});\nconst marshalUpdateDomainRequest = (request, defaults) => ({\n  autoconfig: request.autoconfig\n});\nconst marshalUpdateProjectSettingsRequestUpdatePeriodicReport = (request, defaults) => ({\n  enabled: request.enabled,\n  frequency: request.frequency,\n  sending_day: request.sendingDay,\n  sending_hour: request.sendingHour\n});\nconst marshalUpdateProjectSettingsRequest = (request, defaults) => ({\n  periodic_report: request.periodicReport !== void 0 ? marshalUpdateProjectSettingsRequestUpdatePeriodicReport(\n    request.periodicReport\n  ) : void 0\n});\nconst marshalUpdateWebhookRequest = (request, defaults) => ({\n  event_types: request.eventTypes !== void 0 ? request.eventTypes : void 0,\n  name: request.name,\n  sns_arn: request.snsArn\n});\nexports.marshalCreateDomainRequest = marshalCreateDomainRequest;\nexports.marshalCreateEmailRequest = marshalCreateEmailRequest;\nexports.marshalCreateWebhookRequest = marshalCreateWebhookRequest;\nexports.marshalUpdateDomainRequest = marshalUpdateDomainRequest;\nexports.marshalUpdateProjectSettingsRequest = marshalUpdateProjectSettingsRequest;\nexports.marshalUpdateWebhookRequest = marshalUpdateWebhookRequest;\nexports.unmarshalCreateEmailResponse = unmarshalCreateEmailResponse;\nexports.unmarshalDomain = unmarshalDomain;\nexports.unmarshalDomainLastStatus = unmarshalDomainLastStatus;\nexports.unmarshalEmail = unmarshalEmail;\nexports.unmarshalListDomainsResponse = unmarshalListDomainsResponse;\nexports.unmarshalListEmailsResponse = unmarshalListEmailsResponse;\nexports.unmarshalListWebhookEventsResponse = unmarshalListWebhookEventsResponse;\nexports.unmarshalListWebhooksResponse = unmarshalListWebhooksResponse;\nexports.unmarshalProjectSettings = unmarshalProjectSettings;\nexports.unmarshalStatistics = unmarshalStatistics;\nexports.unmarshalWebhook = unmarshalWebhook;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst CreateDomainRequest = {\n  domainName: {\n    maxLength: 255,\n    minLength: 1\n  }\n};\nconst CreateEmailRequest = {\n  subject: {\n    minLength: 6\n  }\n};\nconst CreateEmailRequestAddress = {\n  email: {\n    minLength: 1\n  }\n};\nconst CreateEmailRequestAttachment = {\n  name: {\n    minLength: 1\n  },\n  type: {\n    minLength: 1\n  }\n};\nconst CreateEmailRequestHeader = {\n  key: {\n    minLength: 1\n  },\n  value: {\n    minLength: 1\n  }\n};\nconst CreateWebhookRequest = {\n  name: {\n    maxLength: 127,\n    minLength: 3\n  },\n  snsArn: {\n    maxLength: 127,\n    minLength: 3\n  }\n};\nconst ListDomainsRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThanOrEqual: 1,\n    lessThanOrEqual: 1e3\n  }\n};\nconst ListEmailsRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThanOrEqual: 1,\n    lessThanOrEqual: 1e3\n  },\n  search: {\n    maxLength: 100,\n    minLength: 3\n  },\n  subject: {\n    minLength: 6\n  }\n};\nconst ListWebhookEventsRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThanOrEqual: 1,\n    lessThanOrEqual: 100\n  }\n};\nconst ListWebhooksRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThanOrEqual: 1,\n    lessThanOrEqual: 100\n  }\n};\nconst UpdateProjectSettingsRequestUpdatePeriodicReport = {\n  sendingDay: {\n    greaterThanOrEqual: 1,\n    lessThanOrEqual: 28\n  },\n  sendingHour: {\n    greaterThanOrEqual: 0,\n    lessThanOrEqual: 23\n  }\n};\nconst UpdateWebhookRequest = {\n  name: {\n    maxLength: 127,\n    minLength: 3\n  },\n  snsArn: {\n    maxLength: 127,\n    minLength: 3\n  }\n};\nexports.CreateDomainRequest = CreateDomainRequest;\nexports.CreateEmailRequest = CreateEmailRequest;\nexports.CreateEmailRequestAddress = CreateEmailRequestAddress;\nexports.CreateEmailRequestAttachment = CreateEmailRequestAttachment;\nexports.CreateEmailRequestHeader = CreateEmailRequestHeader;\nexports.CreateWebhookRequest = CreateWebhookRequest;\nexports.ListDomainsRequest = ListDomainsRequest;\nexports.ListEmailsRequest = ListEmailsRequest;\nexports.ListWebhookEventsRequest = ListWebhookEventsRequest;\nexports.ListWebhooksRequest = ListWebhooksRequest;\nexports.UpdateProjectSettingsRequestUpdatePeriodicReport = UpdateProjectSettingsRequestUpdatePeriodicReport;\nexports.UpdateWebhookRequest = UpdateWebhookRequest;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index_gen = require(\"./v1/index.gen.cjs\");\nexports.v1 = index_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst intervalRetrier = require(\"../../../internal/async/interval-retrier.cjs\");\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass API extends api.API {\n  /**\n   * Register a user. Register a human and return a access-key and a secret-key\n   * that must be used in all other commands.\n   *\n   * Hint: you can use other test commands by setting the SCW_SECRET_KEY env\n   * variable.\n   *\n   * @param request - The request {@link RegisterRequest}\n   * @returns A Promise of RegisterResponse\n   */\n  register = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalRegisterRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/test/v1/register`\n    },\n    marshalling_gen.unmarshalRegisterResponse\n  );\n  pageOfListHumans = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/test/v1/humans`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListHumansResponse\n  );\n  /**\n   * List all your humans.\n   *\n   * @param request - The request {@link ListHumansRequest}\n   * @returns A Promise of ListHumansResponse\n   */\n  listHumans = (request = {}) => resourcePaginator.enrichForPagination(\"humans\", this.pageOfListHumans, request);\n  /**\n   * Get human details. Get the human details associated with the given id.\n   *\n   * @param request - The request {@link GetHumanRequest}\n   * @returns A Promise of Human\n   */\n  getHuman = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/test/v1/humans/${marshalling.validatePathParam(\"humanId\", request.humanId)}`\n    },\n    marshalling_gen.unmarshalHuman\n  );\n  /**\n   * Waits for {@link Human} to be in a final state.\n   *\n   * @param request - The request {@link GetHumanRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Human\n   */\n  waitForHuman = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.HUMAN_TRANSIENT_STATUSES.includes(res.status))),\n    this.getHuman,\n    request,\n    options\n  );\n  /**\n   * Create a new human.\n   *\n   * @param request - The request {@link CreateHumanRequest}\n   * @returns A Promise of Human\n   */\n  createHuman = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateHumanRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/test/v1/humans`\n    },\n    marshalling_gen.unmarshalHuman\n  );\n  /**\n   * Update an existing human. Update the human associated with the given id.\n   *\n   * @param request - The request {@link UpdateHumanRequest}\n   * @returns A Promise of Human\n   */\n  updateHuman = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateHumanRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/test/v1/humans/${marshalling.validatePathParam(\"humanId\", request.humanId)}`\n    },\n    marshalling_gen.unmarshalHuman\n  );\n  /**\n   * Delete an existing human. Delete the human associated with the given id.\n   *\n   * @param request - The request {@link DeleteHumanRequest}\n   * @returns A Promise of Human\n   */\n  deleteHuman = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/test/v1/humans/${marshalling.validatePathParam(\"humanId\", request.humanId)}`\n    },\n    marshalling_gen.unmarshalHuman\n  );\n  /**\n   * Start a 1h running for the given human. Start a one hour running for the\n   * given human.\n   *\n   * @param request - The request {@link RunHumanRequest}\n   * @returns A Promise of Human\n   */\n  runHuman = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/test/v1/humans/${marshalling.validatePathParam(\"humanId\", request.humanId)}/run`\n    },\n    marshalling_gen.unmarshalHuman\n  );\n  /**\n   * Make a human smoke.\n   *\n   * @deprecated\n   * @param request - The request {@link SmokeHumanRequest}\n   * @returns A Promise of Human\n   */\n  smokeHuman = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/test/v1/humans/${marshalling.validatePathParam(\"humanId\", request.humanId)}/smoke`\n    },\n    marshalling_gen.unmarshalHuman\n  );\n}\nexports.API = API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst HUMAN_TRANSIENT_STATUSES = [\"running\"];\nexports.HUMAN_TRANSIENT_STATUSES = HUMAN_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nexports.API = api_gen.API;\nexports.HUMAN_TRANSIENT_STATUSES = content_gen.HUMAN_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst json = require(\"../../../helpers/json.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst unmarshalHuman = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Human' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    altitudeInMeter: data.altitude_in_meter,\n    altitudeInMillimeter: data.altitude_in_millimeter,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    eyesColor: data.eyes_color,\n    fingersCount: data.fingers_count,\n    hairCount: data.hair_count,\n    height: data.height,\n    id: data.id,\n    isHappy: data.is_happy,\n    name: data.name,\n    organizationId: data.organization_id,\n    projectId: data.project_id,\n    shoeSize: data.shoe_size,\n    status: data.status,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalListHumansResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListHumansResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    humans: marshalling.unmarshalArrayOfObject(data.humans, unmarshalHuman),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalRegisterResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'RegisterResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    accessKey: data.access_key,\n    secretKey: data.secret_key\n  };\n};\nconst marshalCreateHumanRequest = (request, defaults) => ({\n  altitude_in_meter: request.altitudeInMeter,\n  altitude_in_millimeter: request.altitudeInMillimeter,\n  eyes_color: request.eyesColor,\n  fingers_count: request.fingersCount,\n  hair_count: request.hairCount,\n  height: request.height,\n  is_happy: request.isHappy,\n  name: request.name,\n  shoe_size: request.shoeSize,\n  ...marshalling.resolveOneOf([\n    {\n      default: defaults.defaultProjectId,\n      param: \"project_id\",\n      value: request.projectId\n    },\n    {\n      default: defaults.defaultOrganizationId,\n      param: \"organization_id\",\n      value: request.organizationId\n    }\n  ])\n});\nconst marshalRegisterRequest = (request, defaults) => ({\n  username: request.username\n});\nconst marshalUpdateHumanRequest = (request, defaults) => ({\n  altitude_in_meter: request.altitudeInMeter,\n  altitude_in_millimeter: request.altitudeInMillimeter,\n  eyes_color: request.eyesColor,\n  fingers_count: request.fingersCount,\n  hair_count: request.hairCount,\n  height: request.height,\n  is_happy: request.isHappy,\n  name: request.name,\n  shoe_size: request.shoeSize\n});\nexports.marshalCreateHumanRequest = marshalCreateHumanRequest;\nexports.marshalRegisterRequest = marshalRegisterRequest;\nexports.marshalUpdateHumanRequest = marshalUpdateHumanRequest;\nexports.unmarshalHuman = unmarshalHuman;\nexports.unmarshalListHumansResponse = unmarshalListHumansResponse;\nexports.unmarshalRegisterResponse = unmarshalRegisterResponse;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index_gen = require(\"./v1/index.gen.cjs\");\nconst index_gen$1 = require(\"./v2/index.gen.cjs\");\nexports.v1 = index_gen;\nexports.v2 = index_gen$1;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass API extends api.API {\n  /** Lists the available zones of the API. */\n  static LOCALITIES = [\n    \"fr-par-1\",\n    \"fr-par-2\",\n    \"fr-par-3\",\n    \"nl-ams-1\",\n    \"nl-ams-2\",\n    \"nl-ams-3\",\n    \"pl-waw-1\",\n    \"pl-waw-2\"\n  ];\n  pageOfListPrivateNetworks = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/vpc/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/private-networks`,\n      urlParams: marshalling.urlParams(\n        [\"include_regional\", request.includeRegional],\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"private_network_ids\", request.privateNetworkIds],\n        [\"project_id\", request.projectId],\n        [\"tags\", request.tags]\n      )\n    },\n    marshalling_gen.unmarshalListPrivateNetworksResponse\n  );\n  /**\n   * List Private Networks. List existing Private Networks in a specified\n   * Availability Zone. By default, the Private Networks returned in the list\n   * are ordered by creation date in ascending order, though this can be\n   * modified via the order_by field.\n   *\n   * @param request - The request {@link ListPrivateNetworksRequest}\n   * @returns A Promise of ListPrivateNetworksResponse\n   */\n  listPrivateNetworks = (request = {}) => resourcePaginator.enrichForPagination(\n    \"privateNetworks\",\n    this.pageOfListPrivateNetworks,\n    request\n  );\n  /**\n   * Create a Private Network. Create a new Private Network. Once created, you\n   * can attach Scaleway resources in the same Availability Zone.\n   *\n   * @param request - The request {@link CreatePrivateNetworkRequest}\n   * @returns A Promise of PrivateNetwork\n   */\n  createPrivateNetwork = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreatePrivateNetworkRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/vpc/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/private-networks`\n    },\n    marshalling_gen.unmarshalPrivateNetwork\n  );\n  /**\n   * Get a Private Network. Retrieve information about an existing Private\n   * Network, specified by its Private Network ID. Its full details are returned\n   * in the response object.\n   *\n   * @param request - The request {@link GetPrivateNetworkRequest}\n   * @returns A Promise of PrivateNetwork\n   */\n  getPrivateNetwork = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/vpc/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/private-networks/${marshalling.validatePathParam(\"privateNetworkId\", request.privateNetworkId)}`\n    },\n    marshalling_gen.unmarshalPrivateNetwork\n  );\n  /**\n   * Update Private Network. Update parameters (such as name or tags) of an\n   * existing Private Network, specified by its Private Network ID.\n   *\n   * @param request - The request {@link UpdatePrivateNetworkRequest}\n   * @returns A Promise of PrivateNetwork\n   */\n  updatePrivateNetwork = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdatePrivateNetworkRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/vpc/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/private-networks/${marshalling.validatePathParam(\"privateNetworkId\", request.privateNetworkId)}`\n    },\n    marshalling_gen.unmarshalPrivateNetwork\n  );\n  /**\n   * Delete a Private Network. Delete an existing Private Network. Note that you\n   * must first detach all resources from the network, in order to delete it.\n   *\n   * @param request - The request {@link DeletePrivateNetworkRequest}\n   */\n  deletePrivateNetwork = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/vpc/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/private-networks/${marshalling.validatePathParam(\"privateNetworkId\", request.privateNetworkId)}`\n  });\n}\nexports.API = API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nexports.API = api_gen.API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst randomName = require(\"@scaleway/random-name\");\nconst json = require(\"../../../helpers/json.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst unmarshalPrivateNetwork = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'PrivateNetwork' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    id: data.id,\n    name: data.name,\n    organizationId: data.organization_id,\n    projectId: data.project_id,\n    subnets: data.subnets,\n    tags: data.tags,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    zone: data.zone\n  };\n};\nconst unmarshalListPrivateNetworksResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListPrivateNetworksResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    privateNetworks: marshalling.unmarshalArrayOfObject(\n      data.private_networks,\n      unmarshalPrivateNetwork\n    ),\n    totalCount: data.total_count\n  };\n};\nconst marshalCreatePrivateNetworkRequest = (request, defaults) => ({\n  name: request.name || randomName(\"pn\"),\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  subnets: request.subnets,\n  tags: request.tags\n});\nconst marshalUpdatePrivateNetworkRequest = (request, defaults) => ({\n  name: request.name,\n  subnets: request.subnets,\n  tags: request.tags\n});\nexports.marshalCreatePrivateNetworkRequest = marshalCreatePrivateNetworkRequest;\nexports.marshalUpdatePrivateNetworkRequest = marshalUpdatePrivateNetworkRequest;\nexports.unmarshalListPrivateNetworksResponse = unmarshalListPrivateNetworksResponse;\nexports.unmarshalPrivateNetwork = unmarshalPrivateNetwork;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass API extends api.API {\n  /** Lists the available regions of the API. */\n  static LOCALITIES = [\"fr-par\", \"nl-ams\", \"pl-waw\"];\n  pageOfListVPCs = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/vpc/v2/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/vpcs`,\n      urlParams: marshalling.urlParams(\n        [\"is_default\", request.isDefault],\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId],\n        [\"routing_enabled\", request.routingEnabled],\n        [\"tags\", request.tags]\n      )\n    },\n    marshalling_gen.unmarshalListVPCsResponse\n  );\n  /**\n   * List VPCs. List existing VPCs in the specified region.\n   *\n   * @param request - The request {@link ListVPCsRequest}\n   * @returns A Promise of ListVPCsResponse\n   */\n  listVPCs = (request = {}) => resourcePaginator.enrichForPagination(\"vpcs\", this.pageOfListVPCs, request);\n  /**\n   * Create a VPC. Create a new VPC in the specified region.\n   *\n   * @param request - The request {@link CreateVPCRequest}\n   * @returns A Promise of VPC\n   */\n  createVPC = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateVPCRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/vpc/v2/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/vpcs`\n    },\n    marshalling_gen.unmarshalVPC\n  );\n  /**\n   * Get a VPC. Retrieve details of an existing VPC, specified by its VPC ID.\n   *\n   * @param request - The request {@link GetVPCRequest}\n   * @returns A Promise of VPC\n   */\n  getVPC = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/vpc/v2/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/vpcs/${marshalling.validatePathParam(\"vpcId\", request.vpcId)}`\n    },\n    marshalling_gen.unmarshalVPC\n  );\n  /**\n   * Update VPC. Update parameters including name and tags of the specified VPC.\n   *\n   * @param request - The request {@link UpdateVPCRequest}\n   * @returns A Promise of VPC\n   */\n  updateVPC = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateVPCRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/vpc/v2/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/vpcs/${marshalling.validatePathParam(\"vpcId\", request.vpcId)}`\n    },\n    marshalling_gen.unmarshalVPC\n  );\n  /**\n   * Delete a VPC. Delete a VPC specified by its VPC ID.\n   *\n   * @param request - The request {@link DeleteVPCRequest}\n   */\n  deleteVPC = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/vpc/v2/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/vpcs/${marshalling.validatePathParam(\"vpcId\", request.vpcId)}`\n  });\n  pageOfListPrivateNetworks = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/vpc/v2/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/private-networks`,\n      urlParams: marshalling.urlParams(\n        [\"dhcp_enabled\", request.dhcpEnabled],\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"private_network_ids\", request.privateNetworkIds],\n        [\"project_id\", request.projectId],\n        [\"tags\", request.tags],\n        [\"vpc_id\", request.vpcId]\n      )\n    },\n    marshalling_gen.unmarshalListPrivateNetworksResponse\n  );\n  /**\n   * List Private Networks. List existing Private Networks in the specified\n   * region. By default, the Private Networks returned in the list are ordered\n   * by creation date in ascending order, though this can be modified via the\n   * order_by field.\n   *\n   * @param request - The request {@link ListPrivateNetworksRequest}\n   * @returns A Promise of ListPrivateNetworksResponse\n   */\n  listPrivateNetworks = (request = {}) => resourcePaginator.enrichForPagination(\n    \"privateNetworks\",\n    this.pageOfListPrivateNetworks,\n    request\n  );\n  /**\n   * Create a Private Network. Create a new Private Network. Once created, you\n   * can attach Scaleway resources which are in the same region.\n   *\n   * @param request - The request {@link CreatePrivateNetworkRequest}\n   * @returns A Promise of PrivateNetwork\n   */\n  createPrivateNetwork = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreatePrivateNetworkRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/vpc/v2/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/private-networks`\n    },\n    marshalling_gen.unmarshalPrivateNetwork\n  );\n  /**\n   * Get a Private Network. Retrieve information about an existing Private\n   * Network, specified by its Private Network ID. Its full details are returned\n   * in the response object.\n   *\n   * @param request - The request {@link GetPrivateNetworkRequest}\n   * @returns A Promise of PrivateNetwork\n   */\n  getPrivateNetwork = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/vpc/v2/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/private-networks/${marshalling.validatePathParam(\"privateNetworkId\", request.privateNetworkId)}`\n    },\n    marshalling_gen.unmarshalPrivateNetwork\n  );\n  /**\n   * Update Private Network. Update parameters (such as name or tags) of an\n   * existing Private Network, specified by its Private Network ID.\n   *\n   * @param request - The request {@link UpdatePrivateNetworkRequest}\n   * @returns A Promise of PrivateNetwork\n   */\n  updatePrivateNetwork = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdatePrivateNetworkRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/vpc/v2/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/private-networks/${marshalling.validatePathParam(\"privateNetworkId\", request.privateNetworkId)}`\n    },\n    marshalling_gen.unmarshalPrivateNetwork\n  );\n  /**\n   * Delete a Private Network. Delete an existing Private Network. Note that you\n   * must first detach all resources from the network, in order to delete it.\n   *\n   * @param request - The request {@link DeletePrivateNetworkRequest}\n   */\n  deletePrivateNetwork = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/vpc/v2/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/private-networks/${marshalling.validatePathParam(\"privateNetworkId\", request.privateNetworkId)}`\n  });\n  /**\n   * Migrate Private Networks from zoned to regional. Transform multiple\n   * existing zoned Private Networks (scoped to a single Availability Zone) into\n   * regional Private Networks, scoped to an entire region. You can transform\n   * one or many Private Networks (specified by their Private Network IDs)\n   * within a single Scaleway Organization or Project, with the same call.\n   *\n   * @param request - The request {@link MigrateZonalPrivateNetworksRequest}\n   */\n  migrateZonalPrivateNetworks = (request = {}) => this.client.fetch({\n    body: JSON.stringify(\n      marshalling_gen.marshalMigrateZonalPrivateNetworksRequest(\n        request,\n        this.client.settings\n      )\n    ),\n    headers: jsonContentHeaders,\n    method: \"POST\",\n    path: `/vpc/v2/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/private-networks/migrate-zonal`\n  });\n  /**\n   * Enable DHCP on a Private Network. Enable DHCP managed on an existing\n   * Private Network. Note that you will not be able to deactivate it\n   * afterwards.\n   *\n   * @param request - The request {@link EnableDHCPRequest}\n   * @returns A Promise of PrivateNetwork\n   */\n  enableDHCP = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/vpc/v2/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/private-networks/${marshalling.validatePathParam(\"privateNetworkId\", request.privateNetworkId)}/enable-dhcp`\n    },\n    marshalling_gen.unmarshalPrivateNetwork\n  );\n  /**\n   * Enable routing on a VPC. Enable routing on an existing VPC. Note that you\n   * will not be able to deactivate it afterwards.\n   *\n   * @param request - The request {@link EnableRoutingRequest}\n   * @returns A Promise of VPC\n   */\n  enableRouting = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/vpc/v2/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/vpcs/${marshalling.validatePathParam(\"vpcId\", request.vpcId)}/enable-routing`\n    },\n    marshalling_gen.unmarshalVPC\n  );\n  pageOfListSubnets = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/vpc/v2/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/subnets`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId],\n        [\"subnet_ids\", request.subnetIds],\n        [\"vpc_id\", request.vpcId]\n      )\n    },\n    marshalling_gen.unmarshalListSubnetsResponse\n  );\n  /**\n   * List subnets. List any Private Network's subnets. See ListPrivateNetworks\n   * to list a specific Private Network's subnets.\n   *\n   * @param request - The request {@link ListSubnetsRequest}\n   * @returns A Promise of ListSubnetsResponse\n   */\n  listSubnets = (request = {}) => resourcePaginator.enrichForPagination(\"subnets\", this.pageOfListSubnets, request);\n  /**\n   * Set a Private Network's subnets. Set subnets for an existing Private\n   * Network. Note that the method is PUT and not PATCH. Any existing subnets\n   * will be removed in favor of the new specified set of subnets.\n   *\n   * @param request - The request {@link SetSubnetsRequest}\n   * @returns A Promise of SetSubnetsResponse\n   */\n  setSubnets = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSetSubnetsRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/vpc/v2/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/private-networks/${marshalling.validatePathParam(\"privateNetworkId\", request.privateNetworkId)}/subnets`\n    },\n    marshalling_gen.unmarshalSetSubnetsResponse\n  );\n  /**\n   * Add subnets to a Private Network. Add new subnets to an existing Private\n   * Network.\n   *\n   * @param request - The request {@link AddSubnetsRequest}\n   * @returns A Promise of AddSubnetsResponse\n   */\n  addSubnets = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalAddSubnetsRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/vpc/v2/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/private-networks/${marshalling.validatePathParam(\"privateNetworkId\", request.privateNetworkId)}/subnets`\n    },\n    marshalling_gen.unmarshalAddSubnetsResponse\n  );\n  /**\n   * Delete subnets from a Private Network. Delete the specified subnets from a\n   * Private Network.\n   *\n   * @param request - The request {@link DeleteSubnetsRequest}\n   * @returns A Promise of DeleteSubnetsResponse\n   */\n  deleteSubnets = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalDeleteSubnetsRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"DELETE\",\n      path: `/vpc/v2/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/private-networks/${marshalling.validatePathParam(\"privateNetworkId\", request.privateNetworkId)}/subnets`\n    },\n    marshalling_gen.unmarshalDeleteSubnetsResponse\n  );\n  /**\n   * Create a Route. Create a new custom Route.\n   *\n   * @param request - The request {@link CreateRouteRequest}\n   * @returns A Promise of Route\n   */\n  createRoute = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateRouteRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/vpc/v2/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/routes`\n    },\n    marshalling_gen.unmarshalRoute\n  );\n  /**\n   * Get a Route. Retrieve details of an existing Route, specified by its Route\n   * ID.\n   *\n   * @param request - The request {@link GetRouteRequest}\n   * @returns A Promise of Route\n   */\n  getRoute = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/vpc/v2/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/routes/${marshalling.validatePathParam(\"routeId\", request.routeId)}`\n    },\n    marshalling_gen.unmarshalRoute\n  );\n  /**\n   * Update Route. Update parameters of the specified Route.\n   *\n   * @param request - The request {@link UpdateRouteRequest}\n   * @returns A Promise of Route\n   */\n  updateRoute = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateRouteRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/vpc/v2/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/routes/${marshalling.validatePathParam(\"routeId\", request.routeId)}`\n    },\n    marshalling_gen.unmarshalRoute\n  );\n  /**\n   * Delete a Route. Delete a Route specified by its Route ID.\n   *\n   * @param request - The request {@link DeleteRouteRequest}\n   */\n  deleteRoute = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/vpc/v2/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/routes/${marshalling.validatePathParam(\"routeId\", request.routeId)}`\n  });\n}\nexports.API = API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nconst validationRules_gen = require(\"./validation-rules.gen.cjs\");\nexports.API = api_gen.API;\nexports.ValidationRules = validationRules_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst randomName = require(\"@scaleway/random-name\");\nconst json = require(\"../../../helpers/json.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst unmarshalSubnet = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Subnet' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    id: data.id,\n    privateNetworkId: data.private_network_id,\n    projectId: data.project_id,\n    subnet: data.subnet,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    vpcId: data.vpc_id\n  };\n};\nconst unmarshalPrivateNetwork = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'PrivateNetwork' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    dhcpEnabled: data.dhcp_enabled,\n    id: data.id,\n    name: data.name,\n    organizationId: data.organization_id,\n    projectId: data.project_id,\n    region: data.region,\n    subnets: marshalling.unmarshalArrayOfObject(data.subnets, unmarshalSubnet),\n    tags: data.tags,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    vpcId: data.vpc_id\n  };\n};\nconst unmarshalRoute = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Route' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    description: data.description,\n    destination: data.destination,\n    id: data.id,\n    isReadOnly: data.is_read_only,\n    nexthopPrivateNetworkId: data.nexthop_private_network_id,\n    nexthopResourceId: data.nexthop_resource_id,\n    region: data.region,\n    tags: data.tags,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    vpcId: data.vpc_id\n  };\n};\nconst unmarshalVPC = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'VPC' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    id: data.id,\n    isDefault: data.is_default,\n    name: data.name,\n    organizationId: data.organization_id,\n    privateNetworkCount: data.private_network_count,\n    projectId: data.project_id,\n    region: data.region,\n    routingEnabled: data.routing_enabled,\n    tags: data.tags,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalAddSubnetsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'AddSubnetsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    subnets: data.subnets\n  };\n};\nconst unmarshalDeleteSubnetsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DeleteSubnetsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    subnets: data.subnets\n  };\n};\nconst unmarshalListPrivateNetworksResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListPrivateNetworksResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    privateNetworks: marshalling.unmarshalArrayOfObject(\n      data.private_networks,\n      unmarshalPrivateNetwork\n    ),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListSubnetsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListSubnetsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    subnets: marshalling.unmarshalArrayOfObject(data.subnets, unmarshalSubnet),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListVPCsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListVPCsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    totalCount: data.total_count,\n    vpcs: marshalling.unmarshalArrayOfObject(data.vpcs, unmarshalVPC)\n  };\n};\nconst unmarshalSetSubnetsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SetSubnetsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    subnets: data.subnets\n  };\n};\nconst marshalAddSubnetsRequest = (request, defaults) => ({\n  subnets: request.subnets\n});\nconst marshalCreatePrivateNetworkRequest = (request, defaults) => ({\n  name: request.name || randomName(\"pn\"),\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  subnets: request.subnets,\n  tags: request.tags,\n  vpc_id: request.vpcId\n});\nconst marshalCreateRouteRequest = (request, defaults) => ({\n  description: request.description,\n  destination: request.destination,\n  nexthop_private_network_id: request.nexthopPrivateNetworkId,\n  nexthop_resource_id: request.nexthopResourceId,\n  tags: request.tags,\n  vpc_id: request.vpcId\n});\nconst marshalCreateVPCRequest = (request, defaults) => ({\n  enable_routing: request.enableRouting,\n  name: request.name || randomName(\"vpc\"),\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  tags: request.tags\n});\nconst marshalDeleteSubnetsRequest = (request, defaults) => ({\n  subnets: request.subnets\n});\nconst marshalMigrateZonalPrivateNetworksRequest = (request, defaults) => ({\n  private_network_ids: request.privateNetworkIds,\n  ...marshalling.resolveOneOf([\n    {\n      default: defaults.defaultOrganizationId,\n      param: \"organization_id\",\n      value: request.organizationId\n    },\n    {\n      default: defaults.defaultProjectId,\n      param: \"project_id\",\n      value: request.projectId\n    }\n  ])\n});\nconst marshalSetSubnetsRequest = (request, defaults) => ({\n  subnets: request.subnets\n});\nconst marshalUpdatePrivateNetworkRequest = (request, defaults) => ({\n  name: request.name,\n  tags: request.tags\n});\nconst marshalUpdateRouteRequest = (request, defaults) => ({\n  description: request.description,\n  destination: request.destination,\n  nexthop_private_network_id: request.nexthopPrivateNetworkId,\n  nexthop_resource_id: request.nexthopResourceId,\n  tags: request.tags\n});\nconst marshalUpdateVPCRequest = (request, defaults) => ({\n  name: request.name,\n  tags: request.tags\n});\nexports.marshalAddSubnetsRequest = marshalAddSubnetsRequest;\nexports.marshalCreatePrivateNetworkRequest = marshalCreatePrivateNetworkRequest;\nexports.marshalCreateRouteRequest = marshalCreateRouteRequest;\nexports.marshalCreateVPCRequest = marshalCreateVPCRequest;\nexports.marshalDeleteSubnetsRequest = marshalDeleteSubnetsRequest;\nexports.marshalMigrateZonalPrivateNetworksRequest = marshalMigrateZonalPrivateNetworksRequest;\nexports.marshalSetSubnetsRequest = marshalSetSubnetsRequest;\nexports.marshalUpdatePrivateNetworkRequest = marshalUpdatePrivateNetworkRequest;\nexports.marshalUpdateRouteRequest = marshalUpdateRouteRequest;\nexports.marshalUpdateVPCRequest = marshalUpdateVPCRequest;\nexports.unmarshalAddSubnetsResponse = unmarshalAddSubnetsResponse;\nexports.unmarshalDeleteSubnetsResponse = unmarshalDeleteSubnetsResponse;\nexports.unmarshalListPrivateNetworksResponse = unmarshalListPrivateNetworksResponse;\nexports.unmarshalListSubnetsResponse = unmarshalListSubnetsResponse;\nexports.unmarshalListVPCsResponse = unmarshalListVPCsResponse;\nexports.unmarshalPrivateNetwork = unmarshalPrivateNetwork;\nexports.unmarshalRoute = unmarshalRoute;\nexports.unmarshalSetSubnetsResponse = unmarshalSetSubnetsResponse;\nexports.unmarshalVPC = unmarshalVPC;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst Route = {\n  description: {\n    maxLength: 200\n  }\n};\nexports.Route = Route;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index_gen = require(\"./v1/index.gen.cjs\");\nexports.v1 = index_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst intervalRetrier = require(\"../../../internal/async/interval-retrier.cjs\");\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass API extends api.API {\n  /** Lists the available zones of the API. */\n  static LOCALITIES = [\n    \"fr-par-1\",\n    \"fr-par-2\",\n    \"nl-ams-1\",\n    \"nl-ams-2\",\n    \"nl-ams-3\",\n    \"pl-waw-1\",\n    \"pl-waw-2\",\n    \"pl-waw-3\"\n  ];\n  pageOfListGateways = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/gateways`,\n      urlParams: marshalling.urlParams(\n        [\"name\", request.name],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"private_network_id\", request.privateNetworkId],\n        [\"project_id\", request.projectId],\n        [\"status\", request.status],\n        [\"tags\", request.tags],\n        [\"type\", request.type]\n      )\n    },\n    marshalling_gen.unmarshalListGatewaysResponse\n  );\n  /**\n   * List Public Gateways. List Public Gateways in a given Scaleway Organization\n   * or Project. By default, results are displayed in ascending order of\n   * creation date.\n   *\n   * @param request - The request {@link ListGatewaysRequest}\n   * @returns A Promise of ListGatewaysResponse\n   */\n  listGateways = (request = {}) => resourcePaginator.enrichForPagination(\"gateways\", this.pageOfListGateways, request);\n  /**\n   * Get a Public Gateway. Get details of a Public Gateway, specified by its\n   * gateway ID. The response object contains full details of the gateway,\n   * including its **name**, **type**, **status** and more.\n   *\n   * @param request - The request {@link GetGatewayRequest}\n   * @returns A Promise of Gateway\n   */\n  getGateway = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/gateways/${marshalling.validatePathParam(\"gatewayId\", request.gatewayId)}`\n    },\n    marshalling_gen.unmarshalGateway\n  );\n  /**\n   * Waits for {@link Gateway} to be in a final state.\n   *\n   * @param request - The request {@link GetGatewayRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Gateway\n   */\n  waitForGateway = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.GATEWAY_TRANSIENT_STATUSES.includes(res.status))),\n    this.getGateway,\n    request,\n    options\n  );\n  /**\n   * Create a Public Gateway. Create a new Public Gateway in the specified\n   * Scaleway Project, defining its **name**, **type** and other configuration\n   * details such as whether to enable SSH bastion.\n   *\n   * @param request - The request {@link CreateGatewayRequest}\n   * @returns A Promise of Gateway\n   */\n  createGateway = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateGatewayRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/gateways`\n    },\n    marshalling_gen.unmarshalGateway\n  );\n  /**\n   * Update a Public Gateway. Update the parameters of an existing Public\n   * Gateway, for example, its **name**, **tags**, **SSH bastion\n   * configuration**, and **DNS servers**.\n   *\n   * @param request - The request {@link UpdateGatewayRequest}\n   * @returns A Promise of Gateway\n   */\n  updateGateway = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateGatewayRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/gateways/${marshalling.validatePathParam(\"gatewayId\", request.gatewayId)}`\n    },\n    marshalling_gen.unmarshalGateway\n  );\n  /**\n   * Delete a Public Gateway. Delete an existing Public Gateway, specified by\n   * its gateway ID. This action is irreversible.\n   *\n   * @param request - The request {@link DeleteGatewayRequest}\n   */\n  deleteGateway = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/vpc-gw/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/gateways/${marshalling.validatePathParam(\"gatewayId\", request.gatewayId)}`,\n    urlParams: marshalling.urlParams([\"cleanup_dhcp\", request.cleanupDhcp])\n  });\n  /**\n   * Upgrade a Public Gateway to the latest version and/or to a different\n   * commercial offer type. Upgrade a given Public Gateway to the newest\n   * software version or to a different commercial offer type. This applies the\n   * latest bugfixes and features to your Public Gateway. Note that gateway\n   * service will be interrupted during the update.\n   *\n   * @param request - The request {@link UpgradeGatewayRequest}\n   * @returns A Promise of Gateway\n   */\n  upgradeGateway = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpgradeGatewayRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/gateways/${marshalling.validatePathParam(\"gatewayId\", request.gatewayId)}/upgrade`\n    },\n    marshalling_gen.unmarshalGateway\n  );\n  /**\n   * Upgrade a Public Gateway to IP mobility. Upgrade a Public Gateway to IP\n   * mobility (move from NAT IP to routed IP). This is idempotent: repeated\n   * calls after the first will return no error but have no effect.\n   *\n   * @param request - The request {@link EnableIPMobilityRequest}\n   */\n  enableIPMobility = (request) => this.client.fetch({\n    body: \"{}\",\n    headers: jsonContentHeaders,\n    method: \"POST\",\n    path: `/vpc-gw/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/gateways/${marshalling.validatePathParam(\"gatewayId\", request.gatewayId)}/enable-ip-mobility`\n  });\n  pageOfListGatewayNetworks = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/gateway-networks`,\n      urlParams: marshalling.urlParams(\n        [\"dhcp_id\", request.dhcpId],\n        [\"enable_masquerade\", request.enableMasquerade],\n        [\"gateway_id\", request.gatewayId],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"private_network_id\", request.privateNetworkId],\n        [\"status\", request.status]\n      )\n    },\n    marshalling_gen.unmarshalListGatewayNetworksResponse\n  );\n  /**\n   * List Public Gateway connections to Private Networks. List the connections\n   * between Public Gateways and Private Networks (a connection = a\n   * GatewayNetwork). You can choose to filter by `gateway-id` to list all\n   * Private Networks attached to the specified Public Gateway, or by\n   * `private_network_id` to list all Public Gateways attached to the specified\n   * Private Network. Other query parameters are also available. The result is\n   * an array of GatewayNetwork objects, each giving details of the connection\n   * between a given Public Gateway and a given Private Network.\n   *\n   * @param request - The request {@link ListGatewayNetworksRequest}\n   * @returns A Promise of ListGatewayNetworksResponse\n   */\n  listGatewayNetworks = (request = {}) => resourcePaginator.enrichForPagination(\n    \"gatewayNetworks\",\n    this.pageOfListGatewayNetworks,\n    request\n  );\n  /**\n   * Get a Public Gateway connection to a Private Network. Get details of a\n   * given connection between a Public Gateway and a Private Network (this\n   * connection = a GatewayNetwork), specified by its `gateway_network_id`. The\n   * response object contains details of the connection including the IDs of the\n   * Public Gateway and Private Network, the dates the connection was\n   * created/updated and its configuration settings.\n   *\n   * @param request - The request {@link GetGatewayNetworkRequest}\n   * @returns A Promise of GatewayNetwork\n   */\n  getGatewayNetwork = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/gateway-networks/${marshalling.validatePathParam(\"gatewayNetworkId\", request.gatewayNetworkId)}`\n    },\n    marshalling_gen.unmarshalGatewayNetwork\n  );\n  /**\n   * Waits for {@link GatewayNetwork} to be in a final state.\n   *\n   * @param request - The request {@link GetGatewayNetworkRequest}\n   * @param options - The waiting options\n   * @returns A Promise of GatewayNetwork\n   */\n  waitForGatewayNetwork = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(\n      !content_gen.GATEWAY_NETWORK_TRANSIENT_STATUSES.includes(res.status)\n    )),\n    this.getGatewayNetwork,\n    request,\n    options\n  );\n  /**\n   * Attach a Public Gateway to a Private Network. Attach a specific Public\n   * Gateway to a specific Private Network (create a GatewayNetwork). You can\n   * configure parameters for the connection including DHCP settings, whether to\n   * enable masquerade (dynamic NAT), and more.\n   *\n   * @param request - The request {@link CreateGatewayNetworkRequest}\n   * @returns A Promise of GatewayNetwork\n   */\n  createGatewayNetwork = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateGatewayNetworkRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/gateway-networks`\n    },\n    marshalling_gen.unmarshalGatewayNetwork\n  );\n  /**\n   * Update a Public Gateway's connection to a Private Network. Update the\n   * configuration parameters of a connection between a given Public Gateway and\n   * Private Network (the connection = a GatewayNetwork). Updatable parameters\n   * include DHCP settings and whether to enable traffic masquerade (dynamic\n   * NAT).\n   *\n   * @param request - The request {@link UpdateGatewayNetworkRequest}\n   * @returns A Promise of GatewayNetwork\n   */\n  updateGatewayNetwork = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateGatewayNetworkRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/gateway-networks/${marshalling.validatePathParam(\"gatewayNetworkId\", request.gatewayNetworkId)}`\n    },\n    marshalling_gen.unmarshalGatewayNetwork\n  );\n  /**\n   * Detach a Public Gateway from a Private Network. Detach a given Public\n   * Gateway from a given Private Network, i.e. delete a GatewayNetwork\n   * specified by a gateway_network_id.\n   *\n   * @param request - The request {@link DeleteGatewayNetworkRequest}\n   */\n  deleteGatewayNetwork = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/vpc-gw/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/gateway-networks/${marshalling.validatePathParam(\"gatewayNetworkId\", request.gatewayNetworkId)}`,\n    urlParams: marshalling.urlParams([\"cleanup_dhcp\", request.cleanupDhcp])\n  });\n  pageOfListDHCPs = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/dhcps`,\n      urlParams: marshalling.urlParams(\n        [\"address\", request.address],\n        [\"has_address\", request.hasAddress],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId]\n      )\n    },\n    marshalling_gen.unmarshalListDHCPsResponse\n  );\n  /**\n   * List DHCP configurations. List DHCP configurations, optionally filtering by\n   * Organization, Project, Public Gateway IP address or more. The response is\n   * an array of DHCP configuration objects, each identified by a DHCP ID and\n   * containing configuration settings for the assignment of IP addresses to\n   * devices on a Private Network attached to a Public Gateway. Note that the\n   * response does not contain the IDs of any Private Network / Public Gateway\n   * the configuration is attached to. Use the `List Public Gateway connections\n   * to Private Networks` method for that purpose, filtering on DHCP ID.\n   *\n   * @param request - The request {@link ListDHCPsRequest}\n   * @returns A Promise of ListDHCPsResponse\n   */\n  listDHCPs = (request = {}) => resourcePaginator.enrichForPagination(\"dhcps\", this.pageOfListDHCPs, request);\n  /**\n   * Get a DHCP configuration. Get a DHCP configuration object, identified by\n   * its DHCP ID. The response object contains configuration settings for the\n   * assignment of IP addresses to devices on a Private Network attached to a\n   * Public Gateway. Note that the response does not contain the IDs of any\n   * Private Network / Public Gateway the configuration is attached to. Use the\n   * `List Public Gateway connections to Private Networks` method for that\n   * purpose, filtering on DHCP ID.\n   *\n   * @param request - The request {@link GetDHCPRequest}\n   * @returns A Promise of DHCP\n   */\n  getDHCP = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/dhcps/${marshalling.validatePathParam(\"dhcpId\", request.dhcpId)}`\n    },\n    marshalling_gen.unmarshalDHCP\n  );\n  /**\n   * Create a DHCP configuration. Create a new DHCP configuration object,\n   * containing settings for the assignment of IP addresses to devices on a\n   * Private Network attached to a Public Gateway. The response object includes\n   * the ID of the DHCP configuration object. You can use this ID as part of a\n   * call to `Create a Public Gateway connection to a Private Network` or\n   * `Update a Public Gateway connection to a Private Network` to directly apply\n   * this DHCP configuration.\n   *\n   * @param request - The request {@link CreateDHCPRequest}\n   * @returns A Promise of DHCP\n   */\n  createDHCP = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateDHCPRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/dhcps`\n    },\n    marshalling_gen.unmarshalDHCP\n  );\n  /**\n   * Update a DHCP configuration. Update a DHCP configuration object, identified\n   * by its DHCP ID.\n   *\n   * @param request - The request {@link UpdateDHCPRequest}\n   * @returns A Promise of DHCP\n   */\n  updateDHCP = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateDHCPRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/dhcps/${marshalling.validatePathParam(\"dhcpId\", request.dhcpId)}`\n    },\n    marshalling_gen.unmarshalDHCP\n  );\n  /**\n   * Delete a DHCP configuration. Delete a DHCP configuration object, identified\n   * by its DHCP ID. Note that you cannot delete a DHCP configuration object\n   * that is currently being used by a Gateway Network.\n   *\n   * @param request - The request {@link DeleteDHCPRequest}\n   */\n  deleteDHCP = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/vpc-gw/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/dhcps/${marshalling.validatePathParam(\"dhcpId\", request.dhcpId)}`\n  });\n  pageOfListDHCPEntries = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/dhcp-entries`,\n      urlParams: marshalling.urlParams(\n        [\"gateway_network_id\", request.gatewayNetworkId],\n        [\"hostname\", request.hostname],\n        [\"ip_address\", request.ipAddress],\n        [\"mac_address\", request.macAddress],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"type\", request.type]\n      )\n    },\n    marshalling_gen.unmarshalListDHCPEntriesResponse\n  );\n  /**\n   * List DHCP entries. List DHCP entries, whether dynamically assigned and/or\n   * statically reserved. DHCP entries can be filtered by the Gateway Network\n   * they are on, their MAC address, IP address, type or hostname.\n   *\n   * @param request - The request {@link ListDHCPEntriesRequest}\n   * @returns A Promise of ListDHCPEntriesResponse\n   */\n  listDHCPEntries = (request = {}) => resourcePaginator.enrichForPagination(\"dhcpEntries\", this.pageOfListDHCPEntries, request);\n  /**\n   * Get a DHCP entry. Get a DHCP entry, specified by its DHCP entry ID.\n   *\n   * @param request - The request {@link GetDHCPEntryRequest}\n   * @returns A Promise of DHCPEntry\n   */\n  getDHCPEntry = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/dhcp-entries/${marshalling.validatePathParam(\"dhcpEntryId\", request.dhcpEntryId)}`\n    },\n    marshalling_gen.unmarshalDHCPEntry\n  );\n  /**\n   * Create a DHCP entry. Create a static DHCP reservation, specifying the\n   * Gateway Network for the reservation, the MAC address of the target device\n   * and the IP address to assign this device. The response is a DHCP entry\n   * object, confirming the ID and configuration details of the static DHCP\n   * reservation.\n   *\n   * @param request - The request {@link CreateDHCPEntryRequest}\n   * @returns A Promise of DHCPEntry\n   */\n  createDHCPEntry = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateDHCPEntryRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/dhcp-entries`\n    },\n    marshalling_gen.unmarshalDHCPEntry\n  );\n  /**\n   * Update a DHCP entry. Update the IP address for a DHCP entry, specified by\n   * its DHCP entry ID. You can update an existing DHCP entry of any type\n   * (`reservation` (static), `lease` (dynamic) or `unknown`), but in manually\n   * updating the IP address the entry will necessarily be of type `reservation`\n   * after the update.\n   *\n   * @param request - The request {@link UpdateDHCPEntryRequest}\n   * @returns A Promise of DHCPEntry\n   */\n  updateDHCPEntry = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateDHCPEntryRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/dhcp-entries/${marshalling.validatePathParam(\"dhcpEntryId\", request.dhcpEntryId)}`\n    },\n    marshalling_gen.unmarshalDHCPEntry\n  );\n  /**\n   * Set all DHCP reservations on a Gateway Network. Set the list of DHCP\n   * reservations attached to a Gateway Network. Reservations are identified by\n   * their MAC address, and will sync the current DHCP entry list to the given\n   * list, creating, updating or deleting DHCP entries accordingly.\n   *\n   * @param request - The request {@link SetDHCPEntriesRequest}\n   * @returns A Promise of SetDHCPEntriesResponse\n   */\n  setDHCPEntries = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSetDHCPEntriesRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/dhcp-entries`\n    },\n    marshalling_gen.unmarshalSetDHCPEntriesResponse\n  );\n  /**\n   * Delete a DHCP entry. Delete a static DHCP reservation, identified by its\n   * DHCP entry ID. Note that you cannot delete DHCP entries of type `lease`,\n   * these are deleted automatically when their time-to-live expires.\n   *\n   * @param request - The request {@link DeleteDHCPEntryRequest}\n   */\n  deleteDHCPEntry = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/vpc-gw/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/dhcp-entries/${marshalling.validatePathParam(\"dhcpEntryId\", request.dhcpEntryId)}`\n  });\n  pageOfListPATRules = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/pat-rules`,\n      urlParams: marshalling.urlParams(\n        [\"gateway_id\", request.gatewayId],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"private_ip\", request.privateIp],\n        [\"protocol\", request.protocol]\n      )\n    },\n    marshalling_gen.unmarshalListPATRulesResponse\n  );\n  /**\n   * List PAT rules. List PAT rules. You can filter by gateway ID to list all\n   * PAT rules for a particular gateway, or filter for PAT rules targeting a\n   * specific IP address or using a specific protocol.\n   *\n   * @param request - The request {@link ListPATRulesRequest}\n   * @returns A Promise of ListPATRulesResponse\n   */\n  listPATRules = (request = {}) => resourcePaginator.enrichForPagination(\"patRules\", this.pageOfListPATRules, request);\n  /**\n   * Get a PAT rule. Get a PAT rule, specified by its PAT rule ID. The response\n   * object gives full details of the PAT rule, including the Public Gateway it\n   * belongs to and the configuration settings in terms of public / private\n   * ports, private IP and protocol.\n   *\n   * @param request - The request {@link GetPATRuleRequest}\n   * @returns A Promise of PATRule\n   */\n  getPATRule = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/pat-rules/${marshalling.validatePathParam(\"patRuleId\", request.patRuleId)}`\n    },\n    marshalling_gen.unmarshalPATRule\n  );\n  /**\n   * Create a PAT rule. Create a new PAT rule on a specified Public Gateway,\n   * defining the protocol to use, public port to listen on, and private port /\n   * IP address to map to.\n   *\n   * @param request - The request {@link CreatePATRuleRequest}\n   * @returns A Promise of PATRule\n   */\n  createPATRule = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreatePATRuleRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/pat-rules`\n    },\n    marshalling_gen.unmarshalPATRule\n  );\n  /**\n   * Update a PAT rule. Update a PAT rule, specified by its PAT rule ID.\n   * Configuration settings including private/public port, private IP address\n   * and protocol can all be updated.\n   *\n   * @param request - The request {@link UpdatePATRuleRequest}\n   * @returns A Promise of PATRule\n   */\n  updatePATRule = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdatePATRuleRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/pat-rules/${marshalling.validatePathParam(\"patRuleId\", request.patRuleId)}`\n    },\n    marshalling_gen.unmarshalPATRule\n  );\n  /**\n   * Set all PAT rules. Set a definitive list of PAT rules attached to a Public\n   * Gateway. Each rule is identified by its public port and protocol. This will\n   * sync the current PAT rule list on the gateway with the new list, creating,\n   * updating or deleting PAT rules accordingly.\n   *\n   * @param request - The request {@link SetPATRulesRequest}\n   * @returns A Promise of SetPATRulesResponse\n   */\n  setPATRules = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalSetPATRulesRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PUT\",\n      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/pat-rules`\n    },\n    marshalling_gen.unmarshalSetPATRulesResponse\n  );\n  /**\n   * Delete a PAT rule. Delete a PAT rule, identified by its PAT rule ID. This\n   * action is irreversible.\n   *\n   * @param request - The request {@link DeletePATRuleRequest}\n   */\n  deletePATRule = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/vpc-gw/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/pat-rules/${marshalling.validatePathParam(\"patRuleId\", request.patRuleId)}`\n  });\n  /**\n   * List Public Gateway types. List the different Public Gateway commercial\n   * offer types available at Scaleway. The response is an array of objects\n   * describing the name and technical details of each available gateway type.\n   *\n   * @param request - The request {@link ListGatewayTypesRequest}\n   * @returns A Promise of ListGatewayTypesResponse\n   */\n  listGatewayTypes = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/gateway-types`\n    },\n    marshalling_gen.unmarshalListGatewayTypesResponse\n  );\n  pageOfListIPs = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/ips`,\n      urlParams: marshalling.urlParams(\n        [\"is_free\", request.isFree],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId],\n        [\"reverse\", request.reverse],\n        [\"tags\", request.tags]\n      )\n    },\n    marshalling_gen.unmarshalListIPsResponse\n  );\n  /**\n   * List IPs. List Public Gateway flexible IP addresses. A number of filter\n   * options are available for limiting results in the response.\n   *\n   * @param request - The request {@link ListIPsRequest}\n   * @returns A Promise of ListIPsResponse\n   */\n  listIPs = (request = {}) => resourcePaginator.enrichForPagination(\"ips\", this.pageOfListIPs, request);\n  /**\n   * Get an IP. Get details of a Public Gateway flexible IP address, identified\n   * by its IP ID. The response object contains information including which (if\n   * any) Public Gateway using this IP address, the reverse and various other\n   * metadata.\n   *\n   * @param request - The request {@link GetIPRequest}\n   * @returns A Promise of IP\n   */\n  getIP = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/ips/${marshalling.validatePathParam(\"ipId\", request.ipId)}`\n    },\n    marshalling_gen.unmarshalIP\n  );\n  /**\n   * Reserve an IP. Create (reserve) a new flexible IP address that can be used\n   * for a Public Gateway in a specified Scaleway Project.\n   *\n   * @param request - The request {@link CreateIPRequest}\n   * @returns A Promise of IP\n   */\n  createIP = (request = {}) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateIPRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/ips`\n    },\n    marshalling_gen.unmarshalIP\n  );\n  /**\n   * Update an IP. Update details of an existing flexible IP address, including\n   * its tags, reverse and the Public Gateway it is assigned to.\n   *\n   * @param request - The request {@link UpdateIPRequest}\n   * @returns A Promise of IP\n   */\n  updateIP = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateIPRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/ips/${marshalling.validatePathParam(\"ipId\", request.ipId)}`\n    },\n    marshalling_gen.unmarshalIP\n  );\n  /**\n   * Delete an IP. Delete a flexible IP address from your account. This action\n   * is irreversible.\n   *\n   * @param request - The request {@link DeleteIPRequest}\n   */\n  deleteIP = (request) => this.client.fetch({\n    method: \"DELETE\",\n    path: `/vpc-gw/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/ips/${marshalling.validatePathParam(\"ipId\", request.ipId)}`\n  });\n  /**\n   * Refresh a Public Gateway's SSH keys. Refresh the SSH keys of a given Public\n   * Gateway, specified by its gateway ID. This adds any new SSH keys in the\n   * gateway's Scaleway Project to the gateway itself.\n   *\n   * @param request - The request {@link RefreshSSHKeysRequest}\n   * @returns A Promise of Gateway\n   */\n  refreshSSHKeys = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/vpc-gw/v1/zones/${marshalling.validatePathParam(\"zone\", request.zone ?? this.client.settings.defaultZone)}/gateways/${marshalling.validatePathParam(\"gatewayId\", request.gatewayId)}/refresh-ssh-keys`\n    },\n    marshalling_gen.unmarshalGateway\n  );\n}\nexports.API = API;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst GATEWAY_NETWORK_TRANSIENT_STATUSES = [\n  \"attaching\",\n  \"configuring\",\n  \"detaching\"\n];\nconst GATEWAY_TRANSIENT_STATUSES = [\n  \"allocating\",\n  \"configuring\",\n  \"stopping\",\n  \"deleting\"\n];\nexports.GATEWAY_NETWORK_TRANSIENT_STATUSES = GATEWAY_NETWORK_TRANSIENT_STATUSES;\nexports.GATEWAY_TRANSIENT_STATUSES = GATEWAY_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nexports.API = api_gen.API;\nexports.GATEWAY_NETWORK_TRANSIENT_STATUSES = content_gen.GATEWAY_NETWORK_TRANSIENT_STATUSES;\nexports.GATEWAY_TRANSIENT_STATUSES = content_gen.GATEWAY_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst randomName = require(\"@scaleway/random-name\");\nconst json = require(\"../../../helpers/json.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst unmarshalDHCP = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DHCP' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    address: data.address,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    dnsLocalName: data.dns_local_name,\n    dnsSearch: data.dns_search,\n    dnsServersOverride: data.dns_servers_override,\n    enableDynamic: data.enable_dynamic,\n    id: data.id,\n    organizationId: data.organization_id,\n    poolHigh: data.pool_high,\n    poolLow: data.pool_low,\n    projectId: data.project_id,\n    pushDefaultRoute: data.push_default_route,\n    pushDnsServer: data.push_dns_server,\n    rebindTimer: data.rebind_timer,\n    renewTimer: data.renew_timer,\n    subnet: data.subnet,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    validLifetime: data.valid_lifetime,\n    zone: data.zone\n  };\n};\nconst unmarshalIpamConfig = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'IpamConfig' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    ipamIpId: data.ipam_ip_id,\n    pushDefaultRoute: data.push_default_route\n  };\n};\nconst unmarshalGatewayNetwork = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'GatewayNetwork' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    address: data.address,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    dhcp: data.dhcp ? unmarshalDHCP(data.dhcp) : void 0,\n    enableDhcp: data.enable_dhcp,\n    enableMasquerade: data.enable_masquerade,\n    gatewayId: data.gateway_id,\n    id: data.id,\n    ipamConfig: data.ipam_config ? unmarshalIpamConfig(data.ipam_config) : void 0,\n    macAddress: data.mac_address,\n    privateNetworkId: data.private_network_id,\n    status: data.status,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    zone: data.zone\n  };\n};\nconst unmarshalIP = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'IP' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    address: data.address,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    gatewayId: data.gateway_id,\n    id: data.id,\n    organizationId: data.organization_id,\n    projectId: data.project_id,\n    reverse: data.reverse,\n    tags: data.tags,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    zone: data.zone\n  };\n};\nconst unmarshalDHCPEntry = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DHCPEntry' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    gatewayNetworkId: data.gateway_network_id,\n    hostname: data.hostname,\n    id: data.id,\n    ipAddress: data.ip_address,\n    macAddress: data.mac_address,\n    type: data.type,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    zone: data.zone\n  };\n};\nconst unmarshalGatewayType = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'GatewayType' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    bandwidth: data.bandwidth,\n    name: data.name,\n    zone: data.zone\n  };\n};\nconst unmarshalGateway = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Gateway' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    bastionEnabled: data.bastion_enabled,\n    bastionPort: data.bastion_port,\n    canUpgradeTo: data.can_upgrade_to,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    gatewayNetworks: marshalling.unmarshalArrayOfObject(\n      data.gateway_networks,\n      unmarshalGatewayNetwork\n    ),\n    id: data.id,\n    ip: data.ip ? unmarshalIP(data.ip) : void 0,\n    ipMobilityEnabled: data.ip_mobility_enabled,\n    isLegacy: data.is_legacy,\n    name: data.name,\n    organizationId: data.organization_id,\n    projectId: data.project_id,\n    smtpEnabled: data.smtp_enabled,\n    status: data.status,\n    tags: data.tags,\n    type: data.type ? unmarshalGatewayType(data.type) : void 0,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    upstreamDnsServers: data.upstream_dns_servers,\n    version: data.version,\n    zone: data.zone\n  };\n};\nconst unmarshalPATRule = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'PATRule' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    gatewayId: data.gateway_id,\n    id: data.id,\n    privateIp: data.private_ip,\n    privatePort: data.private_port,\n    protocol: data.protocol,\n    publicPort: data.public_port,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    zone: data.zone\n  };\n};\nconst unmarshalListDHCPEntriesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListDHCPEntriesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    dhcpEntries: marshalling.unmarshalArrayOfObject(data.dhcp_entries, unmarshalDHCPEntry),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListDHCPsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListDHCPsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    dhcps: marshalling.unmarshalArrayOfObject(data.dhcps, unmarshalDHCP),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListGatewayNetworksResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListGatewayNetworksResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    gatewayNetworks: marshalling.unmarshalArrayOfObject(\n      data.gateway_networks,\n      unmarshalGatewayNetwork\n    ),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListGatewayTypesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListGatewayTypesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    types: marshalling.unmarshalArrayOfObject(data.types, unmarshalGatewayType)\n  };\n};\nconst unmarshalListGatewaysResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListGatewaysResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    gateways: marshalling.unmarshalArrayOfObject(data.gateways, unmarshalGateway),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListIPsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListIPsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    ips: marshalling.unmarshalArrayOfObject(data.ips, unmarshalIP),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListPATRulesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListPATRulesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    patRules: marshalling.unmarshalArrayOfObject(data.pat_rules, unmarshalPATRule),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalSetDHCPEntriesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SetDHCPEntriesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    dhcpEntries: marshalling.unmarshalArrayOfObject(data.dhcp_entries, unmarshalDHCPEntry)\n  };\n};\nconst unmarshalSetPATRulesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'SetPATRulesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    patRules: marshalling.unmarshalArrayOfObject(data.pat_rules, unmarshalPATRule)\n  };\n};\nconst marshalCreateDHCPRequest = (request, defaults) => ({\n  address: request.address,\n  dns_local_name: request.dnsLocalName,\n  dns_search: request.dnsSearch,\n  dns_servers_override: request.dnsServersOverride,\n  enable_dynamic: request.enableDynamic,\n  pool_high: request.poolHigh,\n  pool_low: request.poolLow,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  push_default_route: request.pushDefaultRoute,\n  push_dns_server: request.pushDnsServer,\n  rebind_timer: request.rebindTimer,\n  renew_timer: request.renewTimer,\n  subnet: request.subnet,\n  valid_lifetime: request.validLifetime\n});\nconst marshalCreateDHCPEntryRequest = (request, defaults) => ({\n  gateway_network_id: request.gatewayNetworkId,\n  ip_address: request.ipAddress,\n  mac_address: request.macAddress\n});\nconst marshalCreateGatewayNetworkRequestIpamConfig = (request, defaults) => ({\n  ipam_ip_id: request.ipamIpId,\n  push_default_route: request.pushDefaultRoute\n});\nconst marshalCreateGatewayNetworkRequest = (request, defaults) => ({\n  enable_dhcp: request.enableDhcp,\n  enable_masquerade: request.enableMasquerade,\n  gateway_id: request.gatewayId,\n  private_network_id: request.privateNetworkId,\n  ...marshalling.resolveOneOf([\n    { param: \"dhcp_id\", value: request.dhcpId },\n    {\n      param: \"dhcp\",\n      value: request.dhcp !== void 0 ? marshalCreateDHCPRequest(request.dhcp, defaults) : void 0\n    },\n    { param: \"address\", value: request.address },\n    {\n      param: \"ipam_config\",\n      value: request.ipamConfig !== void 0 ? marshalCreateGatewayNetworkRequestIpamConfig(\n        request.ipamConfig\n      ) : void 0\n    }\n  ])\n});\nconst marshalCreateGatewayRequest = (request, defaults) => ({\n  bastion_port: request.bastionPort,\n  enable_bastion: request.enableBastion,\n  enable_smtp: request.enableSmtp,\n  ip_id: request.ipId,\n  name: request.name || randomName(\"gw\"),\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  tags: request.tags,\n  type: request.type,\n  upstream_dns_servers: request.upstreamDnsServers\n});\nconst marshalCreateIPRequest = (request, defaults) => ({\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  tags: request.tags\n});\nconst marshalCreatePATRuleRequest = (request, defaults) => ({\n  gateway_id: request.gatewayId,\n  private_ip: request.privateIp,\n  private_port: request.privatePort,\n  protocol: request.protocol,\n  public_port: request.publicPort\n});\nconst marshalSetDHCPEntriesRequestEntry = (request, defaults) => ({\n  ip_address: request.ipAddress,\n  mac_address: request.macAddress\n});\nconst marshalSetDHCPEntriesRequest = (request, defaults) => ({\n  dhcp_entries: request.dhcpEntries !== void 0 ? request.dhcpEntries.map(\n    (elt) => marshalSetDHCPEntriesRequestEntry(elt)\n  ) : void 0,\n  gateway_network_id: request.gatewayNetworkId\n});\nconst marshalSetPATRulesRequestRule = (request, defaults) => ({\n  private_ip: request.privateIp,\n  private_port: request.privatePort,\n  protocol: request.protocol,\n  public_port: request.publicPort\n});\nconst marshalSetPATRulesRequest = (request, defaults) => ({\n  gateway_id: request.gatewayId,\n  pat_rules: request.patRules.map(\n    (elt) => marshalSetPATRulesRequestRule(elt)\n  )\n});\nconst marshalUpdateDHCPEntryRequest = (request, defaults) => ({\n  ip_address: request.ipAddress\n});\nconst marshalUpdateDHCPRequest = (request, defaults) => ({\n  address: request.address,\n  dns_local_name: request.dnsLocalName,\n  dns_search: request.dnsSearch,\n  dns_servers_override: request.dnsServersOverride,\n  enable_dynamic: request.enableDynamic,\n  pool_high: request.poolHigh,\n  pool_low: request.poolLow,\n  push_default_route: request.pushDefaultRoute,\n  push_dns_server: request.pushDnsServer,\n  rebind_timer: request.rebindTimer,\n  renew_timer: request.renewTimer,\n  subnet: request.subnet,\n  valid_lifetime: request.validLifetime\n});\nconst marshalUpdateGatewayNetworkRequestIpamConfig = (request, defaults) => ({\n  ipam_ip_id: request.ipamIpId,\n  push_default_route: request.pushDefaultRoute\n});\nconst marshalUpdateGatewayNetworkRequest = (request, defaults) => ({\n  enable_dhcp: request.enableDhcp,\n  enable_masquerade: request.enableMasquerade,\n  ...marshalling.resolveOneOf([\n    { param: \"dhcp_id\", value: request.dhcpId },\n    { param: \"address\", value: request.address },\n    {\n      param: \"ipam_config\",\n      value: request.ipamConfig !== void 0 ? marshalUpdateGatewayNetworkRequestIpamConfig(\n        request.ipamConfig\n      ) : void 0\n    }\n  ])\n});\nconst marshalUpdateGatewayRequest = (request, defaults) => ({\n  bastion_port: request.bastionPort,\n  enable_bastion: request.enableBastion,\n  enable_smtp: request.enableSmtp,\n  name: request.name,\n  tags: request.tags,\n  upstream_dns_servers: request.upstreamDnsServers\n});\nconst marshalUpdateIPRequest = (request, defaults) => ({\n  gateway_id: request.gatewayId,\n  reverse: request.reverse,\n  tags: request.tags\n});\nconst marshalUpdatePATRuleRequest = (request, defaults) => ({\n  private_ip: request.privateIp,\n  private_port: request.privatePort,\n  protocol: request.protocol,\n  public_port: request.publicPort\n});\nconst marshalUpgradeGatewayRequest = (request, defaults) => ({\n  type: request.type\n});\nexports.marshalCreateDHCPEntryRequest = marshalCreateDHCPEntryRequest;\nexports.marshalCreateDHCPRequest = marshalCreateDHCPRequest;\nexports.marshalCreateGatewayNetworkRequest = marshalCreateGatewayNetworkRequest;\nexports.marshalCreateGatewayRequest = marshalCreateGatewayRequest;\nexports.marshalCreateIPRequest = marshalCreateIPRequest;\nexports.marshalCreatePATRuleRequest = marshalCreatePATRuleRequest;\nexports.marshalSetDHCPEntriesRequest = marshalSetDHCPEntriesRequest;\nexports.marshalSetPATRulesRequest = marshalSetPATRulesRequest;\nexports.marshalUpdateDHCPEntryRequest = marshalUpdateDHCPEntryRequest;\nexports.marshalUpdateDHCPRequest = marshalUpdateDHCPRequest;\nexports.marshalUpdateGatewayNetworkRequest = marshalUpdateGatewayNetworkRequest;\nexports.marshalUpdateGatewayRequest = marshalUpdateGatewayRequest;\nexports.marshalUpdateIPRequest = marshalUpdateIPRequest;\nexports.marshalUpdatePATRuleRequest = marshalUpdatePATRuleRequest;\nexports.marshalUpgradeGatewayRequest = marshalUpgradeGatewayRequest;\nexports.unmarshalDHCP = unmarshalDHCP;\nexports.unmarshalDHCPEntry = unmarshalDHCPEntry;\nexports.unmarshalGateway = unmarshalGateway;\nexports.unmarshalGatewayNetwork = unmarshalGatewayNetwork;\nexports.unmarshalIP = unmarshalIP;\nexports.unmarshalListDHCPEntriesResponse = unmarshalListDHCPEntriesResponse;\nexports.unmarshalListDHCPsResponse = unmarshalListDHCPsResponse;\nexports.unmarshalListGatewayNetworksResponse = unmarshalListGatewayNetworksResponse;\nexports.unmarshalListGatewayTypesResponse = unmarshalListGatewayTypesResponse;\nexports.unmarshalListGatewaysResponse = unmarshalListGatewaysResponse;\nexports.unmarshalListIPsResponse = unmarshalListIPsResponse;\nexports.unmarshalListPATRulesResponse = unmarshalListPATRulesResponse;\nexports.unmarshalPATRule = unmarshalPATRule;\nexports.unmarshalSetDHCPEntriesResponse = unmarshalSetDHCPEntriesResponse;\nexports.unmarshalSetPATRulesResponse = unmarshalSetPATRulesResponse;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index_gen = require(\"./v1/index.gen.cjs\");\nconst index_gen$1 = require(\"./v1alpha1/index.gen.cjs\");\nexports.v1 = index_gen;\nexports.v1alpha1 = index_gen$1;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst intervalRetrier = require(\"../../../internal/async/interval-retrier.cjs\");\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass ControlPanelAPI extends api.API {\n  /** Lists the available regions of the API. */\n  static LOCALITIES = [\"fr-par\", \"nl-ams\"];\n  pageOfListControlPanels = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/webhosting/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/control-panels`,\n      urlParams: marshalling.urlParams(\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListControlPanelsResponse\n  );\n  /**\n   * \"List the control panels type: cpanel or plesk.\".\n   *\n   * @param request - The request {@link ControlPanelApiListControlPanelsRequest}\n   * @returns A Promise of ListControlPanelsResponse\n   */\n  listControlPanels = (request = {}) => resourcePaginator.enrichForPagination(\"controlPanels\", this.pageOfListControlPanels, request);\n}\nclass DatabaseAPI extends api.API {\n  /** Lists the available regions of the API. */\n  static LOCALITIES = [\"fr-par\", \"nl-ams\", \"pl-waw\"];\n  /**\n   * \"Create a new database within your hosting plan\".\n   *\n   * @param request - The request {@link DatabaseApiCreateDatabaseRequest}\n   * @returns A Promise of Database\n   */\n  createDatabase = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalDatabaseApiCreateDatabaseRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/webhosting/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hostings/${marshalling.validatePathParam(\"hostingId\", request.hostingId)}/databases`\n    },\n    marshalling_gen.unmarshalDatabase\n  );\n  pageOfListDatabases = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/webhosting/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hostings/${marshalling.validatePathParam(\"hostingId\", request.hostingId)}/databases`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListDatabasesResponse\n  );\n  /**\n   * \"List all databases within your hosting plan\".\n   *\n   * @param request - The request {@link DatabaseApiListDatabasesRequest}\n   * @returns A Promise of ListDatabasesResponse\n   */\n  listDatabases = (request) => resourcePaginator.enrichForPagination(\"databases\", this.pageOfListDatabases, request);\n  /**\n   * \"Get details of a database within your hosting plan\".\n   *\n   * @param request - The request {@link DatabaseApiGetDatabaseRequest}\n   * @returns A Promise of Database\n   */\n  getDatabase = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/webhosting/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hostings/${marshalling.validatePathParam(\"hostingId\", request.hostingId)}/databases/${marshalling.validatePathParam(\"databaseName\", request.databaseName)}`\n    },\n    marshalling_gen.unmarshalDatabase\n  );\n  /**\n   * \"Delete a database within your hosting plan\".\n   *\n   * @param request - The request {@link DatabaseApiDeleteDatabaseRequest}\n   * @returns A Promise of Database\n   */\n  deleteDatabase = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/webhosting/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hostings/${marshalling.validatePathParam(\"hostingId\", request.hostingId)}/databases/${marshalling.validatePathParam(\"databaseName\", request.databaseName)}`\n    },\n    marshalling_gen.unmarshalDatabase\n  );\n  /**\n   * \"Create a new database user\".\n   *\n   * @param request - The request {@link DatabaseApiCreateDatabaseUserRequest}\n   * @returns A Promise of DatabaseUser\n   */\n  createDatabaseUser = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalDatabaseApiCreateDatabaseUserRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/webhosting/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hostings/${marshalling.validatePathParam(\"hostingId\", request.hostingId)}/databases-users`\n    },\n    marshalling_gen.unmarshalDatabaseUser\n  );\n  pageOfListDatabaseUsers = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/webhosting/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hostings/${marshalling.validatePathParam(\"hostingId\", request.hostingId)}/database-users`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListDatabaseUsersResponse\n  );\n  /**\n   * \"List all database users\".\n   *\n   * @param request - The request {@link DatabaseApiListDatabaseUsersRequest}\n   * @returns A Promise of ListDatabaseUsersResponse\n   */\n  listDatabaseUsers = (request) => resourcePaginator.enrichForPagination(\"users\", this.pageOfListDatabaseUsers, request);\n  /**\n   * \"Get details of a database user\".\n   *\n   * @param request - The request {@link DatabaseApiGetDatabaseUserRequest}\n   * @returns A Promise of DatabaseUser\n   */\n  getDatabaseUser = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/webhosting/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hostings/${marshalling.validatePathParam(\"hostingId\", request.hostingId)}/databases-users/${marshalling.validatePathParam(\"username\", request.username)}`\n    },\n    marshalling_gen.unmarshalDatabaseUser\n  );\n  /**\n   * \"Delete a database user\".\n   *\n   * @param request - The request {@link DatabaseApiDeleteDatabaseUserRequest}\n   * @returns A Promise of DatabaseUser\n   */\n  deleteDatabaseUser = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/webhosting/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hostings/${marshalling.validatePathParam(\"hostingId\", request.hostingId)}/database-users/${marshalling.validatePathParam(\"username\", request.username)}`\n    },\n    marshalling_gen.unmarshalDatabaseUser\n  );\n  /**\n   * \"Change the password of a database user\".\n   *\n   * @param request - The request\n   *   {@link DatabaseApiChangeDatabaseUserPasswordRequest}\n   * @returns A Promise of DatabaseUser\n   */\n  changeDatabaseUserPassword = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalDatabaseApiChangeDatabaseUserPasswordRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/webhosting/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hostings/${marshalling.validatePathParam(\"hostingId\", request.hostingId)}/databases-users/${marshalling.validatePathParam(\"username\", request.username)}/change-password`\n    },\n    marshalling_gen.unmarshalDatabaseUser\n  );\n  /**\n   * \"Assign a database user to a database\".\n   *\n   * @param request - The request {@link DatabaseApiAssignDatabaseUserRequest}\n   * @returns A Promise of DatabaseUser\n   */\n  assignDatabaseUser = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalDatabaseApiAssignDatabaseUserRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/webhosting/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hostings/${marshalling.validatePathParam(\"hostingId\", request.hostingId)}/databases/${marshalling.validatePathParam(\"databaseName\", request.databaseName)}/assign-user`\n    },\n    marshalling_gen.unmarshalDatabaseUser\n  );\n  /**\n   * \"Unassign a database user from a database\".\n   *\n   * @param request - The request {@link DatabaseApiUnassignDatabaseUserRequest}\n   * @returns A Promise of DatabaseUser\n   */\n  unassignDatabaseUser = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalDatabaseApiUnassignDatabaseUserRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/webhosting/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hostings/${marshalling.validatePathParam(\"hostingId\", request.hostingId)}/databases/${marshalling.validatePathParam(\"databaseName\", request.databaseName)}/unassign-user`\n    },\n    marshalling_gen.unmarshalDatabaseUser\n  );\n}\nclass OfferAPI extends api.API {\n  /** Lists the available regions of the API. */\n  static LOCALITIES = [\"fr-par\", \"nl-ams\", \"pl-waw\"];\n  pageOfListOffers = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/webhosting/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/offers`,\n      urlParams: marshalling.urlParams(\n        [\"control_panels\", request.controlPanels],\n        [\"hosting_id\", request.hostingId],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListOffersResponse\n  );\n  /**\n   * List all available hosting offers along with their specific options.. List\n   * all available hosting offers along with their specific options.\n   *\n   * @param request - The request {@link OfferApiListOffersRequest}\n   * @returns A Promise of ListOffersResponse\n   */\n  listOffers = (request = {}) => resourcePaginator.enrichForPagination(\"offers\", this.pageOfListOffers, request);\n}\nclass HostingAPI extends api.API {\n  /** Lists the available regions of the API. */\n  static LOCALITIES = [\"fr-par\", \"nl-ams\"];\n  /**\n   * Order a Web Hosting plan. Order a Web Hosting plan, specifying the offer\n   * type required via the `offer_id` parameter.\n   *\n   * @param request - The request {@link HostingApiCreateHostingRequest}\n   * @returns A Promise of Hosting\n   */\n  createHosting = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalHostingApiCreateHostingRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/webhosting/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hostings`\n    },\n    marshalling_gen.unmarshalHosting\n  );\n  pageOfListHostings = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/webhosting/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hostings`,\n      urlParams: marshalling.urlParams(\n        [\"control_panels\", request.controlPanels],\n        [\"domain\", request.domain],\n        [\"order_by\", request.orderBy],\n        [\n          \"organization_id\",\n          request.organizationId ?? this.client.settings.defaultOrganizationId\n        ],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\n          \"project_id\",\n          request.projectId ?? this.client.settings.defaultProjectId\n        ],\n        [\"statuses\", request.statuses],\n        [\"tags\", request.tags]\n      )\n    },\n    marshalling_gen.unmarshalListHostingsResponse\n  );\n  /**\n   * List all Web Hosting plans. List all of your existing Web Hosting plans.\n   * Various filters are available to limit the results, including filtering by\n   * domain, status, tag and Project ID.\n   *\n   * @param request - The request {@link HostingApiListHostingsRequest}\n   * @returns A Promise of ListHostingsResponse\n   */\n  listHostings = (request = {}) => resourcePaginator.enrichForPagination(\"hostings\", this.pageOfListHostings, request);\n  /**\n   * Get a Web Hosting plan. Get the details of one of your existing Web Hosting\n   * plans, specified by its `hosting_id`.\n   *\n   * @param request - The request {@link HostingApiGetHostingRequest}\n   * @returns A Promise of Hosting\n   */\n  getHosting = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/webhosting/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hostings/${marshalling.validatePathParam(\"hostingId\", request.hostingId)}`\n    },\n    marshalling_gen.unmarshalHosting\n  );\n  /**\n   * Waits for {@link Hosting} to be in a final state.\n   *\n   * @param request - The request {@link HostingApiGetHostingRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Hosting\n   */\n  waitForHosting = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.HOSTING_TRANSIENT_STATUSES.includes(res.status))),\n    this.getHosting,\n    request,\n    options\n  );\n  /**\n   * Update a Web Hosting plan. Update the details of one of your existing Web\n   * Hosting plans, specified by its `hosting_id`. You can update parameters\n   * including the contact email address, tags, options and offer.\n   *\n   * @param request - The request {@link HostingApiUpdateHostingRequest}\n   * @returns A Promise of Hosting\n   */\n  updateHosting = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalHostingApiUpdateHostingRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/webhosting/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hostings/${marshalling.validatePathParam(\"hostingId\", request.hostingId)}`\n    },\n    marshalling_gen.unmarshalHosting\n  );\n  /**\n   * Delete a Web Hosting plan. Delete a Web Hosting plan, specified by its\n   * `hosting_id`. Note that deletion is not immediate: it will take place at\n   * the end of the calendar month, after which time your Web Hosting plan and\n   * all its data (files and emails) will be irreversibly lost.\n   *\n   * @param request - The request {@link HostingApiDeleteHostingRequest}\n   * @returns A Promise of Hosting\n   */\n  deleteHosting = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/webhosting/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hostings/${marshalling.validatePathParam(\"hostingId\", request.hostingId)}`\n    },\n    marshalling_gen.unmarshalHosting\n  );\n  /**\n   * Create a user session.\n   *\n   * @param request - The request {@link HostingApiCreateSessionRequest}\n   * @returns A Promise of Session\n   */\n  createSession = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/webhosting/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hostings/${marshalling.validatePathParam(\"hostingId\", request.hostingId)}/sessions`\n    },\n    marshalling_gen.unmarshalSession\n  );\n  /**\n   * Reset a Web Hosting plan password.\n   *\n   * @param request - The request {@link HostingApiResetHostingPasswordRequest}\n   * @returns A Promise of ResetHostingPasswordResponse\n   */\n  resetHostingPassword = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/webhosting/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hostings/${marshalling.validatePathParam(\"hostingId\", request.hostingId)}/reset-password`\n    },\n    marshalling_gen.unmarshalResetHostingPasswordResponse\n  );\n}\nclass FtpAccountAPI extends api.API {\n  /** Lists the available regions of the API. */\n  static LOCALITIES = [\"fr-par\", \"nl-ams\", \"pl-waw\"];\n  /**\n   * Create a new FTP account within your hosting plan.. Create a new FTP\n   * account within your hosting plan.\n   *\n   * @param request - The request {@link FtpAccountApiCreateFtpAccountRequest}\n   * @returns A Promise of FtpAccount\n   */\n  createFtpAccount = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalFtpAccountApiCreateFtpAccountRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/webhosting/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hostings/${marshalling.validatePathParam(\"hostingId\", request.hostingId)}/ftp-accounts`\n    },\n    marshalling_gen.unmarshalFtpAccount\n  );\n  pageOfListFtpAccounts = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/webhosting/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hostings/${marshalling.validatePathParam(\"hostingId\", request.hostingId)}/ftp-accounts`,\n      urlParams: marshalling.urlParams(\n        [\"domain\", request.domain],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListFtpAccountsResponse\n  );\n  /**\n   * List all FTP accounts within your hosting plan.. List all FTP accounts\n   * within your hosting plan.\n   *\n   * @param request - The request {@link FtpAccountApiListFtpAccountsRequest}\n   * @returns A Promise of ListFtpAccountsResponse\n   */\n  listFtpAccounts = (request) => resourcePaginator.enrichForPagination(\"ftpAccounts\", this.pageOfListFtpAccounts, request);\n  /**\n   * Delete a specific FTP account within your hosting plan.. Delete a specific\n   * FTP account within your hosting plan.\n   *\n   * @param request - The request {@link FtpAccountApiRemoveFtpAccountRequest}\n   * @returns A Promise of FtpAccount\n   */\n  removeFtpAccount = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/webhosting/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hostings/${marshalling.validatePathParam(\"hostingId\", request.hostingId)}/ftp-accounts/${marshalling.validatePathParam(\"username\", request.username)}`\n    },\n    marshalling_gen.unmarshalFtpAccount\n  );\n  changeFtpAccountPassword = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalFtpAccountApiChangeFtpAccountPasswordRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/webhosting/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hostings/${marshalling.validatePathParam(\"hostingId\", request.hostingId)}/ftp-accounts/${marshalling.validatePathParam(\"username\", request.username)}/change-password`\n    },\n    marshalling_gen.unmarshalFtpAccount\n  );\n}\nclass MailAccountAPI extends api.API {\n  /** Lists the available regions of the API. */\n  static LOCALITIES = [\"fr-par\", \"nl-ams\", \"pl-waw\"];\n  /**\n   * Create a new mail account within your hosting plan.. Create a new mail\n   * account within your hosting plan.\n   *\n   * @param request - The request {@link MailAccountApiCreateMailAccountRequest}\n   * @returns A Promise of MailAccount\n   */\n  createMailAccount = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalMailAccountApiCreateMailAccountRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/webhosting/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hostings/${marshalling.validatePathParam(\"hostingId\", request.hostingId)}/mail-accounts`\n    },\n    marshalling_gen.unmarshalMailAccount\n  );\n  pageOfListMailAccounts = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/webhosting/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hostings/${marshalling.validatePathParam(\"hostingId\", request.hostingId)}/mail-accounts`,\n      urlParams: marshalling.urlParams(\n        [\"domain\", request.domain],\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListMailAccountsResponse\n  );\n  /**\n   * List all mail accounts within your hosting plan.. List all mail accounts\n   * within your hosting plan.\n   *\n   * @param request - The request {@link MailAccountApiListMailAccountsRequest}\n   * @returns A Promise of ListMailAccountsResponse\n   */\n  listMailAccounts = (request) => resourcePaginator.enrichForPagination(\"mailAccounts\", this.pageOfListMailAccounts, request);\n  /**\n   * Delete a mail account within your hosting plan.. Delete a mail account\n   * within your hosting plan.\n   *\n   * @param request - The request {@link MailAccountApiRemoveMailAccountRequest}\n   * @returns A Promise of MailAccount\n   */\n  removeMailAccount = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalMailAccountApiRemoveMailAccountRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/webhosting/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hostings/${marshalling.validatePathParam(\"hostingId\", request.hostingId)}/remove-mail-account`\n    },\n    marshalling_gen.unmarshalMailAccount\n  );\n  /**\n   * Update the password of a mail account within your hosting plan.. Update the\n   * password of a mail account within your hosting plan.\n   *\n   * @param request - The request\n   *   {@link MailAccountApiChangeMailAccountPasswordRequest}\n   * @returns A Promise of MailAccount\n   */\n  changeMailAccountPassword = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalMailAccountApiChangeMailAccountPasswordRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/webhosting/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hostings/${marshalling.validatePathParam(\"hostingId\", request.hostingId)}/change-mail-password`\n    },\n    marshalling_gen.unmarshalMailAccount\n  );\n}\nclass WebsiteAPI extends api.API {\n  /** Lists the available regions of the API. */\n  static LOCALITIES = [\"fr-par\", \"nl-ams\", \"pl-waw\"];\n  pageOfListWebsites = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/webhosting/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hostings/${marshalling.validatePathParam(\"hostingId\", request.hostingId)}/websites`,\n      urlParams: marshalling.urlParams(\n        [\"order_by\", request.orderBy],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListWebsitesResponse\n  );\n  /**\n   * List all websites for a specific hosting.. List all websites for a specific\n   * hosting.\n   *\n   * @param request - The request {@link WebsiteApiListWebsitesRequest}\n   * @returns A Promise of ListWebsitesResponse\n   */\n  listWebsites = (request) => resourcePaginator.enrichForPagination(\"websites\", this.pageOfListWebsites, request);\n}\nexports.ControlPanelAPI = ControlPanelAPI;\nexports.DatabaseAPI = DatabaseAPI;\nexports.FtpAccountAPI = FtpAccountAPI;\nexports.HostingAPI = HostingAPI;\nexports.MailAccountAPI = MailAccountAPI;\nexports.OfferAPI = OfferAPI;\nexports.WebsiteAPI = WebsiteAPI;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst HOSTING_TRANSIENT_STATUSES = [\n  \"delivering\",\n  \"deleting\",\n  \"migrating\"\n];\nconst HOSTING_SUMMARY_TRANSIENT_STATUSES = [\n  \"delivering\",\n  \"deleting\",\n  \"migrating\"\n];\nexports.HOSTING_SUMMARY_TRANSIENT_STATUSES = HOSTING_SUMMARY_TRANSIENT_STATUSES;\nexports.HOSTING_TRANSIENT_STATUSES = HOSTING_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst validationRules_gen = require(\"./validation-rules.gen.cjs\");\nexports.ControlPanelAPI = api_gen.ControlPanelAPI;\nexports.DatabaseAPI = api_gen.DatabaseAPI;\nexports.FtpAccountAPI = api_gen.FtpAccountAPI;\nexports.HostingAPI = api_gen.HostingAPI;\nexports.MailAccountAPI = api_gen.MailAccountAPI;\nexports.OfferAPI = api_gen.OfferAPI;\nexports.WebsiteAPI = api_gen.WebsiteAPI;\nexports.HOSTING_SUMMARY_TRANSIENT_STATUSES = content_gen.HOSTING_SUMMARY_TRANSIENT_STATUSES;\nexports.HOSTING_TRANSIENT_STATUSES = content_gen.HOSTING_TRANSIENT_STATUSES;\nexports.ValidationRules = validationRules_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst json = require(\"../../../helpers/json.cjs\");\nconst customMarshalling = require(\"../../../scw/custom-marshalling.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nconst unmarshalDatabaseUser = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DatabaseUser' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    databases: data.databases,\n    username: data.username\n  };\n};\nconst unmarshalDatabase = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Database' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    databaseName: data.database_name,\n    users: data.users\n  };\n};\nconst unmarshalFtpAccount = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'FtpAccount' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    path: data.path,\n    username: data.username\n  };\n};\nconst unmarshalMailAccount = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'MailAccount' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    domain: data.domain,\n    username: data.username\n  };\n};\nconst unmarshalHostingCpanelUrls = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'HostingCpanelUrls' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    dashboard: data.dashboard,\n    webmail: data.webmail\n  };\n};\nconst unmarshalHostingOption = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'HostingOption' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    id: data.id,\n    name: data.name,\n    quantity: data.quantity\n  };\n};\nconst unmarshalHosting = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Hosting' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    contactEmail: data.contact_email,\n    controlPanelName: data.control_panel_name,\n    cpanelUrls: data.cpanel_urls ? unmarshalHostingCpanelUrls(data.cpanel_urls) : void 0,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    dnsStatus: data.dns_status,\n    domain: data.domain,\n    id: data.id,\n    ipv4: data.ipv4,\n    ipv6: data.ipv6,\n    offerEndOfLife: data.offer_end_of_life,\n    offerId: data.offer_id,\n    offerName: data.offer_name,\n    oneTimePassword: data.one_time_password,\n    options: marshalling.unmarshalArrayOfObject(data.options, unmarshalHostingOption),\n    platformGroup: data.platform_group,\n    platformHostname: data.platform_hostname,\n    platformNumber: data.platform_number,\n    projectId: data.project_id,\n    protected: data.protected,\n    region: data.region,\n    status: data.status,\n    tags: data.tags,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    username: data.username\n  };\n};\nconst unmarshalControlPanel = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ControlPanel' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    available: data.available,\n    availableLanguages: data.available_languages,\n    logoUrl: data.logo_url,\n    name: data.name\n  };\n};\nconst unmarshalListControlPanelsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListControlPanelsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    controlPanels: marshalling.unmarshalArrayOfObject(\n      data.control_panels,\n      unmarshalControlPanel\n    ),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListDatabaseUsersResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListDatabaseUsersResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    totalCount: data.total_count,\n    users: marshalling.unmarshalArrayOfObject(data.users, unmarshalDatabaseUser)\n  };\n};\nconst unmarshalListDatabasesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListDatabasesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    databases: marshalling.unmarshalArrayOfObject(data.databases, unmarshalDatabase),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListFtpAccountsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListFtpAccountsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    ftpAccounts: marshalling.unmarshalArrayOfObject(data.ftp_accounts, unmarshalFtpAccount),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalHostingSummary = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'HostingSummary' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    domain: data.domain,\n    id: data.id,\n    projectId: data.project_id,\n    protected: data.protected,\n    region: data.region,\n    status: data.status,\n    updatedAt: marshalling.unmarshalDate(data.updated_at)\n  };\n};\nconst unmarshalListHostingsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListHostingsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    hostings: marshalling.unmarshalArrayOfObject(data.hostings, unmarshalHostingSummary),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListMailAccountsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListMailAccountsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    mailAccounts: marshalling.unmarshalArrayOfObject(\n      data.mail_accounts,\n      unmarshalMailAccount\n    ),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalOfferOption = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'OfferOption' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    billingOperationPath: data.billing_operation_path,\n    currentValue: data.current_value,\n    id: data.id,\n    maxValue: data.max_value,\n    minValue: data.min_value,\n    name: data.name,\n    quotaWarning: data.quota_warning\n  };\n};\nconst unmarshalOffer = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Offer' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    available: data.available,\n    billingOperationPath: data.billing_operation_path,\n    controlPanelName: data.control_panel_name,\n    endOfLife: data.end_of_life,\n    id: data.id,\n    options: marshalling.unmarshalArrayOfObject(data.options, unmarshalOfferOption),\n    price: data.price ? customMarshalling.unmarshalMoney(data.price) : void 0\n  };\n};\nconst unmarshalListOffersResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListOffersResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    offers: marshalling.unmarshalArrayOfObject(data.offers, unmarshalOffer),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalWebsite = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Website' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    domain: data.domain,\n    path: data.path,\n    sslStatus: data.ssl_status\n  };\n};\nconst unmarshalListWebsitesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListWebsitesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    totalCount: data.total_count,\n    websites: marshalling.unmarshalArrayOfObject(data.websites, unmarshalWebsite)\n  };\n};\nconst unmarshalResetHostingPasswordResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ResetHostingPasswordResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    oneTimePassword: data.one_time_password\n  };\n};\nconst unmarshalSession = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Session' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    url: data.url\n  };\n};\nconst marshalDatabaseApiAssignDatabaseUserRequest = (request, defaults) => ({\n  username: request.username\n});\nconst marshalDatabaseApiChangeDatabaseUserPasswordRequest = (request, defaults) => ({\n  password: request.password\n});\nconst marshalDatabaseApiCreateDatabaseRequest = (request, defaults) => ({\n  database_name: request.databaseName\n});\nconst marshalDatabaseApiCreateDatabaseUserRequest = (request, defaults) => ({\n  password: request.password,\n  username: request.username\n});\nconst marshalDatabaseApiUnassignDatabaseUserRequest = (request, defaults) => ({\n  username: request.username\n});\nconst marshalFtpAccountApiChangeFtpAccountPasswordRequest = (request, defaults) => ({\n  password: request.password\n});\nconst marshalFtpAccountApiCreateFtpAccountRequest = (request, defaults) => ({\n  password: request.password,\n  path: request.path,\n  username: request.username\n});\nconst marshalCreateHostingRequestDomainConfiguration = (request, defaults) => ({\n  update_all_records: request.updateAllRecords,\n  update_mail_record: request.updateMailRecord,\n  update_nameservers: request.updateNameservers,\n  update_web_record: request.updateWebRecord\n});\nconst marshalOfferOptionRequest = (request, defaults) => ({\n  id: request.id,\n  quantity: request.quantity\n});\nconst marshalHostingApiCreateHostingRequest = (request, defaults) => ({\n  domain: request.domain,\n  domain_configuration: request.domainConfiguration !== void 0 ? marshalCreateHostingRequestDomainConfiguration(\n    request.domainConfiguration\n  ) : void 0,\n  email: request.email,\n  language: request.language,\n  offer_id: request.offerId,\n  offer_options: request.offerOptions !== void 0 ? request.offerOptions.map(\n    (elt) => marshalOfferOptionRequest(elt)\n  ) : void 0,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  skip_welcome_email: request.skipWelcomeEmail,\n  tags: request.tags\n});\nconst marshalHostingApiUpdateHostingRequest = (request, defaults) => ({\n  email: request.email,\n  offer_id: request.offerId,\n  offer_options: request.offerOptions !== void 0 ? request.offerOptions.map(\n    (elt) => marshalOfferOptionRequest(elt)\n  ) : void 0,\n  protected: request.protected,\n  tags: request.tags\n});\nconst marshalMailAccountApiChangeMailAccountPasswordRequest = (request, defaults) => ({\n  domain: request.domain,\n  password: request.password,\n  username: request.username\n});\nconst marshalMailAccountApiCreateMailAccountRequest = (request, defaults) => ({\n  domain: request.domain,\n  password: request.password,\n  username: request.username\n});\nconst marshalMailAccountApiRemoveMailAccountRequest = (request, defaults) => ({\n  domain: request.domain,\n  username: request.username\n});\nexports.marshalDatabaseApiAssignDatabaseUserRequest = marshalDatabaseApiAssignDatabaseUserRequest;\nexports.marshalDatabaseApiChangeDatabaseUserPasswordRequest = marshalDatabaseApiChangeDatabaseUserPasswordRequest;\nexports.marshalDatabaseApiCreateDatabaseRequest = marshalDatabaseApiCreateDatabaseRequest;\nexports.marshalDatabaseApiCreateDatabaseUserRequest = marshalDatabaseApiCreateDatabaseUserRequest;\nexports.marshalDatabaseApiUnassignDatabaseUserRequest = marshalDatabaseApiUnassignDatabaseUserRequest;\nexports.marshalFtpAccountApiChangeFtpAccountPasswordRequest = marshalFtpAccountApiChangeFtpAccountPasswordRequest;\nexports.marshalFtpAccountApiCreateFtpAccountRequest = marshalFtpAccountApiCreateFtpAccountRequest;\nexports.marshalHostingApiCreateHostingRequest = marshalHostingApiCreateHostingRequest;\nexports.marshalHostingApiUpdateHostingRequest = marshalHostingApiUpdateHostingRequest;\nexports.marshalMailAccountApiChangeMailAccountPasswordRequest = marshalMailAccountApiChangeMailAccountPasswordRequest;\nexports.marshalMailAccountApiCreateMailAccountRequest = marshalMailAccountApiCreateMailAccountRequest;\nexports.marshalMailAccountApiRemoveMailAccountRequest = marshalMailAccountApiRemoveMailAccountRequest;\nexports.unmarshalDatabase = unmarshalDatabase;\nexports.unmarshalDatabaseUser = unmarshalDatabaseUser;\nexports.unmarshalFtpAccount = unmarshalFtpAccount;\nexports.unmarshalHosting = unmarshalHosting;\nexports.unmarshalListControlPanelsResponse = unmarshalListControlPanelsResponse;\nexports.unmarshalListDatabaseUsersResponse = unmarshalListDatabaseUsersResponse;\nexports.unmarshalListDatabasesResponse = unmarshalListDatabasesResponse;\nexports.unmarshalListFtpAccountsResponse = unmarshalListFtpAccountsResponse;\nexports.unmarshalListHostingsResponse = unmarshalListHostingsResponse;\nexports.unmarshalListMailAccountsResponse = unmarshalListMailAccountsResponse;\nexports.unmarshalListOffersResponse = unmarshalListOffersResponse;\nexports.unmarshalListWebsitesResponse = unmarshalListWebsitesResponse;\nexports.unmarshalMailAccount = unmarshalMailAccount;\nexports.unmarshalResetHostingPasswordResponse = unmarshalResetHostingPasswordResponse;\nexports.unmarshalSession = unmarshalSession;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst ControlPanelApiListControlPanelsRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nconst DatabaseApiListDatabaseUsersRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nconst DatabaseApiListDatabasesRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nconst FtpAccountApiListFtpAccountsRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nconst HostingApiListHostingsRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nconst MailAccountApiListMailAccountsRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nconst OfferApiListOffersRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nconst WebsiteApiListWebsitesRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nexports.ControlPanelApiListControlPanelsRequest = ControlPanelApiListControlPanelsRequest;\nexports.DatabaseApiListDatabaseUsersRequest = DatabaseApiListDatabaseUsersRequest;\nexports.DatabaseApiListDatabasesRequest = DatabaseApiListDatabasesRequest;\nexports.FtpAccountApiListFtpAccountsRequest = FtpAccountApiListFtpAccountsRequest;\nexports.HostingApiListHostingsRequest = HostingApiListHostingsRequest;\nexports.MailAccountApiListMailAccountsRequest = MailAccountApiListMailAccountsRequest;\nexports.OfferApiListOffersRequest = OfferApiListOffersRequest;\nexports.WebsiteApiListWebsitesRequest = WebsiteApiListWebsitesRequest;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst intervalRetrier = require(\"../../../internal/async/interval-retrier.cjs\");\nconst api = require(\"../../../scw/api.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nrequire(\"../../../vendor/base64/index.cjs\");\nconst resourcePaginator = require(\"../../../scw/fetch/resource-paginator.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst marshalling_gen = require(\"./marshalling.gen.cjs\");\nconst jsonContentHeaders = {\n  \"Content-Type\": \"application/json; charset=utf-8\"\n};\nclass API extends api.API {\n  /** Lists the available regions of the API. */\n  static LOCALITIES = [\"fr-par\", \"nl-ams\"];\n  /**\n   * Order a Web Hosting plan. Order a Web Hosting plan, specifying the offer\n   * type required via the `offer_id` parameter.\n   *\n   * @param request - The request {@link CreateHostingRequest}\n   * @returns A Promise of Hosting\n   */\n  createHosting = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCreateHostingRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/webhosting/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hostings`\n    },\n    marshalling_gen.unmarshalHosting\n  );\n  pageOfListHostings = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/webhosting/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hostings`,\n      urlParams: marshalling.urlParams(\n        [\"control_panels\", request.controlPanels],\n        [\"domain\", request.domain],\n        [\"order_by\", request.orderBy],\n        [\"organization_id\", request.organizationId],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ],\n        [\"project_id\", request.projectId],\n        [\"statuses\", request.statuses],\n        [\"tags\", request.tags]\n      )\n    },\n    marshalling_gen.unmarshalListHostingsResponse\n  );\n  /**\n   * List all Web Hosting plans. List all of your existing Web Hosting plans.\n   * Various filters are available to limit the results, including filtering by\n   * domain, status, tag and Project ID.\n   *\n   * @param request - The request {@link ListHostingsRequest}\n   * @returns A Promise of ListHostingsResponse\n   */\n  listHostings = (request = {}) => resourcePaginator.enrichForPagination(\"hostings\", this.pageOfListHostings, request);\n  /**\n   * Get a Web Hosting plan. Get the details of one of your existing Web Hosting\n   * plans, specified by its `hosting_id`.\n   *\n   * @param request - The request {@link GetHostingRequest}\n   * @returns A Promise of Hosting\n   */\n  getHosting = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/webhosting/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hostings/${marshalling.validatePathParam(\"hostingId\", request.hostingId)}`\n    },\n    marshalling_gen.unmarshalHosting\n  );\n  /**\n   * Waits for {@link Hosting} to be in a final state.\n   *\n   * @param request - The request {@link GetHostingRequest}\n   * @param options - The waiting options\n   * @returns A Promise of Hosting\n   */\n  waitForHosting = (request, options) => intervalRetrier.waitForResource(\n    options?.stop ?? ((res) => Promise.resolve(!content_gen.HOSTING_TRANSIENT_STATUSES.includes(res.status))),\n    this.getHosting,\n    request,\n    options\n  );\n  /**\n   * Update a Web Hosting plan. Update the details of one of your existing Web\n   * Hosting plans, specified by its `hosting_id`. You can update parameters\n   * including the contact email address, tags, options and offer.\n   *\n   * @param request - The request {@link UpdateHostingRequest}\n   * @returns A Promise of Hosting\n   */\n  updateHosting = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalUpdateHostingRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/webhosting/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hostings/${marshalling.validatePathParam(\"hostingId\", request.hostingId)}`\n    },\n    marshalling_gen.unmarshalHosting\n  );\n  /**\n   * Delete a Web Hosting plan. Delete a Web Hosting plan, specified by its\n   * `hosting_id`. Note that deletion is not immediate: it will take place at\n   * the end of the calendar month, after which time your Web Hosting plan and\n   * all its data (files and emails) will be irreversibly lost.\n   *\n   * @param request - The request {@link DeleteHostingRequest}\n   * @returns A Promise of Hosting\n   */\n  deleteHosting = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/webhosting/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hostings/${marshalling.validatePathParam(\"hostingId\", request.hostingId)}`\n    },\n    marshalling_gen.unmarshalHosting\n  );\n  /**\n   * Restore a Web Hosting plan. When you [delete a Web Hosting\n   * plan](#path-hostings-delete-a-hosting), definitive deletion does not take\n   * place until the end of the calendar month. In the time between initiating\n   * the deletion, and definitive deletion at the end of the month, you can\n   * choose to **restore** the Web Hosting plan, using this endpoint and\n   * specifying its `hosting_id`.\n   *\n   * @param request - The request {@link RestoreHostingRequest}\n   * @returns A Promise of Hosting\n   */\n  restoreHosting = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/webhosting/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hostings/${marshalling.validatePathParam(\"hostingId\", request.hostingId)}/restore`\n    },\n    marshalling_gen.unmarshalHosting\n  );\n  /**\n   * Get DNS records. Get the set of DNS records of a specified domain\n   * associated with a Web Hosting plan.\n   *\n   * @param request - The request {@link GetDomainDnsRecordsRequest}\n   * @returns A Promise of DnsRecords\n   */\n  getDomainDnsRecords = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/webhosting/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/domains/${marshalling.validatePathParam(\"domain\", request.domain)}/dns-records`\n    },\n    marshalling_gen.unmarshalDnsRecords\n  );\n  /**\n   * \"Check whether you own this domain or not.\".\n   *\n   * @param request - The request {@link CheckUserOwnsDomainRequest}\n   * @returns A Promise of CheckUserOwnsDomainResponse\n   */\n  checkUserOwnsDomain = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalCheckUserOwnsDomainRequest(request, this.client.settings)\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/webhosting/v1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/domains/${marshalling.validatePathParam(\"domain\", request.domain)}/check-ownership`\n    },\n    marshalling_gen.unmarshalCheckUserOwnsDomainResponse\n  );\n  /**\n   * List all offers. List the different Web Hosting offers, and their options,\n   * available to order from Scaleway.\n   *\n   * @param request - The request {@link ListOffersRequest}\n   * @returns A Promise of ListOffersResponse\n   */\n  listOffers = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/webhosting/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/offers`,\n      urlParams: marshalling.urlParams(\n        [\"control_panels\", request.controlPanels],\n        [\"hosting_id\", request.hostingId],\n        [\"only_options\", request.onlyOptions],\n        [\"order_by\", request.orderBy],\n        [\"without_options\", request.withoutOptions]\n      )\n    },\n    marshalling_gen.unmarshalListOffersResponse\n  );\n  pageOfListControlPanels = (request = {}) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/webhosting/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/control-panels`,\n      urlParams: marshalling.urlParams(\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListControlPanelsResponse\n  );\n  /**\n   * \"List the control panels type: cpanel or plesk.\".\n   *\n   * @param request - The request {@link ListControlPanelsRequest}\n   * @returns A Promise of ListControlPanelsResponse\n   */\n  listControlPanels = (request = {}) => resourcePaginator.enrichForPagination(\"controlPanels\", this.pageOfListControlPanels, request);\n  /**\n   * Create a user session.\n   *\n   * @param request - The request {@link CreateSessionRequest}\n   * @returns A Promise of Session\n   */\n  createSession = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/webhosting/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hostings/${marshalling.validatePathParam(\"hostingId\", request.hostingId)}/sessions`\n    },\n    marshalling_gen.unmarshalSession\n  );\n  resetHostingPassword = (request) => this.client.fetch(\n    {\n      body: \"{}\",\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/webhosting/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/hostings/${marshalling.validatePathParam(\"hostingId\", request.hostingId)}/reset-password`\n    },\n    marshalling_gen.unmarshalResetHostingPasswordResponse\n  );\n}\nclass ClassicMailAPI extends api.API {\n  /** Lists the available regions of the API. */\n  static LOCALITIES = [\"fr-par\", \"nl-ams\", \"pl-waw\"];\n  /**\n   * Create a new mailbox within your hosting plan.. Create a new mailbox within\n   * your hosting plan.\n   *\n   * @param request - The request {@link ClassicMailApiCreateMailboxRequest}\n   * @returns A Promise of Mailbox\n   */\n  createMailbox = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalClassicMailApiCreateMailboxRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"POST\",\n      path: `/webhosting/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/classic-hostings/${marshalling.validatePathParam(\"onlineId\", request.onlineId)}/mailboxes`\n    },\n    marshalling_gen.unmarshalMailbox\n  );\n  /**\n   * Get a mailbox by id within your hosting plan.. Get a mailbox by id within\n   * your hosting plan.\n   *\n   * @param request - The request {@link ClassicMailApiGetMailboxRequest}\n   * @returns A Promise of Mailbox\n   */\n  getMailbox = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/webhosting/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/classic-hostings/${marshalling.validatePathParam(\"onlineId\", request.onlineId)}/mailboxes/${marshalling.validatePathParam(\"mailboxId\", request.mailboxId)}`\n    },\n    marshalling_gen.unmarshalMailbox\n  );\n  pageOfListMailboxes = (request) => this.client.fetch(\n    {\n      method: \"GET\",\n      path: `/webhosting/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/classic-hostings/${marshalling.validatePathParam(\"onlineId\", request.onlineId)}/mailboxes`,\n      urlParams: marshalling.urlParams(\n        [\"domain\", request.domain],\n        [\"page\", request.page],\n        [\n          \"page_size\",\n          request.pageSize ?? this.client.settings.defaultPageSize\n        ]\n      )\n    },\n    marshalling_gen.unmarshalListMailboxesResponse\n  );\n  /**\n   * List all mailboxes within your hosting plan.. List all mailboxes within\n   * your hosting plan.\n   *\n   * @param request - The request {@link ClassicMailApiListMailboxesRequest}\n   * @returns A Promise of ListMailboxesResponse\n   */\n  listMailboxes = (request) => resourcePaginator.enrichForPagination(\"mailboxes\", this.pageOfListMailboxes, request);\n  deleteMailbox = (request) => this.client.fetch(\n    {\n      method: \"DELETE\",\n      path: `/webhosting/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/classic-hostings/${marshalling.validatePathParam(\"onlineId\", request.onlineId)}/mailboxes/${marshalling.validatePathParam(\"mailboxId\", request.mailboxId)}`\n    },\n    marshalling_gen.unmarshalMailbox\n  );\n  /**\n   * Update the mailbox within your hosting plan.. Update the mailbox within\n   * your hosting plan.\n   *\n   * @param request - The request {@link ClassicMailApiUpdateMailboxRequest}\n   * @returns A Promise of Mailbox\n   */\n  updateMailbox = (request) => this.client.fetch(\n    {\n      body: JSON.stringify(\n        marshalling_gen.marshalClassicMailApiUpdateMailboxRequest(\n          request,\n          this.client.settings\n        )\n      ),\n      headers: jsonContentHeaders,\n      method: \"PATCH\",\n      path: `/webhosting/v1alpha1/regions/${marshalling.validatePathParam(\"region\", request.region ?? this.client.settings.defaultRegion)}/classic-hostings/${marshalling.validatePathParam(\"onlineId\", request.onlineId)}/mailboxes/${marshalling.validatePathParam(\"mailboxId\", request.mailboxId)}`\n    },\n    marshalling_gen.unmarshalMailbox\n  );\n}\nexports.API = API;\nexports.ClassicMailAPI = ClassicMailAPI;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst HOSTING_TRANSIENT_STATUSES = [\n  \"delivering\",\n  \"deleting\",\n  \"migrating\"\n];\nexports.HOSTING_TRANSIENT_STATUSES = HOSTING_TRANSIENT_STATUSES;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst api_gen = require(\"./api.gen.cjs\");\nconst content_gen = require(\"./content.gen.cjs\");\nconst validationRules_gen = require(\"./validation-rules.gen.cjs\");\nexports.API = api_gen.API;\nexports.ClassicMailAPI = api_gen.ClassicMailAPI;\nexports.HOSTING_TRANSIENT_STATUSES = content_gen.HOSTING_TRANSIENT_STATUSES;\nexports.ValidationRules = validationRules_gen;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst json = require(\"../../../helpers/json.cjs\");\nconst customMarshalling = require(\"../../../scw/custom-marshalling.cjs\");\nconst marshalling = require(\"../../../helpers/marshalling.cjs\");\nconst unmarshalHostingCpanelUrls = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'HostingCpanelUrls' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    dashboard: data.dashboard,\n    webmail: data.webmail\n  };\n};\nconst unmarshalHostingOption = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'HostingOption' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    id: data.id,\n    name: data.name\n  };\n};\nconst unmarshalHosting = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Hosting' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    controlPanelName: data.control_panel_name,\n    cpanelUrls: data.cpanel_urls ? unmarshalHostingCpanelUrls(data.cpanel_urls) : void 0,\n    createdAt: marshalling.unmarshalDate(data.created_at),\n    dnsStatus: data.dns_status,\n    domain: data.domain,\n    id: data.id,\n    ipv4: data.ipv4,\n    ipv6: data.ipv6,\n    offerEndOfLife: data.offer_end_of_life,\n    offerId: data.offer_id,\n    offerName: data.offer_name,\n    oneTimePassword: data.one_time_password,\n    options: marshalling.unmarshalArrayOfObject(data.options, unmarshalHostingOption),\n    organizationId: data.organization_id,\n    platformGroup: data.platform_group,\n    platformHostname: data.platform_hostname,\n    platformNumber: data.platform_number,\n    projectId: data.project_id,\n    protected: data.protected,\n    region: data.region,\n    status: data.status,\n    tags: data.tags,\n    updatedAt: marshalling.unmarshalDate(data.updated_at),\n    username: data.username\n  };\n};\nconst unmarshalEmailAddress = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'EmailAddress' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    domain: data.domain,\n    login: data.login\n  };\n};\nconst unmarshalMailbox = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Mailbox' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    email: data.email ? unmarshalEmailAddress(data.email) : void 0,\n    mailboxId: data.mailbox_id\n  };\n};\nconst unmarshalCheckUserOwnsDomainResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'CheckUserOwnsDomainResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    ownsDomain: data.owns_domain\n  };\n};\nconst unmarshalDnsRecord = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DnsRecord' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    name: data.name,\n    priority: data.priority,\n    status: data.status,\n    ttl: data.ttl,\n    type: data.type,\n    value: data.value\n  };\n};\nconst unmarshalNameserver = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Nameserver' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    hostname: data.hostname,\n    isDefault: data.is_default,\n    status: data.status\n  };\n};\nconst unmarshalDnsRecords = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'DnsRecords' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    nameServers: marshalling.unmarshalArrayOfObject(data.name_servers, unmarshalNameserver),\n    records: marshalling.unmarshalArrayOfObject(data.records, unmarshalDnsRecord),\n    status: data.status\n  };\n};\nconst unmarshalControlPanel = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ControlPanel' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    available: data.available,\n    availableLanguages: data.available_languages,\n    logoUrl: data.logo_url,\n    name: data.name\n  };\n};\nconst unmarshalListControlPanelsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListControlPanelsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    controlPanels: marshalling.unmarshalArrayOfObject(\n      data.control_panels,\n      unmarshalControlPanel\n    ),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListHostingsResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListHostingsResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    hostings: marshalling.unmarshalArrayOfObject(data.hostings, unmarshalHosting),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalListMailboxesResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListMailboxesResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    mailboxes: marshalling.unmarshalArrayOfObject(data.mailboxes, unmarshalMailbox),\n    totalCount: data.total_count\n  };\n};\nconst unmarshalOfferProduct = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'OfferProduct' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    databasesQuota: data.databases_quota,\n    emailAccountsQuota: data.email_accounts_quota,\n    emailStorageQuota: data.email_storage_quota,\n    hostingStorageQuota: data.hosting_storage_quota,\n    maxAddonDomains: data.max_addon_domains,\n    name: data.name,\n    option: data.option,\n    ram: data.ram,\n    supportIncluded: data.support_included,\n    vCpu: data.v_cpu\n  };\n};\nconst unmarshalOffer = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Offer' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    available: data.available,\n    billingOperationPath: data.billing_operation_path,\n    controlPanelName: data.control_panel_name,\n    endOfLife: data.end_of_life,\n    id: data.id,\n    price: data.price ? customMarshalling.unmarshalMoney(data.price) : void 0,\n    product: data.product ? unmarshalOfferProduct(data.product) : void 0,\n    quotaWarnings: data.quota_warnings\n  };\n};\nconst unmarshalListOffersResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ListOffersResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    offers: marshalling.unmarshalArrayOfObject(data.offers, unmarshalOffer)\n  };\n};\nconst unmarshalResetHostingPasswordResponse = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ResetHostingPasswordResponse' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    password: data.password\n  };\n};\nconst unmarshalSession = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Session' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    url: data.url\n  };\n};\nconst marshalCheckUserOwnsDomainRequest = (request, defaults) => ({\n  project_id: request.projectId ?? defaults.defaultProjectId\n});\nconst marshalEmailAddress = (request, defaults) => ({\n  domain: request.domain,\n  login: request.login\n});\nconst marshalClassicMailApiCreateMailboxRequest = (request, defaults) => ({\n  email: request.email !== void 0 ? marshalEmailAddress(request.email) : void 0,\n  password: request.password\n});\nconst marshalClassicMailApiUpdateMailboxRequest = (request, defaults) => ({\n  password: request.password\n});\nconst marshalCreateHostingRequestDomainConfiguration = (request, defaults) => ({\n  update_all_records: request.updateAllRecords,\n  update_mail_record: request.updateMailRecord,\n  update_nameservers: request.updateNameservers,\n  update_web_record: request.updateWebRecord\n});\nconst marshalCreateHostingRequest = (request, defaults) => ({\n  domain: request.domain,\n  domain_configuration: request.domainConfiguration !== void 0 ? marshalCreateHostingRequestDomainConfiguration(\n    request.domainConfiguration\n  ) : void 0,\n  email: request.email,\n  language: request.language,\n  offer_id: request.offerId,\n  option_ids: request.optionIds,\n  project_id: request.projectId ?? defaults.defaultProjectId,\n  tags: request.tags\n});\nconst marshalUpdateHostingRequest = (request, defaults) => ({\n  email: request.email,\n  offer_id: request.offerId,\n  option_ids: request.optionIds,\n  protected: request.protected,\n  tags: request.tags\n});\nexports.marshalCheckUserOwnsDomainRequest = marshalCheckUserOwnsDomainRequest;\nexports.marshalClassicMailApiCreateMailboxRequest = marshalClassicMailApiCreateMailboxRequest;\nexports.marshalClassicMailApiUpdateMailboxRequest = marshalClassicMailApiUpdateMailboxRequest;\nexports.marshalCreateHostingRequest = marshalCreateHostingRequest;\nexports.marshalUpdateHostingRequest = marshalUpdateHostingRequest;\nexports.unmarshalCheckUserOwnsDomainResponse = unmarshalCheckUserOwnsDomainResponse;\nexports.unmarshalDnsRecords = unmarshalDnsRecords;\nexports.unmarshalHosting = unmarshalHosting;\nexports.unmarshalListControlPanelsResponse = unmarshalListControlPanelsResponse;\nexports.unmarshalListHostingsResponse = unmarshalListHostingsResponse;\nexports.unmarshalListMailboxesResponse = unmarshalListMailboxesResponse;\nexports.unmarshalListOffersResponse = unmarshalListOffersResponse;\nexports.unmarshalMailbox = unmarshalMailbox;\nexports.unmarshalResetHostingPasswordResponse = unmarshalResetHostingPasswordResponse;\nexports.unmarshalSession = unmarshalSession;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst ClassicMailApiListMailboxesRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nconst ListControlPanelsRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nconst ListHostingsRequest = {\n  page: {\n    greaterThan: 0\n  },\n  pageSize: {\n    greaterThan: 0,\n    lessThanOrEqual: 100\n  }\n};\nexports.ClassicMailApiListMailboxesRequest = ClassicMailApiListMailboxesRequest;\nexports.ListControlPanelsRequest = ListControlPanelsRequest;\nexports.ListHostingsRequest = ListHostingsRequest;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst isBrowser = () => (\n  // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n  typeof window !== \"undefined\" && typeof window.document !== \"undefined\"\n);\nexports.isBrowser = isBrowser;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst isResponse = (obj) => obj !== null && obj !== void 0 && typeof obj === \"object\" && \"status\" in obj && typeof obj.status === \"number\" && \"statusText\" in obj && typeof obj.statusText === \"string\" && \"headers\" in obj && typeof obj.headers === \"object\" && \"body\" in obj && typeof obj.body !== \"undefined\";\nexports.isResponse = isResponse;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst isJSONObject = (obj) => {\n  const objT = typeof obj;\n  return obj !== void 0 && obj !== null && objT !== \"string\" && objT !== \"number\" && objT !== \"boolean\" && !Array.isArray(obj) && objT === \"object\";\n};\nexports.isJSONObject = isJSONObject;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nfunction validatePathParam(name, param) {\n  if (typeof param === \"string\" && param.length > 0) return param;\n  if (typeof param === \"number\") return param.toString();\n  throw new TypeError(`param ${name} cannot be empty in request`);\n}\nconst resolveOneOf = (list, isRequired = false) => {\n  const elt = list.find((obj) => obj.value !== void 0) ?? list.find((obj) => obj.default !== void 0);\n  const value = elt?.value ?? elt?.default;\n  if (elt && value !== void 0) {\n    return { [elt.param]: value };\n  }\n  if (isRequired) {\n    const keyList = list.map((obj) => obj.param).join(\" or \");\n    throw new TypeError(`one of ${keyList} must be indicated in the request`);\n  }\n  return {};\n};\nconst urlParams = (...paramTuples) => {\n  const params = new URLSearchParams();\n  for (const [key, value] of paramTuples) {\n    if (typeof key === \"string\" && value != null) {\n      if (Array.isArray(value)) {\n        for (const innerValue of value) {\n          if (innerValue !== null) {\n            params.append(\n              key,\n              innerValue instanceof Date ? innerValue.toISOString() : innerValue.toString()\n            );\n          }\n        }\n      } else {\n        params.append(\n          key,\n          value instanceof Date ? value.toISOString() : value.toString()\n        );\n      }\n    }\n  }\n  return params;\n};\nconst unmarshalDate = (data) => {\n  if (typeof data !== \"string\") {\n    return void 0;\n  }\n  const date = new Date(data);\n  if (Number.isNaN(date.getTime())) {\n    return void 0;\n  }\n  return date;\n};\nconst unmarshalArrayOfObject = (data, unmarshaller, emptyFallback = true) => {\n  if (!Array.isArray(data)) {\n    return emptyFallback ? [] : void 0;\n  }\n  return data.map((elt) => unmarshaller(elt));\n};\nconst unmarshalMapOfObject = (data, unmarshaller, emptyFallback = true) => {\n  if (!data || typeof data !== \"object\" || !(data instanceof Object) || Array.isArray(data)) {\n    return emptyFallback ? {} : void 0;\n  }\n  return Object.entries(data).reduce(\n    (acc, [key, value]) => ({\n      ...acc,\n      [key]: unmarshaller(value)\n    }),\n    {}\n  );\n};\nexports.resolveOneOf = resolveOneOf;\nexports.unmarshalArrayOfObject = unmarshalArrayOfObject;\nexports.unmarshalDate = unmarshalDate;\nexports.unmarshalMapOfObject = unmarshalMapOfObject;\nexports.urlParams = urlParams;\nexports.validatePathParam = validatePathParam;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index = require(\"./internal/logger/index.cjs\");\nconst client = require(\"./scw/client.cjs\");\nconst clientIniFactory = require(\"./scw/client-ini-factory.cjs\");\nconst customTypes = require(\"./scw/custom-types.cjs\");\nconst index$1 = require(\"./scw/errors/standard/index.cjs\");\nconst json = require(\"./helpers/json.cjs\");\nconst intervalRetrier = require(\"./internal/async/interval-retrier.cjs\");\nconst helpers = require(\"./internal/interceptors/helpers.cjs\");\nconst api = require(\"./scw/api.cjs\");\nconst auth = require(\"./scw/auth.cjs\");\nconst customMarshalling = require(\"./scw/custom-marshalling.cjs\");\nconst marshalling = require(\"./helpers/marshalling.cjs\");\nconst resourcePaginator = require(\"./scw/fetch/resource-paginator.cjs\");\nconst index_gen$g = require(\"./api/account/index.gen.cjs\");\nconst index_gen = require(\"./api/applesilicon/index.gen.cjs\");\nconst index_gen$1 = require(\"./api/baremetal/index.gen.cjs\");\nconst index_gen$h = require(\"./api/billing/index.gen.cjs\");\nconst index_gen$i = require(\"./api/block/index.gen.cjs\");\nconst index_gen$j = require(\"./api/cockpit/index.gen.cjs\");\nconst index_gen$k = require(\"./api/container/index.gen.cjs\");\nconst index_gen$l = require(\"./api/dedibox/index.gen.cjs\");\nconst index_gen$2 = require(\"./api/document_db/index.gen.cjs\");\nconst index_gen$m = require(\"./api/domain/index.gen.cjs\");\nconst index_gen$n = require(\"./api/edge_services/index.gen.cjs\");\nconst index_gen$3 = require(\"./api/flexibleip/index.gen.cjs\");\nconst index_gen$o = require(\"./api/function/index.gen.cjs\");\nconst index_gen$4 = require(\"./api/iam/index.gen.cjs\");\nconst index_gen$p = require(\"./api/inference/index.gen.cjs\");\nconst index_gen$q = require(\"./api/instance/index.gen.cjs\");\nconst index_gen$5 = require(\"./api/iot/index.gen.cjs\");\nconst index_gen$6 = require(\"./api/ipam/index.gen.cjs\");\nconst index_gen$7 = require(\"./api/ipfs/index.gen.cjs\");\nconst index_gen$r = require(\"./api/jobs/index.gen.cjs\");\nconst index_gen$s = require(\"./api/k8s/index.gen.cjs\");\nconst index_gen$t = require(\"./api/key_manager/index.gen.cjs\");\nconst index_gen$8 = require(\"./api/lb/index.gen.cjs\");\nconst index_gen$9 = require(\"./api/llm_inference/index.gen.cjs\");\nconst index_gen$u = require(\"./api/marketplace/index.gen.cjs\");\nconst index_gen$a = require(\"./api/mnq/index.gen.cjs\");\nconst index_gen$v = require(\"./api/qaas/index.gen.cjs\");\nconst index_gen$b = require(\"./api/rdb/index.gen.cjs\");\nconst index_gen$w = require(\"./api/redis/index.gen.cjs\");\nconst index_gen$x = require(\"./api/registry/index.gen.cjs\");\nconst index_gen$y = require(\"./api/secret/index.gen.cjs\");\nconst index_gen$c = require(\"./api/serverless_sqldb/index.gen.cjs\");\nconst index_gen$z = require(\"./api/std/index.gen.cjs\");\nconst index_gen$d = require(\"./api/tem/index.gen.cjs\");\nconst index_gen$A = require(\"./api/test/index.gen.cjs\");\nconst index_gen$e = require(\"./api/vpc/index.gen.cjs\");\nconst index_gen$f = require(\"./api/vpcgw/index.gen.cjs\");\nconst index_gen$B = require(\"./api/webhosting/index.gen.cjs\");\nexports.enableConsoleLogger = index.enableConsoleLogger;\nexports.setLogger = index.setLogger;\nexports.createAdvancedClient = client.createAdvancedClient;\nexports.createClient = client.createClient;\nexports.withAdditionalInterceptors = clientIniFactory.withAdditionalInterceptors;\nexports.withDefaultPageSize = clientIniFactory.withDefaultPageSize;\nexports.withHTTPClient = clientIniFactory.withHTTPClient;\nexports.withProfile = clientIniFactory.withProfile;\nexports.withUserAgent = clientIniFactory.withUserAgent;\nexports.withUserAgentSuffix = clientIniFactory.withUserAgentSuffix;\nexports.Decimal = customTypes.Decimal;\nexports.Errors = index$1;\nexports.isJSONObject = json.isJSONObject;\nexports.createExponentialBackoffStrategy = intervalRetrier.createExponentialBackoffStrategy;\nexports.tryAtIntervals = intervalRetrier.tryAtIntervals;\nexports.waitForResource = intervalRetrier.waitForResource;\nexports.addAsyncHeaderInterceptor = helpers.addAsyncHeaderInterceptor;\nexports.API = api.API;\nexports.authenticateWithSessionToken = auth.authenticateWithSessionToken;\nexports.marshalBlobToScwFile = customMarshalling.marshalBlobToScwFile;\nexports.marshalDecimal = customMarshalling.marshalDecimal;\nexports.marshalMoney = customMarshalling.marshalMoney;\nexports.marshalScwFile = customMarshalling.marshalScwFile;\nexports.marshalTimeSeries = customMarshalling.marshalTimeSeries;\nexports.unmarshalDecimal = customMarshalling.unmarshalDecimal;\nexports.unmarshalMoney = customMarshalling.unmarshalMoney;\nexports.unmarshalScwFile = customMarshalling.unmarshalScwFile;\nexports.unmarshalServiceInfo = customMarshalling.unmarshalServiceInfo;\nexports.unmarshalTimeSeries = customMarshalling.unmarshalTimeSeries;\nexports.unmarshalTimeSeriesPoint = customMarshalling.unmarshalTimeSeriesPoint;\nexports.resolveOneOf = marshalling.resolveOneOf;\nexports.unmarshalArrayOfObject = marshalling.unmarshalArrayOfObject;\nexports.unmarshalDate = marshalling.unmarshalDate;\nexports.unmarshalMapOfObject = marshalling.unmarshalMapOfObject;\nexports.urlParams = marshalling.urlParams;\nexports.validatePathParam = marshalling.validatePathParam;\nexports.enrichForPagination = resourcePaginator.enrichForPagination;\nexports.Account = index_gen$g;\nexports.AppleSilicon = index_gen;\nexports.Applesilicon = index_gen;\nexports.BareMetal = index_gen$1;\nexports.Baremetal = index_gen$1;\nexports.Billing = index_gen$h;\nexports.Block = index_gen$i;\nexports.Cockpit = index_gen$j;\nexports.Container = index_gen$k;\nexports.Dedibox = index_gen$l;\nexports.DocumentDB = index_gen$2;\nexports.DocumentDb = index_gen$2;\nexports.Domain = index_gen$m;\nexports.EdgeServices = index_gen$n;\nexports.FlexibleIP = index_gen$3;\nexports.Flexibleip = index_gen$3;\nexports.Function = index_gen$o;\nexports.IAM = index_gen$4;\nexports.Iam = index_gen$4;\nexports.Inference = index_gen$p;\nexports.Instance = index_gen$q;\nexports.IOT = index_gen$5;\nexports.Iot = index_gen$5;\nexports.IPAM = index_gen$6;\nexports.Ipam = index_gen$6;\nexports.IPFS = index_gen$7;\nexports.Ipfs = index_gen$7;\nexports.Jobs = index_gen$r;\nexports.K8s = index_gen$s;\nexports.KeyManager = index_gen$t;\nexports.LB = index_gen$8;\nexports.Lb = index_gen$8;\nexports.LLMInference = index_gen$9;\nexports.LlmInference = index_gen$9;\nexports.Marketplace = index_gen$u;\nexports.MNQ = index_gen$a;\nexports.Mnq = index_gen$a;\nexports.Qaas = index_gen$v;\nexports.RDB = index_gen$b;\nexports.Rdb = index_gen$b;\nexports.Redis = index_gen$w;\nexports.Registry = index_gen$x;\nexports.Secret = index_gen$y;\nexports.ServerlessSQLDB = index_gen$c;\nexports.ServerlessSqldb = index_gen$c;\nexports.Std = index_gen$z;\nexports.Tem = index_gen$d;\nexports.TransactionalEmail = index_gen$d;\nexports.Test = index_gen$A;\nexports.VPC = index_gen$e;\nexports.Vpc = index_gen$e;\nexports.VPCGW = index_gen$f;\nexports.Vpcgw = index_gen$f;\nexports.Webhosting = index_gen$B;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst sleep = require(\"./sleep.cjs\");\nconst DEFAULT_TIMEOUT_SECONDS = 300;\nconst DEFAULT_MIN_DELAY_SECONDS = 1;\nconst DEFAULT_MAX_DELAY_SECONDS = 30;\nfunction* createExponentialBackoffStrategy(minDelay, maxDelay) {\n  if (minDelay < 1 || maxDelay < 1 || minDelay > maxDelay) {\n    throw new Error(\n      \"Waiter: minDelay must be >= 1 and maxDelay must be >= minDelay\"\n    );\n  }\n  let attempt = 1;\n  const ceiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;\n  const randomInRange = (min, max) => min + Math.random() * (max - min);\n  while (true) {\n    if (attempt > ceiling) {\n      yield maxDelay;\n    } else {\n      yield randomInRange(minDelay, minDelay * 2 ** (attempt - 1));\n    }\n    attempt += 1;\n  }\n}\nconst tryAtIntervals = async (retry, strategy, timeout = DEFAULT_TIMEOUT_SECONDS) => {\n  const timeoutTimestamp = Date.now() + timeout * 1e3;\n  let retryCount = 0;\n  while (Date.now() <= timeoutTimestamp) {\n    const delay = strategy.next(retryCount += 1).value * 1e3;\n    if (timeoutTimestamp <= Date.now() + delay) break;\n    await sleep.sleep(delay);\n    const { value, done } = await retry();\n    if (done) return value;\n  }\n  throw new Error(`Timeout after ${timeout}s`);\n};\nconst waitForResource = (stop, fetcher, request, options, strategy = createExponentialBackoffStrategy(\n  options?.minDelay ?? DEFAULT_MIN_DELAY_SECONDS,\n  options?.maxDelay ?? DEFAULT_MAX_DELAY_SECONDS\n)) => tryAtIntervals(\n  async () => {\n    const value = await fetcher(request);\n    return {\n      done: await stop(value),\n      value\n    };\n  },\n  strategy,\n  options?.timeout\n);\nexports.createExponentialBackoffStrategy = createExponentialBackoffStrategy;\nexports.tryAtIntervals = tryAtIntervals;\nexports.waitForResource = waitForResource;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst sleep = (ms) => new Promise((resolve) => {\n  setTimeout(resolve, ms);\n});\nexports.sleep = sleep;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst composeRequestInterceptors = (interceptors) => async (request) => interceptors.reduce(\n  async (asyncResult, interceptor) => interceptor({ request: await asyncResult }),\n  Promise.resolve(request)\n);\nconst composeResponseInterceptors = (interceptors) => async (response) => interceptors.reduce(\n  async (asyncResult, interceptor) => interceptor({ response: await asyncResult }),\n  Promise.resolve(response)\n);\nconst composeResponseErrorInterceptors = (interceptors) => async (request, error) => {\n  let prevError = error;\n  for (const interceptor of interceptors) {\n    try {\n      const res = await interceptor({ request, error: prevError });\n      return res;\n    } catch (err) {\n      prevError = err;\n    }\n  }\n  throw prevError;\n};\nexports.composeRequestInterceptors = composeRequestInterceptors;\nexports.composeResponseErrorInterceptors = composeResponseErrorInterceptors;\nexports.composeResponseInterceptors = composeResponseInterceptors;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst addHeaderInterceptor = (key, value) => ({ request }) => {\n  const clone = request.clone();\n  if (value !== void 0) {\n    clone.headers.append(key, value);\n  }\n  return clone;\n};\nconst addAsyncHeaderInterceptor = (key, getter) => async (request) => addHeaderInterceptor(key, await getter())(request);\nexports.addAsyncHeaderInterceptor = addAsyncHeaderInterceptor;\nexports.addHeaderInterceptor = addHeaderInterceptor;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst levelResolver = require(\"./level-resolver.cjs\");\nclass ConsoleLogger {\n  constructor(logLevel, prefix = \"\", output = console) {\n    this.logLevel = logLevel;\n    this.prefix = prefix;\n    this.output = output;\n    this.level = levelResolver.LevelResolver[this.logLevel];\n  }\n  level;\n  makeMethod(method) {\n    return (message) => {\n      if (levelResolver.shouldLog(this.level, method)) {\n        this.output[method](this.prefix ? `${this.prefix} ${message}` : message);\n      }\n    };\n  }\n  debug = this.makeMethod(\"debug\");\n  error = this.makeMethod(\"error\");\n  info = this.makeMethod(\"info\");\n  warn = this.makeMethod(\"warn\");\n}\nexports.ConsoleLogger = ConsoleLogger;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst consoleLogger = require(\"./console-logger.cjs\");\nlet sdkLogger = new consoleLogger.ConsoleLogger(\"silent\");\nconst setLogger = (logger) => {\n  sdkLogger = logger;\n};\nconst enableConsoleLogger = (logLevel = \"warn\", prefix = \"scaleway-sdk-js:\") => setLogger(new consoleLogger.ConsoleLogger(logLevel, prefix));\nconst getLogger = () => sdkLogger;\nexports.enableConsoleLogger = enableConsoleLogger;\nexports.getLogger = getLogger;\nexports.setLogger = setLogger;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nvar LevelResolver = /* @__PURE__ */ ((LevelResolver2) => {\n  LevelResolver2[LevelResolver2[\"silent\"] = 0] = \"silent\";\n  LevelResolver2[LevelResolver2[\"error\"] = 1] = \"error\";\n  LevelResolver2[LevelResolver2[\"warn\"] = 2] = \"warn\";\n  LevelResolver2[LevelResolver2[\"info\"] = 3] = \"info\";\n  LevelResolver2[LevelResolver2[\"debug\"] = 4] = \"debug\";\n  return LevelResolver2;\n})(LevelResolver || {});\nconst shouldLog = (currentLevel, level) => LevelResolver[level] <= currentLevel;\nexports.LevelResolver = LevelResolver;\nexports.shouldLog = shouldLog;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst isAccessKeyRegex = /^SCW[A-Z0-9]{17}$/i;\nconst isRegionRegex = /^[a-z]{2}-[a-z]{3}$/i;\nconst isUUIDRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/i;\nconst isZoneRegex = /^[a-z]{2}-[a-z]{3}-[1-9]$/i;\nconst isUUID = (str) => isUUIDRegex.test(str);\nconst isAccessKey = (str) => isAccessKeyRegex.test(str);\nconst isSecretKey = (str) => isUUID(str);\nconst isOrganizationId = (str) => isUUID(str);\nconst isProjectId = (str) => isUUID(str);\nconst isRegion = (str) => isRegionRegex.test(str);\nconst isZone = (str) => isZoneRegex.test(str);\nconst isURL = (str) => {\n  let url;\n  try {\n    url = new URL(str);\n  } catch {\n    return false;\n  }\n  return url.protocol === \"http:\" || url.protocol === \"https:\";\n};\nexports.isAccessKey = isAccessKey;\nexports.isOrganizationId = isOrganizationId;\nexports.isProjectId = isProjectId;\nexports.isRegion = isRegion;\nexports.isSecretKey = isSecretKey;\nexports.isURL = isURL;\nexports.isUUID = isUUID;\nexports.isZone = isZone;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nlet API$1 = class API {\n  constructor(client) {\n    this.client = client;\n  }\n};\nexports.API = API$1;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst helpers = require(\"../internal/interceptors/helpers.cjs\");\nconst clientIniProfile = require(\"./client-ini-profile.cjs\");\nconst SESSION_HEADER_KEY = \"x-session-token\";\nconst AUTH_HEADER_KEY = \"x-auth-token\";\nconst authenticateWithSessionToken = (getToken) => helpers.addAsyncHeaderInterceptor(SESSION_HEADER_KEY, getToken);\nconst authenticateWithSecrets = (secrets) => {\n  clientIniProfile.assertValidAuthenticationSecrets(secrets);\n  return helpers.addHeaderInterceptor(AUTH_HEADER_KEY, secrets.secretKey);\n};\nconst obfuscateToken = (key) => `${key.substring(0, 5)}xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx`;\nconst obfuscateUUID = (key) => `${key.substring(0, 8)}-xxxx-xxxx-xxxx-xxxxxxxxxxxx`;\nconst obfuscateAuthHeadersEntry = ([\n  name,\n  value\n]) => {\n  if (name === SESSION_HEADER_KEY) return [name, obfuscateToken(value)];\n  if (name === AUTH_HEADER_KEY) return [name, obfuscateUUID(value)];\n  return [name, value];\n};\nexports.authenticateWithSecrets = authenticateWithSecrets;\nexports.authenticateWithSessionToken = authenticateWithSessionToken;\nexports.obfuscateAuthHeadersEntry = obfuscateAuthHeadersEntry;\nexports.obfuscateToken = obfuscateToken;\nexports.obfuscateUUID = obfuscateUUID;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst auth = require(\"./auth.cjs\");\nconst clientIniProfile = require(\"./client-ini-profile.cjs\");\nconst withProfile = (profile) => (settings) => {\n  const newSettings = { ...settings };\n  if (profile.apiURL) {\n    newSettings.apiURL = profile.apiURL;\n  }\n  if (profile.defaultOrganizationId) {\n    newSettings.defaultOrganizationId = profile.defaultOrganizationId;\n  }\n  if (profile.defaultProjectId) {\n    newSettings.defaultProjectId = profile.defaultProjectId;\n  }\n  if (profile.defaultRegion) {\n    newSettings.defaultRegion = profile.defaultRegion;\n  }\n  if (profile.defaultZone) {\n    newSettings.defaultZone = profile.defaultZone;\n  }\n  if (clientIniProfile.hasAuthenticationSecrets(profile)) {\n    newSettings.interceptors = [\n      {\n        request: auth.authenticateWithSecrets(profile)\n      },\n      ...newSettings.interceptors\n    ];\n  }\n  return newSettings;\n};\nconst withHTTPClient = (httpClient) => (settings) => ({ ...settings, httpClient });\nconst withDefaultPageSize = (defaultPageSize) => (settings) => ({ ...settings, defaultPageSize });\nconst withUserAgent = (userAgent) => (settings) => ({ ...settings, userAgent });\nconst withUserAgentSuffix = (userAgent) => (settings) => ({\n  ...settings,\n  userAgent: settings.userAgent ? `${settings.userAgent} ${userAgent}` : userAgent\n});\nconst withAdditionalInterceptors = (interceptors) => (settings) => ({\n  ...settings,\n  interceptors: settings.interceptors.concat(interceptors)\n});\nconst withLegacyInterceptors = () => (settings) => {\n  if (!settings.requestInterceptors && !settings.responseInterceptors) {\n    return settings;\n  }\n  const allInterceptors = settings.interceptors.concat(\n    (settings.requestInterceptors ?? []).map((obj) => ({\n      request: obj\n    })),\n    (settings.responseInterceptors ?? []).map((obj) => ({\n      response: obj\n    }))\n  );\n  return {\n    ...settings,\n    interceptors: allInterceptors\n  };\n};\nexports.withAdditionalInterceptors = withAdditionalInterceptors;\nexports.withDefaultPageSize = withDefaultPageSize;\nexports.withHTTPClient = withHTTPClient;\nexports.withLegacyInterceptors = withLegacyInterceptors;\nexports.withProfile = withProfile;\nexports.withUserAgent = withUserAgent;\nexports.withUserAgentSuffix = withUserAgentSuffix;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst stringValidation = require(\"../internal/validations/string-validation.cjs\");\nconst hasAuthenticationSecrets = (obj) => typeof obj.accessKey === \"string\" && obj.accessKey !== \"\" && typeof obj.secretKey === \"string\" && obj.secretKey !== \"\";\nfunction assertValidAuthenticationSecrets(obj) {\n  if (!(obj.accessKey && obj.secretKey)) {\n    throw new Error(\n      `Invalid secrets, accessKey & secretKey must be defined. See https://www.scaleway.com/en/docs/identity-and-access-management/iam/how-to/create-api-keys/`\n    );\n  }\n  if (!stringValidation.isAccessKey(obj.accessKey)) {\n    throw new Error(\n      `Invalid access key format '${obj.accessKey}', expected SCWXXXXXXXXXXXXXXXXX format. See https://www.scaleway.com/en/docs/identity-and-access-management/iam/how-to/create-api-keys/`\n    );\n  }\n  if (!stringValidation.isSecretKey(obj.secretKey)) {\n    throw new Error(\n      `Invalid secret key format '${obj.secretKey}', expected a UUID: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx. See https://www.scaleway.com/en/docs/identity-and-access-management/iam/how-to/create-api-keys/`\n    );\n  }\n}\nexports.assertValidAuthenticationSecrets = assertValidAuthenticationSecrets;\nexports.hasAuthenticationSecrets = hasAuthenticationSecrets;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst stringValidation = require(\"../internal/validations/string-validation.cjs\");\nconst assertValidSettings = (obj) => {\n  if (obj.defaultOrganizationId !== void 0) {\n    if (typeof obj.defaultOrganizationId !== \"string\" || obj.defaultOrganizationId.length === 0) {\n      throw new Error(\"Default organization ID cannot be empty\");\n    }\n    if (!stringValidation.isOrganizationId(obj.defaultOrganizationId)) {\n      throw new Error(\n        `Invalid organization ID format '${obj.defaultOrganizationId}', expected a UUID: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`\n      );\n    }\n  }\n  if (obj.defaultProjectId !== void 0) {\n    if (typeof obj.defaultProjectId !== \"string\" || obj.defaultProjectId.length === 0) {\n      throw new Error(\"Default project ID cannot be empty\");\n    }\n    if (!stringValidation.isProjectId(obj.defaultProjectId)) {\n      throw new Error(\n        `Invalid project ID format '${obj.defaultProjectId}', expected a UUID: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`\n      );\n    }\n  }\n  if (obj.defaultRegion && !stringValidation.isRegion(obj.defaultRegion)) {\n    throw new Error(`Invalid default region format '${obj.defaultRegion}'`);\n  }\n  if (obj.defaultZone && !stringValidation.isZone(obj.defaultZone)) {\n    throw new Error(`Invalid default zone format '${obj.defaultZone}'`);\n  }\n  if (!stringValidation.isURL(obj.apiURL)) {\n    throw new Error(`Invalid URL ${obj.apiURL}`);\n  }\n  if (obj.apiURL.endsWith(\"/\")) {\n    throw new Error(\n      `Invalid URL ${obj.apiURL}: it should not have a trailing slash`\n    );\n  }\n  if (typeof obj.httpClient !== typeof fetch) {\n    throw new Error(`Invalid HTTP Client`);\n  }\n  if (obj.defaultPageSize !== void 0 && (typeof obj.defaultPageSize !== \"number\" || Number.isNaN(obj.defaultPageSize) || obj.defaultPageSize <= 0)) {\n    throw new Error(\n      `Invalid defaultPageSize ${obj.defaultPageSize}: it should be a number above 0`\n    );\n  }\n  if (typeof obj.userAgent !== \"string\") {\n    throw new Error(`Invalid User-Agent`);\n  }\n};\nexports.assertValidSettings = assertValidSettings;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index = require(\"../internal/logger/index.cjs\");\nconst clientIniFactory = require(\"./client-ini-factory.cjs\");\nconst clientSettings = require(\"./client-settings.cjs\");\nconst constants = require(\"./constants.cjs\");\nconst buildFetcher = require(\"./fetch/build-fetcher.cjs\");\nconst DEFAULT_SETTINGS = {\n  apiURL: \"https://api.scaleway.com\",\n  httpClient: fetch,\n  interceptors: [],\n  userAgent: constants.userAgent\n};\nconst createAdvancedClient = (...configs) => {\n  const settings = configs.concat([clientIniFactory.withLegacyInterceptors()]).reduce(\n    (currentSettings, config) => config(currentSettings),\n    DEFAULT_SETTINGS\n  );\n  clientSettings.assertValidSettings(settings);\n  index.getLogger().info(`init Scaleway SDK version ${constants.version}`);\n  return {\n    fetch: buildFetcher.buildFetcher(settings, settings.httpClient),\n    settings\n  };\n};\nconst createClient = (profile = {}) => createAdvancedClient(clientIniFactory.withProfile(profile));\nexports.createAdvancedClient = createAdvancedClient;\nexports.createClient = createClient;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst version = \"v2.49.0\";\nconst userAgent = `scaleway-sdk-js/${version}`;\nexports.userAgent = userAgent;\nexports.version = version;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst json = require(\"../helpers/json.cjs\");\nconst marshalling = require(\"../helpers/marshalling.cjs\");\nconst index = require(\"../vendor/base64/index.cjs\");\nconst customTypes = require(\"./custom-types.cjs\");\nconst unmarshalMoney = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Money' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    currencyCode: data.currency_code,\n    nanos: data.nanos,\n    units: data.units\n  };\n};\nconst unmarshalServiceInfo = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ServiceInfo' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    description: data.description,\n    documentationUrl: data.documentation_url,\n    name: data.name,\n    version: data.version\n  };\n};\nconst unmarshalScwFile = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'ScwFile' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    content: data.content,\n    contentType: data.content_type,\n    name: data.name\n  };\n};\nconst unmarshalTimeSeriesPoint = (data) => {\n  if (!Array.isArray(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'TimeSeriesPoint' failed as data isn't an array.`\n    );\n  }\n  return {\n    timestamp: marshalling.unmarshalDate(data[0]),\n    value: data[1]\n  };\n};\nconst unmarshalTimeSeries = (data) => {\n  if (!json.isJSONObject(data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'TimeSeries' failed as data isn't a dictionary.`\n    );\n  }\n  return {\n    metadata: data.metadata,\n    name: data.name,\n    points: marshalling.unmarshalArrayOfObject(data.points, unmarshalTimeSeriesPoint)\n  };\n};\nconst unmarshalDecimal = (data) => {\n  if (!(typeof data === \"object\")) {\n    throw new TypeError(\n      `Unmarshalling the type 'Decimal' failed as data isn't an object.`\n    );\n  }\n  if (data === null) {\n    return null;\n  }\n  if (!(\"value\" in data)) {\n    throw new TypeError(\n      `Unmarshalling the type 'Decimal' failed as data object does not have a 'value' key.`\n    );\n  }\n  if (!(typeof data.value === \"string\")) {\n    throw new TypeError(\n      `Unmarshalling the type 'Decimal' failed as 'value' is not a string.`\n    );\n  }\n  return new customTypes.Decimal(data.value);\n};\nconst marshalScwFile = (obj) => ({\n  content: obj.content,\n  content_type: obj.contentType,\n  name: obj.name\n});\nconst marshalBlobToScwFile = async (blob) => ({\n  content: index.fromByteArray(new Uint8Array(await blob.arrayBuffer())),\n  content_type: blob.type,\n  name: \"file\"\n});\nconst marshalMoney = (obj) => ({\n  currency_code: obj.currencyCode,\n  nanos: obj.nanos,\n  units: obj.units\n});\nconst marshalTimeSeriesPoint = (obj) => ({\n  timestamp: obj.timestamp?.toISOString(),\n  value: obj.value\n});\nconst marshalTimeSeries = (obj) => ({\n  metadata: obj.metadata,\n  name: obj.name,\n  points: obj.points.map((elt) => marshalTimeSeriesPoint(elt))\n});\nconst marshalDecimal = (obj) => ({\n  value: obj.toString()\n});\nexports.marshalBlobToScwFile = marshalBlobToScwFile;\nexports.marshalDecimal = marshalDecimal;\nexports.marshalMoney = marshalMoney;\nexports.marshalScwFile = marshalScwFile;\nexports.marshalTimeSeries = marshalTimeSeries;\nexports.marshalTimeSeriesPoint = marshalTimeSeriesPoint;\nexports.unmarshalDecimal = unmarshalDecimal;\nexports.unmarshalMoney = unmarshalMoney;\nexports.unmarshalScwFile = unmarshalScwFile;\nexports.unmarshalServiceInfo = unmarshalServiceInfo;\nexports.unmarshalTimeSeries = unmarshalTimeSeries;\nexports.unmarshalTimeSeriesPoint = unmarshalTimeSeriesPoint;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nclass Decimal {\n  str;\n  constructor(v) {\n    this.str = v;\n  }\n  toString = () => this.str;\n  marshal = () => ({ value: this.str });\n}\nexports.Decimal = Decimal;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst invalidRequestMapper = require(\"./non-standard/invalid-request-mapper.cjs\");\nconst unknownResourceMapper = require(\"./non-standard/unknown-resource-mapper.cjs\");\nconst scwError = require(\"./scw-error.cjs\");\nconst alreadyExistsError = require(\"./standard/already-exists-error.cjs\");\nconst deniedAuthenticationError = require(\"./standard/denied-authentication-error.cjs\");\nconst invalidArgumentsError = require(\"./standard/invalid-arguments-error.cjs\");\nconst outOfStockError = require(\"./standard/out-of-stock-error.cjs\");\nconst permissionsDeniedError = require(\"./standard/permissions-denied-error.cjs\");\nconst preconditionFailedError = require(\"./standard/precondition-failed-error.cjs\");\nconst quotasExceededError = require(\"./standard/quotas-exceeded-error.cjs\");\nconst resourceExpiredError = require(\"./standard/resource-expired-error.cjs\");\nconst resourceLockedError = require(\"./standard/resource-locked-error.cjs\");\nconst resourceNotFoundError = require(\"./standard/resource-not-found-error.cjs\");\nconst tooManyRequestsError = require(\"./standard/too-many-requests-error.cjs\");\nconst transientStateError = require(\"./standard/transient-state-error.cjs\");\nconst unmarshalStandardError = (type, status, body) => {\n  let error;\n  switch (type) {\n    case \"denied_authentication\":\n      error = deniedAuthenticationError.DeniedAuthenticationError;\n      break;\n    case \"invalid_arguments\":\n      error = invalidArgumentsError.InvalidArgumentsError;\n      break;\n    case \"out_of_stock\":\n      error = outOfStockError.OutOfStockError;\n      break;\n    case \"permissions_denied\":\n      error = permissionsDeniedError.PermissionsDeniedError;\n      break;\n    case \"precondition_failed\":\n      error = preconditionFailedError.PreconditionFailedError;\n      break;\n    case \"quotas_exceeded\":\n      error = quotasExceededError.QuotasExceededError;\n      break;\n    case \"expired\":\n      error = resourceExpiredError.ResourceExpiredError;\n      break;\n    case \"not_found\":\n      error = resourceNotFoundError.ResourceNotFoundError;\n      break;\n    case \"locked\":\n      error = resourceLockedError.ResourceLockedError;\n      break;\n    case \"transient_state\":\n      error = transientStateError.TransientStateError;\n      break;\n    case \"already_exists\":\n      error = alreadyExistsError.AlreadyExistsError;\n      break;\n    case \"too_many_requests\":\n      error = tooManyRequestsError.TooManyRequestsError;\n      break;\n    default:\n      return null;\n  }\n  return error.fromJSON(status, body);\n};\nconst unmarshalNonStandardError = (type, status, body) => {\n  switch (type) {\n    case \"unknown_resource\":\n      return unknownResourceMapper.UnknownResourceMapper.fromJSON(status, body);\n    case \"invalid_request_error\":\n      return invalidRequestMapper.InvalidRequestMapper.fromJSON(status, body);\n    default:\n      return null;\n  }\n};\nconst parseScalewayError = (status, body) => {\n  const parsableError = typeof body.type === \"string\" && (unmarshalStandardError(body.type, status, body) ?? unmarshalNonStandardError(body.type, status, body));\n  return parsableError || new scwError.ScalewayError(status, body);\n};\nexports.parseScalewayError = parseScalewayError;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst scwError = require(\"../scw-error.cjs\");\nconst invalidArgumentsError = require(\"../standard/invalid-arguments-error.cjs\");\nconst quotasExceededError = require(\"../standard/quotas-exceeded-error.cjs\");\nconst types = require(\"../types.cjs\");\nclass InvalidRequestMapper {\n  static fromJSON(status, obj) {\n    if (typeof obj.message === \"string\" && obj.message.toLowerCase().includes(\"quota exceeded for this resource\")) {\n      return new quotasExceededError.QuotasExceededError(status, obj, [\n        {\n          current: 0,\n          quota: 0,\n          resource: typeof obj.resource === \"string\" ? obj.resource : \"\"\n        }\n      ]);\n    }\n    const fields = obj.fields && types.isRecordOfStringArray(obj.fields) ? obj.fields : {};\n    const fieldsMessages = Object.entries(fields);\n    if (fieldsMessages.length) {\n      return new invalidArgumentsError.InvalidArgumentsError(\n        status,\n        obj,\n        fieldsMessages.map(\n          ([argumentName, messages]) => messages.map((helpMessage) => ({\n            argumentName,\n            helpMessage,\n            reason: \"constraint\"\n          }))\n        ).flat()\n      );\n    }\n    return new scwError.ScalewayError(status, obj);\n  }\n}\nexports.InvalidRequestMapper = InvalidRequestMapper;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst stringValidation = require(\"../../../internal/validations/string-validation.cjs\");\nconst scwError = require(\"../scw-error.cjs\");\nconst resourceNotFoundError = require(\"../standard/resource-not-found-error.cjs\");\nclass UnknownResourceMapper {\n  static fromJSON(status, obj) {\n    const messageParts = typeof obj.message === \"string\" ? obj.message.split(/\"|'/) : [];\n    if (messageParts.length === 3 && stringValidation.isUUID(messageParts[1])) {\n      return new resourceNotFoundError.ResourceNotFoundError(\n        status,\n        obj,\n        // transform `Security group ` to `security_group`\n        // `.replaceAll()` may be too recent to use yet.\n        // that's why we're using `.split(' ').join('_')` for now.\n        messageParts[0].trim().toLowerCase().split(\" \").join(\"_\"),\n        messageParts[1]\n      );\n    }\n    return new scwError.ScalewayError(status, obj);\n  }\n}\nexports.UnknownResourceMapper = UnknownResourceMapper;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst json = require(\"../../helpers/json.cjs\");\nconst types = require(\"./types.cjs\");\nconst buildDefaultMessage = (status, body) => {\n  const message = [`http error ${status}`];\n  if (typeof body === \"string\") {\n    message.push(body);\n  } else if (json.isJSONObject(body)) {\n    if (typeof body.resource === \"string\") {\n      message.push(`resource ${body.resource}`);\n    }\n    if (typeof body.message === \"string\") {\n      message.push(body.message);\n    }\n    if (body.fields && types.isRecordOfStringArray(body.fields)) {\n      message.push(\n        Object.entries(body.fields).map(([name, list]) => `${name} (${list.join(\", \")})`).join(\", \")\n      );\n    }\n  }\n  return message.join(\": \");\n};\nclass ScalewayError extends Error {\n  constructor(status, body, message = buildDefaultMessage(status, body)) {\n    super(message);\n    this.status = status;\n    this.body = body;\n    this.message = message;\n    this.name = \"ScalewayError\";\n    this.rawMessage = typeof body === \"object\" && typeof body.message === \"string\" ? body.message : void 0;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n  /** The message originating from the payload. */\n  rawMessage;\n  static fromJSON(status, obj) {\n    return new ScalewayError(status, obj);\n  }\n  toString() {\n    return `${this.name}: ${this.message}`;\n  }\n}\nexports.ScalewayError = ScalewayError;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst scwError = require(\"../scw-error.cjs\");\nclass AlreadyExistsError extends scwError.ScalewayError {\n  constructor(status, body, resource, resourceId, helpMessage) {\n    super(\n      status,\n      body,\n      `resource ${resource} with ID ${resourceId} already exists: ${helpMessage}`\n    );\n    this.status = status;\n    this.body = body;\n    this.resource = resource;\n    this.resourceId = resourceId;\n    this.helpMessage = helpMessage;\n    this.name = \"AlreadyExistsError\";\n  }\n  static fromJSON(status, obj) {\n    if (typeof obj.resource !== \"string\" || typeof obj.resource_id !== \"string\" || typeof obj.help_message !== \"string\") {\n      return null;\n    }\n    return new AlreadyExistsError(\n      status,\n      obj,\n      obj.resource,\n      obj.resource_id,\n      obj.help_message\n    );\n  }\n}\nexports.AlreadyExistsError = AlreadyExistsError;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst scwError = require(\"../scw-error.cjs\");\nconst buildMessage = (method, reason) => {\n  let reasonDesc;\n  switch (reason) {\n    case \"invalid_argument\":\n      reasonDesc = `invalid ${method} format or empty value`;\n      break;\n    case \"not_found\":\n      reasonDesc = `${method} does not exist`;\n      break;\n    case \"expired\":\n      reasonDesc = `${method} is expired`;\n      break;\n    default:\n      reasonDesc = `unknown reason for ${method}`;\n  }\n  return `denied authentication: ${reasonDesc}`;\n};\nclass DeniedAuthenticationError extends scwError.ScalewayError {\n  constructor(status, body, method, reason) {\n    super(status, body, buildMessage(method, reason));\n    this.status = status;\n    this.body = body;\n    this.method = method;\n    this.reason = reason;\n    this.name = \"DeniedAuthenticationError\";\n  }\n  static fromJSON(status, obj) {\n    if (typeof obj.method !== \"string\" || typeof obj.reason !== \"string\") {\n      return null;\n    }\n    return new DeniedAuthenticationError(status, obj, obj.method, obj.reason);\n  }\n}\nexports.DeniedAuthenticationError = DeniedAuthenticationError;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst scwError = require(\"../scw-error.cjs\");\nconst alreadyExistsError = require(\"./already-exists-error.cjs\");\nconst deniedAuthenticationError = require(\"./denied-authentication-error.cjs\");\nconst invalidArgumentsError = require(\"./invalid-arguments-error.cjs\");\nconst outOfStockError = require(\"./out-of-stock-error.cjs\");\nconst permissionsDeniedError = require(\"./permissions-denied-error.cjs\");\nconst preconditionFailedError = require(\"./precondition-failed-error.cjs\");\nconst quotasExceededError = require(\"./quotas-exceeded-error.cjs\");\nconst resourceExpiredError = require(\"./resource-expired-error.cjs\");\nconst resourceLockedError = require(\"./resource-locked-error.cjs\");\nconst resourceNotFoundError = require(\"./resource-not-found-error.cjs\");\nconst tooManyRequestsError = require(\"./too-many-requests-error.cjs\");\nconst transientStateError = require(\"./transient-state-error.cjs\");\nexports.ScalewayError = scwError.ScalewayError;\nexports.AlreadyExistsError = alreadyExistsError.AlreadyExistsError;\nexports.DeniedAuthenticationError = deniedAuthenticationError.DeniedAuthenticationError;\nexports.InvalidArgumentsError = invalidArgumentsError.InvalidArgumentsError;\nexports.OutOfStockError = outOfStockError.OutOfStockError;\nexports.PermissionsDeniedError = permissionsDeniedError.PermissionsDeniedError;\nexports.PreconditionFailedError = preconditionFailedError.PreconditionFailedError;\nexports.QuotasExceededError = quotasExceededError.QuotasExceededError;\nexports.ResourceExpiredError = resourceExpiredError.ResourceExpiredError;\nexports.ResourceLockedError = resourceLockedError.ResourceLockedError;\nexports.ResourceNotFoundError = resourceNotFoundError.ResourceNotFoundError;\nexports.TooManyRequestsError = tooManyRequestsError.TooManyRequestsError;\nexports.TransientStateError = transientStateError.TransientStateError;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst json = require(\"../../../helpers/json.cjs\");\nconst scwError = require(\"../scw-error.cjs\");\nconst buildMessage = (list) => {\n  const invalidArgs = list.reduce((acc, details) => {\n    let readableReason = \"\";\n    switch (details.reason) {\n      case \"required\":\n        readableReason = `is required`;\n        break;\n      case \"format\":\n        readableReason = `is wrongly formatted`;\n        break;\n      case \"constraint\":\n        readableReason = `does not respect constraint`;\n        break;\n      default:\n        readableReason = `is invalid for unexpected reason`;\n        break;\n    }\n    if (details.helpMessage && details.helpMessage.length > 0) {\n      readableReason = readableReason.concat(`, `, details.helpMessage);\n    }\n    acc.push(`${details.argumentName} ${readableReason}`);\n    return acc;\n  }, []);\n  return `invalid argument(s): ${invalidArgs.join(\"; \")}`;\n};\nclass InvalidArgumentsError extends scwError.ScalewayError {\n  constructor(status, body, details) {\n    super(status, body, buildMessage(details));\n    this.status = status;\n    this.body = body;\n    this.details = details;\n    this.name = \"InvalidArgumentsError\";\n  }\n  static fromJSON(status, obj) {\n    if (!Array.isArray(obj.details)) return null;\n    return new InvalidArgumentsError(\n      status,\n      obj,\n      obj.details.reduce(\n        (list, detail) => json.isJSONObject(detail) && typeof detail.argument_name === \"string\" && typeof detail.reason === \"string\" ? list.concat({\n          argumentName: detail.argument_name,\n          helpMessage: typeof detail.help_message === \"string\" ? detail.help_message : void 0,\n          reason: detail.reason\n        }) : list,\n        []\n      )\n    );\n  }\n}\nexports.InvalidArgumentsError = InvalidArgumentsError;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst scwError = require(\"../scw-error.cjs\");\nclass OutOfStockError extends scwError.ScalewayError {\n  constructor(status, body, resource) {\n    super(status, body, `resource ${resource} is out of stock`);\n    this.status = status;\n    this.body = body;\n    this.resource = resource;\n    this.name = \"OutOfStockError\";\n  }\n  static fromJSON(status, obj) {\n    if (typeof obj.resource !== \"string\") return null;\n    return new OutOfStockError(status, obj, obj.resource);\n  }\n}\nexports.OutOfStockError = OutOfStockError;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst json = require(\"../../../helpers/json.cjs\");\nconst scwError = require(\"../scw-error.cjs\");\nconst buildMessage = (list) => `insufficient permissions: ${list.map(({ action, resource }) => `${action} ${resource}`).join(\"; \")}`;\nclass PermissionsDeniedError extends scwError.ScalewayError {\n  constructor(status, body, list) {\n    super(status, body, buildMessage(list));\n    this.status = status;\n    this.body = body;\n    this.list = list;\n    this.name = \"PermissionsDeniedError\";\n  }\n  static fromJSON(status, obj) {\n    if (!Array.isArray(obj.details)) return null;\n    return new PermissionsDeniedError(\n      status,\n      obj,\n      obj.details.reduce(\n        (list, detail) => json.isJSONObject(detail) && typeof detail.resource === \"string\" && typeof detail.action === \"string\" ? list.concat({\n          action: detail.action,\n          resource: detail.resource\n        }) : list,\n        []\n      )\n    );\n  }\n}\nexports.PermissionsDeniedError = PermissionsDeniedError;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst scwError = require(\"../scw-error.cjs\");\nconst buildMessage = (precondition, helpMessage) => {\n  let message = `precondition failed: ${precondition}`;\n  if (typeof helpMessage === \"string\" && helpMessage.length > 0) {\n    message = message.concat(\", \", helpMessage);\n  }\n  return message;\n};\nclass PreconditionFailedError extends scwError.ScalewayError {\n  constructor(status, body, precondition, helpMessage) {\n    super(status, body, buildMessage(precondition, helpMessage));\n    this.status = status;\n    this.body = body;\n    this.precondition = precondition;\n    this.helpMessage = helpMessage;\n    this.name = \"PreconditionFailedError\";\n  }\n  static fromJSON(status, obj) {\n    if (typeof obj.precondition !== \"string\" || typeof obj.help_message !== \"string\") {\n      return null;\n    }\n    return new PreconditionFailedError(\n      status,\n      obj,\n      obj.precondition,\n      obj.help_message\n    );\n  }\n}\nexports.PreconditionFailedError = PreconditionFailedError;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst json = require(\"../../../helpers/json.cjs\");\nconst scwError = require(\"../scw-error.cjs\");\nconst buildMessage = (list) => `quota(s) exceeded: ${list.map((details) => {\n  const message = `${details.resource} has reached its quota (${details.current}/${details.quota})`;\n  return details.scope ? `${message} for ${details.scope.kind} '${details.scope.id}'` : message;\n}).join(\"; \")}`;\nconst buildScope = (detail) => {\n  if (typeof detail.organization_id === \"string\" && detail.organization_id.length) {\n    return { id: detail.organization_id, kind: \"organization\" };\n  }\n  if (typeof detail.project_id === \"string\" && detail.project_id.length) {\n    return { id: detail.project_id, kind: \"project\" };\n  }\n  return void 0;\n};\nclass QuotasExceededError extends scwError.ScalewayError {\n  constructor(status, body, list) {\n    super(status, body, buildMessage(list));\n    this.status = status;\n    this.body = body;\n    this.list = list;\n    this.name = \"QuotasExceededError\";\n  }\n  static fromJSON(status, obj) {\n    if (!Array.isArray(obj.details)) return null;\n    return new QuotasExceededError(\n      status,\n      obj,\n      obj.details.reduce(\n        (list, detail) => json.isJSONObject(detail) && typeof detail.resource === \"string\" && typeof detail.quota === \"number\" && typeof detail.current === \"number\" ? list.concat({\n          current: detail.current,\n          quota: detail.quota,\n          resource: detail.resource,\n          scope: buildScope(detail)\n        }) : list,\n        []\n      )\n    );\n  }\n}\nexports.QuotasExceededError = QuotasExceededError;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst scwError = require(\"../scw-error.cjs\");\nclass ResourceExpiredError extends scwError.ScalewayError {\n  constructor(status, body, resource, resourceId, expiredSince) {\n    super(\n      status,\n      body,\n      `resource ${resource} with ID ${resourceId} expired since ${expiredSince.toISOString()}`\n    );\n    this.status = status;\n    this.body = body;\n    this.resource = resource;\n    this.resourceId = resourceId;\n    this.expiredSince = expiredSince;\n    this.name = \"ResourceExpiredError\";\n  }\n  static fromJSON(status, obj) {\n    if (typeof obj.resource !== \"string\" || typeof obj.resource_id !== \"string\" || typeof obj.expired_since !== \"string\") {\n      return null;\n    }\n    return new ResourceExpiredError(\n      status,\n      obj,\n      obj.resource,\n      obj.resource_id,\n      new Date(obj.expired_since)\n    );\n  }\n}\nexports.ResourceExpiredError = ResourceExpiredError;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst scwError = require(\"../scw-error.cjs\");\nclass ResourceLockedError extends scwError.ScalewayError {\n  constructor(status, body, resource, resourceId) {\n    super(status, body, `resource ${resource} with ID ${resourceId} is locked`);\n    this.status = status;\n    this.body = body;\n    this.resource = resource;\n    this.resourceId = resourceId;\n    this.name = \"ResourceLockedError\";\n  }\n  static fromJSON(status, obj) {\n    if (typeof obj.resource !== \"string\" || typeof obj.resource_id !== \"string\") {\n      return null;\n    }\n    return new ResourceLockedError(status, obj, obj.resource, obj.resource_id);\n  }\n}\nexports.ResourceLockedError = ResourceLockedError;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst scwError = require(\"../scw-error.cjs\");\nclass ResourceNotFoundError extends scwError.ScalewayError {\n  constructor(status, body, resource, resourceId) {\n    super(\n      status,\n      body,\n      `resource ${resource} with ID ${resourceId} is not found`\n    );\n    this.status = status;\n    this.body = body;\n    this.resource = resource;\n    this.resourceId = resourceId;\n    this.name = \"ResourceNotFoundError\";\n  }\n  static fromJSON(status, obj) {\n    if (typeof obj.resource !== \"string\" || typeof obj.resource_id !== \"string\") {\n      return null;\n    }\n    return new ResourceNotFoundError(status, obj, obj.resource, obj.resource_id);\n  }\n}\nexports.ResourceNotFoundError = ResourceNotFoundError;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst json = require(\"../../../helpers/json.cjs\");\nconst scwError = require(\"../scw-error.cjs\");\nconst buildMessage = (helpMessage, limit, resetSeconds, resetAt) => {\n  const details = [];\n  if (limit) {\n    if (limit.windowSeconds) {\n      details.push(`quota is ${limit.quota} for ${limit.windowSeconds}s`);\n    } else {\n      details.push(`quota is ${limit.quota}`);\n    }\n  }\n  if (resetSeconds) {\n    details.push(`resets in ${resetSeconds}s`);\n  } else if (resetAt) {\n    details.push(`resets at ${resetAt.toISOString()}`);\n  }\n  let output = `too many requests`;\n  if (details.length > 0) {\n    output += ` (${details.join(\", \")})`;\n  }\n  if (helpMessage.length > 0) {\n    output += `: ${helpMessage}`;\n  }\n  return output;\n};\nclass TooManyRequestsError extends scwError.ScalewayError {\n  constructor(status, body, helpMessage, limit, resetSeconds, resetAt) {\n    super(status, body, buildMessage(helpMessage, limit, resetSeconds, resetAt));\n    this.status = status;\n    this.body = body;\n    this.helpMessage = helpMessage;\n    this.limit = limit;\n    this.resetSeconds = resetSeconds;\n    this.resetAt = resetAt;\n    this.name = \"TooManyRequestsError\";\n  }\n  static fromJSON(status, obj) {\n    if (typeof obj.help_message !== \"string\") return null;\n    let limit;\n    if (json.isJSONObject(obj.limit) && typeof obj.limit.quota === \"number\") {\n      limit = {\n        quota: obj.limit.quota,\n        windowSeconds: typeof obj.limit.window_seconds === \"number\" ? obj.limit.window_seconds : void 0\n      };\n    }\n    return new TooManyRequestsError(\n      status,\n      obj,\n      obj.help_message,\n      limit,\n      typeof obj.reset_seconds === \"number\" ? obj.reset_seconds : void 0,\n      typeof obj.reset_at === \"string\" ? new Date(obj.reset_at) : void 0\n    );\n  }\n}\nexports.TooManyRequestsError = TooManyRequestsError;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst scwError = require(\"../scw-error.cjs\");\nclass TransientStateError extends scwError.ScalewayError {\n  constructor(status, body, resource, resourceId, currentState) {\n    super(\n      status,\n      body,\n      `resource ${resource} with ID ${resourceId} is in a transient state: ${currentState}`\n    );\n    this.status = status;\n    this.body = body;\n    this.resource = resource;\n    this.resourceId = resourceId;\n    this.currentState = currentState;\n    this.name = \"TransientStateError\";\n  }\n  static fromJSON(status, obj) {\n    if (typeof obj.resource !== \"string\" || typeof obj.resource_id !== \"string\" || typeof obj.current_state !== \"string\") {\n      return null;\n    }\n    return new TransientStateError(\n      status,\n      obj,\n      obj.resource,\n      obj.resource_id,\n      obj.current_state\n    );\n  }\n}\nexports.TransientStateError = TransientStateError;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst json = require(\"../../helpers/json.cjs\");\nconst isRecordOfStringArray = (obj) => {\n  if (!json.isJSONObject(obj)) {\n    return false;\n  }\n  for (const elt of Object.values(obj)) {\n    if (!Array.isArray(elt) || Object.values(elt).find((x) => typeof x !== \"string\") !== void 0) {\n      return false;\n    }\n  }\n  return true;\n};\nexports.isRecordOfStringArray = isRecordOfStringArray;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst isBrowser = require(\"../../helpers/is-browser.cjs\");\nconst composer = require(\"../../internal/interceptors/composer.cjs\");\nconst auth = require(\"../auth.cjs\");\nconst httpInterceptors = require(\"./http-interceptors.cjs\");\nconst responseParser = require(\"./response-parser.cjs\");\nconst buildRequest = (request, settings) => {\n  let { path } = request;\n  if (request.urlParams instanceof URLSearchParams) {\n    path = path.concat(`?${request.urlParams.toString()}`);\n  }\n  return new Request(`${settings.apiURL}${path}`, {\n    body: request.body,\n    headers: {\n      Accept: \"application/json\",\n      .../* istanbul ignore next */\n      !isBrowser.isBrowser() ? { \"User-Agent\": settings.userAgent } : {},\n      ...request.headers\n    },\n    method: request.method\n  });\n};\nconst asIs = (response) => response;\nconst buildFetcher = (settings, httpClient) => {\n  let requestNumber = 0;\n  const prepareRequest = (requestId) => composer.composeRequestInterceptors([\n    ...settings.interceptors.map((obj) => obj.request).filter((obj) => obj),\n    httpInterceptors.logRequest(requestId, httpInterceptors.obfuscateInterceptor(auth.obfuscateAuthHeadersEntry))\n  ]);\n  const prepareResponse = (requestId) => composer.composeResponseInterceptors([\n    ...settings.interceptors.map((obj) => obj.response).filter((obj) => obj),\n    httpInterceptors.logResponse(requestId)\n  ]);\n  const prepareResponseErrors = () => composer.composeResponseErrorInterceptors(\n    settings.interceptors.map((obj) => obj.responseError).filter((obj) => obj)\n  );\n  return async (request, unwrapper = asIs) => {\n    const requestId = `${requestNumber += 1}`;\n    const reqInterceptors = prepareRequest(requestId);\n    const finalRequest = await reqInterceptors(buildRequest(request, settings));\n    try {\n      const response = await httpClient(finalRequest);\n      const resInterceptors = prepareResponse(requestId);\n      const finalResponse = await resInterceptors(response);\n      const resUnmarshaller = responseParser.responseParser(\n        unwrapper,\n        request.responseType ?? \"json\"\n      );\n      const unmarshaledResponse = await resUnmarshaller(finalResponse);\n      return unmarshaledResponse;\n    } catch (err) {\n      const resErrorInterceptors = prepareResponseErrors();\n      const handledError = await resErrorInterceptors(finalRequest, err);\n      return unwrapper(handledError);\n    }\n  };\n};\nexports.buildFetcher = buildFetcher;\nexports.buildRequest = buildRequest;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst toPascalCase = (str) => str.replace(\n  /\\w+/g,\n  (word) => `${word[0].toUpperCase()}${word.slice(1).toLowerCase()}`\n);\nconst serializeHeadersEntry = ([name, value]) => `${toPascalCase(name)}: ${value}`;\nconst serializeHeaders = (headers) => Array.from(headers.entries(), serializeHeadersEntry);\nconst dumpRequest = async (request) => [\n  `${request.method.toUpperCase()}: ${request.url}`,\n  ...serializeHeaders(request.headers),\n  await request.clone().text()\n].join(\"\\r\\n\");\nconst dumpResponse = async (response) => [\n  `HTTP ${response.status} ${response.ok ? \"OK\" : \"NOK\"}`,\n  ...serializeHeaders(response.headers),\n  await response.clone().text()\n].join(\"\\r\\n\");\nexports.dumpRequest = dumpRequest;\nexports.dumpResponse = dumpResponse;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst index = require(\"../../internal/logger/index.cjs\");\nconst levelResolver = require(\"../../internal/logger/level-resolver.cjs\");\nconst httpDumper = require(\"./http-dumper.cjs\");\nclass ObfuscatedRequest extends Request {\n  constructor(request, obfuscate) {\n    super(request);\n    this.request = request;\n    this.obfuscate = obfuscate;\n  }\n  get headers() {\n    return new Headers(Array.from(this.request.headers, this.obfuscate));\n  }\n  clone() {\n    return new ObfuscatedRequest(this.request, this.obfuscate);\n  }\n}\nconst obfuscateInterceptor = (obfuscate) => ({ request }) => new ObfuscatedRequest(request, obfuscate);\nconst identity = ({ request }) => request;\nconst logRequest = (identifier, obfuscate = identity) => async ({ request }) => {\n  if (levelResolver.shouldLog(levelResolver.LevelResolver[index.getLogger().logLevel], \"debug\")) {\n    index.getLogger().debug(\n      `--------------- Scaleway SDK REQUEST ${identifier} ---------------\n${await httpDumper.dumpRequest(await obfuscate({ request }))}\n---------------------------------------------------------`\n    );\n  }\n  return request;\n};\nconst logResponse = (identifier) => async ({ response }) => {\n  if (levelResolver.shouldLog(levelResolver.LevelResolver[index.getLogger().logLevel], \"debug\")) {\n    index.getLogger().debug(\n      `--------------- Scaleway SDK RESPONSE ${identifier} ---------------\n${await httpDumper.dumpResponse(response)}\n---------------------------------------------------------`\n    );\n  }\n  return response;\n};\nexports.logRequest = logRequest;\nexports.logResponse = logResponse;\nexports.obfuscateInterceptor = obfuscateInterceptor;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst extract = (key) => (result) => result[key];\nfunction* pages(key, fetcher, request, firstPage) {\n  if (!Array.isArray(firstPage[key])) {\n    throw new Error(`Property ${key} is not a list in paginated result`);\n  }\n  const getList = extract(key);\n  let page = request.page || 1;\n  if (page === 1) {\n    yield Promise.resolve(getList(firstPage));\n    page += 1;\n  }\n  const { length } = firstPage[key];\n  if (!length) return;\n  const { totalCount } = firstPage;\n  while (page <= Math.floor((totalCount + length - 1) / length)) {\n    yield fetcher({ ...request, page }).then(getList);\n    page += 1;\n  }\n}\nasync function* fetchPaginated(key, fetcher, request, initial = fetcher(request)) {\n  yield* pages(key, fetcher, request, await initial);\n}\nconst fetchAll = async (key, fetcher, request, initial = fetcher(request)) => (await Promise.all(Array.from(pages(key, fetcher, request, await initial)))).flat();\nconst enrichForPagination = (key, fetcher, request) => {\n  const firstPage = fetcher(request);\n  return Object.assign(firstPage, {\n    all: () => fetchAll(key, fetcher, request, firstPage),\n    [Symbol.asyncIterator]: () => fetchPaginated(key, fetcher, request, firstPage)\n  });\n};\nexports.enrichForPagination = enrichForPagination;\nexports.extract = extract;\nexports.fetchAll = fetchAll;\nexports.fetchPaginated = fetchPaginated;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nconst isResponse = require(\"../../helpers/is-response.cjs\");\nconst json = require(\"../../helpers/json.cjs\");\nconst errorParser = require(\"../errors/error-parser.cjs\");\nconst scwError = require(\"../errors/scw-error.cjs\");\nconst X_TOTAL_COUNT_HEADER_KEY = \"x-total-count\";\nconst TOTAL_COUNT_RES_KEY = \"total_count\";\nconst fixLegacyTotalCount = (obj, headers) => {\n  const headerVal = headers.get(X_TOTAL_COUNT_HEADER_KEY);\n  if (!headerVal) {\n    return obj;\n  }\n  const totalCount = parseInt(headerVal, 10);\n  if (Number.isNaN(totalCount)) {\n    return obj;\n  }\n  if (json.isJSONObject(obj) && !(TOTAL_COUNT_RES_KEY in obj)) {\n    return Object.assign(obj, { [TOTAL_COUNT_RES_KEY]: totalCount });\n  }\n  return obj;\n};\nconst responseParser = (unmarshaller, responseType) => async (response) => {\n  if (!isResponse.isResponse(response)) {\n    throw new TypeError(\"Invalid response object\");\n  }\n  if (response.ok) {\n    if (response.status === 204) return unmarshaller(void 0);\n    const contentType = response.headers.get(\"Content-Type\");\n    try {\n      if (responseType === \"json\" && contentType === \"application/json\") {\n        return unmarshaller(\n          fixLegacyTotalCount(await response.json(), response.headers)\n        );\n      }\n      if (responseType === \"blob\") {\n        return unmarshaller(await response.blob());\n      }\n      return unmarshaller(await response.text());\n    } catch (err) {\n      throw new scwError.ScalewayError(\n        response.status,\n        `could not parse '${contentType ?? \"\"}' response${err instanceof Error ? `: ${err.message}` : \"\"}`\n      );\n    }\n  }\n  const error = await response.clone().json().catch(() => response.text());\n  if (json.isJSONObject(error)) throw errorParser.parseScalewayError(response.status, error);\n  throw new scwError.ScalewayError(\n    response.status,\n    typeof error === \"string\" ? error : \"cannot read error response body\"\n  );\n};\nexports.fixLegacyTotalCount = fixLegacyTotalCount;\nexports.responseParser = responseParser;\n","\"use strict\";\nObject.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\nvar lookup = [];\nvar code = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i];\n}\nfunction tripletToBase64(num) {\n  return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];\n}\nfunction encodeChunk(uint8, start, end) {\n  var tmp;\n  var output = [];\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16 & 16711680) + (uint8[i + 1] << 8 & 65280) + (uint8[i + 2] & 255);\n    output.push(tripletToBase64(tmp));\n  }\n  return output.join(\"\");\n}\nfunction fromByteArray(uint8) {\n  var tmp;\n  var len = uint8.length;\n  var extraBytes = len % 3;\n  var parts = [];\n  var maxChunkLength = 16383;\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));\n  }\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1];\n    parts.push(\n      lookup[tmp >> 2] + lookup[tmp << 4 & 63] + \"==\"\n    );\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1];\n    parts.push(\n      lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + \"=\"\n    );\n  }\n  return parts.join(\"\");\n}\nexports.fromByteArray = fromByteArray;\n","\"use strict\";\nconst ADJECTIVES = [\n  \"admiring\",\n  \"adoring\",\n  \"affectionate\",\n  \"agitated\",\n  \"amazing\",\n  \"angry\",\n  \"awesome\",\n  \"beautiful\",\n  \"blissful\",\n  \"bold\",\n  \"boring\",\n  \"brave\",\n  \"busy\",\n  \"charming\",\n  \"clever\",\n  \"cool\",\n  \"compassionate\",\n  \"competent\",\n  \"condescending\",\n  \"confident\",\n  \"cranky\",\n  \"crazy\",\n  \"dazzling\",\n  \"determined\",\n  \"distracted\",\n  \"dreamy\",\n  \"eager\",\n  \"ecstatic\",\n  \"elastic\",\n  \"elated\",\n  \"elegant\",\n  \"eloquent\",\n  \"epic\",\n  \"exciting\",\n  \"fervent\",\n  \"festive\",\n  \"flamboyant\",\n  \"focused\",\n  \"friendly\",\n  \"frosty\",\n  \"funny\",\n  \"gallant\",\n  \"gifted\",\n  \"goofy\",\n  \"gracious\",\n  \"great\",\n  \"happy\",\n  \"hardcore\",\n  \"heuristic\",\n  \"hopeful\",\n  \"hungry\",\n  \"infallible\",\n  \"inspiring\",\n  \"interesting\",\n  \"intelligent\",\n  \"jolly\",\n  \"jovial\",\n  \"keen\",\n  \"kind\",\n  \"laughing\",\n  \"loving\",\n  \"lucid\",\n  \"magical\",\n  \"mystifying\",\n  \"modest\",\n  \"musing\",\n  \"naughty\",\n  \"nervous\",\n  \"nice\",\n  \"nifty\",\n  \"nostalgic\",\n  \"objective\",\n  \"optimistic\",\n  \"peaceful\",\n  \"pedantic\",\n  \"pensive\",\n  \"practical\",\n  \"priceless\",\n  \"quirky\",\n  \"quizzical\",\n  \"recursing\",\n  \"relaxed\",\n  \"reverent\",\n  \"romantic\",\n  \"sad\",\n  \"serene\",\n  \"sharp\",\n  \"silly\",\n  \"sleepy\",\n  \"stoic\",\n  \"strange\",\n  \"stupefied\",\n  \"suspicious\",\n  \"sweet\",\n  \"tender\",\n  \"thirsty\",\n  \"trusting\",\n  \"unruffled\",\n  \"upbeat\",\n  \"vibrant\",\n  \"vigilant\",\n  \"vigorous\",\n  \"wizardly\",\n  \"wonderful\",\n  \"xenodochial\",\n  \"youthful\",\n  \"zealous\",\n  \"zen\"\n];\nconst NAMES = [\n  // Muhammad ibn Jābir al-Ḥarrānī al-Battānī was a founding father of astronomy. https://en.wikipedia.org/wiki/Mu%E1%B8%A5ammad_ibn_J%C4%81bir_al-%E1%B8%A4arr%C4%81n%C4%AB_al-Batt%C4%81n%C4%AB\n  \"albattani\",\n  // Frances E. Allen, became the first female IBM Fellow in 1989. In 2006, she became the first female recipient of the ACM's Turing Award. https://en.wikipedia.org/wiki/Frances_E._Allen\n  \"allen\",\n  // June Almeida - Scottish virologist who took the first pictures of the rubella virus - https://en.wikipedia.org/wiki/June_Almeida\n  \"almeida\",\n  // Kathleen Antonelli, American computer programmer and one of the six original programmers of the ENIAC - https://en.wikipedia.org/wiki/Kathleen_Antonelli\n  \"antonelli\",\n  // Maria Gaetana Agnesi - Italian mathematician, philosopher, theologian and humanitarian. She was the first woman to write a mathematics handbook and the first woman appointed as a Mathematics Professor at a University. https://en.wikipedia.org/wiki/Maria_Gaetana_Agnesi\n  \"agnesi\",\n  // Archimedes was a physicist, engineer and mathematician who invented too many things to list them here. https://en.wikipedia.org/wiki/Archimedes\n  \"archimedes\",\n  // Maria Ardinghelli - Italian translator, mathematician and physicist - https://en.wikipedia.org/wiki/Maria_Ardinghelli\n  \"ardinghelli\",\n  // Aryabhata - Ancient Indian mathematician-astronomer during 476-550 CE https://en.wikipedia.org/wiki/Aryabhata\n  \"aryabhata\",\n  // Wanda Austin - Wanda Austin is the President and CEO of The Aerospace Corporation, a leading architect for the US security space programs. https://en.wikipedia.org/wiki/Wanda_Austin\n  \"austin\",\n  // Charles Babbage invented the concept of a programmable computer. https://en.wikipedia.org/wiki/Charles_Babbage.\n  \"babbage\",\n  // Stefan Banach - Polish mathematician, was one of the founders of modern functional analysis. https://en.wikipedia.org/wiki/Stefan_Banach\n  \"banach\",\n  // Buckaroo Banzai and his mentor Dr. Hikita perfected the \"oscillation overthruster\", a device that allows one to pass through solid matter. - https://en.wikipedia.org/wiki/The_Adventures_of_Buckaroo_Banzai_Across_the_8th_Dimension\n  \"banzai\",\n  // John Bardeen co-invented the transistor - https://en.wikipedia.org/wiki/John_Bardeen\n  \"bardeen\",\n  // Jean Bartik, born Betty Jean Jennings, was one of the original programmers for the ENIAC computer. https://en.wikipedia.org/wiki/Jean_Bartik\n  \"bartik\",\n  // Laura Bassi, the world's first female professor https://en.wikipedia.org/wiki/Laura_Bassi\n  \"bassi\",\n  // Hugh Beaver, British engineer, founder of the Guinness Book of World Records https://en.wikipedia.org/wiki/Hugh_Beaver\n  \"beaver\",\n  // Alexander Graham Bell - an eminent Scottish-born scientist, inventor, engineer and innovator who is credited with inventing the first practical telephone - https://en.wikipedia.org/wiki/Alexander_Graham_Bell\n  \"bell\",\n  // Karl Friedrich Benz - a German automobile engineer. Inventor of the first practical motorcar. https://en.wikipedia.org/wiki/Karl_Benz\n  \"benz\",\n  // Homi J Bhabha - was an Indian nuclear physicist, founding director, and professor of physics at the Tata Institute of Fundamental Research. Colloquially known as \"father of Indian nuclear programme\"- https://en.wikipedia.org/wiki/Homi_J._Bhabha\n  \"bhabha\",\n  // Bhaskara II - Ancient Indian mathematician-astronomer whose work on calculus predates Newton and Leibniz by over half a millennium - https://en.wikipedia.org/wiki/Bh%C4%81skara_II#Calculus\n  \"bhaskara\",\n  // Sue Black - British computer scientist and campaigner. She has been instrumental in saving Bletchley Park, the site of World War II codebreaking - https://en.wikipedia.org/wiki/Sue_Black_(computer_scientist)\n  \"black\",\n  // Elizabeth Helen Blackburn - Australian-American Nobel laureate; best known for co-discovering telomerase. https://en.wikipedia.org/wiki/Elizabeth_Blackburn\n  \"blackburn\",\n  // Elizabeth Blackwell - American doctor and first American woman to receive a medical degree - https://en.wikipedia.org/wiki/Elizabeth_Blackwell\n  \"blackwell\",\n  // Niels Bohr is the father of quantum theory. https://en.wikipedia.org/wiki/Niels_Bohr.\n  \"bohr\",\n  // Kathleen Booth, she's credited with writing the first assembly language. https://en.wikipedia.org/wiki/Kathleen_Booth\n  \"booth\",\n  // Anita Borg - Anita Borg was the founding director of the Institute for Women and Technology (IWT). https://en.wikipedia.org/wiki/Anita_Borg\n  \"borg\",\n  // Satyendra Nath Bose - He provided the foundation for Bose–Einstein statistics and the theory of the Bose–Einstein condensate. - https://en.wikipedia.org/wiki/Satyendra_Nath_Bose\n  \"bose\",\n  // Katherine Louise Bouman is an imaging scientist and Assistant Professor of Computer Science at the California Institute of Technology. She researches computational methods for imaging, and developed an algorithm that made possible the picture first visualization of a black hole using the Event Horizon Telescope. - https://en.wikipedia.org/wiki/Katie_Bouman\n  \"bouman\",\n  // Evelyn Boyd Granville - She was one of the first African-American woman to receive a Ph.D. in mathematics; she earned it in 1949 from Yale University. https://en.wikipedia.org/wiki/Evelyn_Boyd_Granville\n  \"boyd\",\n  // Brahmagupta - Ancient Indian mathematician during 598-670 CE who gave rules to compute with zero - https://en.wikipedia.org/wiki/Brahmagupta#Zero\n  \"brahmagupta\",\n  // Walter Houser Brattain co-invented the transistor - https://en.wikipedia.org/wiki/Walter_Houser_Brattain\n  \"brattain\",\n  // Emmett Brown invented time travel. https://en.wikipedia.org/wiki/Emmett_Brown (thanks Brian Goff)\n  \"brown\",\n  // Linda Brown Buck - American biologist and Nobel laureate best known for her genetic and molecular analyses of the mechanisms of smell. https://en.wikipedia.org/wiki/Linda_B._Buck\n  \"buck\",\n  // Dame Susan Jocelyn Bell Burnell - Northern Irish astrophysicist who discovered radio pulsars and was the first to analyse them. https://en.wikipedia.org/wiki/Jocelyn_Bell_Burnell\n  \"burnell\",\n  // Annie Jump Cannon - pioneering female astronomer who classified hundreds of thousands of stars and created the system we use to understand stars today. https://en.wikipedia.org/wiki/Annie_Jump_Cannon\n  \"cannon\",\n  // Rachel Carson - American marine biologist and conservationist, her book Silent Spring and other writings are credited with advancing the global environmental movement. https://en.wikipedia.org/wiki/Rachel_Carson\n  \"carson\",\n  // Dame Mary Lucy Cartwright - British mathematician who was one of the first to study what is now known as chaos theory. Also known for Cartwright's theorem which finds applications in signal processing. https://en.wikipedia.org/wiki/Mary_Cartwright\n  \"cartwright\",\n  // George Washington Carver - American agricultural scientist and inventor. He was the most prominent black scientist of the early 20th century. https://en.wikipedia.org/wiki/George_Washington_Carver\n  \"carver\",\n  // Vinton Gray Cerf - American Internet pioneer, recognised as one of \"the fathers of the Internet\". With Robert Elliot Kahn, he designed TCP and IP, the primary data communication protocols of the Internet and other computer networks. https://en.wikipedia.org/wiki/Vint_Cerf\n  \"cerf\",\n  // Subrahmanyan Chandrasekhar - Astrophysicist known for his mathematical theory on different stages and evolution in structures of the stars. He has won nobel prize for physics - https://en.wikipedia.org/wiki/Subrahmanyan_Chandrasekhar\n  \"chandrasekhar\",\n  // Sergey Alexeyevich Chaplygin (Russian: Серге́й Алексе́евич Чаплы́гин; April 5, 1869 – October 8, 1942) was a Russian and Soviet physicist, mathematician, and mechanical engineer. He is known for mathematical formulas such as Chaplygin's equation and for a hypothetical substance in cosmology called Chaplygin gas, named after him. https://en.wikipedia.org/wiki/Sergey_Chaplygin\n  \"chaplygin\",\n  // Émilie du Châtelet - French natural philosopher, mathematician, physicist, and author during the early 1730s, known for her translation of and commentary on Isaac Newton's book Principia containing basic laws of physics. https://en.wikipedia.org/wiki/%C3%89milie_du_Ch%C3%A2telet\n  \"chatelet\",\n  // Asima Chatterjee was an Indian organic chemist noted for her research on vinca alkaloids, development of drugs for treatment of epilepsy and malaria - https://en.wikipedia.org/wiki/Asima_Chatterjee\n  \"chatterjee\",\n  // Pafnuty Chebyshev - Russian mathematician. He is known fo his works on probability, statistics, mechanics, analytical geometry and number theory https://en.wikipedia.org/wiki/Pafnuty_Chebyshev\n  \"chebyshev\",\n  // Bram Cohen - American computer programmer and author of the BitTorrent peer-to-peer protocol. https://en.wikipedia.org/wiki/Bram_Cohen\n  \"cohen\",\n  // David Lee Chaum - American computer scientist and cryptographer. Known for his seminal contributions in the field of anonymous communication. https://en.wikipedia.org/wiki/David_Chaum\n  \"chaum\",\n  // Joan Clarke - Bletchley Park code breaker during the Second World War who pioneered techniques that remained top secret for decades. Also an accomplished numismatist https://en.wikipedia.org/wiki/Joan_Clarke\n  \"clarke\",\n  // Jane Colden - American botanist widely considered the first female American botanist - https://en.wikipedia.org/wiki/Jane_Colden\n  \"colden\",\n  // Gerty Theresa Cori - American biochemist who became the third woman—and first American woman—to win a Nobel Prize in science, and the first woman to be awarded the Nobel Prize in Physiology or Medicine. Cori was born in Prague. https://en.wikipedia.org/wiki/Gerty_Cori\n  \"cori\",\n  // Seymour Roger Cray was an American electrical engineer and supercomputer architect who designed a series of computers that were the fastest in the world for decades. https://en.wikipedia.org/wiki/Seymour_Cray\n  \"cray\",\n  // This entry reflects a husband and wife team who worked together:\n  // Joan Curran was a Welsh scientist who developed radar and invented chaff, a radar countermeasure. https://en.wikipedia.org/wiki/Joan_Curran\n  // Samuel Curran was an Irish physicist who worked alongside his wife during WWII and invented the proximity fuse. https://en.wikipedia.org/wiki/Samuel_Curran\n  \"curran\",\n  // Marie Curie discovered radioactivity. https://en.wikipedia.org/wiki/Marie_Curie.\n  \"curie\",\n  // Charles Darwin established the principles of natural evolution. https://en.wikipedia.org/wiki/Charles_Darwin.\n  \"darwin\",\n  // Leonardo Da Vinci invented too many things to list here. https://en.wikipedia.org/wiki/Leonardo_da_Vinci.\n  \"davinci\",\n  // A. K. (Alexander Keewatin) Dewdney, Canadian mathematician, computer scientist, author and filmmaker. Contributor to Scientific American's \"Computer Recreations\" from 1984 to 1991. Author of Core War (program), The Planiverse, The Armchair Universe, The Magic Machine, The New Turing Omnibus, and more. https://en.wikipedia.org/wiki/Alexander_Dewdney\n  \"dewdney\",\n  // Satish Dhawan - Indian mathematician and aerospace engineer, known for leading the successful and indigenous development of the Indian space programme. https://en.wikipedia.org/wiki/Satish_Dhawan\n  \"dhawan\",\n  // Bailey Whitfield Diffie - American cryptographer and one of the pioneers of public-key cryptography. https://en.wikipedia.org/wiki/Whitfield_Diffie\n  \"diffie\",\n  // Edsger Wybe Dijkstra was a Dutch computer scientist and mathematical scientist. https://en.wikipedia.org/wiki/Edsger_W._Dijkstra.\n  \"dijkstra\",\n  // Paul Adrien Maurice Dirac - English theoretical physicist who made fundamental contributions to the early development of both quantum mechanics and quantum electrodynamics. https://en.wikipedia.org/wiki/Paul_Dirac\n  \"dirac\",\n  // Agnes Meyer Driscoll - American cryptanalyst during World Wars I and II who successfully cryptanalysed a number of Japanese ciphers. She was also the co-developer of one of the cipher machines of the US Navy, the CM. https://en.wikipedia.org/wiki/Agnes_Meyer_Driscoll\n  \"driscoll\",\n  // Donna Dubinsky - played an integral role in the development of personal digital assistants (PDAs) serving as CEO of Palm, Inc. and co-founding Handspring. https://en.wikipedia.org/wiki/Donna_Dubinsky\n  \"dubinsky\",\n  // Annie Easley - She was a leading member of the team which developed software for the Centaur rocket stage and one of the first African-Americans in her field. https://en.wikipedia.org/wiki/Annie_Easley\n  \"easley\",\n  // Thomas Alva Edison, prolific inventor https://en.wikipedia.org/wiki/Thomas_Edison\n  \"edison\",\n  // Albert Einstein invented the general theory of relativity. https://en.wikipedia.org/wiki/Albert_Einstein\n  \"einstein\",\n  // Alexandra Asanovna Elbakyan (Russian: Алекса́ндра Аса́новна Элбакя́н) is a Kazakhstani graduate student, computer programmer, internet pirate in hiding, and the creator of the site Sci-Hub. Nature has listed her in 2016 in the top ten people that mattered in science, and Ars Technica has compared her to Aaron Swartz. - https://en.wikipedia.org/wiki/Alexandra_Elbakyan\n  \"elbakyan\",\n  // Taher A. ElGamal - Egyptian cryptographer best known for the ElGamal discrete log cryptosystem and the ElGamal digital signature scheme. https://en.wikipedia.org/wiki/Taher_Elgamal\n  \"elgamal\",\n  // Gertrude Elion - American biochemist, pharmacologist and the 1988 recipient of the Nobel Prize in Medicine - https://en.wikipedia.org/wiki/Gertrude_Elion\n  \"elion\",\n  // James Henry Ellis - British engineer and cryptographer employed by the GCHQ. Best known for conceiving for the first time, the idea of public-key cryptography. https://en.wikipedia.org/wiki/James_H._Ellis\n  \"ellis\",\n  // Douglas Engelbart gave the mother of all demos: https://en.wikipedia.org/wiki/Douglas_Engelbart\n  \"engelbart\",\n  // Euclid invented geometry. https://en.wikipedia.org/wiki/Euclid\n  \"euclid\",\n  // Leonhard Euler invented large parts of modern mathematics. https://de.wikipedia.org/wiki/Leonhard_Euler\n  \"euler\",\n  // Michael Faraday - British scientist who contributed to the study of electromagnetism and electrochemistry. https://en.wikipedia.org/wiki/Michael_Faraday\n  \"faraday\",\n  // Horst Feistel - German-born American cryptographer who was one of the earliest non-government researchers to study the design and theory of block ciphers. Co-developer of DES and Lucifer. Feistel networks, a symmetric structure used in the construction of block ciphers are named after him. https://en.wikipedia.org/wiki/Horst_Feistel\n  \"feistel\",\n  // Pierre de Fermat pioneered several aspects of modern mathematics. https://en.wikipedia.org/wiki/Pierre_de_Fermat\n  \"fermat\",\n  // Enrico Fermi invented the first nuclear reactor. https://en.wikipedia.org/wiki/Enrico_Fermi.\n  \"fermi\",\n  // Richard Feynman was a key contributor to quantum mechanics and particle physics. https://en.wikipedia.org/wiki/Richard_Feynman\n  \"feynman\",\n  // Benjamin Franklin is famous for his experiments in electricity and the invention of the lightning rod.\n  \"franklin\",\n  // Yuri Alekseyevich Gagarin - Soviet pilot and cosmonaut, best known as the first human to journey into outer space. https://en.wikipedia.org/wiki/Yuri_Gagarin\n  \"gagarin\",\n  // Galileo was a founding father of modern astronomy, and faced politics and obscurantism to establish scientific truth.  https://en.wikipedia.org/wiki/Galileo_Galilei\n  \"galileo\",\n  // Évariste Galois - French mathematician whose work laid the foundations of Galois theory and group theory, two major branches of abstract algebra, and the subfield of Galois connections, all while still in his late teens. https://en.wikipedia.org/wiki/%C3%89variste_Galois\n  \"galois\",\n  // Kadambini Ganguly - Indian physician, known for being the first South Asian female physician, trained in western medicine, to graduate in South Asia. https://en.wikipedia.org/wiki/Kadambini_Ganguly\n  \"ganguly\",\n  // William Henry \"Bill\" Gates III is an American business magnate, philanthropist, investor, computer programmer, and inventor. https://en.wikipedia.org/wiki/Bill_Gates\n  \"gates\",\n  // Johann Carl Friedrich Gauss - German mathematician who made significant contributions to many fields, including number theory, algebra, statistics, analysis, differential geometry, geodesy, geophysics, mechanics, electrostatics, magnetic fields, astronomy, matrix theory, and optics. https://en.wikipedia.org/wiki/Carl_Friedrich_Gauss\n  \"gauss\",\n  // Marie-Sophie Germain - French mathematician, physicist and philosopher. Known for her work on elasticity theory, number theory and philosophy. https://en.wikipedia.org/wiki/Sophie_Germain\n  \"germain\",\n  // Adele Goldberg, was one of the designers and developers of the Smalltalk language. https://en.wikipedia.org/wiki/Adele_Goldberg_(computer_scientist)\n  \"goldberg\",\n  // Adele Goldstine, born Adele Katz, wrote the complete technical description for the first electronic digital computer, ENIAC. https://en.wikipedia.org/wiki/Adele_Goldstine\n  \"goldstine\",\n  // Shafi Goldwasser is a computer scientist known for creating theoretical foundations of modern cryptography. Winner of 2012 ACM Turing Award. https://en.wikipedia.org/wiki/Shafi_Goldwasser\n  \"goldwasser\",\n  // James Golick, all around gangster.\n  \"golick\",\n  // Jane Goodall - British primatologist, ethologist, and anthropologist who is considered to be the world's foremost expert on chimpanzees - https://en.wikipedia.org/wiki/Jane_Goodall\n  \"goodall\",\n  // Stephen Jay Gould was was an American paleontologist, evolutionary biologist, and historian of science. He is most famous for the theory of punctuated equilibrium - https://en.wikipedia.org/wiki/Stephen_Jay_Gould\n  \"gould\",\n  // Carolyn Widney Greider - American molecular biologist and joint winner of the 2009 Nobel Prize for Physiology or Medicine for the discovery of telomerase. https://en.wikipedia.org/wiki/Carol_W._Greider\n  \"greider\",\n  // Alexander Grothendieck - German-born French mathematician who became a leading figure in the creation of modern algebraic geometry. https://en.wikipedia.org/wiki/Alexander_Grothendieck\n  \"grothendieck\",\n  // Lois Haibt - American computer scientist, part of the team at IBM that developed FORTRAN - https://en.wikipedia.org/wiki/Lois_Haibt\n  \"haibt\",\n  // Margaret Hamilton - Director of the Software Engineering Division of the MIT Instrumentation Laboratory, which developed on-board flight software for the Apollo space program. https://en.wikipedia.org/wiki/Margaret_Hamilton_(scientist)\n  \"hamilton\",\n  // Caroline Harriet Haslett - English electrical engineer, electricity industry administrator and champion of women's rights. Co-author of British Standard 1363 that specifies AC power plugs and sockets used across the United Kingdom (which is widely considered as one of the safest designs). https://en.wikipedia.org/wiki/Caroline_Haslett\n  \"haslett\",\n  // Stephen Hawking pioneered the field of cosmology by combining general relativity and quantum mechanics. https://en.wikipedia.org/wiki/Stephen_Hawking\n  \"hawking\",\n  // Martin Edward Hellman - American cryptologist, best known for his invention of public-key cryptography in co-operation with Whitfield Diffie and Ralph Merkle. https://en.wikipedia.org/wiki/Martin_Hellman\n  \"hellman\",\n  // Werner Heisenberg was a founding father of quantum mechanics. https://en.wikipedia.org/wiki/Werner_Heisenberg\n  \"heisenberg\",\n  // Grete Hermann was a German philosopher noted for her philosophical work on the foundations of quantum mechanics. https://en.wikipedia.org/wiki/Grete_Hermann\n  \"hermann\",\n  // Caroline Lucretia Herschel - German astronomer and discoverer of several comets. https://en.wikipedia.org/wiki/Caroline_Herschel\n  \"herschel\",\n  // Heinrich Rudolf Hertz - German physicist who first conclusively proved the existence of the electromagnetic waves. https://en.wikipedia.org/wiki/Heinrich_Hertz\n  \"hertz\",\n  // Jaroslav Heyrovský was the inventor of the polarographic method, father of the electroanalytical method, and recipient of the Nobel Prize in 1959. His main field of work was polarography. https://en.wikipedia.org/wiki/Jaroslav_Heyrovsk%C3%BD\n  \"heyrovsky\",\n  // Dorothy Hodgkin was a British biochemist, credited with the development of protein crystallography. She was awarded the Nobel Prize in Chemistry in 1964. https://en.wikipedia.org/wiki/Dorothy_Hodgkin\n  \"hodgkin\",\n  // Douglas R. Hofstadter is an American professor of cognitive science and author of the Pulitzer Prize and American Book Award-winning work Goedel, Escher, Bach: An Eternal Golden Braid in 1979. A mind-bending work which coined Hofstadter's Law: \"It always takes longer than you expect, even when you take into account Hofstadter's Law.\" https://en.wikipedia.org/wiki/Douglas_Hofstadter\n  \"hofstadter\",\n  // Erna Schneider Hoover revolutionized modern communication by inventing a computerized telephone switching method. https://en.wikipedia.org/wiki/Erna_Schneider_Hoover\n  \"hoover\",\n  // Grace Hopper developed the first compiler for a computer programming language and  is credited with popularizing the term \"debugging\" for fixing computer glitches. https://en.wikipedia.org/wiki/Grace_Hopper\n  \"hopper\",\n  // Frances Hugle, she was an American scientist, engineer, and inventor who contributed to the understanding of semiconductors, integrated circuitry, and the unique electrical principles of microscopic materials. https://en.wikipedia.org/wiki/Frances_Hugle\n  \"hugle\",\n  // Hypatia - Greek Alexandrine Neoplatonist philosopher in Egypt who was one of the earliest mothers of mathematics - https://en.wikipedia.org/wiki/Hypatia\n  \"hypatia\",\n  // Teruko Ishizaka - Japanese scientist and immunologist who co-discovered the antibody class Immunoglobulin E. https://en.wikipedia.org/wiki/Teruko_Ishizaka\n  \"ishizaka\",\n  // Mary Jackson, American mathematician and aerospace engineer who earned the highest title within NASA's engineering department - https://en.wikipedia.org/wiki/Mary_Jackson_(engineer)\n  \"jackson\",\n  // Yeong-Sil Jang was a Korean scientist and astronomer during the Joseon Dynasty; he invented the first metal printing press and water gauge. https://en.wikipedia.org/wiki/Jang_Yeong-sil\n  \"jang\",\n  // Mae Carol Jemison -  is an American engineer, physician, and former NASA astronaut. She became the first black woman to travel in space when she served as a mission specialist aboard the Space Shuttle Endeavour - https://en.wikipedia.org/wiki/Mae_Jemison\n  \"jemison\",\n  // Betty Jennings - one of the original programmers of the ENIAC. https://en.wikipedia.org/wiki/ENIAC - https://en.wikipedia.org/wiki/Jean_Bartik\n  \"jennings\",\n  // Mary Lou Jepsen, was the founder and chief technology officer of One Laptop Per Child (OLPC), and the founder of Pixel Qi. https://en.wikipedia.org/wiki/Mary_Lou_Jepsen\n  \"jepsen\",\n  // Katherine Coleman Goble Johnson - American physicist and mathematician contributed to the NASA. https://en.wikipedia.org/wiki/Katherine_Johnson\n  \"johnson\",\n  // Irène Joliot-Curie - French scientist who was awarded the Nobel Prize for Chemistry in 1935. Daughter of Marie and Pierre Curie. https://en.wikipedia.org/wiki/Ir%C3%A8ne_Joliot-Curie\n  \"joliot\",\n  // Karen Spärck Jones came up with the concept of inverse document frequency, which is used in most search engines today. https://en.wikipedia.org/wiki/Karen_Sp%C3%A4rck_Jones\n  \"jones\",\n  // A. P. J. Abdul Kalam - is an Indian scientist aka Missile Man of India for his work on the development of ballistic missile and launch vehicle technology - https://en.wikipedia.org/wiki/A._P._J._Abdul_Kalam\n  \"kalam\",\n  // Sergey Petrovich Kapitsa (Russian: Серге́й Петро́вич Капи́ца; 14 February 1928 – 14 August 2012) was a Russian physicist and demographer. He was best known as host of the popular and long-running Russian scientific TV show, Evident, but Incredible. His father was the Nobel laureate Soviet-era physicist Pyotr Kapitsa, and his brother was the geographer and Antarctic explorer Andrey Kapitsa. - https://en.wikipedia.org/wiki/Sergey_Kapitsa\n  \"kapitsa\",\n  // Susan Kare, created the icons and many of the interface elements for the original Apple Macintosh in the 1980s, and was an original employee of NeXT, working as the Creative Director. https://en.wikipedia.org/wiki/Susan_Kare\n  \"kare\",\n  // Mstislav Keldysh - a Soviet scientist in the field of mathematics and mechanics, academician of the USSR Academy of Sciences (1946), President of the USSR Academy of Sciences (1961–1975), three times Hero of Socialist Labor (1956, 1961, 1971), fellow of the Royal Society of Edinburgh (1968). https://en.wikipedia.org/wiki/Mstislav_Keldysh\n  \"keldysh\",\n  // Mary Kenneth Keller, Sister Mary Kenneth Keller became the first American woman to earn a PhD in Computer Science in 1965. https://en.wikipedia.org/wiki/Mary_Kenneth_Keller\n  \"keller\",\n  // Johannes Kepler, German astronomer known for his three laws of planetary motion - https://en.wikipedia.org/wiki/Johannes_Kepler\n  \"kepler\",\n  // Omar Khayyam - Persian mathematician, astronomer and poet. Known for his work on the classification and solution of cubic equations, for his contribution to the understanding of Euclid's fifth postulate and for computing the length of a year very accurately. https://en.wikipedia.org/wiki/Omar_Khayyam\n  \"khayyam\",\n  // Har Gobind Khorana - Indian-American biochemist who shared the 1968 Nobel Prize for Physiology - https://en.wikipedia.org/wiki/Har_Gobind_Khorana\n  \"khorana\",\n  // Jack Kilby invented silicon integrated circuits and gave Silicon Valley its name. - https://en.wikipedia.org/wiki/Jack_Kilby\n  \"kilby\",\n  // Maria Kirch - German astronomer and first woman to discover a comet - https://en.wikipedia.org/wiki/Maria_Margarethe_Kirch\n  \"kirch\",\n  // Donald Knuth - American computer scientist, author of \"The Art of Computer Programming\" and creator of the TeX typesetting system. https://en.wikipedia.org/wiki/Donald_Knuth\n  \"knuth\",\n  // Sophie Kowalevski - Russian mathematician responsible for important original contributions to analysis, differential equations and mechanics - https://en.wikipedia.org/wiki/Sofia_Kovalevskaya\n  \"kowalevski\",\n  // Marie-Jeanne de Lalande - French astronomer, mathematician and cataloguer of stars - https://en.wikipedia.org/wiki/Marie-Jeanne_de_Lalande\n  \"lalande\",\n  // Hedy Lamarr - Actress and inventor. The principles of her work are now incorporated into modern Wi-Fi, CDMA and Bluetooth technology. https://en.wikipedia.org/wiki/Hedy_Lamarr\n  \"lamarr\",\n  // Leslie B. Lamport - American computer scientist. Lamport is best known for his seminal work in distributed systems and was the winner of the 2013 Turing Award. https://en.wikipedia.org/wiki/Leslie_Lamport\n  \"lamport\",\n  // Mary Leakey - British paleoanthropologist who discovered the first fossilized Proconsul skull - https://en.wikipedia.org/wiki/Mary_Leakey\n  \"leakey\",\n  // Henrietta Swan Leavitt - she was an American astronomer who discovered the relation between the luminosity and the period of Cepheid variable stars. https://en.wikipedia.org/wiki/Henrietta_Swan_Leavitt\n  \"leavitt\",\n  // Esther Miriam Zimmer Lederberg - American microbiologist and a pioneer of bacterial genetics. https://en.wikipedia.org/wiki/Esther_Lederberg\n  \"lederberg\",\n  // Inge Lehmann - Danish seismologist and geophysicist. Known for discovering in 1936 that the Earth has a solid inner core inside a molten outer core. https://en.wikipedia.org/wiki/Inge_Lehmann\n  \"lehmann\",\n  // Daniel Lewin - Mathematician, Akamai co-founder, soldier, 9/11 victim-- Developed optimization techniques for routing traffic on the internet. Died attempting to stop the 9-11 hijackers. https://en.wikipedia.org/wiki/Daniel_Lewin\n  \"lewin\",\n  // Ruth Lichterman - one of the original programmers of the ENIAC. https://en.wikipedia.org/wiki/ENIAC - https://en.wikipedia.org/wiki/Ruth_Teitelbaum\n  \"lichterman\",\n  // Barbara Liskov - co-developed the Liskov substitution principle. Liskov was also the winner of the Turing Prize in 2008. - https://en.wikipedia.org/wiki/Barbara_Liskov\n  \"liskov\",\n  // Ada Lovelace invented the first algorithm. https://en.wikipedia.org/wiki/Ada_Lovelace (thanks James Turnbull)\n  \"lovelace\",\n  // Auguste and Louis Lumière - the first filmmakers in history - https://en.wikipedia.org/wiki/Auguste_and_Louis_Lumi%C3%A8re\n  \"lumiere\",\n  // Mahavira - Ancient Indian mathematician during 9th century AD who discovered basic algebraic identities - https://en.wikipedia.org/wiki/Mah%C4%81v%C4%ABra_(mathematician)\n  \"mahavira\",\n  // Lynn Margulis (b. Lynn Petra Alexander) - an American evolutionary theorist and biologist, science author, educator, and popularizer, and was the primary modern proponent for the significance of symbiosis in evolution. - https://en.wikipedia.org/wiki/Lynn_Margulis\n  \"margulis\",\n  // Yukihiro Matsumoto - Japanese computer scientist and software programmer best known as the chief designer of the Ruby programming language. https://en.wikipedia.org/wiki/Yukihiro_Matsumoto\n  \"matsumoto\",\n  // James Clerk Maxwell - Scottish physicist, best known for his formulation of electromagnetic theory. https://en.wikipedia.org/wiki/James_Clerk_Maxwell\n  \"maxwell\",\n  // Maria Mayer - American theoretical physicist and Nobel laureate in Physics for proposing the nuclear shell model of the atomic nucleus - https://en.wikipedia.org/wiki/Maria_Mayer\n  \"mayer\",\n  // John McCarthy invented LISP: https://en.wikipedia.org/wiki/John_McCarthy_(computer_scientist)\n  \"mccarthy\",\n  // Barbara McClintock - a distinguished American cytogeneticist, 1983 Nobel Laureate in Physiology or Medicine for discovering transposons. https://en.wikipedia.org/wiki/Barbara_McClintock\n  \"mcclintock\",\n  // Anne Laura Dorinthea McLaren - British developmental biologist whose work helped lead to human in-vitro fertilisation. https://en.wikipedia.org/wiki/Anne_McLaren\n  \"mclaren\",\n  // Malcolm McLean invented the modern shipping container: https://en.wikipedia.org/wiki/Malcom_McLean\n  \"mclean\",\n  // Kay McNulty - one of the original programmers of the ENIAC. https://en.wikipedia.org/wiki/ENIAC - https://en.wikipedia.org/wiki/Kathleen_Antonelli\n  \"mcnulty\",\n  // Gregor Johann Mendel - Czech scientist and founder of genetics. https://en.wikipedia.org/wiki/Gregor_Mendel\n  \"mendel\",\n  // Dmitri Mendeleev - a chemist and inventor. He formulated the Periodic Law, created a farsighted version of the periodic table of elements, and used it to correct the properties of some already discovered elements and also to predict the properties of eight elements yet to be discovered. https://en.wikipedia.org/wiki/Dmitri_Mendeleev\n  \"mendeleev\",\n  // Lise Meitner - Austrian/Swedish physicist who was involved in the discovery of nuclear fission. The element meitnerium is named after her - https://en.wikipedia.org/wiki/Lise_Meitner\n  \"meitner\",\n  // Carla Meninsky, was the game designer and programmer for Atari 2600 games Dodge 'Em and Warlords. https://en.wikipedia.org/wiki/Carla_Meninsky\n  \"meninsky\",\n  // Ralph C. Merkle - American computer scientist, known for devising Merkle's puzzles - one of the very first schemes for public-key cryptography. Also, inventor of Merkle trees and co-inventor of the Merkle-Damgård construction for building collision-resistant cryptographic hash functions and the Merkle-Hellman knapsack cryptosystem. https://en.wikipedia.org/wiki/Ralph_Merkle\n  \"merkle\",\n  // Johanna Mestorf - German prehistoric archaeologist and first female museum director in Germany - https://en.wikipedia.org/wiki/Johanna_Mestorf\n  \"mestorf\",\n  // Maryam Mirzakhani - an Iranian mathematician and the first woman to win the Fields Medal. https://en.wikipedia.org/wiki/Maryam_Mirzakhani\n  \"mirzakhani\",\n  // Rita Levi-Montalcini - Won Nobel Prize in Physiology or Medicine jointly with colleague Stanley Cohen for the discovery of nerve growth factor (https://en.wikipedia.org/wiki/Rita_Levi-Montalcini)\n  \"montalcini\",\n  // Gordon Earle Moore - American engineer, Silicon Valley founding father, author of Moore's law. https://en.wikipedia.org/wiki/Gordon_Moore\n  \"moore\",\n  // Samuel Morse - contributed to the invention of a single-wire telegraph system based on European telegraphs and was a co-developer of the Morse code - https://en.wikipedia.org/wiki/Samuel_Morse\n  \"morse\",\n  // Ian Murdock - founder of the Debian project - https://en.wikipedia.org/wiki/Ian_Murdock\n  \"murdock\",\n  // May-Britt Moser - Nobel prize winner neuroscientist who contributed to the discovery of grid cells in the brain. https://en.wikipedia.org/wiki/May-Britt_Moser\n  \"moser\",\n  // John Napier of Merchiston - Scottish landowner known as an astronomer, mathematician and physicist. Best known for his discovery of logarithms. https://en.wikipedia.org/wiki/John_Napier\n  \"napier\",\n  // John Forbes Nash, Jr. - American mathematician who made fundamental contributions to game theory, differential geometry, and the study of partial differential equations. https://en.wikipedia.org/wiki/John_Forbes_Nash_Jr.\n  \"nash\",\n  // John von Neumann - todays computer architectures are based on the von Neumann architecture. https://en.wikipedia.org/wiki/Von_Neumann_architecture\n  \"neumann\",\n  // Isaac Newton invented classic mechanics and modern optics. https://en.wikipedia.org/wiki/Isaac_Newton\n  \"newton\",\n  // Xavier Niel - ;) https://en.wikipedia.org/wiki/Xavier_Niel\n  \"niel\",\n  // Florence Nightingale, more prominently known as a nurse, was also the first female member of the Royal Statistical Society and a pioneer in statistical graphics https://en.wikipedia.org/wiki/Florence_Nightingale#Statistics_and_sanitary_reform\n  \"nightingale\",\n  // Alfred Nobel - a Swedish chemist, engineer, innovator, and armaments manufacturer (inventor of dynamite) - https://en.wikipedia.org/wiki/Alfred_Nobel\n  \"nobel\",\n  // Emmy Noether, German mathematician. Noether's Theorem is named after her. https://en.wikipedia.org/wiki/Emmy_Noether\n  \"noether\",\n  // Poppy Northcutt. Poppy Northcutt was the first woman to work as part of NASA’s Mission Control. http://www.businessinsider.com/poppy-northcutt-helped-apollo-astronauts-2014-12?op=1\n  \"northcutt\",\n  // Robert Noyce invented silicon integrated circuits and gave Silicon Valley its name. - https://en.wikipedia.org/wiki/Robert_Noyce\n  \"noyce\",\n  // Panini - Ancient Indian linguist and grammarian from 4th century CE who worked on the world's first formal system - https://en.wikipedia.org/wiki/P%C4%81%E1%B9%87ini#Comparison_with_modern_formal_systems\n  \"panini\",\n  // Ambroise Pare invented modern surgery. https://en.wikipedia.org/wiki/Ambroise_Par%C3%A9\n  \"pare\",\n  // Blaise Pascal, French mathematician, physicist, and inventor - https://en.wikipedia.org/wiki/Blaise_Pascal\n  \"pascal\",\n  // Louis Pasteur discovered vaccination, fermentation and pasteurization. https://en.wikipedia.org/wiki/Louis_Pasteur.\n  \"pasteur\",\n  // Cecilia Payne-Gaposchkin was an astronomer and astrophysicist who, in 1925, proposed in her Ph.D. thesis an explanation for the composition of stars in terms of the relative abundances of hydrogen and helium. https://en.wikipedia.org/wiki/Cecilia_Payne-Gaposchkin\n  \"payne\",\n  // Radia Perlman is a software designer and network engineer and most famous for her invention of the spanning-tree protocol (STP). https://en.wikipedia.org/wiki/Radia_Perlman\n  \"perlman\",\n  // Rob Pike was a key contributor to Unix, Plan 9, the X graphic system, utf-8, and the Go programming language. https://en.wikipedia.org/wiki/Rob_Pike\n  \"pike\",\n  // Henri Poincaré made fundamental contributions in several fields of mathematics. https://en.wikipedia.org/wiki/Henri_Poincar%C3%A9\n  \"poincare\",\n  // Laura Poitras is a director and producer whose work, made possible by open source crypto tools, advances the causes of truth and freedom of information by reporting disclosures by whistleblowers such as Edward Snowden. https://en.wikipedia.org/wiki/Laura_Poitras\n  \"poitras\",\n  // Tat’yana Avenirovna Proskuriakova (Russian: Татья́на Авени́ровна Проскуряко́ва) (January 23 [O.S. January 10] 1909 – August 30, 1985) was a Russian-American Mayanist scholar and archaeologist who contributed significantly to the deciphering of Maya hieroglyphs, the writing system of the pre-Columbian Maya civilization of Mesoamerica. https://en.wikipedia.org/wiki/Tatiana_Proskouriakoff\n  \"proskuriakova\",\n  // Claudius Ptolemy - a Greco-Egyptian writer of Alexandria, known as a mathematician, astronomer, geographer, astrologer, and poet of a single epigram in the Greek Anthology - https://en.wikipedia.org/wiki/Ptolemy\n  \"ptolemy\",\n  // C. V. Raman - Indian physicist who won the Nobel Prize in 1930 for proposing the Raman effect. - https://en.wikipedia.org/wiki/C._V._Raman\n  \"raman\",\n  // Srinivasa Ramanujan - Indian mathematician and autodidact who made extraordinary contributions to mathematical analysis, number theory, infinite series, and continued fractions. - https://en.wikipedia.org/wiki/Srinivasa_Ramanujan\n  \"ramanujan\",\n  // Sally Kristen Ride was an American physicist and astronaut. She was the first American woman in space, and the youngest American astronaut. https://en.wikipedia.org/wiki/Sally_Ride\n  \"ride\",\n  // Dennis Ritchie - co-creator of UNIX and the C programming language. - https://en.wikipedia.org/wiki/Dennis_Ritchie\n  \"ritchie\",\n  // Ida Rhodes - American pioneer in computer programming, designed the first computer used for Social Security. https://en.wikipedia.org/wiki/Ida_Rhodes\n  \"rhodes\",\n  // Julia Hall Bowman Robinson - American mathematician renowned for her contributions to the fields of computability theory and computational complexity theory. https://en.wikipedia.org/wiki/Julia_Robinson\n  \"robinson\",\n  // Wilhelm Conrad Röntgen - German physicist who was awarded the first Nobel Prize in Physics in 1901 for the discovery of X-rays (Röntgen rays). https://en.wikipedia.org/wiki/Wilhelm_R%C3%B6ntgen\n  \"roentgen\",\n  // Rosalind Franklin - British biophysicist and X-ray crystallographer whose research was critical to the understanding of DNA - https://en.wikipedia.org/wiki/Rosalind_Franklin\n  \"rosalind\",\n  // Vera Rubin - American astronomer who pioneered work on galaxy rotation rates. https://en.wikipedia.org/wiki/Vera_Rubin\n  \"rubin\",\n  // Meghnad Saha - Indian astrophysicist best known for his development of the Saha equation, used to describe chemical and physical conditions in stars - https://en.wikipedia.org/wiki/Meghnad_Saha\n  \"saha\",\n  // Jean E. Sammet developed FORMAC, the first widely used computer language for symbolic manipulation of mathematical formulas. https://en.wikipedia.org/wiki/Jean_E._Sammet\n  \"sammet\",\n  // Mildred Sanderson - American mathematician best known for Sanderson's theorem concerning modular invariants. https://en.wikipedia.org/wiki/Mildred_Sanderson\n  \"sanderson\",\n  // Satoshi Nakamoto is the name used by the unknown person or group of people who developed bitcoin, authored the bitcoin white paper, and created and deployed bitcoin's original reference implementation. https://en.wikipedia.org/wiki/Satoshi_Nakamoto\n  \"satoshi\",\n  // Adi Shamir - Israeli cryptographer whose numerous inventions and contributions to cryptography include the Ferge Fiat Shamir identification scheme, the Rivest Shamir Adleman (RSA) public-key cryptosystem, the Shamir's secret sharing scheme, the breaking of the Merkle-Hellman cryptosystem, the TWINKLE and TWIRL factoring devices and the discovery of differential cryptanalysis (with Eli Biham). https://en.wikipedia.org/wiki/Adi_Shamir\n  \"shamir\",\n  // Claude Shannon - The father of information theory and founder of digital circuit design theory. (https://en.wikipedia.org/wiki/Claude_Shannon)\n  \"shannon\",\n  // Carol Shaw - Originally an Atari employee, Carol Shaw is said to be the first female video game designer. https://en.wikipedia.org/wiki/Carol_Shaw_(video_game_designer)\n  \"shaw\",\n  // Dame Stephanie \"Steve\" Shirley - Founded a software company in 1962 employing women working from home. https://en.wikipedia.org/wiki/Steve_Shirley\n  \"shirley\",\n  // William Shockley co-invented the transistor - https://en.wikipedia.org/wiki/William_Shockley\n  \"shockley\",\n  // Lina Solomonovna Stern (or Shtern; Russian: Лина Соломоновна Штерн; 26 August 1878 – 7 March 1968) was a Soviet biochemist, physiologist and humanist whose medical discoveries saved thousands of lives at the fronts of World War II. She is best known for her pioneering work on blood–brain barrier, which she described as hemato-encephalic barrier in 1921. https://en.wikipedia.org/wiki/Lina_Stern\n  \"shtern\",\n  // Françoise Barré-Sinoussi - French virologist and Nobel Prize Laureate in Physiology or Medicine; her work was fundamental in identifying HIV as the cause of AIDS. https://en.wikipedia.org/wiki/Fran%C3%A7oise_Barr%C3%A9-Sinoussi\n  \"sinoussi\",\n  // Betty Snyder - one of the original programmers of the ENIAC. https://en.wikipedia.org/wiki/ENIAC - https://en.wikipedia.org/wiki/Betty_Holberton\n  \"snyder\",\n  // Cynthia Solomon - Pioneer in the fields of artificial intelligence, computer science and educational computing. Known for creation of Logo, an educational programming language.  https://en.wikipedia.org/wiki/Cynthia_Solomon\n  \"solomon\",\n  // Frances Spence - one of the original programmers of the ENIAC. https://en.wikipedia.org/wiki/ENIAC - https://en.wikipedia.org/wiki/Frances_Spence\n  \"spence\",\n  // Michael Stonebraker is a database research pioneer and architect of Ingres, Postgres, VoltDB and SciDB. Winner of 2014 ACM Turing Award. https://en.wikipedia.org/wiki/Michael_Stonebraker\n  \"stonebraker\",\n  // Ivan Edward Sutherland - American computer scientist and Internet pioneer, widely regarded as the father of computer graphics. https://en.wikipedia.org/wiki/Ivan_Sutherland\n  \"sutherland\",\n  // Janese Swanson (with others) developed the first of the Carmen Sandiego games. She went on to found Girl Tech. https://en.wikipedia.org/wiki/Janese_Swanson\n  \"swanson\",\n  // Aaron Swartz was influential in creating RSS, Markdown, Creative Commons, Reddit, and much of the internet as we know it today. He was devoted to freedom of information on the web. https://en.wikiquote.org/wiki/Aaron_Swartz\n  \"swartz\",\n  // Bertha Swirles was a theoretical physicist who made a number of contributions to early quantum theory. https://en.wikipedia.org/wiki/Bertha_Swirles\n  \"swirles\",\n  // Helen Brooke Taussig - American cardiologist and founder of the field of paediatric cardiology. https://en.wikipedia.org/wiki/Helen_B._Taussig\n  \"taussig\",\n  // Valentina Tereshkova is a Russian engineer, cosmonaut and politician. She was the first woman to fly to space in 1963. In 2013, at the age of 76, she offered to go on a one-way mission to Mars. https://en.wikipedia.org/wiki/Valentina_Tereshkova\n  \"tereshkova\",\n  // Nikola Tesla invented the AC electric system and every gadget ever used by a James Bond villain. https://en.wikipedia.org/wiki/Nikola_Tesla\n  \"tesla\",\n  // Marie Tharp - American geologist and oceanic cartographer who co-created the first scientific map of the Atlantic Ocean floor. Her work led to the acceptance of the theories of plate tectonics and continental drift. https://en.wikipedia.org/wiki/Marie_Tharp\n  \"tharp\",\n  // Ken Thompson - co-creator of UNIX and the C programming language - https://en.wikipedia.org/wiki/Ken_Thompson\n  \"thompson\",\n  // Linus Torvalds invented Linux and Git. https://en.wikipedia.org/wiki/Linus_Torvalds\n  \"torvalds\",\n  // Youyou Tu - Chinese pharmaceutical chemist and educator known for discovering artemisinin and dihydroartemisinin, used to treat malaria, which has saved millions of lives. Joint winner of the 2015 Nobel Prize in Physiology or Medicine. https://en.wikipedia.org/wiki/Tu_Youyou\n  \"tu\",\n  // Alan Turing was a founding father of computer science. https://en.wikipedia.org/wiki/Alan_Turing.\n  \"turing\",\n  // Varahamihira - Ancient Indian mathematician who discovered trigonometric formulae during 505-587 CE - https://en.wikipedia.org/wiki/Var%C4%81hamihira#Contributions\n  \"varahamihira\",\n  // Dorothy Vaughan was a NASA mathematician and computer programmer on the SCOUT launch vehicle program that put America's first satellites into space - https://en.wikipedia.org/wiki/Dorothy_Vaughan\n  \"vaughan\",\n  // Sir Mokshagundam Visvesvaraya - is a notable Indian engineer.  He is a recipient of the Indian Republic's highest honour, the Bharat Ratna, in 1955. On his birthday, 15 September is celebrated as Engineer's Day in India in his memory - https://en.wikipedia.org/wiki/Visvesvaraya\n  \"visvesvaraya\",\n  // Christiane Nüsslein-Volhard - German biologist, won Nobel Prize in Physiology or Medicine in 1995 for research on the genetic control of embryonic development. https://en.wikipedia.org/wiki/Christiane_N%C3%BCsslein-Volhard\n  \"volhard\",\n  // Cédric Villani - French mathematician, won Fields Medal, Fermat Prize and Poincaré Price for his work in differential geometry and statistical mechanics. https://en.wikipedia.org/wiki/C%C3%A9dric_Villani\n  \"villani\",\n  // Marlyn Wescoff - one of the original programmers of the ENIAC. https://en.wikipedia.org/wiki/ENIAC - https://en.wikipedia.org/wiki/Marlyn_Meltzer\n  \"wescoff\",\n  // Sylvia B. Wilbur - British computer scientist who helped develop the ARPANET, was one of the first to exchange email in the UK and a leading researcher in computer-supported collaborative work. https://en.wikipedia.org/wiki/Sylvia_Wilbur\n  \"wilbur\",\n  // Andrew Wiles - Notable British mathematician who proved the enigmatic Fermat's Last Theorem - https://en.wikipedia.org/wiki/Andrew_Wiles\n  \"wiles\",\n  // Roberta Williams, did pioneering work in graphical adventure games for personal computers, particularly the King's Quest series. https://en.wikipedia.org/wiki/Roberta_Williams\n  \"williams\",\n  // Malcolm John Williamson - British mathematician and cryptographer employed by the GCHQ. Developed in 1974 what is now known as Diffie-Hellman key exchange (Diffie and Hellman first published the scheme in 1976). https://en.wikipedia.org/wiki/Malcolm_J._Williamson\n  \"williamson\",\n  // Sophie Wilson designed the first Acorn Micro-Computer and the instruction set for ARM processors. https://en.wikipedia.org/wiki/Sophie_Wilson\n  \"wilson\",\n  // Jeannette Wing - co-developed the Liskov substitution principle. - https://en.wikipedia.org/wiki/Jeannette_Wing\n  \"wing\",\n  // Steve Wozniak invented the Apple I and Apple II. https://en.wikipedia.org/wiki/Steve_Wozniak\n  \"wozniak\",\n  // The Wright brothers, Orville and Wilbur - credited with inventing and building the world's first successful airplane and making the first controlled, powered and sustained heavier-than-air human flight - https://en.wikipedia.org/wiki/Wright_brothers\n  \"wright\",\n  // Chien-Shiung Wu - Chinese-American experimental physicist who made significant contributions to nuclear physics. https://en.wikipedia.org/wiki/Chien-Shiung_Wu\n  \"wu\",\n  // Rosalyn Sussman Yalow - Rosalyn Sussman Yalow was an American medical physicist, and a co-winner of the 1977 Nobel Prize in Physiology or Medicine for development of the radioimmunoassay technique. https://en.wikipedia.org/wiki/Rosalyn_Sussman_Yalow\n  \"yalow\",\n  // Ada Yonath - an Israeli crystallographer, the first woman from the Middle East to win a Nobel prize in the sciences. https://en.wikipedia.org/wiki/Ada_Yonath\n  \"yonath\",\n  // Nikolay Yegorovich Zhukovsky (Russian: Никола́й Его́рович Жуко́вский, January 17 1847 – March 17, 1921) was a Russian scientist, mathematician and engineer, and a founding father of modern aero- and hydrodynamics. Whereas contemporary scientists scoffed at the idea of human flight, Zhukovsky was the first to undertake the study of airflow. He is often called the Father of Russian Aviation. https://en.wikipedia.org/wiki/Nikolay_Yegorovich_Zhukovsky\n  \"zhukovsky\"\n];\nconst randomName = (prefix = \"\", separator = \"-\") => {\n  const name = `${ADJECTIVES[Math.floor(Math.random() * ADJECTIVES.length)] ?? \"\"}${separator}${NAMES[Math.floor(Math.random() * NAMES.length)] ?? \"\"}`;\n  if (name === `boring${separator}wozniak`) {\n    return randomName(prefix, separator);\n  }\n  return prefix.length > 0 ? `${prefix}${separator}${name}` : name;\n};\nmodule.exports = randomName;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/\";","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(137);\n",""],"names":[],"sourceRoot":""}